// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/abortion"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Abortion is the model entity for the Abortion schema.
type Abortion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 胎次
	Times int `json:"times,omitempty"`
	// PregnantAt holds the value of the "pregnantAt" field.
	PregnantAt int64 `json:"pregnantAt,omitempty"`
	// AbortionAt holds the value of the "abortionAt" field.
	AbortionAt int64 `json:"abortionAt,omitempty"`
	// AbortionTypeId holds the value of the "abortionTypeId" field.
	AbortionTypeId int `json:"abortionTypeId,omitempty"`
	// AbortionTypeName holds the value of the "abortionTypeName" field.
	AbortionTypeName string `json:"abortionTypeName,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Abortion) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case abortion.FieldID, abortion.FieldCattleId, abortion.FieldTenantId, abortion.FieldFarmId, abortion.FieldShedId, abortion.FieldTimes, abortion.FieldPregnantAt, abortion.FieldAbortionAt, abortion.FieldAbortionTypeId, abortion.FieldCreatedAt, abortion.FieldUpdatedAt, abortion.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case abortion.FieldTenantName, abortion.FieldFarmName, abortion.FieldShedName, abortion.FieldName, abortion.FieldEarNumber, abortion.FieldAbortionTypeName, abortion.FieldUserName, abortion.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Abortion", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Abortion fields.
func (a *Abortion) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case abortion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case abortion.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				a.CattleId = value.Int64
			}
		case abortion.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				a.TenantId = value.Int64
			}
		case abortion.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				a.TenantName = value.String
			}
		case abortion.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				a.FarmId = value.Int64
			}
		case abortion.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				a.FarmName = value.String
			}
		case abortion.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				a.ShedId = value.Int64
			}
		case abortion.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				a.ShedName = value.String
			}
		case abortion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case abortion.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				a.EarNumber = value.String
			}
		case abortion.FieldTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field times", values[i])
			} else if value.Valid {
				a.Times = int(value.Int64)
			}
		case abortion.FieldPregnantAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pregnantAt", values[i])
			} else if value.Valid {
				a.PregnantAt = value.Int64
			}
		case abortion.FieldAbortionAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field abortionAt", values[i])
			} else if value.Valid {
				a.AbortionAt = value.Int64
			}
		case abortion.FieldAbortionTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field abortionTypeId", values[i])
			} else if value.Valid {
				a.AbortionTypeId = int(value.Int64)
			}
		case abortion.FieldAbortionTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abortionTypeName", values[i])
			} else if value.Valid {
				a.AbortionTypeName = value.String
			}
		case abortion.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				a.UserName = value.String
			}
		case abortion.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				a.Remarks = value.String
			}
		case abortion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Int64
			}
		case abortion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Int64
			}
		case abortion.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				a.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Abortion.
// Note that you need to call Abortion.Unwrap() before calling this method if this Abortion
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Abortion) Update() *AbortionUpdateOne {
	return (&AbortionClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Abortion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Abortion) Unwrap() *Abortion {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Abortion is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Abortion) String() string {
	var builder strings.Builder
	builder.WriteString("Abortion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", a.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", a.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(a.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", a.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(a.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", a.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(a.ShedName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(a.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("times=")
	builder.WriteString(fmt.Sprintf("%v", a.Times))
	builder.WriteString(", ")
	builder.WriteString("pregnantAt=")
	builder.WriteString(fmt.Sprintf("%v", a.PregnantAt))
	builder.WriteString(", ")
	builder.WriteString("abortionAt=")
	builder.WriteString(fmt.Sprintf("%v", a.AbortionAt))
	builder.WriteString(", ")
	builder.WriteString("abortionTypeId=")
	builder.WriteString(fmt.Sprintf("%v", a.AbortionTypeId))
	builder.WriteString(", ")
	builder.WriteString("abortionTypeName=")
	builder.WriteString(a.AbortionTypeName)
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(a.UserName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(a.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", a.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Abortions is a parsable slice of Abortion.
type Abortions []*Abortion

func (a Abortions) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

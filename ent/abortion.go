// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/abortion"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Abortion is the model entity for the Abortion schema.
type Abortion struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// Times holds the value of the "times" field.
	Times int `json:"times,omitempty"`
	// ReproductiveState holds the value of the "reproductiveState" field.
	ReproductiveState string `json:"reproductiveState,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// PregnantAt holds the value of the "pregnantAt" field.
	PregnantAt int64 `json:"pregnantAt,omitempty"`
	// AbortionAt holds the value of the "abortionAt" field.
	AbortionAt int64 `json:"abortionAt,omitempty"`
	// AbortionTypeId holds the value of the "abortionTypeId" field.
	AbortionTypeId int `json:"abortionTypeId,omitempty"`
	// AbortionTypeName holds the value of the "abortionTypeName" field.
	AbortionTypeName string `json:"abortionTypeName,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Abortion) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // earNumber
		&sql.NullInt64{},  // times
		&sql.NullString{}, // reproductiveState
		&sql.NullString{}, // shedName
		&sql.NullInt64{},  // pregnantAt
		&sql.NullInt64{},  // abortionAt
		&sql.NullInt64{},  // abortionTypeId
		&sql.NullString{}, // abortionTypeName
		&sql.NullString{}, // userName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Abortion fields.
func (a *Abortion) assignValues(values ...interface{}) error {
	if m, n := len(values), len(abortion.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		a.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[1])
	} else if value.Valid {
		a.EarNumber = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field times", values[2])
	} else if value.Valid {
		a.Times = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reproductiveState", values[3])
	} else if value.Valid {
		a.ReproductiveState = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[4])
	} else if value.Valid {
		a.ShedName = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pregnantAt", values[5])
	} else if value.Valid {
		a.PregnantAt = value.Int64
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field abortionAt", values[6])
	} else if value.Valid {
		a.AbortionAt = value.Int64
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field abortionTypeId", values[7])
	} else if value.Valid {
		a.AbortionTypeId = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field abortionTypeName", values[8])
	} else if value.Valid {
		a.AbortionTypeName = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[9])
	} else if value.Valid {
		a.UserName = value.String
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[10])
	} else if value.Valid {
		a.Remarks = value.String
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[11])
	} else if value.Valid {
		a.CreatedAt = value.Int64
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[12])
	} else if value.Valid {
		a.UpdatedAt = value.Int64
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[13])
	} else if value.Valid {
		a.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Abortion.
// Note that, you need to call Abortion.Unwrap() before calling this method, if this Abortion
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Abortion) Update() *AbortionUpdateOne {
	return (&AbortionClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Abortion) Unwrap() *Abortion {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Abortion is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Abortion) String() string {
	var builder strings.Builder
	builder.WriteString("Abortion(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", earNumber=")
	builder.WriteString(a.EarNumber)
	builder.WriteString(", times=")
	builder.WriteString(fmt.Sprintf("%v", a.Times))
	builder.WriteString(", reproductiveState=")
	builder.WriteString(a.ReproductiveState)
	builder.WriteString(", shedName=")
	builder.WriteString(a.ShedName)
	builder.WriteString(", pregnantAt=")
	builder.WriteString(fmt.Sprintf("%v", a.PregnantAt))
	builder.WriteString(", abortionAt=")
	builder.WriteString(fmt.Sprintf("%v", a.AbortionAt))
	builder.WriteString(", abortionTypeId=")
	builder.WriteString(fmt.Sprintf("%v", a.AbortionTypeId))
	builder.WriteString(", abortionTypeName=")
	builder.WriteString(a.AbortionTypeName)
	builder.WriteString(", userName=")
	builder.WriteString(a.UserName)
	builder.WriteString(", remarks=")
	builder.WriteString(a.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", a.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Abortions is a parsable slice of Abortion.
type Abortions []*Abortion

func (a Abortions) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

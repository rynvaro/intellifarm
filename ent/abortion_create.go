// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/abortion"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AbortionCreate is the builder for creating a Abortion entity.
type AbortionCreate struct {
	config
	mutation *AbortionMutation
	hooks    []Hook
}

// SetName sets the name field.
func (ac *AbortionCreate) SetName(s string) *AbortionCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNillableName sets the name field if the given value is not nil.
func (ac *AbortionCreate) SetNillableName(s *string) *AbortionCreate {
	if s != nil {
		ac.SetName(*s)
	}
	return ac
}

// SetEarNumber sets the earNumber field.
func (ac *AbortionCreate) SetEarNumber(s string) *AbortionCreate {
	ac.mutation.SetEarNumber(s)
	return ac
}

// SetTimes sets the times field.
func (ac *AbortionCreate) SetTimes(i int) *AbortionCreate {
	ac.mutation.SetTimes(i)
	return ac
}

// SetReproductiveState sets the reproductiveState field.
func (ac *AbortionCreate) SetReproductiveState(s string) *AbortionCreate {
	ac.mutation.SetReproductiveState(s)
	return ac
}

// SetShedName sets the shedName field.
func (ac *AbortionCreate) SetShedName(s string) *AbortionCreate {
	ac.mutation.SetShedName(s)
	return ac
}

// SetPregnantAt sets the pregnantAt field.
func (ac *AbortionCreate) SetPregnantAt(i int64) *AbortionCreate {
	ac.mutation.SetPregnantAt(i)
	return ac
}

// SetAbortionAt sets the abortionAt field.
func (ac *AbortionCreate) SetAbortionAt(i int64) *AbortionCreate {
	ac.mutation.SetAbortionAt(i)
	return ac
}

// SetAbortionTypeId sets the abortionTypeId field.
func (ac *AbortionCreate) SetAbortionTypeId(i int) *AbortionCreate {
	ac.mutation.SetAbortionTypeId(i)
	return ac
}

// SetAbortionTypeName sets the abortionTypeName field.
func (ac *AbortionCreate) SetAbortionTypeName(s string) *AbortionCreate {
	ac.mutation.SetAbortionTypeName(s)
	return ac
}

// SetUserName sets the userName field.
func (ac *AbortionCreate) SetUserName(s string) *AbortionCreate {
	ac.mutation.SetUserName(s)
	return ac
}

// SetTenantId sets the tenantId field.
func (ac *AbortionCreate) SetTenantId(i int64) *AbortionCreate {
	ac.mutation.SetTenantId(i)
	return ac
}

// SetTenantName sets the tenantName field.
func (ac *AbortionCreate) SetTenantName(s string) *AbortionCreate {
	ac.mutation.SetTenantName(s)
	return ac
}

// SetRemarks sets the remarks field.
func (ac *AbortionCreate) SetRemarks(s string) *AbortionCreate {
	ac.mutation.SetRemarks(s)
	return ac
}

// SetCreatedAt sets the createdAt field.
func (ac *AbortionCreate) SetCreatedAt(i int64) *AbortionCreate {
	ac.mutation.SetCreatedAt(i)
	return ac
}

// SetUpdatedAt sets the updatedAt field.
func (ac *AbortionCreate) SetUpdatedAt(i int64) *AbortionCreate {
	ac.mutation.SetUpdatedAt(i)
	return ac
}

// SetDeleted sets the deleted field.
func (ac *AbortionCreate) SetDeleted(i int) *AbortionCreate {
	ac.mutation.SetDeleted(i)
	return ac
}

// Mutation returns the AbortionMutation object of the builder.
func (ac *AbortionCreate) Mutation() *AbortionMutation {
	return ac.mutation
}

// Save creates the Abortion in the database.
func (ac *AbortionCreate) Save(ctx context.Context) (*Abortion, error) {
	var (
		err  error
		node *Abortion
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbortionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AbortionCreate) SaveX(ctx context.Context) *Abortion {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ac *AbortionCreate) check() error {
	if _, ok := ac.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if _, ok := ac.mutation.Times(); !ok {
		return &ValidationError{Name: "times", err: errors.New("ent: missing required field \"times\"")}
	}
	if _, ok := ac.mutation.ReproductiveState(); !ok {
		return &ValidationError{Name: "reproductiveState", err: errors.New("ent: missing required field \"reproductiveState\"")}
	}
	if _, ok := ac.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New("ent: missing required field \"shedName\"")}
	}
	if _, ok := ac.mutation.PregnantAt(); !ok {
		return &ValidationError{Name: "pregnantAt", err: errors.New("ent: missing required field \"pregnantAt\"")}
	}
	if _, ok := ac.mutation.AbortionAt(); !ok {
		return &ValidationError{Name: "abortionAt", err: errors.New("ent: missing required field \"abortionAt\"")}
	}
	if _, ok := ac.mutation.AbortionTypeId(); !ok {
		return &ValidationError{Name: "abortionTypeId", err: errors.New("ent: missing required field \"abortionTypeId\"")}
	}
	if _, ok := ac.mutation.AbortionTypeName(); !ok {
		return &ValidationError{Name: "abortionTypeName", err: errors.New("ent: missing required field \"abortionTypeName\"")}
	}
	if _, ok := ac.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := ac.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := ac.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := ac.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := ac.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (ac *AbortionCreate) sqlSave(ctx context.Context) (*Abortion, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ac *AbortionCreate) createSpec() (*Abortion, *sqlgraph.CreateSpec) {
	var (
		_node = &Abortion{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: abortion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: abortion.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := ac.mutation.Times(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldTimes,
		})
		_node.Times = value
	}
	if value, ok := ac.mutation.ReproductiveState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldReproductiveState,
		})
		_node.ReproductiveState = value
	}
	if value, ok := ac.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := ac.mutation.PregnantAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldPregnantAt,
		})
		_node.PregnantAt = value
	}
	if value, ok := ac.mutation.AbortionAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldAbortionAt,
		})
		_node.AbortionAt = value
	}
	if value, ok := ac.mutation.AbortionTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldAbortionTypeId,
		})
		_node.AbortionTypeId = value
	}
	if value, ok := ac.mutation.AbortionTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldAbortionTypeName,
		})
		_node.AbortionTypeName = value
	}
	if value, ok := ac.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := ac.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := ac.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := ac.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// AbortionCreateBulk is the builder for creating a bulk of Abortion entities.
type AbortionCreateBulk struct {
	config
	builders []*AbortionCreate
}

// Save creates the Abortion entities in the database.
func (acb *AbortionCreateBulk) Save(ctx context.Context) ([]*Abortion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Abortion, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AbortionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (acb *AbortionCreateBulk) SaveX(ctx context.Context) []*Abortion {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

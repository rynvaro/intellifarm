// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/abortion"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AbortionUpdate is the builder for updating Abortion entities.
type AbortionUpdate struct {
	config
	hooks    []Hook
	mutation *AbortionMutation
}

// Where appends a list predicates to the AbortionUpdate builder.
func (au *AbortionUpdate) Where(ps ...predicate.Abortion) *AbortionUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCattleId sets the "cattleId" field.
func (au *AbortionUpdate) SetCattleId(i int64) *AbortionUpdate {
	au.mutation.ResetCattleId()
	au.mutation.SetCattleId(i)
	return au
}

// AddCattleId adds i to the "cattleId" field.
func (au *AbortionUpdate) AddCattleId(i int64) *AbortionUpdate {
	au.mutation.AddCattleId(i)
	return au
}

// SetTenantId sets the "tenantId" field.
func (au *AbortionUpdate) SetTenantId(i int64) *AbortionUpdate {
	au.mutation.ResetTenantId()
	au.mutation.SetTenantId(i)
	return au
}

// AddTenantId adds i to the "tenantId" field.
func (au *AbortionUpdate) AddTenantId(i int64) *AbortionUpdate {
	au.mutation.AddTenantId(i)
	return au
}

// SetTenantName sets the "tenantName" field.
func (au *AbortionUpdate) SetTenantName(s string) *AbortionUpdate {
	au.mutation.SetTenantName(s)
	return au
}

// SetFarmId sets the "farmId" field.
func (au *AbortionUpdate) SetFarmId(i int64) *AbortionUpdate {
	au.mutation.ResetFarmId()
	au.mutation.SetFarmId(i)
	return au
}

// AddFarmId adds i to the "farmId" field.
func (au *AbortionUpdate) AddFarmId(i int64) *AbortionUpdate {
	au.mutation.AddFarmId(i)
	return au
}

// SetFarmName sets the "farmName" field.
func (au *AbortionUpdate) SetFarmName(s string) *AbortionUpdate {
	au.mutation.SetFarmName(s)
	return au
}

// SetShedId sets the "shedId" field.
func (au *AbortionUpdate) SetShedId(i int64) *AbortionUpdate {
	au.mutation.ResetShedId()
	au.mutation.SetShedId(i)
	return au
}

// AddShedId adds i to the "shedId" field.
func (au *AbortionUpdate) AddShedId(i int64) *AbortionUpdate {
	au.mutation.AddShedId(i)
	return au
}

// SetShedName sets the "shedName" field.
func (au *AbortionUpdate) SetShedName(s string) *AbortionUpdate {
	au.mutation.SetShedName(s)
	return au
}

// SetName sets the "name" field.
func (au *AbortionUpdate) SetName(s string) *AbortionUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AbortionUpdate) SetNillableName(s *string) *AbortionUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// ClearName clears the value of the "name" field.
func (au *AbortionUpdate) ClearName() *AbortionUpdate {
	au.mutation.ClearName()
	return au
}

// SetEarNumber sets the "earNumber" field.
func (au *AbortionUpdate) SetEarNumber(s string) *AbortionUpdate {
	au.mutation.SetEarNumber(s)
	return au
}

// SetTimes sets the "times" field.
func (au *AbortionUpdate) SetTimes(i int) *AbortionUpdate {
	au.mutation.ResetTimes()
	au.mutation.SetTimes(i)
	return au
}

// AddTimes adds i to the "times" field.
func (au *AbortionUpdate) AddTimes(i int) *AbortionUpdate {
	au.mutation.AddTimes(i)
	return au
}

// SetPregnantAt sets the "pregnantAt" field.
func (au *AbortionUpdate) SetPregnantAt(i int64) *AbortionUpdate {
	au.mutation.ResetPregnantAt()
	au.mutation.SetPregnantAt(i)
	return au
}

// AddPregnantAt adds i to the "pregnantAt" field.
func (au *AbortionUpdate) AddPregnantAt(i int64) *AbortionUpdate {
	au.mutation.AddPregnantAt(i)
	return au
}

// SetAbortionAt sets the "abortionAt" field.
func (au *AbortionUpdate) SetAbortionAt(i int64) *AbortionUpdate {
	au.mutation.ResetAbortionAt()
	au.mutation.SetAbortionAt(i)
	return au
}

// AddAbortionAt adds i to the "abortionAt" field.
func (au *AbortionUpdate) AddAbortionAt(i int64) *AbortionUpdate {
	au.mutation.AddAbortionAt(i)
	return au
}

// SetAbortionTypeId sets the "abortionTypeId" field.
func (au *AbortionUpdate) SetAbortionTypeId(i int) *AbortionUpdate {
	au.mutation.ResetAbortionTypeId()
	au.mutation.SetAbortionTypeId(i)
	return au
}

// AddAbortionTypeId adds i to the "abortionTypeId" field.
func (au *AbortionUpdate) AddAbortionTypeId(i int) *AbortionUpdate {
	au.mutation.AddAbortionTypeId(i)
	return au
}

// SetAbortionTypeName sets the "abortionTypeName" field.
func (au *AbortionUpdate) SetAbortionTypeName(s string) *AbortionUpdate {
	au.mutation.SetAbortionTypeName(s)
	return au
}

// SetUserName sets the "userName" field.
func (au *AbortionUpdate) SetUserName(s string) *AbortionUpdate {
	au.mutation.SetUserName(s)
	return au
}

// SetRemarks sets the "remarks" field.
func (au *AbortionUpdate) SetRemarks(s string) *AbortionUpdate {
	au.mutation.SetRemarks(s)
	return au
}

// SetCreatedAt sets the "createdAt" field.
func (au *AbortionUpdate) SetCreatedAt(i int64) *AbortionUpdate {
	au.mutation.ResetCreatedAt()
	au.mutation.SetCreatedAt(i)
	return au
}

// AddCreatedAt adds i to the "createdAt" field.
func (au *AbortionUpdate) AddCreatedAt(i int64) *AbortionUpdate {
	au.mutation.AddCreatedAt(i)
	return au
}

// SetUpdatedAt sets the "updatedAt" field.
func (au *AbortionUpdate) SetUpdatedAt(i int64) *AbortionUpdate {
	au.mutation.ResetUpdatedAt()
	au.mutation.SetUpdatedAt(i)
	return au
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (au *AbortionUpdate) AddUpdatedAt(i int64) *AbortionUpdate {
	au.mutation.AddUpdatedAt(i)
	return au
}

// SetDeleted sets the "deleted" field.
func (au *AbortionUpdate) SetDeleted(i int) *AbortionUpdate {
	au.mutation.ResetDeleted()
	au.mutation.SetDeleted(i)
	return au
}

// AddDeleted adds i to the "deleted" field.
func (au *AbortionUpdate) AddDeleted(i int) *AbortionUpdate {
	au.mutation.AddDeleted(i)
	return au
}

// Mutation returns the AbortionMutation object of the builder.
func (au *AbortionUpdate) Mutation() *AbortionMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AbortionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbortionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AbortionUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AbortionUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AbortionUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AbortionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abortion.Table,
			Columns: abortion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abortion.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldCattleId,
		})
	}
	if value, ok := au.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldCattleId,
		})
	}
	if value, ok := au.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldTenantId,
		})
	}
	if value, ok := au.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldTenantId,
		})
	}
	if value, ok := au.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldTenantName,
		})
	}
	if value, ok := au.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldFarmId,
		})
	}
	if value, ok := au.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldFarmId,
		})
	}
	if value, ok := au.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldFarmName,
		})
	}
	if value, ok := au.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldShedId,
		})
	}
	if value, ok := au.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldShedId,
		})
	}
	if value, ok := au.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldShedName,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldName,
		})
	}
	if au.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: abortion.FieldName,
		})
	}
	if value, ok := au.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldEarNumber,
		})
	}
	if value, ok := au.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldTimes,
		})
	}
	if value, ok := au.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldTimes,
		})
	}
	if value, ok := au.mutation.PregnantAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldPregnantAt,
		})
	}
	if value, ok := au.mutation.AddedPregnantAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldPregnantAt,
		})
	}
	if value, ok := au.mutation.AbortionAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldAbortionAt,
		})
	}
	if value, ok := au.mutation.AddedAbortionAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldAbortionAt,
		})
	}
	if value, ok := au.mutation.AbortionTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldAbortionTypeId,
		})
	}
	if value, ok := au.mutation.AddedAbortionTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldAbortionTypeId,
		})
	}
	if value, ok := au.mutation.AbortionTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldAbortionTypeName,
		})
	}
	if value, ok := au.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldUserName,
		})
	}
	if value, ok := au.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldRemarks,
		})
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldDeleted,
		})
	}
	if value, ok := au.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abortion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AbortionUpdateOne is the builder for updating a single Abortion entity.
type AbortionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbortionMutation
}

// SetCattleId sets the "cattleId" field.
func (auo *AbortionUpdateOne) SetCattleId(i int64) *AbortionUpdateOne {
	auo.mutation.ResetCattleId()
	auo.mutation.SetCattleId(i)
	return auo
}

// AddCattleId adds i to the "cattleId" field.
func (auo *AbortionUpdateOne) AddCattleId(i int64) *AbortionUpdateOne {
	auo.mutation.AddCattleId(i)
	return auo
}

// SetTenantId sets the "tenantId" field.
func (auo *AbortionUpdateOne) SetTenantId(i int64) *AbortionUpdateOne {
	auo.mutation.ResetTenantId()
	auo.mutation.SetTenantId(i)
	return auo
}

// AddTenantId adds i to the "tenantId" field.
func (auo *AbortionUpdateOne) AddTenantId(i int64) *AbortionUpdateOne {
	auo.mutation.AddTenantId(i)
	return auo
}

// SetTenantName sets the "tenantName" field.
func (auo *AbortionUpdateOne) SetTenantName(s string) *AbortionUpdateOne {
	auo.mutation.SetTenantName(s)
	return auo
}

// SetFarmId sets the "farmId" field.
func (auo *AbortionUpdateOne) SetFarmId(i int64) *AbortionUpdateOne {
	auo.mutation.ResetFarmId()
	auo.mutation.SetFarmId(i)
	return auo
}

// AddFarmId adds i to the "farmId" field.
func (auo *AbortionUpdateOne) AddFarmId(i int64) *AbortionUpdateOne {
	auo.mutation.AddFarmId(i)
	return auo
}

// SetFarmName sets the "farmName" field.
func (auo *AbortionUpdateOne) SetFarmName(s string) *AbortionUpdateOne {
	auo.mutation.SetFarmName(s)
	return auo
}

// SetShedId sets the "shedId" field.
func (auo *AbortionUpdateOne) SetShedId(i int64) *AbortionUpdateOne {
	auo.mutation.ResetShedId()
	auo.mutation.SetShedId(i)
	return auo
}

// AddShedId adds i to the "shedId" field.
func (auo *AbortionUpdateOne) AddShedId(i int64) *AbortionUpdateOne {
	auo.mutation.AddShedId(i)
	return auo
}

// SetShedName sets the "shedName" field.
func (auo *AbortionUpdateOne) SetShedName(s string) *AbortionUpdateOne {
	auo.mutation.SetShedName(s)
	return auo
}

// SetName sets the "name" field.
func (auo *AbortionUpdateOne) SetName(s string) *AbortionUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AbortionUpdateOne) SetNillableName(s *string) *AbortionUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// ClearName clears the value of the "name" field.
func (auo *AbortionUpdateOne) ClearName() *AbortionUpdateOne {
	auo.mutation.ClearName()
	return auo
}

// SetEarNumber sets the "earNumber" field.
func (auo *AbortionUpdateOne) SetEarNumber(s string) *AbortionUpdateOne {
	auo.mutation.SetEarNumber(s)
	return auo
}

// SetTimes sets the "times" field.
func (auo *AbortionUpdateOne) SetTimes(i int) *AbortionUpdateOne {
	auo.mutation.ResetTimes()
	auo.mutation.SetTimes(i)
	return auo
}

// AddTimes adds i to the "times" field.
func (auo *AbortionUpdateOne) AddTimes(i int) *AbortionUpdateOne {
	auo.mutation.AddTimes(i)
	return auo
}

// SetPregnantAt sets the "pregnantAt" field.
func (auo *AbortionUpdateOne) SetPregnantAt(i int64) *AbortionUpdateOne {
	auo.mutation.ResetPregnantAt()
	auo.mutation.SetPregnantAt(i)
	return auo
}

// AddPregnantAt adds i to the "pregnantAt" field.
func (auo *AbortionUpdateOne) AddPregnantAt(i int64) *AbortionUpdateOne {
	auo.mutation.AddPregnantAt(i)
	return auo
}

// SetAbortionAt sets the "abortionAt" field.
func (auo *AbortionUpdateOne) SetAbortionAt(i int64) *AbortionUpdateOne {
	auo.mutation.ResetAbortionAt()
	auo.mutation.SetAbortionAt(i)
	return auo
}

// AddAbortionAt adds i to the "abortionAt" field.
func (auo *AbortionUpdateOne) AddAbortionAt(i int64) *AbortionUpdateOne {
	auo.mutation.AddAbortionAt(i)
	return auo
}

// SetAbortionTypeId sets the "abortionTypeId" field.
func (auo *AbortionUpdateOne) SetAbortionTypeId(i int) *AbortionUpdateOne {
	auo.mutation.ResetAbortionTypeId()
	auo.mutation.SetAbortionTypeId(i)
	return auo
}

// AddAbortionTypeId adds i to the "abortionTypeId" field.
func (auo *AbortionUpdateOne) AddAbortionTypeId(i int) *AbortionUpdateOne {
	auo.mutation.AddAbortionTypeId(i)
	return auo
}

// SetAbortionTypeName sets the "abortionTypeName" field.
func (auo *AbortionUpdateOne) SetAbortionTypeName(s string) *AbortionUpdateOne {
	auo.mutation.SetAbortionTypeName(s)
	return auo
}

// SetUserName sets the "userName" field.
func (auo *AbortionUpdateOne) SetUserName(s string) *AbortionUpdateOne {
	auo.mutation.SetUserName(s)
	return auo
}

// SetRemarks sets the "remarks" field.
func (auo *AbortionUpdateOne) SetRemarks(s string) *AbortionUpdateOne {
	auo.mutation.SetRemarks(s)
	return auo
}

// SetCreatedAt sets the "createdAt" field.
func (auo *AbortionUpdateOne) SetCreatedAt(i int64) *AbortionUpdateOne {
	auo.mutation.ResetCreatedAt()
	auo.mutation.SetCreatedAt(i)
	return auo
}

// AddCreatedAt adds i to the "createdAt" field.
func (auo *AbortionUpdateOne) AddCreatedAt(i int64) *AbortionUpdateOne {
	auo.mutation.AddCreatedAt(i)
	return auo
}

// SetUpdatedAt sets the "updatedAt" field.
func (auo *AbortionUpdateOne) SetUpdatedAt(i int64) *AbortionUpdateOne {
	auo.mutation.ResetUpdatedAt()
	auo.mutation.SetUpdatedAt(i)
	return auo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (auo *AbortionUpdateOne) AddUpdatedAt(i int64) *AbortionUpdateOne {
	auo.mutation.AddUpdatedAt(i)
	return auo
}

// SetDeleted sets the "deleted" field.
func (auo *AbortionUpdateOne) SetDeleted(i int) *AbortionUpdateOne {
	auo.mutation.ResetDeleted()
	auo.mutation.SetDeleted(i)
	return auo
}

// AddDeleted adds i to the "deleted" field.
func (auo *AbortionUpdateOne) AddDeleted(i int) *AbortionUpdateOne {
	auo.mutation.AddDeleted(i)
	return auo
}

// Mutation returns the AbortionMutation object of the builder.
func (auo *AbortionUpdateOne) Mutation() *AbortionMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AbortionUpdateOne) Select(field string, fields ...string) *AbortionUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Abortion entity.
func (auo *AbortionUpdateOne) Save(ctx context.Context) (*Abortion, error) {
	var (
		err  error
		node *Abortion
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbortionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Abortion)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AbortionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AbortionUpdateOne) SaveX(ctx context.Context) *Abortion {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AbortionUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AbortionUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AbortionUpdateOne) sqlSave(ctx context.Context) (_node *Abortion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abortion.Table,
			Columns: abortion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abortion.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Abortion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abortion.FieldID)
		for _, f := range fields {
			if !abortion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abortion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldCattleId,
		})
	}
	if value, ok := auo.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldCattleId,
		})
	}
	if value, ok := auo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldTenantId,
		})
	}
	if value, ok := auo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldTenantId,
		})
	}
	if value, ok := auo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldTenantName,
		})
	}
	if value, ok := auo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldFarmId,
		})
	}
	if value, ok := auo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldFarmId,
		})
	}
	if value, ok := auo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldFarmName,
		})
	}
	if value, ok := auo.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldShedId,
		})
	}
	if value, ok := auo.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldShedId,
		})
	}
	if value, ok := auo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldShedName,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldName,
		})
	}
	if auo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: abortion.FieldName,
		})
	}
	if value, ok := auo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldEarNumber,
		})
	}
	if value, ok := auo.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldTimes,
		})
	}
	if value, ok := auo.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldTimes,
		})
	}
	if value, ok := auo.mutation.PregnantAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldPregnantAt,
		})
	}
	if value, ok := auo.mutation.AddedPregnantAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldPregnantAt,
		})
	}
	if value, ok := auo.mutation.AbortionAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldAbortionAt,
		})
	}
	if value, ok := auo.mutation.AddedAbortionAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldAbortionAt,
		})
	}
	if value, ok := auo.mutation.AbortionTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldAbortionTypeId,
		})
	}
	if value, ok := auo.mutation.AddedAbortionTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldAbortionTypeId,
		})
	}
	if value, ok := auo.mutation.AbortionTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldAbortionTypeName,
		})
	}
	if value, ok := auo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldUserName,
		})
	}
	if value, ok := auo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortion.FieldRemarks,
		})
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortion.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldDeleted,
		})
	}
	if value, ok := auo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortion.FieldDeleted,
		})
	}
	_node = &Abortion{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abortion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

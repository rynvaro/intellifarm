// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/abortionreason"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AbortionReasonUpdate is the builder for updating AbortionReason entities.
type AbortionReasonUpdate struct {
	config
	hooks    []Hook
	mutation *AbortionReasonMutation
}

// Where appends a list predicates to the AbortionReasonUpdate builder.
func (aru *AbortionReasonUpdate) Where(ps ...predicate.AbortionReason) *AbortionReasonUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetName sets the "name" field.
func (aru *AbortionReasonUpdate) SetName(s string) *AbortionReasonUpdate {
	aru.mutation.SetName(s)
	return aru
}

// SetCode sets the "code" field.
func (aru *AbortionReasonUpdate) SetCode(s string) *AbortionReasonUpdate {
	aru.mutation.SetCode(s)
	return aru
}

// SetTenantId sets the "tenantId" field.
func (aru *AbortionReasonUpdate) SetTenantId(i int64) *AbortionReasonUpdate {
	aru.mutation.ResetTenantId()
	aru.mutation.SetTenantId(i)
	return aru
}

// AddTenantId adds i to the "tenantId" field.
func (aru *AbortionReasonUpdate) AddTenantId(i int64) *AbortionReasonUpdate {
	aru.mutation.AddTenantId(i)
	return aru
}

// SetTenantName sets the "tenantName" field.
func (aru *AbortionReasonUpdate) SetTenantName(s string) *AbortionReasonUpdate {
	aru.mutation.SetTenantName(s)
	return aru
}

// SetOrder sets the "order" field.
func (aru *AbortionReasonUpdate) SetOrder(i int) *AbortionReasonUpdate {
	aru.mutation.ResetOrder()
	aru.mutation.SetOrder(i)
	return aru
}

// AddOrder adds i to the "order" field.
func (aru *AbortionReasonUpdate) AddOrder(i int) *AbortionReasonUpdate {
	aru.mutation.AddOrder(i)
	return aru
}

// SetRemarks sets the "remarks" field.
func (aru *AbortionReasonUpdate) SetRemarks(s string) *AbortionReasonUpdate {
	aru.mutation.SetRemarks(s)
	return aru
}

// SetCreatedAt sets the "createdAt" field.
func (aru *AbortionReasonUpdate) SetCreatedAt(i int64) *AbortionReasonUpdate {
	aru.mutation.ResetCreatedAt()
	aru.mutation.SetCreatedAt(i)
	return aru
}

// AddCreatedAt adds i to the "createdAt" field.
func (aru *AbortionReasonUpdate) AddCreatedAt(i int64) *AbortionReasonUpdate {
	aru.mutation.AddCreatedAt(i)
	return aru
}

// SetUpdatedAt sets the "updatedAt" field.
func (aru *AbortionReasonUpdate) SetUpdatedAt(i int64) *AbortionReasonUpdate {
	aru.mutation.ResetUpdatedAt()
	aru.mutation.SetUpdatedAt(i)
	return aru
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (aru *AbortionReasonUpdate) AddUpdatedAt(i int64) *AbortionReasonUpdate {
	aru.mutation.AddUpdatedAt(i)
	return aru
}

// SetDeleted sets the "deleted" field.
func (aru *AbortionReasonUpdate) SetDeleted(i int) *AbortionReasonUpdate {
	aru.mutation.ResetDeleted()
	aru.mutation.SetDeleted(i)
	return aru
}

// AddDeleted adds i to the "deleted" field.
func (aru *AbortionReasonUpdate) AddDeleted(i int) *AbortionReasonUpdate {
	aru.mutation.AddDeleted(i)
	return aru
}

// Mutation returns the AbortionReasonMutation object of the builder.
func (aru *AbortionReasonUpdate) Mutation() *AbortionReasonMutation {
	return aru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AbortionReasonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aru.hooks) == 0 {
		affected, err = aru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbortionReasonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aru.mutation = mutation
			affected, err = aru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aru.hooks) - 1; i >= 0; i-- {
			if aru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AbortionReasonUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AbortionReasonUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AbortionReasonUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aru *AbortionReasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abortionreason.Table,
			Columns: abortionreason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abortionreason.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortionreason.FieldName,
		})
	}
	if value, ok := aru.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortionreason.FieldCode,
		})
	}
	if value, ok := aru.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldTenantId,
		})
	}
	if value, ok := aru.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldTenantId,
		})
	}
	if value, ok := aru.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortionreason.FieldTenantName,
		})
	}
	if value, ok := aru.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortionreason.FieldOrder,
		})
	}
	if value, ok := aru.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortionreason.FieldOrder,
		})
	}
	if value, ok := aru.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortionreason.FieldRemarks,
		})
	}
	if value, ok := aru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldCreatedAt,
		})
	}
	if value, ok := aru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldCreatedAt,
		})
	}
	if value, ok := aru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldUpdatedAt,
		})
	}
	if value, ok := aru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldUpdatedAt,
		})
	}
	if value, ok := aru.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortionreason.FieldDeleted,
		})
	}
	if value, ok := aru.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortionreason.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abortionreason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AbortionReasonUpdateOne is the builder for updating a single AbortionReason entity.
type AbortionReasonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbortionReasonMutation
}

// SetName sets the "name" field.
func (aruo *AbortionReasonUpdateOne) SetName(s string) *AbortionReasonUpdateOne {
	aruo.mutation.SetName(s)
	return aruo
}

// SetCode sets the "code" field.
func (aruo *AbortionReasonUpdateOne) SetCode(s string) *AbortionReasonUpdateOne {
	aruo.mutation.SetCode(s)
	return aruo
}

// SetTenantId sets the "tenantId" field.
func (aruo *AbortionReasonUpdateOne) SetTenantId(i int64) *AbortionReasonUpdateOne {
	aruo.mutation.ResetTenantId()
	aruo.mutation.SetTenantId(i)
	return aruo
}

// AddTenantId adds i to the "tenantId" field.
func (aruo *AbortionReasonUpdateOne) AddTenantId(i int64) *AbortionReasonUpdateOne {
	aruo.mutation.AddTenantId(i)
	return aruo
}

// SetTenantName sets the "tenantName" field.
func (aruo *AbortionReasonUpdateOne) SetTenantName(s string) *AbortionReasonUpdateOne {
	aruo.mutation.SetTenantName(s)
	return aruo
}

// SetOrder sets the "order" field.
func (aruo *AbortionReasonUpdateOne) SetOrder(i int) *AbortionReasonUpdateOne {
	aruo.mutation.ResetOrder()
	aruo.mutation.SetOrder(i)
	return aruo
}

// AddOrder adds i to the "order" field.
func (aruo *AbortionReasonUpdateOne) AddOrder(i int) *AbortionReasonUpdateOne {
	aruo.mutation.AddOrder(i)
	return aruo
}

// SetRemarks sets the "remarks" field.
func (aruo *AbortionReasonUpdateOne) SetRemarks(s string) *AbortionReasonUpdateOne {
	aruo.mutation.SetRemarks(s)
	return aruo
}

// SetCreatedAt sets the "createdAt" field.
func (aruo *AbortionReasonUpdateOne) SetCreatedAt(i int64) *AbortionReasonUpdateOne {
	aruo.mutation.ResetCreatedAt()
	aruo.mutation.SetCreatedAt(i)
	return aruo
}

// AddCreatedAt adds i to the "createdAt" field.
func (aruo *AbortionReasonUpdateOne) AddCreatedAt(i int64) *AbortionReasonUpdateOne {
	aruo.mutation.AddCreatedAt(i)
	return aruo
}

// SetUpdatedAt sets the "updatedAt" field.
func (aruo *AbortionReasonUpdateOne) SetUpdatedAt(i int64) *AbortionReasonUpdateOne {
	aruo.mutation.ResetUpdatedAt()
	aruo.mutation.SetUpdatedAt(i)
	return aruo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (aruo *AbortionReasonUpdateOne) AddUpdatedAt(i int64) *AbortionReasonUpdateOne {
	aruo.mutation.AddUpdatedAt(i)
	return aruo
}

// SetDeleted sets the "deleted" field.
func (aruo *AbortionReasonUpdateOne) SetDeleted(i int) *AbortionReasonUpdateOne {
	aruo.mutation.ResetDeleted()
	aruo.mutation.SetDeleted(i)
	return aruo
}

// AddDeleted adds i to the "deleted" field.
func (aruo *AbortionReasonUpdateOne) AddDeleted(i int) *AbortionReasonUpdateOne {
	aruo.mutation.AddDeleted(i)
	return aruo
}

// Mutation returns the AbortionReasonMutation object of the builder.
func (aruo *AbortionReasonUpdateOne) Mutation() *AbortionReasonMutation {
	return aruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AbortionReasonUpdateOne) Select(field string, fields ...string) *AbortionReasonUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AbortionReason entity.
func (aruo *AbortionReasonUpdateOne) Save(ctx context.Context) (*AbortionReason, error) {
	var (
		err  error
		node *AbortionReason
	)
	if len(aruo.hooks) == 0 {
		node, err = aruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbortionReasonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aruo.mutation = mutation
			node, err = aruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruo.hooks) - 1; i >= 0; i-- {
			if aruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AbortionReason)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AbortionReasonMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AbortionReasonUpdateOne) SaveX(ctx context.Context) *AbortionReason {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AbortionReasonUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AbortionReasonUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aruo *AbortionReasonUpdateOne) sqlSave(ctx context.Context) (_node *AbortionReason, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abortionreason.Table,
			Columns: abortionreason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abortionreason.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AbortionReason.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abortionreason.FieldID)
		for _, f := range fields {
			if !abortionreason.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abortionreason.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortionreason.FieldName,
		})
	}
	if value, ok := aruo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortionreason.FieldCode,
		})
	}
	if value, ok := aruo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldTenantId,
		})
	}
	if value, ok := aruo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldTenantId,
		})
	}
	if value, ok := aruo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortionreason.FieldTenantName,
		})
	}
	if value, ok := aruo.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortionreason.FieldOrder,
		})
	}
	if value, ok := aruo.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortionreason.FieldOrder,
		})
	}
	if value, ok := aruo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abortionreason.FieldRemarks,
		})
	}
	if value, ok := aruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldCreatedAt,
		})
	}
	if value, ok := aruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldCreatedAt,
		})
	}
	if value, ok := aruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldUpdatedAt,
		})
	}
	if value, ok := aruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abortionreason.FieldUpdatedAt,
		})
	}
	if value, ok := aruo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortionreason.FieldDeleted,
		})
	}
	if value, ok := aruo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: abortionreason.FieldDeleted,
		})
	}
	_node = &AbortionReason{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abortionreason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

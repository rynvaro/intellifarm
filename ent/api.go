// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/api"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// API is the model entity for the API schema.
type API struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Redirect holds the value of the "redirect" field.
	Redirect string `json:"redirect,omitempty"`
	// Component holds the value of the "component" field.
	Component string `json:"component,omitempty"`
	// IsSub holds the value of the "isSub" field.
	IsSub bool `json:"isSub,omitempty"`
	// HasSub holds the value of the "hasSub" field.
	HasSub bool `json:"hasSub,omitempty"`
	// Single holds the value of the "single" field.
	Single bool `json:"single,omitempty"`
	// ParentId holds the value of the "parentId" field.
	ParentId int64 `json:"parentId,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId string `json:"tenantId,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*API) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case api.FieldIsSub, api.FieldHasSub, api.FieldSingle:
			values[i] = new(sql.NullBool)
		case api.FieldID, api.FieldLevel, api.FieldParentId, api.FieldCreatedAt, api.FieldUpdatedAt, api.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case api.FieldName, api.FieldPath, api.FieldHash, api.FieldRedirect, api.FieldComponent, api.FieldTenantId:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type API", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the API fields.
func (a *API) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case api.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case api.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case api.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				a.Path = value.String
			}
		case api.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				a.Level = int(value.Int64)
			}
		case api.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				a.Hash = value.String
			}
		case api.FieldRedirect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect", values[i])
			} else if value.Valid {
				a.Redirect = value.String
			}
		case api.FieldComponent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component", values[i])
			} else if value.Valid {
				a.Component = value.String
			}
		case api.FieldIsSub:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isSub", values[i])
			} else if value.Valid {
				a.IsSub = value.Bool
			}
		case api.FieldHasSub:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hasSub", values[i])
			} else if value.Valid {
				a.HasSub = value.Bool
			}
		case api.FieldSingle:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field single", values[i])
			} else if value.Valid {
				a.Single = value.Bool
			}
		case api.FieldParentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parentId", values[i])
			} else if value.Valid {
				a.ParentId = value.Int64
			}
		case api.FieldTenantId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				a.TenantId = value.String
			}
		case api.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Int64
			}
		case api.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Int64
			}
		case api.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				a.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this API.
// Note that you need to call API.Unwrap() before calling this method if this API
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *API) Update() *APIUpdateOne {
	return (&APIClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the API entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *API) Unwrap() *API {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: API is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *API) String() string {
	var builder strings.Builder
	builder.WriteString("API(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(a.Path)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", a.Level))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(a.Hash)
	builder.WriteString(", ")
	builder.WriteString("redirect=")
	builder.WriteString(a.Redirect)
	builder.WriteString(", ")
	builder.WriteString("component=")
	builder.WriteString(a.Component)
	builder.WriteString(", ")
	builder.WriteString("isSub=")
	builder.WriteString(fmt.Sprintf("%v", a.IsSub))
	builder.WriteString(", ")
	builder.WriteString("hasSub=")
	builder.WriteString(fmt.Sprintf("%v", a.HasSub))
	builder.WriteString(", ")
	builder.WriteString("single=")
	builder.WriteString(fmt.Sprintf("%v", a.Single))
	builder.WriteString(", ")
	builder.WriteString("parentId=")
	builder.WriteString(fmt.Sprintf("%v", a.ParentId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(a.TenantId)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", a.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// APIs is a parsable slice of API.
type APIs []*API

func (a APIs) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

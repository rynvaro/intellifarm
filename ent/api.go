// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/api"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// API is the model entity for the API schema.
type API struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Redirect holds the value of the "redirect" field.
	Redirect string `json:"redirect,omitempty"`
	// Component holds the value of the "component" field.
	Component string `json:"component,omitempty"`
	// IsSub holds the value of the "isSub" field.
	IsSub bool `json:"isSub,omitempty"`
	// HasSub holds the value of the "hasSub" field.
	HasSub bool `json:"hasSub,omitempty"`
	// Single holds the value of the "single" field.
	Single bool `json:"single,omitempty"`
	// ParentId holds the value of the "parentId" field.
	ParentId int64 `json:"parentId,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId string `json:"tenantId,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*API) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // path
		&sql.NullInt64{},  // level
		&sql.NullString{}, // hash
		&sql.NullString{}, // redirect
		&sql.NullString{}, // component
		&sql.NullBool{},   // isSub
		&sql.NullBool{},   // hasSub
		&sql.NullBool{},   // single
		&sql.NullInt64{},  // parentId
		&sql.NullString{}, // tenantId
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the API fields.
func (a *API) assignValues(values ...interface{}) error {
	if m, n := len(values), len(api.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		a.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field path", values[1])
	} else if value.Valid {
		a.Path = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field level", values[2])
	} else if value.Valid {
		a.Level = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field hash", values[3])
	} else if value.Valid {
		a.Hash = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field redirect", values[4])
	} else if value.Valid {
		a.Redirect = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field component", values[5])
	} else if value.Valid {
		a.Component = value.String
	}
	if value, ok := values[6].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field isSub", values[6])
	} else if value.Valid {
		a.IsSub = value.Bool
	}
	if value, ok := values[7].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field hasSub", values[7])
	} else if value.Valid {
		a.HasSub = value.Bool
	}
	if value, ok := values[8].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field single", values[8])
	} else if value.Valid {
		a.Single = value.Bool
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field parentId", values[9])
	} else if value.Valid {
		a.ParentId = value.Int64
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[10])
	} else if value.Valid {
		a.TenantId = value.String
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[11])
	} else if value.Valid {
		a.CreatedAt = value.Int64
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[12])
	} else if value.Valid {
		a.UpdatedAt = value.Int64
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[13])
	} else if value.Valid {
		a.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this API.
// Note that, you need to call API.Unwrap() before calling this method, if this API
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *API) Update() *APIUpdateOne {
	return (&APIClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *API) Unwrap() *API {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: API is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *API) String() string {
	var builder strings.Builder
	builder.WriteString("API(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", path=")
	builder.WriteString(a.Path)
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", a.Level))
	builder.WriteString(", hash=")
	builder.WriteString(a.Hash)
	builder.WriteString(", redirect=")
	builder.WriteString(a.Redirect)
	builder.WriteString(", component=")
	builder.WriteString(a.Component)
	builder.WriteString(", isSub=")
	builder.WriteString(fmt.Sprintf("%v", a.IsSub))
	builder.WriteString(", hasSub=")
	builder.WriteString(fmt.Sprintf("%v", a.HasSub))
	builder.WriteString(", single=")
	builder.WriteString(fmt.Sprintf("%v", a.Single))
	builder.WriteString(", parentId=")
	builder.WriteString(fmt.Sprintf("%v", a.ParentId))
	builder.WriteString(", tenantId=")
	builder.WriteString(a.TenantId)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", a.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// APIs is a parsable slice of API.
type APIs []*API

func (a APIs) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

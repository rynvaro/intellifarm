// Code generated by ent, DO NOT EDIT.

package api

import (
	"cattleai/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// Redirect applies equality check predicate on the "redirect" field. It's identical to RedirectEQ.
func Redirect(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirect), v))
	})
}

// Component applies equality check predicate on the "component" field. It's identical to ComponentEQ.
func Component(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponent), v))
	})
}

// IsSub applies equality check predicate on the "isSub" field. It's identical to IsSubEQ.
func IsSub(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSub), v))
	})
}

// HasSub applies equality check predicate on the "hasSub" field. It's identical to HasSubEQ.
func HasSub(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasSub), v))
	})
}

// Single applies equality check predicate on the "single" field. It's identical to SingleEQ.
func Single(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSingle), v))
	})
}

// ParentId applies equality check predicate on the "parentId" field. It's identical to ParentIdEQ.
func ParentId(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentId), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHash), v))
	})
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHash), v...))
	})
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHash), v...))
	})
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHash), v))
	})
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHash), v))
	})
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHash), v))
	})
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHash), v))
	})
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHash), v))
	})
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHash), v))
	})
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHash), v))
	})
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHash), v))
	})
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHash), v))
	})
}

// RedirectEQ applies the EQ predicate on the "redirect" field.
func RedirectEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirect), v))
	})
}

// RedirectNEQ applies the NEQ predicate on the "redirect" field.
func RedirectNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRedirect), v))
	})
}

// RedirectIn applies the In predicate on the "redirect" field.
func RedirectIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRedirect), v...))
	})
}

// RedirectNotIn applies the NotIn predicate on the "redirect" field.
func RedirectNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRedirect), v...))
	})
}

// RedirectGT applies the GT predicate on the "redirect" field.
func RedirectGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRedirect), v))
	})
}

// RedirectGTE applies the GTE predicate on the "redirect" field.
func RedirectGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRedirect), v))
	})
}

// RedirectLT applies the LT predicate on the "redirect" field.
func RedirectLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRedirect), v))
	})
}

// RedirectLTE applies the LTE predicate on the "redirect" field.
func RedirectLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRedirect), v))
	})
}

// RedirectContains applies the Contains predicate on the "redirect" field.
func RedirectContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRedirect), v))
	})
}

// RedirectHasPrefix applies the HasPrefix predicate on the "redirect" field.
func RedirectHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRedirect), v))
	})
}

// RedirectHasSuffix applies the HasSuffix predicate on the "redirect" field.
func RedirectHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRedirect), v))
	})
}

// RedirectIsNil applies the IsNil predicate on the "redirect" field.
func RedirectIsNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRedirect)))
	})
}

// RedirectNotNil applies the NotNil predicate on the "redirect" field.
func RedirectNotNil() predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRedirect)))
	})
}

// RedirectEqualFold applies the EqualFold predicate on the "redirect" field.
func RedirectEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRedirect), v))
	})
}

// RedirectContainsFold applies the ContainsFold predicate on the "redirect" field.
func RedirectContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRedirect), v))
	})
}

// ComponentEQ applies the EQ predicate on the "component" field.
func ComponentEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponent), v))
	})
}

// ComponentNEQ applies the NEQ predicate on the "component" field.
func ComponentNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComponent), v))
	})
}

// ComponentIn applies the In predicate on the "component" field.
func ComponentIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldComponent), v...))
	})
}

// ComponentNotIn applies the NotIn predicate on the "component" field.
func ComponentNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldComponent), v...))
	})
}

// ComponentGT applies the GT predicate on the "component" field.
func ComponentGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComponent), v))
	})
}

// ComponentGTE applies the GTE predicate on the "component" field.
func ComponentGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComponent), v))
	})
}

// ComponentLT applies the LT predicate on the "component" field.
func ComponentLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComponent), v))
	})
}

// ComponentLTE applies the LTE predicate on the "component" field.
func ComponentLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComponent), v))
	})
}

// ComponentContains applies the Contains predicate on the "component" field.
func ComponentContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComponent), v))
	})
}

// ComponentHasPrefix applies the HasPrefix predicate on the "component" field.
func ComponentHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComponent), v))
	})
}

// ComponentHasSuffix applies the HasSuffix predicate on the "component" field.
func ComponentHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComponent), v))
	})
}

// ComponentEqualFold applies the EqualFold predicate on the "component" field.
func ComponentEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComponent), v))
	})
}

// ComponentContainsFold applies the ContainsFold predicate on the "component" field.
func ComponentContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComponent), v))
	})
}

// IsSubEQ applies the EQ predicate on the "isSub" field.
func IsSubEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSub), v))
	})
}

// IsSubNEQ applies the NEQ predicate on the "isSub" field.
func IsSubNEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsSub), v))
	})
}

// HasSubEQ applies the EQ predicate on the "hasSub" field.
func HasSubEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasSub), v))
	})
}

// HasSubNEQ applies the NEQ predicate on the "hasSub" field.
func HasSubNEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasSub), v))
	})
}

// SingleEQ applies the EQ predicate on the "single" field.
func SingleEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSingle), v))
	})
}

// SingleNEQ applies the NEQ predicate on the "single" field.
func SingleNEQ(v bool) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSingle), v))
	})
}

// ParentIdEQ applies the EQ predicate on the "parentId" field.
func ParentIdEQ(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentId), v))
	})
}

// ParentIdNEQ applies the NEQ predicate on the "parentId" field.
func ParentIdNEQ(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentId), v))
	})
}

// ParentIdIn applies the In predicate on the "parentId" field.
func ParentIdIn(vs ...int64) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldParentId), v...))
	})
}

// ParentIdNotIn applies the NotIn predicate on the "parentId" field.
func ParentIdNotIn(vs ...int64) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldParentId), v...))
	})
}

// ParentIdGT applies the GT predicate on the "parentId" field.
func ParentIdGT(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentId), v))
	})
}

// ParentIdGTE applies the GTE predicate on the "parentId" field.
func ParentIdGTE(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentId), v))
	})
}

// ParentIdLT applies the LT predicate on the "parentId" field.
func ParentIdLT(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentId), v))
	})
}

// ParentIdLTE applies the LTE predicate on the "parentId" field.
func ParentIdLTE(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentId), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...string) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantIdContains applies the Contains predicate on the "tenantId" field.
func TenantIdContains(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantId), v))
	})
}

// TenantIdHasPrefix applies the HasPrefix predicate on the "tenantId" field.
func TenantIdHasPrefix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantId), v))
	})
}

// TenantIdHasSuffix applies the HasSuffix predicate on the "tenantId" field.
func TenantIdHasSuffix(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantId), v))
	})
}

// TenantIdEqualFold applies the EqualFold predicate on the "tenantId" field.
func TenantIdEqualFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantId), v))
	})
}

// TenantIdContainsFold applies the ContainsFold predicate on the "tenantId" field.
func TenantIdContainsFold(v string) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantId), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.API {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.API) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.API) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.API) predicate.API {
	return predicate.API(func(s *sql.Selector) {
		p(s.Not())
	})
}

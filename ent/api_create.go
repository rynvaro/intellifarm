// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/api"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// APICreate is the builder for creating a API entity.
type APICreate struct {
	config
	mutation *APIMutation
	hooks    []Hook
}

// SetName sets the name field.
func (ac *APICreate) SetName(s string) *APICreate {
	ac.mutation.SetName(s)
	return ac
}

// SetPath sets the path field.
func (ac *APICreate) SetPath(s string) *APICreate {
	ac.mutation.SetPath(s)
	return ac
}

// SetLevel sets the level field.
func (ac *APICreate) SetLevel(i int) *APICreate {
	ac.mutation.SetLevel(i)
	return ac
}

// SetHash sets the hash field.
func (ac *APICreate) SetHash(s string) *APICreate {
	ac.mutation.SetHash(s)
	return ac
}

// SetRedirect sets the redirect field.
func (ac *APICreate) SetRedirect(s string) *APICreate {
	ac.mutation.SetRedirect(s)
	return ac
}

// SetNillableRedirect sets the redirect field if the given value is not nil.
func (ac *APICreate) SetNillableRedirect(s *string) *APICreate {
	if s != nil {
		ac.SetRedirect(*s)
	}
	return ac
}

// SetComponent sets the component field.
func (ac *APICreate) SetComponent(s string) *APICreate {
	ac.mutation.SetComponent(s)
	return ac
}

// SetIsSub sets the isSub field.
func (ac *APICreate) SetIsSub(b bool) *APICreate {
	ac.mutation.SetIsSub(b)
	return ac
}

// SetHasSub sets the hasSub field.
func (ac *APICreate) SetHasSub(b bool) *APICreate {
	ac.mutation.SetHasSub(b)
	return ac
}

// SetSingle sets the single field.
func (ac *APICreate) SetSingle(b bool) *APICreate {
	ac.mutation.SetSingle(b)
	return ac
}

// SetParentId sets the parentId field.
func (ac *APICreate) SetParentId(i int64) *APICreate {
	ac.mutation.SetParentId(i)
	return ac
}

// SetTenantId sets the tenantId field.
func (ac *APICreate) SetTenantId(s string) *APICreate {
	ac.mutation.SetTenantId(s)
	return ac
}

// SetCreatedAt sets the createdAt field.
func (ac *APICreate) SetCreatedAt(i int64) *APICreate {
	ac.mutation.SetCreatedAt(i)
	return ac
}

// SetUpdatedAt sets the updatedAt field.
func (ac *APICreate) SetUpdatedAt(i int64) *APICreate {
	ac.mutation.SetUpdatedAt(i)
	return ac
}

// SetDeleted sets the deleted field.
func (ac *APICreate) SetDeleted(i int) *APICreate {
	ac.mutation.SetDeleted(i)
	return ac
}

// SetID sets the id field.
func (ac *APICreate) SetID(i int64) *APICreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the APIMutation object of the builder.
func (ac *APICreate) Mutation() *APIMutation {
	return ac.mutation
}

// Save creates the API in the database.
func (ac *APICreate) Save(ctx context.Context) (*API, error) {
	var (
		err  error
		node *API
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *APICreate) SaveX(ctx context.Context) *API {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ac *APICreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := ac.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New("ent: missing required field \"path\"")}
	}
	if _, ok := ac.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New("ent: missing required field \"level\"")}
	}
	if _, ok := ac.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New("ent: missing required field \"hash\"")}
	}
	if _, ok := ac.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New("ent: missing required field \"component\"")}
	}
	if _, ok := ac.mutation.IsSub(); !ok {
		return &ValidationError{Name: "isSub", err: errors.New("ent: missing required field \"isSub\"")}
	}
	if _, ok := ac.mutation.HasSub(); !ok {
		return &ValidationError{Name: "hasSub", err: errors.New("ent: missing required field \"hasSub\"")}
	}
	if _, ok := ac.mutation.Single(); !ok {
		return &ValidationError{Name: "single", err: errors.New("ent: missing required field \"single\"")}
	}
	if _, ok := ac.mutation.ParentId(); !ok {
		return &ValidationError{Name: "parentId", err: errors.New("ent: missing required field \"parentId\"")}
	}
	if _, ok := ac.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := ac.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (ac *APICreate) sqlSave(ctx context.Context) (*API, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ac *APICreate) createSpec() (*API, *sqlgraph.CreateSpec) {
	var (
		_node = &API{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: api.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: api.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := ac.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldLevel,
		})
		_node.Level = value
	}
	if value, ok := ac.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldHash,
		})
		_node.Hash = value
	}
	if value, ok := ac.mutation.Redirect(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldRedirect,
		})
		_node.Redirect = value
	}
	if value, ok := ac.mutation.Component(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldComponent,
		})
		_node.Component = value
	}
	if value, ok := ac.mutation.IsSub(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldIsSub,
		})
		_node.IsSub = value
	}
	if value, ok := ac.mutation.HasSub(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldHasSub,
		})
		_node.HasSub = value
	}
	if value, ok := ac.mutation.Single(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldSingle,
		})
		_node.Single = value
	}
	if value, ok := ac.mutation.ParentId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldParentId,
		})
		_node.ParentId = value
	}
	if value, ok := ac.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// APICreateBulk is the builder for creating a bulk of API entities.
type APICreateBulk struct {
	config
	builders []*APICreate
}

// Save creates the API entities in the database.
func (acb *APICreateBulk) Save(ctx context.Context) ([]*API, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*API, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APIMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (acb *APICreateBulk) SaveX(ctx context.Context) []*API {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

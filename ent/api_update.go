// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/api"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// APIUpdate is the builder for updating API entities.
type APIUpdate struct {
	config
	hooks      []Hook
	mutation   *APIMutation
	predicates []predicate.API
}

// Where adds a new predicate for the builder.
func (au *APIUpdate) Where(ps ...predicate.API) *APIUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetName sets the name field.
func (au *APIUpdate) SetName(s string) *APIUpdate {
	au.mutation.SetName(s)
	return au
}

// SetPath sets the path field.
func (au *APIUpdate) SetPath(s string) *APIUpdate {
	au.mutation.SetPath(s)
	return au
}

// SetLevel sets the level field.
func (au *APIUpdate) SetLevel(i int) *APIUpdate {
	au.mutation.ResetLevel()
	au.mutation.SetLevel(i)
	return au
}

// AddLevel adds i to level.
func (au *APIUpdate) AddLevel(i int) *APIUpdate {
	au.mutation.AddLevel(i)
	return au
}

// SetHash sets the hash field.
func (au *APIUpdate) SetHash(s string) *APIUpdate {
	au.mutation.SetHash(s)
	return au
}

// SetRedirect sets the redirect field.
func (au *APIUpdate) SetRedirect(s string) *APIUpdate {
	au.mutation.SetRedirect(s)
	return au
}

// SetNillableRedirect sets the redirect field if the given value is not nil.
func (au *APIUpdate) SetNillableRedirect(s *string) *APIUpdate {
	if s != nil {
		au.SetRedirect(*s)
	}
	return au
}

// ClearRedirect clears the value of redirect.
func (au *APIUpdate) ClearRedirect() *APIUpdate {
	au.mutation.ClearRedirect()
	return au
}

// SetComponent sets the component field.
func (au *APIUpdate) SetComponent(s string) *APIUpdate {
	au.mutation.SetComponent(s)
	return au
}

// SetIsSub sets the isSub field.
func (au *APIUpdate) SetIsSub(b bool) *APIUpdate {
	au.mutation.SetIsSub(b)
	return au
}

// SetHasSub sets the hasSub field.
func (au *APIUpdate) SetHasSub(b bool) *APIUpdate {
	au.mutation.SetHasSub(b)
	return au
}

// SetSingle sets the single field.
func (au *APIUpdate) SetSingle(b bool) *APIUpdate {
	au.mutation.SetSingle(b)
	return au
}

// SetParentId sets the parentId field.
func (au *APIUpdate) SetParentId(i int64) *APIUpdate {
	au.mutation.ResetParentId()
	au.mutation.SetParentId(i)
	return au
}

// AddParentId adds i to parentId.
func (au *APIUpdate) AddParentId(i int64) *APIUpdate {
	au.mutation.AddParentId(i)
	return au
}

// SetTenantId sets the tenantId field.
func (au *APIUpdate) SetTenantId(s string) *APIUpdate {
	au.mutation.SetTenantId(s)
	return au
}

// SetCreatedAt sets the createdAt field.
func (au *APIUpdate) SetCreatedAt(i int64) *APIUpdate {
	au.mutation.ResetCreatedAt()
	au.mutation.SetCreatedAt(i)
	return au
}

// AddCreatedAt adds i to createdAt.
func (au *APIUpdate) AddCreatedAt(i int64) *APIUpdate {
	au.mutation.AddCreatedAt(i)
	return au
}

// SetUpdatedAt sets the updatedAt field.
func (au *APIUpdate) SetUpdatedAt(i int64) *APIUpdate {
	au.mutation.ResetUpdatedAt()
	au.mutation.SetUpdatedAt(i)
	return au
}

// AddUpdatedAt adds i to updatedAt.
func (au *APIUpdate) AddUpdatedAt(i int64) *APIUpdate {
	au.mutation.AddUpdatedAt(i)
	return au
}

// SetDeleted sets the deleted field.
func (au *APIUpdate) SetDeleted(i int) *APIUpdate {
	au.mutation.ResetDeleted()
	au.mutation.SetDeleted(i)
	return au
}

// AddDeleted adds i to deleted.
func (au *APIUpdate) AddDeleted(i int) *APIUpdate {
	au.mutation.AddDeleted(i)
	return au
}

// Mutation returns the APIMutation object of the builder.
func (au *APIUpdate) Mutation() *APIMutation {
	return au.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *APIUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *APIUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *APIUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *APIUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *APIUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   api.Table,
			Columns: api.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: api.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldName,
		})
	}
	if value, ok := au.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPath,
		})
	}
	if value, ok := au.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldLevel,
		})
	}
	if value, ok := au.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldLevel,
		})
	}
	if value, ok := au.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldHash,
		})
	}
	if value, ok := au.mutation.Redirect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldRedirect,
		})
	}
	if au.mutation.RedirectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldRedirect,
		})
	}
	if value, ok := au.mutation.Component(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldComponent,
		})
	}
	if value, ok := au.mutation.IsSub(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldIsSub,
		})
	}
	if value, ok := au.mutation.HasSub(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldHasSub,
		})
	}
	if value, ok := au.mutation.Single(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldSingle,
		})
	}
	if value, ok := au.mutation.ParentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldParentId,
		})
	}
	if value, ok := au.mutation.AddedParentId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldParentId,
		})
	}
	if value, ok := au.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldTenantId,
		})
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldDeleted,
		})
	}
	if value, ok := au.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// APIUpdateOne is the builder for updating a single API entity.
type APIUpdateOne struct {
	config
	hooks    []Hook
	mutation *APIMutation
}

// SetName sets the name field.
func (auo *APIUpdateOne) SetName(s string) *APIUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetPath sets the path field.
func (auo *APIUpdateOne) SetPath(s string) *APIUpdateOne {
	auo.mutation.SetPath(s)
	return auo
}

// SetLevel sets the level field.
func (auo *APIUpdateOne) SetLevel(i int) *APIUpdateOne {
	auo.mutation.ResetLevel()
	auo.mutation.SetLevel(i)
	return auo
}

// AddLevel adds i to level.
func (auo *APIUpdateOne) AddLevel(i int) *APIUpdateOne {
	auo.mutation.AddLevel(i)
	return auo
}

// SetHash sets the hash field.
func (auo *APIUpdateOne) SetHash(s string) *APIUpdateOne {
	auo.mutation.SetHash(s)
	return auo
}

// SetRedirect sets the redirect field.
func (auo *APIUpdateOne) SetRedirect(s string) *APIUpdateOne {
	auo.mutation.SetRedirect(s)
	return auo
}

// SetNillableRedirect sets the redirect field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableRedirect(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetRedirect(*s)
	}
	return auo
}

// ClearRedirect clears the value of redirect.
func (auo *APIUpdateOne) ClearRedirect() *APIUpdateOne {
	auo.mutation.ClearRedirect()
	return auo
}

// SetComponent sets the component field.
func (auo *APIUpdateOne) SetComponent(s string) *APIUpdateOne {
	auo.mutation.SetComponent(s)
	return auo
}

// SetIsSub sets the isSub field.
func (auo *APIUpdateOne) SetIsSub(b bool) *APIUpdateOne {
	auo.mutation.SetIsSub(b)
	return auo
}

// SetHasSub sets the hasSub field.
func (auo *APIUpdateOne) SetHasSub(b bool) *APIUpdateOne {
	auo.mutation.SetHasSub(b)
	return auo
}

// SetSingle sets the single field.
func (auo *APIUpdateOne) SetSingle(b bool) *APIUpdateOne {
	auo.mutation.SetSingle(b)
	return auo
}

// SetParentId sets the parentId field.
func (auo *APIUpdateOne) SetParentId(i int64) *APIUpdateOne {
	auo.mutation.ResetParentId()
	auo.mutation.SetParentId(i)
	return auo
}

// AddParentId adds i to parentId.
func (auo *APIUpdateOne) AddParentId(i int64) *APIUpdateOne {
	auo.mutation.AddParentId(i)
	return auo
}

// SetTenantId sets the tenantId field.
func (auo *APIUpdateOne) SetTenantId(s string) *APIUpdateOne {
	auo.mutation.SetTenantId(s)
	return auo
}

// SetCreatedAt sets the createdAt field.
func (auo *APIUpdateOne) SetCreatedAt(i int64) *APIUpdateOne {
	auo.mutation.ResetCreatedAt()
	auo.mutation.SetCreatedAt(i)
	return auo
}

// AddCreatedAt adds i to createdAt.
func (auo *APIUpdateOne) AddCreatedAt(i int64) *APIUpdateOne {
	auo.mutation.AddCreatedAt(i)
	return auo
}

// SetUpdatedAt sets the updatedAt field.
func (auo *APIUpdateOne) SetUpdatedAt(i int64) *APIUpdateOne {
	auo.mutation.ResetUpdatedAt()
	auo.mutation.SetUpdatedAt(i)
	return auo
}

// AddUpdatedAt adds i to updatedAt.
func (auo *APIUpdateOne) AddUpdatedAt(i int64) *APIUpdateOne {
	auo.mutation.AddUpdatedAt(i)
	return auo
}

// SetDeleted sets the deleted field.
func (auo *APIUpdateOne) SetDeleted(i int) *APIUpdateOne {
	auo.mutation.ResetDeleted()
	auo.mutation.SetDeleted(i)
	return auo
}

// AddDeleted adds i to deleted.
func (auo *APIUpdateOne) AddDeleted(i int) *APIUpdateOne {
	auo.mutation.AddDeleted(i)
	return auo
}

// Mutation returns the APIMutation object of the builder.
func (auo *APIUpdateOne) Mutation() *APIMutation {
	return auo.mutation
}

// Save executes the query and returns the updated entity.
func (auo *APIUpdateOne) Save(ctx context.Context) (*API, error) {
	var (
		err  error
		node *API
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *APIUpdateOne) SaveX(ctx context.Context) *API {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *APIUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *APIUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *APIUpdateOne) sqlSave(ctx context.Context) (_node *API, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   api.Table,
			Columns: api.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: api.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing API.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldName,
		})
	}
	if value, ok := auo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPath,
		})
	}
	if value, ok := auo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldLevel,
		})
	}
	if value, ok := auo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldLevel,
		})
	}
	if value, ok := auo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldHash,
		})
	}
	if value, ok := auo.mutation.Redirect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldRedirect,
		})
	}
	if auo.mutation.RedirectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: api.FieldRedirect,
		})
	}
	if value, ok := auo.mutation.Component(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldComponent,
		})
	}
	if value, ok := auo.mutation.IsSub(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldIsSub,
		})
	}
	if value, ok := auo.mutation.HasSub(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldHasSub,
		})
	}
	if value, ok := auo.mutation.Single(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: api.FieldSingle,
		})
	}
	if value, ok := auo.mutation.ParentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldParentId,
		})
	}
	if value, ok := auo.mutation.AddedParentId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldParentId,
		})
	}
	if value, ok := auo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldTenantId,
		})
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldDeleted,
		})
	}
	if value, ok := auo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: api.FieldDeleted,
		})
	}
	_node = &API{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/birthsurrounding"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// BirthSurrounding is the model entity for the BirthSurrounding schema.
type BirthSurrounding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 记录时间戳
	RecordTime int64 `json:"recordTime,omitempty"`
	// 记录人ID
	UserId int64 `json:"userId,omitempty"`
	// 记录人
	UserName string `json:"userName,omitempty"`
	// 温度（℃）
	Temperature int64 `json:"temperature,omitempty"`
	// 相对湿度（%）
	Humidity int64 `json:"humidity,omitempty"`
	// 呼吸速率ID
	BreathRateId int64 `json:"breathRateId,omitempty"`
	// 呼吸速率
	BreathRateName string `json:"breathRateName,omitempty"`
	// 风速
	WindSpeed int64 `json:"windSpeed,omitempty"`
	// 风向ID
	WindDirectionId int `json:"windDirectionId,omitempty"`
	// 风向
	WindDirection string `json:"windDirection,omitempty"`
	// 位置改变（次）
	LocationChanges int64 `json:"locationChanges,omitempty"`
	// 被毛状况ID
	HairStateId int `json:"hairStateId,omitempty"`
	// 被毛状况
	HairStateName string `json:"hairStateName,omitempty"`
	// 泥深（cm）
	SoilDepth int `json:"soilDepth,omitempty"`
	// 日照时间（h）
	SunExposure int `json:"sunExposure,omitempty"`
	// 行走距离（m）
	WalkDistance int `json:"walkDistance,omitempty"`
	// 是否淋雨，1: 是，0: 否
	Rained int `json:"rained,omitempty"`
	// 温湿指数(temperature and humidity index)
	ThIndex float32 `json:"thIndex,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BirthSurrounding) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case birthsurrounding.FieldThIndex:
			values[i] = new(sql.NullFloat64)
		case birthsurrounding.FieldID, birthsurrounding.FieldFarmId, birthsurrounding.FieldRecordTime, birthsurrounding.FieldUserId, birthsurrounding.FieldTemperature, birthsurrounding.FieldHumidity, birthsurrounding.FieldBreathRateId, birthsurrounding.FieldWindSpeed, birthsurrounding.FieldWindDirectionId, birthsurrounding.FieldLocationChanges, birthsurrounding.FieldHairStateId, birthsurrounding.FieldSoilDepth, birthsurrounding.FieldSunExposure, birthsurrounding.FieldWalkDistance, birthsurrounding.FieldRained, birthsurrounding.FieldTenantId, birthsurrounding.FieldCreatedAt, birthsurrounding.FieldUpdatedAt, birthsurrounding.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case birthsurrounding.FieldName, birthsurrounding.FieldFarmName, birthsurrounding.FieldUserName, birthsurrounding.FieldBreathRateName, birthsurrounding.FieldWindDirection, birthsurrounding.FieldHairStateName, birthsurrounding.FieldTenantName, birthsurrounding.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BirthSurrounding", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BirthSurrounding fields.
func (bs *BirthSurrounding) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case birthsurrounding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bs.ID = int(value.Int64)
		case birthsurrounding.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bs.Name = value.String
			}
		case birthsurrounding.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				bs.FarmId = value.Int64
			}
		case birthsurrounding.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				bs.FarmName = value.String
			}
		case birthsurrounding.FieldRecordTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recordTime", values[i])
			} else if value.Valid {
				bs.RecordTime = value.Int64
			}
		case birthsurrounding.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				bs.UserId = value.Int64
			}
		case birthsurrounding.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				bs.UserName = value.String
			}
		case birthsurrounding.FieldTemperature:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field temperature", values[i])
			} else if value.Valid {
				bs.Temperature = value.Int64
			}
		case birthsurrounding.FieldHumidity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field humidity", values[i])
			} else if value.Valid {
				bs.Humidity = value.Int64
			}
		case birthsurrounding.FieldBreathRateId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field breathRateId", values[i])
			} else if value.Valid {
				bs.BreathRateId = value.Int64
			}
		case birthsurrounding.FieldBreathRateName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field breathRateName", values[i])
			} else if value.Valid {
				bs.BreathRateName = value.String
			}
		case birthsurrounding.FieldWindSpeed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field windSpeed", values[i])
			} else if value.Valid {
				bs.WindSpeed = value.Int64
			}
		case birthsurrounding.FieldWindDirectionId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field windDirectionId", values[i])
			} else if value.Valid {
				bs.WindDirectionId = int(value.Int64)
			}
		case birthsurrounding.FieldWindDirection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field windDirection", values[i])
			} else if value.Valid {
				bs.WindDirection = value.String
			}
		case birthsurrounding.FieldLocationChanges:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field locationChanges", values[i])
			} else if value.Valid {
				bs.LocationChanges = value.Int64
			}
		case birthsurrounding.FieldHairStateId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hairStateId", values[i])
			} else if value.Valid {
				bs.HairStateId = int(value.Int64)
			}
		case birthsurrounding.FieldHairStateName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hairStateName", values[i])
			} else if value.Valid {
				bs.HairStateName = value.String
			}
		case birthsurrounding.FieldSoilDepth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field soilDepth", values[i])
			} else if value.Valid {
				bs.SoilDepth = int(value.Int64)
			}
		case birthsurrounding.FieldSunExposure:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sunExposure", values[i])
			} else if value.Valid {
				bs.SunExposure = int(value.Int64)
			}
		case birthsurrounding.FieldWalkDistance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field walkDistance", values[i])
			} else if value.Valid {
				bs.WalkDistance = int(value.Int64)
			}
		case birthsurrounding.FieldRained:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rained", values[i])
			} else if value.Valid {
				bs.Rained = int(value.Int64)
			}
		case birthsurrounding.FieldThIndex:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field thIndex", values[i])
			} else if value.Valid {
				bs.ThIndex = float32(value.Float64)
			}
		case birthsurrounding.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				bs.TenantId = value.Int64
			}
		case birthsurrounding.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				bs.TenantName = value.String
			}
		case birthsurrounding.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				bs.Remarks = value.String
			}
		case birthsurrounding.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				bs.CreatedAt = value.Int64
			}
		case birthsurrounding.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				bs.UpdatedAt = value.Int64
			}
		case birthsurrounding.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				bs.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BirthSurrounding.
// Note that you need to call BirthSurrounding.Unwrap() before calling this method if this BirthSurrounding
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BirthSurrounding) Update() *BirthSurroundingUpdateOne {
	return (&BirthSurroundingClient{config: bs.config}).UpdateOne(bs)
}

// Unwrap unwraps the BirthSurrounding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BirthSurrounding) Unwrap() *BirthSurrounding {
	_tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BirthSurrounding is not a transactional entity")
	}
	bs.config.driver = _tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BirthSurrounding) String() string {
	var builder strings.Builder
	builder.WriteString("BirthSurrounding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bs.ID))
	builder.WriteString("name=")
	builder.WriteString(bs.Name)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", bs.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(bs.FarmName)
	builder.WriteString(", ")
	builder.WriteString("recordTime=")
	builder.WriteString(fmt.Sprintf("%v", bs.RecordTime))
	builder.WriteString(", ")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", bs.UserId))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(bs.UserName)
	builder.WriteString(", ")
	builder.WriteString("temperature=")
	builder.WriteString(fmt.Sprintf("%v", bs.Temperature))
	builder.WriteString(", ")
	builder.WriteString("humidity=")
	builder.WriteString(fmt.Sprintf("%v", bs.Humidity))
	builder.WriteString(", ")
	builder.WriteString("breathRateId=")
	builder.WriteString(fmt.Sprintf("%v", bs.BreathRateId))
	builder.WriteString(", ")
	builder.WriteString("breathRateName=")
	builder.WriteString(bs.BreathRateName)
	builder.WriteString(", ")
	builder.WriteString("windSpeed=")
	builder.WriteString(fmt.Sprintf("%v", bs.WindSpeed))
	builder.WriteString(", ")
	builder.WriteString("windDirectionId=")
	builder.WriteString(fmt.Sprintf("%v", bs.WindDirectionId))
	builder.WriteString(", ")
	builder.WriteString("windDirection=")
	builder.WriteString(bs.WindDirection)
	builder.WriteString(", ")
	builder.WriteString("locationChanges=")
	builder.WriteString(fmt.Sprintf("%v", bs.LocationChanges))
	builder.WriteString(", ")
	builder.WriteString("hairStateId=")
	builder.WriteString(fmt.Sprintf("%v", bs.HairStateId))
	builder.WriteString(", ")
	builder.WriteString("hairStateName=")
	builder.WriteString(bs.HairStateName)
	builder.WriteString(", ")
	builder.WriteString("soilDepth=")
	builder.WriteString(fmt.Sprintf("%v", bs.SoilDepth))
	builder.WriteString(", ")
	builder.WriteString("sunExposure=")
	builder.WriteString(fmt.Sprintf("%v", bs.SunExposure))
	builder.WriteString(", ")
	builder.WriteString("walkDistance=")
	builder.WriteString(fmt.Sprintf("%v", bs.WalkDistance))
	builder.WriteString(", ")
	builder.WriteString("rained=")
	builder.WriteString(fmt.Sprintf("%v", bs.Rained))
	builder.WriteString(", ")
	builder.WriteString("thIndex=")
	builder.WriteString(fmt.Sprintf("%v", bs.ThIndex))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", bs.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(bs.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(bs.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", bs.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", bs.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", bs.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// BirthSurroundings is a parsable slice of BirthSurrounding.
type BirthSurroundings []*BirthSurrounding

func (bs BirthSurroundings) config(cfg config) {
	for _i := range bs {
		bs[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/birthsurrounding"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// BirthSurrounding is the model entity for the BirthSurrounding schema.
type BirthSurrounding struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// RecordTime holds the value of the "recordTime" field.
	RecordTime int64 `json:"recordTime,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int64 `json:"userId,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// Temperature holds the value of the "temperature" field.
	Temperature int64 `json:"temperature,omitempty"`
	// Humidity holds the value of the "humidity" field.
	Humidity int64 `json:"humidity,omitempty"`
	// BreathRateId holds the value of the "breathRateId" field.
	BreathRateId int64 `json:"breathRateId,omitempty"`
	// BreathRateName holds the value of the "breathRateName" field.
	BreathRateName string `json:"breathRateName,omitempty"`
	// WindSpeed holds the value of the "windSpeed" field.
	WindSpeed int64 `json:"windSpeed,omitempty"`
	// WindDirectionId holds the value of the "windDirectionId" field.
	WindDirectionId int `json:"windDirectionId,omitempty"`
	// WindDirection holds the value of the "windDirection" field.
	WindDirection string `json:"windDirection,omitempty"`
	// LocationChanges holds the value of the "locationChanges" field.
	LocationChanges int64 `json:"locationChanges,omitempty"`
	// HairStateId holds the value of the "hairStateId" field.
	HairStateId int `json:"hairStateId,omitempty"`
	// HairStateName holds the value of the "hairStateName" field.
	HairStateName string `json:"hairStateName,omitempty"`
	// SoilDepth holds the value of the "soilDepth" field.
	SoilDepth int `json:"soilDepth,omitempty"`
	// SunExposure holds the value of the "sunExposure" field.
	SunExposure int `json:"sunExposure,omitempty"`
	// WalkDistance holds the value of the "walkDistance" field.
	WalkDistance int `json:"walkDistance,omitempty"`
	// Rained holds the value of the "rained" field.
	Rained int `json:"rained,omitempty"`
	// ThIndex holds the value of the "thIndex" field.
	ThIndex float32 `json:"thIndex,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BirthSurrounding) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // name
		&sql.NullInt64{},   // farmId
		&sql.NullString{},  // farmName
		&sql.NullInt64{},   // recordTime
		&sql.NullInt64{},   // userId
		&sql.NullString{},  // userName
		&sql.NullInt64{},   // temperature
		&sql.NullInt64{},   // humidity
		&sql.NullInt64{},   // breathRateId
		&sql.NullString{},  // breathRateName
		&sql.NullInt64{},   // windSpeed
		&sql.NullInt64{},   // windDirectionId
		&sql.NullString{},  // windDirection
		&sql.NullInt64{},   // locationChanges
		&sql.NullInt64{},   // hairStateId
		&sql.NullString{},  // hairStateName
		&sql.NullInt64{},   // soilDepth
		&sql.NullInt64{},   // sunExposure
		&sql.NullInt64{},   // walkDistance
		&sql.NullInt64{},   // rained
		&sql.NullFloat64{}, // thIndex
		&sql.NullInt64{},   // tenantId
		&sql.NullString{},  // tenantName
		&sql.NullString{},  // remarks
		&sql.NullInt64{},   // createdAt
		&sql.NullInt64{},   // updatedAt
		&sql.NullInt64{},   // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BirthSurrounding fields.
func (bs *BirthSurrounding) assignValues(values ...interface{}) error {
	if m, n := len(values), len(birthsurrounding.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	bs.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		bs.Name = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[1])
	} else if value.Valid {
		bs.FarmId = value.Int64
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[2])
	} else if value.Valid {
		bs.FarmName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field recordTime", values[3])
	} else if value.Valid {
		bs.RecordTime = value.Int64
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field userId", values[4])
	} else if value.Valid {
		bs.UserId = value.Int64
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[5])
	} else if value.Valid {
		bs.UserName = value.String
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field temperature", values[6])
	} else if value.Valid {
		bs.Temperature = value.Int64
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field humidity", values[7])
	} else if value.Valid {
		bs.Humidity = value.Int64
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field breathRateId", values[8])
	} else if value.Valid {
		bs.BreathRateId = value.Int64
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field breathRateName", values[9])
	} else if value.Valid {
		bs.BreathRateName = value.String
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field windSpeed", values[10])
	} else if value.Valid {
		bs.WindSpeed = value.Int64
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field windDirectionId", values[11])
	} else if value.Valid {
		bs.WindDirectionId = int(value.Int64)
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field windDirection", values[12])
	} else if value.Valid {
		bs.WindDirection = value.String
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field locationChanges", values[13])
	} else if value.Valid {
		bs.LocationChanges = value.Int64
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field hairStateId", values[14])
	} else if value.Valid {
		bs.HairStateId = int(value.Int64)
	}
	if value, ok := values[15].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field hairStateName", values[15])
	} else if value.Valid {
		bs.HairStateName = value.String
	}
	if value, ok := values[16].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field soilDepth", values[16])
	} else if value.Valid {
		bs.SoilDepth = int(value.Int64)
	}
	if value, ok := values[17].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field sunExposure", values[17])
	} else if value.Valid {
		bs.SunExposure = int(value.Int64)
	}
	if value, ok := values[18].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field walkDistance", values[18])
	} else if value.Valid {
		bs.WalkDistance = int(value.Int64)
	}
	if value, ok := values[19].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field rained", values[19])
	} else if value.Valid {
		bs.Rained = int(value.Int64)
	}
	if value, ok := values[20].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field thIndex", values[20])
	} else if value.Valid {
		bs.ThIndex = float32(value.Float64)
	}
	if value, ok := values[21].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[21])
	} else if value.Valid {
		bs.TenantId = value.Int64
	}
	if value, ok := values[22].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[22])
	} else if value.Valid {
		bs.TenantName = value.String
	}
	if value, ok := values[23].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[23])
	} else if value.Valid {
		bs.Remarks = value.String
	}
	if value, ok := values[24].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[24])
	} else if value.Valid {
		bs.CreatedAt = value.Int64
	}
	if value, ok := values[25].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[25])
	} else if value.Valid {
		bs.UpdatedAt = value.Int64
	}
	if value, ok := values[26].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[26])
	} else if value.Valid {
		bs.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this BirthSurrounding.
// Note that, you need to call BirthSurrounding.Unwrap() before calling this method, if this BirthSurrounding
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BirthSurrounding) Update() *BirthSurroundingUpdateOne {
	return (&BirthSurroundingClient{config: bs.config}).UpdateOne(bs)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (bs *BirthSurrounding) Unwrap() *BirthSurrounding {
	tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BirthSurrounding is not a transactional entity")
	}
	bs.config.driver = tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BirthSurrounding) String() string {
	var builder strings.Builder
	builder.WriteString("BirthSurrounding(")
	builder.WriteString(fmt.Sprintf("id=%v", bs.ID))
	builder.WriteString(", name=")
	builder.WriteString(bs.Name)
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", bs.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(bs.FarmName)
	builder.WriteString(", recordTime=")
	builder.WriteString(fmt.Sprintf("%v", bs.RecordTime))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", bs.UserId))
	builder.WriteString(", userName=")
	builder.WriteString(bs.UserName)
	builder.WriteString(", temperature=")
	builder.WriteString(fmt.Sprintf("%v", bs.Temperature))
	builder.WriteString(", humidity=")
	builder.WriteString(fmt.Sprintf("%v", bs.Humidity))
	builder.WriteString(", breathRateId=")
	builder.WriteString(fmt.Sprintf("%v", bs.BreathRateId))
	builder.WriteString(", breathRateName=")
	builder.WriteString(bs.BreathRateName)
	builder.WriteString(", windSpeed=")
	builder.WriteString(fmt.Sprintf("%v", bs.WindSpeed))
	builder.WriteString(", windDirectionId=")
	builder.WriteString(fmt.Sprintf("%v", bs.WindDirectionId))
	builder.WriteString(", windDirection=")
	builder.WriteString(bs.WindDirection)
	builder.WriteString(", locationChanges=")
	builder.WriteString(fmt.Sprintf("%v", bs.LocationChanges))
	builder.WriteString(", hairStateId=")
	builder.WriteString(fmt.Sprintf("%v", bs.HairStateId))
	builder.WriteString(", hairStateName=")
	builder.WriteString(bs.HairStateName)
	builder.WriteString(", soilDepth=")
	builder.WriteString(fmt.Sprintf("%v", bs.SoilDepth))
	builder.WriteString(", sunExposure=")
	builder.WriteString(fmt.Sprintf("%v", bs.SunExposure))
	builder.WriteString(", walkDistance=")
	builder.WriteString(fmt.Sprintf("%v", bs.WalkDistance))
	builder.WriteString(", rained=")
	builder.WriteString(fmt.Sprintf("%v", bs.Rained))
	builder.WriteString(", thIndex=")
	builder.WriteString(fmt.Sprintf("%v", bs.ThIndex))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", bs.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(bs.TenantName)
	builder.WriteString(", remarks=")
	builder.WriteString(bs.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", bs.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", bs.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", bs.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// BirthSurroundings is a parsable slice of BirthSurrounding.
type BirthSurroundings []*BirthSurrounding

func (bs BirthSurroundings) config(cfg config) {
	for _i := range bs {
		bs[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package birthsurrounding

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// FarmId applies equality check predicate on the "farmId" field. It's identical to FarmIdEQ.
func FarmId(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmName applies equality check predicate on the "farmName" field. It's identical to FarmNameEQ.
func FarmName(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// RecordTime applies equality check predicate on the "recordTime" field. It's identical to RecordTimeEQ.
func RecordTime(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordTime), v))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// Temperature applies equality check predicate on the "temperature" field. It's identical to TemperatureEQ.
func Temperature(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// Humidity applies equality check predicate on the "humidity" field. It's identical to HumidityEQ.
func Humidity(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHumidity), v))
	})
}

// BreathRateId applies equality check predicate on the "breathRateId" field. It's identical to BreathRateIdEQ.
func BreathRateId(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreathRateId), v))
	})
}

// BreathRateName applies equality check predicate on the "breathRateName" field. It's identical to BreathRateNameEQ.
func BreathRateName(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreathRateName), v))
	})
}

// WindSpeed applies equality check predicate on the "windSpeed" field. It's identical to WindSpeedEQ.
func WindSpeed(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindSpeed), v))
	})
}

// WindDirectionId applies equality check predicate on the "windDirectionId" field. It's identical to WindDirectionIdEQ.
func WindDirectionId(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindDirectionId), v))
	})
}

// WindDirection applies equality check predicate on the "windDirection" field. It's identical to WindDirectionEQ.
func WindDirection(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindDirection), v))
	})
}

// LocationChanges applies equality check predicate on the "locationChanges" field. It's identical to LocationChangesEQ.
func LocationChanges(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationChanges), v))
	})
}

// HairStateId applies equality check predicate on the "hairStateId" field. It's identical to HairStateIdEQ.
func HairStateId(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairStateId), v))
	})
}

// HairStateName applies equality check predicate on the "hairStateName" field. It's identical to HairStateNameEQ.
func HairStateName(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairStateName), v))
	})
}

// SoilDepth applies equality check predicate on the "soilDepth" field. It's identical to SoilDepthEQ.
func SoilDepth(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSoilDepth), v))
	})
}

// SunExposure applies equality check predicate on the "sunExposure" field. It's identical to SunExposureEQ.
func SunExposure(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSunExposure), v))
	})
}

// WalkDistance applies equality check predicate on the "walkDistance" field. It's identical to WalkDistanceEQ.
func WalkDistance(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalkDistance), v))
	})
}

// Rained applies equality check predicate on the "rained" field. It's identical to RainedEQ.
func Rained(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRained), v))
	})
}

// ThIndex applies equality check predicate on the "thIndex" field. It's identical to ThIndexEQ.
func ThIndex(v float32) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThIndex), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// FarmIdEQ applies the EQ predicate on the "farmId" field.
func FarmIdEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmIdNEQ applies the NEQ predicate on the "farmId" field.
func FarmIdNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmId), v))
	})
}

// FarmIdIn applies the In predicate on the "farmId" field.
func FarmIdIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFarmId), v...))
	})
}

// FarmIdNotIn applies the NotIn predicate on the "farmId" field.
func FarmIdNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFarmId), v...))
	})
}

// FarmIdGT applies the GT predicate on the "farmId" field.
func FarmIdGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmId), v))
	})
}

// FarmIdGTE applies the GTE predicate on the "farmId" field.
func FarmIdGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmId), v))
	})
}

// FarmIdLT applies the LT predicate on the "farmId" field.
func FarmIdLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmId), v))
	})
}

// FarmIdLTE applies the LTE predicate on the "farmId" field.
func FarmIdLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmId), v))
	})
}

// FarmNameEQ applies the EQ predicate on the "farmName" field.
func FarmNameEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// FarmNameNEQ applies the NEQ predicate on the "farmName" field.
func FarmNameNEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmName), v))
	})
}

// FarmNameIn applies the In predicate on the "farmName" field.
func FarmNameIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFarmName), v...))
	})
}

// FarmNameNotIn applies the NotIn predicate on the "farmName" field.
func FarmNameNotIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFarmName), v...))
	})
}

// FarmNameGT applies the GT predicate on the "farmName" field.
func FarmNameGT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmName), v))
	})
}

// FarmNameGTE applies the GTE predicate on the "farmName" field.
func FarmNameGTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmName), v))
	})
}

// FarmNameLT applies the LT predicate on the "farmName" field.
func FarmNameLT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmName), v))
	})
}

// FarmNameLTE applies the LTE predicate on the "farmName" field.
func FarmNameLTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmName), v))
	})
}

// FarmNameContains applies the Contains predicate on the "farmName" field.
func FarmNameContains(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFarmName), v))
	})
}

// FarmNameHasPrefix applies the HasPrefix predicate on the "farmName" field.
func FarmNameHasPrefix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFarmName), v))
	})
}

// FarmNameHasSuffix applies the HasSuffix predicate on the "farmName" field.
func FarmNameHasSuffix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFarmName), v))
	})
}

// FarmNameEqualFold applies the EqualFold predicate on the "farmName" field.
func FarmNameEqualFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFarmName), v))
	})
}

// FarmNameContainsFold applies the ContainsFold predicate on the "farmName" field.
func FarmNameContainsFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFarmName), v))
	})
}

// RecordTimeEQ applies the EQ predicate on the "recordTime" field.
func RecordTimeEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordTime), v))
	})
}

// RecordTimeNEQ applies the NEQ predicate on the "recordTime" field.
func RecordTimeNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecordTime), v))
	})
}

// RecordTimeIn applies the In predicate on the "recordTime" field.
func RecordTimeIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecordTime), v...))
	})
}

// RecordTimeNotIn applies the NotIn predicate on the "recordTime" field.
func RecordTimeNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecordTime), v...))
	})
}

// RecordTimeGT applies the GT predicate on the "recordTime" field.
func RecordTimeGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecordTime), v))
	})
}

// RecordTimeGTE applies the GTE predicate on the "recordTime" field.
func RecordTimeGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecordTime), v))
	})
}

// RecordTimeLT applies the LT predicate on the "recordTime" field.
func RecordTimeLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecordTime), v))
	})
}

// RecordTimeLTE applies the LTE predicate on the "recordTime" field.
func RecordTimeLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecordTime), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// TemperatureEQ applies the EQ predicate on the "temperature" field.
func TemperatureEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// TemperatureNEQ applies the NEQ predicate on the "temperature" field.
func TemperatureNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemperature), v))
	})
}

// TemperatureIn applies the In predicate on the "temperature" field.
func TemperatureIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemperature), v...))
	})
}

// TemperatureNotIn applies the NotIn predicate on the "temperature" field.
func TemperatureNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemperature), v...))
	})
}

// TemperatureGT applies the GT predicate on the "temperature" field.
func TemperatureGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemperature), v))
	})
}

// TemperatureGTE applies the GTE predicate on the "temperature" field.
func TemperatureGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemperature), v))
	})
}

// TemperatureLT applies the LT predicate on the "temperature" field.
func TemperatureLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemperature), v))
	})
}

// TemperatureLTE applies the LTE predicate on the "temperature" field.
func TemperatureLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemperature), v))
	})
}

// HumidityEQ applies the EQ predicate on the "humidity" field.
func HumidityEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHumidity), v))
	})
}

// HumidityNEQ applies the NEQ predicate on the "humidity" field.
func HumidityNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHumidity), v))
	})
}

// HumidityIn applies the In predicate on the "humidity" field.
func HumidityIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHumidity), v...))
	})
}

// HumidityNotIn applies the NotIn predicate on the "humidity" field.
func HumidityNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHumidity), v...))
	})
}

// HumidityGT applies the GT predicate on the "humidity" field.
func HumidityGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHumidity), v))
	})
}

// HumidityGTE applies the GTE predicate on the "humidity" field.
func HumidityGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHumidity), v))
	})
}

// HumidityLT applies the LT predicate on the "humidity" field.
func HumidityLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHumidity), v))
	})
}

// HumidityLTE applies the LTE predicate on the "humidity" field.
func HumidityLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHumidity), v))
	})
}

// BreathRateIdEQ applies the EQ predicate on the "breathRateId" field.
func BreathRateIdEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreathRateId), v))
	})
}

// BreathRateIdNEQ applies the NEQ predicate on the "breathRateId" field.
func BreathRateIdNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreathRateId), v))
	})
}

// BreathRateIdIn applies the In predicate on the "breathRateId" field.
func BreathRateIdIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBreathRateId), v...))
	})
}

// BreathRateIdNotIn applies the NotIn predicate on the "breathRateId" field.
func BreathRateIdNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBreathRateId), v...))
	})
}

// BreathRateIdGT applies the GT predicate on the "breathRateId" field.
func BreathRateIdGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreathRateId), v))
	})
}

// BreathRateIdGTE applies the GTE predicate on the "breathRateId" field.
func BreathRateIdGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreathRateId), v))
	})
}

// BreathRateIdLT applies the LT predicate on the "breathRateId" field.
func BreathRateIdLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreathRateId), v))
	})
}

// BreathRateIdLTE applies the LTE predicate on the "breathRateId" field.
func BreathRateIdLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreathRateId), v))
	})
}

// BreathRateNameEQ applies the EQ predicate on the "breathRateName" field.
func BreathRateNameEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameNEQ applies the NEQ predicate on the "breathRateName" field.
func BreathRateNameNEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameIn applies the In predicate on the "breathRateName" field.
func BreathRateNameIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBreathRateName), v...))
	})
}

// BreathRateNameNotIn applies the NotIn predicate on the "breathRateName" field.
func BreathRateNameNotIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBreathRateName), v...))
	})
}

// BreathRateNameGT applies the GT predicate on the "breathRateName" field.
func BreathRateNameGT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameGTE applies the GTE predicate on the "breathRateName" field.
func BreathRateNameGTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameLT applies the LT predicate on the "breathRateName" field.
func BreathRateNameLT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameLTE applies the LTE predicate on the "breathRateName" field.
func BreathRateNameLTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameContains applies the Contains predicate on the "breathRateName" field.
func BreathRateNameContains(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameHasPrefix applies the HasPrefix predicate on the "breathRateName" field.
func BreathRateNameHasPrefix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameHasSuffix applies the HasSuffix predicate on the "breathRateName" field.
func BreathRateNameHasSuffix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameEqualFold applies the EqualFold predicate on the "breathRateName" field.
func BreathRateNameEqualFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBreathRateName), v))
	})
}

// BreathRateNameContainsFold applies the ContainsFold predicate on the "breathRateName" field.
func BreathRateNameContainsFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBreathRateName), v))
	})
}

// WindSpeedEQ applies the EQ predicate on the "windSpeed" field.
func WindSpeedEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedNEQ applies the NEQ predicate on the "windSpeed" field.
func WindSpeedNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedIn applies the In predicate on the "windSpeed" field.
func WindSpeedIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWindSpeed), v...))
	})
}

// WindSpeedNotIn applies the NotIn predicate on the "windSpeed" field.
func WindSpeedNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWindSpeed), v...))
	})
}

// WindSpeedGT applies the GT predicate on the "windSpeed" field.
func WindSpeedGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedGTE applies the GTE predicate on the "windSpeed" field.
func WindSpeedGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedLT applies the LT predicate on the "windSpeed" field.
func WindSpeedLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWindSpeed), v))
	})
}

// WindSpeedLTE applies the LTE predicate on the "windSpeed" field.
func WindSpeedLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWindSpeed), v))
	})
}

// WindDirectionIdEQ applies the EQ predicate on the "windDirectionId" field.
func WindDirectionIdEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindDirectionId), v))
	})
}

// WindDirectionIdNEQ applies the NEQ predicate on the "windDirectionId" field.
func WindDirectionIdNEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWindDirectionId), v))
	})
}

// WindDirectionIdIn applies the In predicate on the "windDirectionId" field.
func WindDirectionIdIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWindDirectionId), v...))
	})
}

// WindDirectionIdNotIn applies the NotIn predicate on the "windDirectionId" field.
func WindDirectionIdNotIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWindDirectionId), v...))
	})
}

// WindDirectionIdGT applies the GT predicate on the "windDirectionId" field.
func WindDirectionIdGT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWindDirectionId), v))
	})
}

// WindDirectionIdGTE applies the GTE predicate on the "windDirectionId" field.
func WindDirectionIdGTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWindDirectionId), v))
	})
}

// WindDirectionIdLT applies the LT predicate on the "windDirectionId" field.
func WindDirectionIdLT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWindDirectionId), v))
	})
}

// WindDirectionIdLTE applies the LTE predicate on the "windDirectionId" field.
func WindDirectionIdLTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWindDirectionId), v))
	})
}

// WindDirectionEQ applies the EQ predicate on the "windDirection" field.
func WindDirectionEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWindDirection), v))
	})
}

// WindDirectionNEQ applies the NEQ predicate on the "windDirection" field.
func WindDirectionNEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWindDirection), v))
	})
}

// WindDirectionIn applies the In predicate on the "windDirection" field.
func WindDirectionIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWindDirection), v...))
	})
}

// WindDirectionNotIn applies the NotIn predicate on the "windDirection" field.
func WindDirectionNotIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWindDirection), v...))
	})
}

// WindDirectionGT applies the GT predicate on the "windDirection" field.
func WindDirectionGT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWindDirection), v))
	})
}

// WindDirectionGTE applies the GTE predicate on the "windDirection" field.
func WindDirectionGTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWindDirection), v))
	})
}

// WindDirectionLT applies the LT predicate on the "windDirection" field.
func WindDirectionLT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWindDirection), v))
	})
}

// WindDirectionLTE applies the LTE predicate on the "windDirection" field.
func WindDirectionLTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWindDirection), v))
	})
}

// WindDirectionContains applies the Contains predicate on the "windDirection" field.
func WindDirectionContains(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWindDirection), v))
	})
}

// WindDirectionHasPrefix applies the HasPrefix predicate on the "windDirection" field.
func WindDirectionHasPrefix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWindDirection), v))
	})
}

// WindDirectionHasSuffix applies the HasSuffix predicate on the "windDirection" field.
func WindDirectionHasSuffix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWindDirection), v))
	})
}

// WindDirectionEqualFold applies the EqualFold predicate on the "windDirection" field.
func WindDirectionEqualFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWindDirection), v))
	})
}

// WindDirectionContainsFold applies the ContainsFold predicate on the "windDirection" field.
func WindDirectionContainsFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWindDirection), v))
	})
}

// LocationChangesEQ applies the EQ predicate on the "locationChanges" field.
func LocationChangesEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationChanges), v))
	})
}

// LocationChangesNEQ applies the NEQ predicate on the "locationChanges" field.
func LocationChangesNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocationChanges), v))
	})
}

// LocationChangesIn applies the In predicate on the "locationChanges" field.
func LocationChangesIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocationChanges), v...))
	})
}

// LocationChangesNotIn applies the NotIn predicate on the "locationChanges" field.
func LocationChangesNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocationChanges), v...))
	})
}

// LocationChangesGT applies the GT predicate on the "locationChanges" field.
func LocationChangesGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocationChanges), v))
	})
}

// LocationChangesGTE applies the GTE predicate on the "locationChanges" field.
func LocationChangesGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocationChanges), v))
	})
}

// LocationChangesLT applies the LT predicate on the "locationChanges" field.
func LocationChangesLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocationChanges), v))
	})
}

// LocationChangesLTE applies the LTE predicate on the "locationChanges" field.
func LocationChangesLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocationChanges), v))
	})
}

// HairStateIdEQ applies the EQ predicate on the "hairStateId" field.
func HairStateIdEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairStateId), v))
	})
}

// HairStateIdNEQ applies the NEQ predicate on the "hairStateId" field.
func HairStateIdNEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHairStateId), v))
	})
}

// HairStateIdIn applies the In predicate on the "hairStateId" field.
func HairStateIdIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHairStateId), v...))
	})
}

// HairStateIdNotIn applies the NotIn predicate on the "hairStateId" field.
func HairStateIdNotIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHairStateId), v...))
	})
}

// HairStateIdGT applies the GT predicate on the "hairStateId" field.
func HairStateIdGT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHairStateId), v))
	})
}

// HairStateIdGTE applies the GTE predicate on the "hairStateId" field.
func HairStateIdGTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHairStateId), v))
	})
}

// HairStateIdLT applies the LT predicate on the "hairStateId" field.
func HairStateIdLT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHairStateId), v))
	})
}

// HairStateIdLTE applies the LTE predicate on the "hairStateId" field.
func HairStateIdLTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHairStateId), v))
	})
}

// HairStateNameEQ applies the EQ predicate on the "hairStateName" field.
func HairStateNameEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairStateName), v))
	})
}

// HairStateNameNEQ applies the NEQ predicate on the "hairStateName" field.
func HairStateNameNEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHairStateName), v))
	})
}

// HairStateNameIn applies the In predicate on the "hairStateName" field.
func HairStateNameIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHairStateName), v...))
	})
}

// HairStateNameNotIn applies the NotIn predicate on the "hairStateName" field.
func HairStateNameNotIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHairStateName), v...))
	})
}

// HairStateNameGT applies the GT predicate on the "hairStateName" field.
func HairStateNameGT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHairStateName), v))
	})
}

// HairStateNameGTE applies the GTE predicate on the "hairStateName" field.
func HairStateNameGTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHairStateName), v))
	})
}

// HairStateNameLT applies the LT predicate on the "hairStateName" field.
func HairStateNameLT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHairStateName), v))
	})
}

// HairStateNameLTE applies the LTE predicate on the "hairStateName" field.
func HairStateNameLTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHairStateName), v))
	})
}

// HairStateNameContains applies the Contains predicate on the "hairStateName" field.
func HairStateNameContains(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHairStateName), v))
	})
}

// HairStateNameHasPrefix applies the HasPrefix predicate on the "hairStateName" field.
func HairStateNameHasPrefix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHairStateName), v))
	})
}

// HairStateNameHasSuffix applies the HasSuffix predicate on the "hairStateName" field.
func HairStateNameHasSuffix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHairStateName), v))
	})
}

// HairStateNameEqualFold applies the EqualFold predicate on the "hairStateName" field.
func HairStateNameEqualFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHairStateName), v))
	})
}

// HairStateNameContainsFold applies the ContainsFold predicate on the "hairStateName" field.
func HairStateNameContainsFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHairStateName), v))
	})
}

// SoilDepthEQ applies the EQ predicate on the "soilDepth" field.
func SoilDepthEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSoilDepth), v))
	})
}

// SoilDepthNEQ applies the NEQ predicate on the "soilDepth" field.
func SoilDepthNEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSoilDepth), v))
	})
}

// SoilDepthIn applies the In predicate on the "soilDepth" field.
func SoilDepthIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSoilDepth), v...))
	})
}

// SoilDepthNotIn applies the NotIn predicate on the "soilDepth" field.
func SoilDepthNotIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSoilDepth), v...))
	})
}

// SoilDepthGT applies the GT predicate on the "soilDepth" field.
func SoilDepthGT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSoilDepth), v))
	})
}

// SoilDepthGTE applies the GTE predicate on the "soilDepth" field.
func SoilDepthGTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSoilDepth), v))
	})
}

// SoilDepthLT applies the LT predicate on the "soilDepth" field.
func SoilDepthLT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSoilDepth), v))
	})
}

// SoilDepthLTE applies the LTE predicate on the "soilDepth" field.
func SoilDepthLTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSoilDepth), v))
	})
}

// SunExposureEQ applies the EQ predicate on the "sunExposure" field.
func SunExposureEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSunExposure), v))
	})
}

// SunExposureNEQ applies the NEQ predicate on the "sunExposure" field.
func SunExposureNEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSunExposure), v))
	})
}

// SunExposureIn applies the In predicate on the "sunExposure" field.
func SunExposureIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSunExposure), v...))
	})
}

// SunExposureNotIn applies the NotIn predicate on the "sunExposure" field.
func SunExposureNotIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSunExposure), v...))
	})
}

// SunExposureGT applies the GT predicate on the "sunExposure" field.
func SunExposureGT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSunExposure), v))
	})
}

// SunExposureGTE applies the GTE predicate on the "sunExposure" field.
func SunExposureGTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSunExposure), v))
	})
}

// SunExposureLT applies the LT predicate on the "sunExposure" field.
func SunExposureLT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSunExposure), v))
	})
}

// SunExposureLTE applies the LTE predicate on the "sunExposure" field.
func SunExposureLTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSunExposure), v))
	})
}

// WalkDistanceEQ applies the EQ predicate on the "walkDistance" field.
func WalkDistanceEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalkDistance), v))
	})
}

// WalkDistanceNEQ applies the NEQ predicate on the "walkDistance" field.
func WalkDistanceNEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalkDistance), v))
	})
}

// WalkDistanceIn applies the In predicate on the "walkDistance" field.
func WalkDistanceIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalkDistance), v...))
	})
}

// WalkDistanceNotIn applies the NotIn predicate on the "walkDistance" field.
func WalkDistanceNotIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalkDistance), v...))
	})
}

// WalkDistanceGT applies the GT predicate on the "walkDistance" field.
func WalkDistanceGT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalkDistance), v))
	})
}

// WalkDistanceGTE applies the GTE predicate on the "walkDistance" field.
func WalkDistanceGTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalkDistance), v))
	})
}

// WalkDistanceLT applies the LT predicate on the "walkDistance" field.
func WalkDistanceLT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalkDistance), v))
	})
}

// WalkDistanceLTE applies the LTE predicate on the "walkDistance" field.
func WalkDistanceLTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalkDistance), v))
	})
}

// RainedEQ applies the EQ predicate on the "rained" field.
func RainedEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRained), v))
	})
}

// RainedNEQ applies the NEQ predicate on the "rained" field.
func RainedNEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRained), v))
	})
}

// RainedIn applies the In predicate on the "rained" field.
func RainedIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRained), v...))
	})
}

// RainedNotIn applies the NotIn predicate on the "rained" field.
func RainedNotIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRained), v...))
	})
}

// RainedGT applies the GT predicate on the "rained" field.
func RainedGT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRained), v))
	})
}

// RainedGTE applies the GTE predicate on the "rained" field.
func RainedGTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRained), v))
	})
}

// RainedLT applies the LT predicate on the "rained" field.
func RainedLT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRained), v))
	})
}

// RainedLTE applies the LTE predicate on the "rained" field.
func RainedLTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRained), v))
	})
}

// ThIndexEQ applies the EQ predicate on the "thIndex" field.
func ThIndexEQ(v float32) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThIndex), v))
	})
}

// ThIndexNEQ applies the NEQ predicate on the "thIndex" field.
func ThIndexNEQ(v float32) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThIndex), v))
	})
}

// ThIndexIn applies the In predicate on the "thIndex" field.
func ThIndexIn(vs ...float32) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThIndex), v...))
	})
}

// ThIndexNotIn applies the NotIn predicate on the "thIndex" field.
func ThIndexNotIn(vs ...float32) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThIndex), v...))
	})
}

// ThIndexGT applies the GT predicate on the "thIndex" field.
func ThIndexGT(v float32) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThIndex), v))
	})
}

// ThIndexGTE applies the GTE predicate on the "thIndex" field.
func ThIndexGTE(v float32) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThIndex), v))
	})
}

// ThIndexLT applies the LT predicate on the "thIndex" field.
func ThIndexLT(v float32) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThIndex), v))
	})
}

// ThIndexLTE applies the LTE predicate on the "thIndex" field.
func ThIndexLTE(v float32) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThIndex), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.BirthSurrounding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.BirthSurrounding) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.BirthSurrounding) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BirthSurrounding) predicate.BirthSurrounding {
	return predicate.BirthSurrounding(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/birthsurrounding"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// BirthSurroundingCreate is the builder for creating a BirthSurrounding entity.
type BirthSurroundingCreate struct {
	config
	mutation *BirthSurroundingMutation
	hooks    []Hook
}

// SetName sets the name field.
func (bsc *BirthSurroundingCreate) SetName(s string) *BirthSurroundingCreate {
	bsc.mutation.SetName(s)
	return bsc
}

// SetFarmId sets the farmId field.
func (bsc *BirthSurroundingCreate) SetFarmId(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetFarmId(i)
	return bsc
}

// SetFarmName sets the farmName field.
func (bsc *BirthSurroundingCreate) SetFarmName(s string) *BirthSurroundingCreate {
	bsc.mutation.SetFarmName(s)
	return bsc
}

// SetRecordTime sets the recordTime field.
func (bsc *BirthSurroundingCreate) SetRecordTime(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetRecordTime(i)
	return bsc
}

// SetUserId sets the userId field.
func (bsc *BirthSurroundingCreate) SetUserId(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetUserId(i)
	return bsc
}

// SetUserName sets the userName field.
func (bsc *BirthSurroundingCreate) SetUserName(s string) *BirthSurroundingCreate {
	bsc.mutation.SetUserName(s)
	return bsc
}

// SetTemperature sets the temperature field.
func (bsc *BirthSurroundingCreate) SetTemperature(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetTemperature(i)
	return bsc
}

// SetHumidity sets the humidity field.
func (bsc *BirthSurroundingCreate) SetHumidity(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetHumidity(i)
	return bsc
}

// SetBreathRateId sets the breathRateId field.
func (bsc *BirthSurroundingCreate) SetBreathRateId(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetBreathRateId(i)
	return bsc
}

// SetBreathRateName sets the breathRateName field.
func (bsc *BirthSurroundingCreate) SetBreathRateName(s string) *BirthSurroundingCreate {
	bsc.mutation.SetBreathRateName(s)
	return bsc
}

// SetWindSpeed sets the windSpeed field.
func (bsc *BirthSurroundingCreate) SetWindSpeed(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetWindSpeed(i)
	return bsc
}

// SetWindDirectionId sets the windDirectionId field.
func (bsc *BirthSurroundingCreate) SetWindDirectionId(i int) *BirthSurroundingCreate {
	bsc.mutation.SetWindDirectionId(i)
	return bsc
}

// SetWindDirection sets the windDirection field.
func (bsc *BirthSurroundingCreate) SetWindDirection(s string) *BirthSurroundingCreate {
	bsc.mutation.SetWindDirection(s)
	return bsc
}

// SetLocationChanges sets the locationChanges field.
func (bsc *BirthSurroundingCreate) SetLocationChanges(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetLocationChanges(i)
	return bsc
}

// SetHairStateId sets the hairStateId field.
func (bsc *BirthSurroundingCreate) SetHairStateId(i int) *BirthSurroundingCreate {
	bsc.mutation.SetHairStateId(i)
	return bsc
}

// SetHairStateName sets the hairStateName field.
func (bsc *BirthSurroundingCreate) SetHairStateName(s string) *BirthSurroundingCreate {
	bsc.mutation.SetHairStateName(s)
	return bsc
}

// SetSoilDepth sets the soilDepth field.
func (bsc *BirthSurroundingCreate) SetSoilDepth(i int) *BirthSurroundingCreate {
	bsc.mutation.SetSoilDepth(i)
	return bsc
}

// SetSunExposure sets the sunExposure field.
func (bsc *BirthSurroundingCreate) SetSunExposure(i int) *BirthSurroundingCreate {
	bsc.mutation.SetSunExposure(i)
	return bsc
}

// SetWalkDistance sets the walkDistance field.
func (bsc *BirthSurroundingCreate) SetWalkDistance(i int) *BirthSurroundingCreate {
	bsc.mutation.SetWalkDistance(i)
	return bsc
}

// SetRained sets the rained field.
func (bsc *BirthSurroundingCreate) SetRained(i int) *BirthSurroundingCreate {
	bsc.mutation.SetRained(i)
	return bsc
}

// SetNillableRained sets the rained field if the given value is not nil.
func (bsc *BirthSurroundingCreate) SetNillableRained(i *int) *BirthSurroundingCreate {
	if i != nil {
		bsc.SetRained(*i)
	}
	return bsc
}

// SetThIndex sets the thIndex field.
func (bsc *BirthSurroundingCreate) SetThIndex(f float32) *BirthSurroundingCreate {
	bsc.mutation.SetThIndex(f)
	return bsc
}

// SetTenantId sets the tenantId field.
func (bsc *BirthSurroundingCreate) SetTenantId(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetTenantId(i)
	return bsc
}

// SetTenantName sets the tenantName field.
func (bsc *BirthSurroundingCreate) SetTenantName(s string) *BirthSurroundingCreate {
	bsc.mutation.SetTenantName(s)
	return bsc
}

// SetRemarks sets the remarks field.
func (bsc *BirthSurroundingCreate) SetRemarks(s string) *BirthSurroundingCreate {
	bsc.mutation.SetRemarks(s)
	return bsc
}

// SetCreatedAt sets the createdAt field.
func (bsc *BirthSurroundingCreate) SetCreatedAt(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetCreatedAt(i)
	return bsc
}

// SetUpdatedAt sets the updatedAt field.
func (bsc *BirthSurroundingCreate) SetUpdatedAt(i int64) *BirthSurroundingCreate {
	bsc.mutation.SetUpdatedAt(i)
	return bsc
}

// SetDeleted sets the deleted field.
func (bsc *BirthSurroundingCreate) SetDeleted(i int) *BirthSurroundingCreate {
	bsc.mutation.SetDeleted(i)
	return bsc
}

// Mutation returns the BirthSurroundingMutation object of the builder.
func (bsc *BirthSurroundingCreate) Mutation() *BirthSurroundingMutation {
	return bsc.mutation
}

// Save creates the BirthSurrounding in the database.
func (bsc *BirthSurroundingCreate) Save(ctx context.Context) (*BirthSurrounding, error) {
	var (
		err  error
		node *BirthSurrounding
	)
	bsc.defaults()
	if len(bsc.hooks) == 0 {
		if err = bsc.check(); err != nil {
			return nil, err
		}
		node, err = bsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BirthSurroundingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bsc.check(); err != nil {
				return nil, err
			}
			bsc.mutation = mutation
			node, err = bsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bsc.hooks) - 1; i >= 0; i-- {
			mut = bsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BirthSurroundingCreate) SaveX(ctx context.Context) *BirthSurrounding {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (bsc *BirthSurroundingCreate) defaults() {
	if _, ok := bsc.mutation.Rained(); !ok {
		v := birthsurrounding.DefaultRained
		bsc.mutation.SetRained(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BirthSurroundingCreate) check() error {
	if _, ok := bsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := bsc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New("ent: missing required field \"farmId\"")}
	}
	if _, ok := bsc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New("ent: missing required field \"farmName\"")}
	}
	if v, ok := bsc.mutation.FarmName(); ok {
		if err := birthsurrounding.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf("ent: validator failed for field \"farmName\": %w", err)}
		}
	}
	if _, ok := bsc.mutation.RecordTime(); !ok {
		return &ValidationError{Name: "recordTime", err: errors.New("ent: missing required field \"recordTime\"")}
	}
	if _, ok := bsc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New("ent: missing required field \"userId\"")}
	}
	if _, ok := bsc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := bsc.mutation.Temperature(); !ok {
		return &ValidationError{Name: "temperature", err: errors.New("ent: missing required field \"temperature\"")}
	}
	if _, ok := bsc.mutation.Humidity(); !ok {
		return &ValidationError{Name: "humidity", err: errors.New("ent: missing required field \"humidity\"")}
	}
	if _, ok := bsc.mutation.BreathRateId(); !ok {
		return &ValidationError{Name: "breathRateId", err: errors.New("ent: missing required field \"breathRateId\"")}
	}
	if _, ok := bsc.mutation.BreathRateName(); !ok {
		return &ValidationError{Name: "breathRateName", err: errors.New("ent: missing required field \"breathRateName\"")}
	}
	if _, ok := bsc.mutation.WindSpeed(); !ok {
		return &ValidationError{Name: "windSpeed", err: errors.New("ent: missing required field \"windSpeed\"")}
	}
	if _, ok := bsc.mutation.WindDirectionId(); !ok {
		return &ValidationError{Name: "windDirectionId", err: errors.New("ent: missing required field \"windDirectionId\"")}
	}
	if _, ok := bsc.mutation.WindDirection(); !ok {
		return &ValidationError{Name: "windDirection", err: errors.New("ent: missing required field \"windDirection\"")}
	}
	if _, ok := bsc.mutation.LocationChanges(); !ok {
		return &ValidationError{Name: "locationChanges", err: errors.New("ent: missing required field \"locationChanges\"")}
	}
	if _, ok := bsc.mutation.HairStateId(); !ok {
		return &ValidationError{Name: "hairStateId", err: errors.New("ent: missing required field \"hairStateId\"")}
	}
	if _, ok := bsc.mutation.HairStateName(); !ok {
		return &ValidationError{Name: "hairStateName", err: errors.New("ent: missing required field \"hairStateName\"")}
	}
	if _, ok := bsc.mutation.SoilDepth(); !ok {
		return &ValidationError{Name: "soilDepth", err: errors.New("ent: missing required field \"soilDepth\"")}
	}
	if _, ok := bsc.mutation.SunExposure(); !ok {
		return &ValidationError{Name: "sunExposure", err: errors.New("ent: missing required field \"sunExposure\"")}
	}
	if _, ok := bsc.mutation.WalkDistance(); !ok {
		return &ValidationError{Name: "walkDistance", err: errors.New("ent: missing required field \"walkDistance\"")}
	}
	if _, ok := bsc.mutation.Rained(); !ok {
		return &ValidationError{Name: "rained", err: errors.New("ent: missing required field \"rained\"")}
	}
	if _, ok := bsc.mutation.ThIndex(); !ok {
		return &ValidationError{Name: "thIndex", err: errors.New("ent: missing required field \"thIndex\"")}
	}
	if _, ok := bsc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := bsc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := bsc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := bsc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (bsc *BirthSurroundingCreate) sqlSave(ctx context.Context) (*BirthSurrounding, error) {
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (bsc *BirthSurroundingCreate) createSpec() (*BirthSurrounding, *sqlgraph.CreateSpec) {
	var (
		_node = &BirthSurrounding{config: bsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: birthsurrounding.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: birthsurrounding.FieldID,
			},
		}
	)
	if value, ok := bsc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bsc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := bsc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := bsc.mutation.RecordTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldRecordTime,
		})
		_node.RecordTime = value
	}
	if value, ok := bsc.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUserId,
		})
		_node.UserId = value
	}
	if value, ok := bsc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := bsc.mutation.Temperature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldTemperature,
		})
		_node.Temperature = value
	}
	if value, ok := bsc.mutation.Humidity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldHumidity,
		})
		_node.Humidity = value
	}
	if value, ok := bsc.mutation.BreathRateId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldBreathRateId,
		})
		_node.BreathRateId = value
	}
	if value, ok := bsc.mutation.BreathRateName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldBreathRateName,
		})
		_node.BreathRateName = value
	}
	if value, ok := bsc.mutation.WindSpeed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldWindSpeed,
		})
		_node.WindSpeed = value
	}
	if value, ok := bsc.mutation.WindDirectionId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWindDirectionId,
		})
		_node.WindDirectionId = value
	}
	if value, ok := bsc.mutation.WindDirection(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldWindDirection,
		})
		_node.WindDirection = value
	}
	if value, ok := bsc.mutation.LocationChanges(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldLocationChanges,
		})
		_node.LocationChanges = value
	}
	if value, ok := bsc.mutation.HairStateId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldHairStateId,
		})
		_node.HairStateId = value
	}
	if value, ok := bsc.mutation.HairStateName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldHairStateName,
		})
		_node.HairStateName = value
	}
	if value, ok := bsc.mutation.SoilDepth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSoilDepth,
		})
		_node.SoilDepth = value
	}
	if value, ok := bsc.mutation.SunExposure(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSunExposure,
		})
		_node.SunExposure = value
	}
	if value, ok := bsc.mutation.WalkDistance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWalkDistance,
		})
		_node.WalkDistance = value
	}
	if value, ok := bsc.mutation.Rained(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldRained,
		})
		_node.Rained = value
	}
	if value, ok := bsc.mutation.ThIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: birthsurrounding.FieldThIndex,
		})
		_node.ThIndex = value
	}
	if value, ok := bsc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := bsc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := bsc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := bsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := bsc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// BirthSurroundingCreateBulk is the builder for creating a bulk of BirthSurrounding entities.
type BirthSurroundingCreateBulk struct {
	config
	builders []*BirthSurroundingCreate
}

// Save creates the BirthSurrounding entities in the database.
func (bscb *BirthSurroundingCreateBulk) Save(ctx context.Context) ([]*BirthSurrounding, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BirthSurrounding, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BirthSurroundingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (bscb *BirthSurroundingCreateBulk) SaveX(ctx context.Context) []*BirthSurrounding {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/birthsurrounding"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// BirthSurroundingQuery is the builder for querying BirthSurrounding entities.
type BirthSurroundingQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.BirthSurrounding
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (bsq *BirthSurroundingQuery) Where(ps ...predicate.BirthSurrounding) *BirthSurroundingQuery {
	bsq.predicates = append(bsq.predicates, ps...)
	return bsq
}

// Limit adds a limit step to the query.
func (bsq *BirthSurroundingQuery) Limit(limit int) *BirthSurroundingQuery {
	bsq.limit = &limit
	return bsq
}

// Offset adds an offset step to the query.
func (bsq *BirthSurroundingQuery) Offset(offset int) *BirthSurroundingQuery {
	bsq.offset = &offset
	return bsq
}

// Order adds an order step to the query.
func (bsq *BirthSurroundingQuery) Order(o ...OrderFunc) *BirthSurroundingQuery {
	bsq.order = append(bsq.order, o...)
	return bsq
}

// First returns the first BirthSurrounding entity in the query. Returns *NotFoundError when no birthsurrounding was found.
func (bsq *BirthSurroundingQuery) First(ctx context.Context) (*BirthSurrounding, error) {
	nodes, err := bsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{birthsurrounding.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bsq *BirthSurroundingQuery) FirstX(ctx context.Context) *BirthSurrounding {
	node, err := bsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BirthSurrounding id in the query. Returns *NotFoundError when no id was found.
func (bsq *BirthSurroundingQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = bsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{birthsurrounding.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (bsq *BirthSurroundingQuery) FirstXID(ctx context.Context) int64 {
	id, err := bsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only BirthSurrounding entity in the query, returns an error if not exactly one entity was returned.
func (bsq *BirthSurroundingQuery) Only(ctx context.Context) (*BirthSurrounding, error) {
	nodes, err := bsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{birthsurrounding.Label}
	default:
		return nil, &NotSingularError{birthsurrounding.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bsq *BirthSurroundingQuery) OnlyX(ctx context.Context) *BirthSurrounding {
	node, err := bsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only BirthSurrounding id in the query, returns an error if not exactly one id was returned.
func (bsq *BirthSurroundingQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = bsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{birthsurrounding.Label}
	default:
		err = &NotSingularError{birthsurrounding.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bsq *BirthSurroundingQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := bsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BirthSurroundings.
func (bsq *BirthSurroundingQuery) All(ctx context.Context) ([]*BirthSurrounding, error) {
	if err := bsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return bsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (bsq *BirthSurroundingQuery) AllX(ctx context.Context) []*BirthSurrounding {
	nodes, err := bsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BirthSurrounding ids.
func (bsq *BirthSurroundingQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := bsq.Select(birthsurrounding.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bsq *BirthSurroundingQuery) IDsX(ctx context.Context) []int64 {
	ids, err := bsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bsq *BirthSurroundingQuery) Count(ctx context.Context) (int, error) {
	if err := bsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return bsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (bsq *BirthSurroundingQuery) CountX(ctx context.Context) int {
	count, err := bsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bsq *BirthSurroundingQuery) Exist(ctx context.Context) (bool, error) {
	if err := bsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return bsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (bsq *BirthSurroundingQuery) ExistX(ctx context.Context) bool {
	exist, err := bsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bsq *BirthSurroundingQuery) Clone() *BirthSurroundingQuery {
	return &BirthSurroundingQuery{
		config:     bsq.config,
		limit:      bsq.limit,
		offset:     bsq.offset,
		order:      append([]OrderFunc{}, bsq.order...),
		unique:     append([]string{}, bsq.unique...),
		predicates: append([]predicate.BirthSurrounding{}, bsq.predicates...),
		// clone intermediate query.
		sql:  bsq.sql.Clone(),
		path: bsq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BirthSurrounding.Query().
//		GroupBy(birthsurrounding.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (bsq *BirthSurroundingQuery) GroupBy(field string, fields ...string) *BirthSurroundingGroupBy {
	group := &BirthSurroundingGroupBy{config: bsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bsq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.BirthSurrounding.Query().
//		Select(birthsurrounding.FieldName).
//		Scan(ctx, &v)
//
func (bsq *BirthSurroundingQuery) Select(field string, fields ...string) *BirthSurroundingSelect {
	selector := &BirthSurroundingSelect{config: bsq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bsq.sqlQuery(), nil
	}
	return selector
}

func (bsq *BirthSurroundingQuery) prepareQuery(ctx context.Context) error {
	if bsq.path != nil {
		prev, err := bsq.path(ctx)
		if err != nil {
			return err
		}
		bsq.sql = prev
	}
	return nil
}

func (bsq *BirthSurroundingQuery) sqlAll(ctx context.Context) ([]*BirthSurrounding, error) {
	var (
		nodes = []*BirthSurrounding{}
		_spec = bsq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &BirthSurrounding{config: bsq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, bsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (bsq *BirthSurroundingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bsq.querySpec()
	return sqlgraph.CountNodes(ctx, bsq.driver, _spec)
}

func (bsq *BirthSurroundingQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := bsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (bsq *BirthSurroundingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   birthsurrounding.Table,
			Columns: birthsurrounding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: birthsurrounding.FieldID,
			},
		},
		From:   bsq.sql,
		Unique: true,
	}
	if ps := bsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, birthsurrounding.ValidColumn)
			}
		}
	}
	return _spec
}

func (bsq *BirthSurroundingQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(bsq.driver.Dialect())
	t1 := builder.Table(birthsurrounding.Table)
	selector := builder.Select(t1.Columns(birthsurrounding.Columns...)...).From(t1)
	if bsq.sql != nil {
		selector = bsq.sql
		selector.Select(selector.Columns(birthsurrounding.Columns...)...)
	}
	for _, p := range bsq.predicates {
		p(selector)
	}
	for _, p := range bsq.order {
		p(selector, birthsurrounding.ValidColumn)
	}
	if offset := bsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BirthSurroundingGroupBy is the builder for group-by BirthSurrounding entities.
type BirthSurroundingGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bsgb *BirthSurroundingGroupBy) Aggregate(fns ...AggregateFunc) *BirthSurroundingGroupBy {
	bsgb.fns = append(bsgb.fns, fns...)
	return bsgb
}

// Scan applies the group-by query and scan the result into the given value.
func (bsgb *BirthSurroundingGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := bsgb.path(ctx)
	if err != nil {
		return err
	}
	bsgb.sql = query
	return bsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bsgb *BirthSurroundingGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := bsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (bsgb *BirthSurroundingGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(bsgb.fields) > 1 {
		return nil, errors.New("ent: BirthSurroundingGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := bsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bsgb *BirthSurroundingGroupBy) StringsX(ctx context.Context) []string {
	v, err := bsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (bsgb *BirthSurroundingGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{birthsurrounding.Label}
	default:
		err = fmt.Errorf("ent: BirthSurroundingGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bsgb *BirthSurroundingGroupBy) StringX(ctx context.Context) string {
	v, err := bsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (bsgb *BirthSurroundingGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(bsgb.fields) > 1 {
		return nil, errors.New("ent: BirthSurroundingGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := bsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bsgb *BirthSurroundingGroupBy) IntsX(ctx context.Context) []int {
	v, err := bsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (bsgb *BirthSurroundingGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{birthsurrounding.Label}
	default:
		err = fmt.Errorf("ent: BirthSurroundingGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bsgb *BirthSurroundingGroupBy) IntX(ctx context.Context) int {
	v, err := bsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (bsgb *BirthSurroundingGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(bsgb.fields) > 1 {
		return nil, errors.New("ent: BirthSurroundingGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := bsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bsgb *BirthSurroundingGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := bsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (bsgb *BirthSurroundingGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{birthsurrounding.Label}
	default:
		err = fmt.Errorf("ent: BirthSurroundingGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bsgb *BirthSurroundingGroupBy) Float64X(ctx context.Context) float64 {
	v, err := bsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (bsgb *BirthSurroundingGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(bsgb.fields) > 1 {
		return nil, errors.New("ent: BirthSurroundingGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := bsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bsgb *BirthSurroundingGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := bsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (bsgb *BirthSurroundingGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{birthsurrounding.Label}
	default:
		err = fmt.Errorf("ent: BirthSurroundingGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bsgb *BirthSurroundingGroupBy) BoolX(ctx context.Context) bool {
	v, err := bsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bsgb *BirthSurroundingGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bsgb.fields {
		if !birthsurrounding.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bsgb *BirthSurroundingGroupBy) sqlQuery() *sql.Selector {
	selector := bsgb.sql
	columns := make([]string, 0, len(bsgb.fields)+len(bsgb.fns))
	columns = append(columns, bsgb.fields...)
	for _, fn := range bsgb.fns {
		columns = append(columns, fn(selector, birthsurrounding.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(bsgb.fields...)
}

// BirthSurroundingSelect is the builder for select fields of BirthSurrounding entities.
type BirthSurroundingSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (bss *BirthSurroundingSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := bss.path(ctx)
	if err != nil {
		return err
	}
	bss.sql = query
	return bss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bss *BirthSurroundingSelect) ScanX(ctx context.Context, v interface{}) {
	if err := bss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (bss *BirthSurroundingSelect) Strings(ctx context.Context) ([]string, error) {
	if len(bss.fields) > 1 {
		return nil, errors.New("ent: BirthSurroundingSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := bss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bss *BirthSurroundingSelect) StringsX(ctx context.Context) []string {
	v, err := bss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (bss *BirthSurroundingSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{birthsurrounding.Label}
	default:
		err = fmt.Errorf("ent: BirthSurroundingSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bss *BirthSurroundingSelect) StringX(ctx context.Context) string {
	v, err := bss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (bss *BirthSurroundingSelect) Ints(ctx context.Context) ([]int, error) {
	if len(bss.fields) > 1 {
		return nil, errors.New("ent: BirthSurroundingSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := bss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bss *BirthSurroundingSelect) IntsX(ctx context.Context) []int {
	v, err := bss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (bss *BirthSurroundingSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{birthsurrounding.Label}
	default:
		err = fmt.Errorf("ent: BirthSurroundingSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bss *BirthSurroundingSelect) IntX(ctx context.Context) int {
	v, err := bss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (bss *BirthSurroundingSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(bss.fields) > 1 {
		return nil, errors.New("ent: BirthSurroundingSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := bss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bss *BirthSurroundingSelect) Float64sX(ctx context.Context) []float64 {
	v, err := bss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (bss *BirthSurroundingSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{birthsurrounding.Label}
	default:
		err = fmt.Errorf("ent: BirthSurroundingSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bss *BirthSurroundingSelect) Float64X(ctx context.Context) float64 {
	v, err := bss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (bss *BirthSurroundingSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(bss.fields) > 1 {
		return nil, errors.New("ent: BirthSurroundingSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := bss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bss *BirthSurroundingSelect) BoolsX(ctx context.Context) []bool {
	v, err := bss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (bss *BirthSurroundingSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{birthsurrounding.Label}
	default:
		err = fmt.Errorf("ent: BirthSurroundingSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bss *BirthSurroundingSelect) BoolX(ctx context.Context) bool {
	v, err := bss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bss *BirthSurroundingSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bss.fields {
		if !birthsurrounding.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := bss.sqlQuery().Query()
	if err := bss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bss *BirthSurroundingSelect) sqlQuery() sql.Querier {
	selector := bss.sql
	selector.Select(selector.Columns(bss.fields...)...)
	return selector
}

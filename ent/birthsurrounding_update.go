// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/birthsurrounding"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// BirthSurroundingUpdate is the builder for updating BirthSurrounding entities.
type BirthSurroundingUpdate struct {
	config
	hooks      []Hook
	mutation   *BirthSurroundingMutation
	predicates []predicate.BirthSurrounding
}

// Where adds a new predicate for the builder.
func (bsu *BirthSurroundingUpdate) Where(ps ...predicate.BirthSurrounding) *BirthSurroundingUpdate {
	bsu.predicates = append(bsu.predicates, ps...)
	return bsu
}

// SetName sets the name field.
func (bsu *BirthSurroundingUpdate) SetName(s string) *BirthSurroundingUpdate {
	bsu.mutation.SetName(s)
	return bsu
}

// SetFarmId sets the farmId field.
func (bsu *BirthSurroundingUpdate) SetFarmId(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetFarmId()
	bsu.mutation.SetFarmId(i)
	return bsu
}

// AddFarmId adds i to farmId.
func (bsu *BirthSurroundingUpdate) AddFarmId(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddFarmId(i)
	return bsu
}

// SetFarmName sets the farmName field.
func (bsu *BirthSurroundingUpdate) SetFarmName(s string) *BirthSurroundingUpdate {
	bsu.mutation.SetFarmName(s)
	return bsu
}

// SetRecordTime sets the recordTime field.
func (bsu *BirthSurroundingUpdate) SetRecordTime(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetRecordTime()
	bsu.mutation.SetRecordTime(i)
	return bsu
}

// AddRecordTime adds i to recordTime.
func (bsu *BirthSurroundingUpdate) AddRecordTime(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddRecordTime(i)
	return bsu
}

// SetUserId sets the userId field.
func (bsu *BirthSurroundingUpdate) SetUserId(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetUserId()
	bsu.mutation.SetUserId(i)
	return bsu
}

// AddUserId adds i to userId.
func (bsu *BirthSurroundingUpdate) AddUserId(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddUserId(i)
	return bsu
}

// SetUserName sets the userName field.
func (bsu *BirthSurroundingUpdate) SetUserName(s string) *BirthSurroundingUpdate {
	bsu.mutation.SetUserName(s)
	return bsu
}

// SetTemperature sets the temperature field.
func (bsu *BirthSurroundingUpdate) SetTemperature(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetTemperature()
	bsu.mutation.SetTemperature(i)
	return bsu
}

// AddTemperature adds i to temperature.
func (bsu *BirthSurroundingUpdate) AddTemperature(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddTemperature(i)
	return bsu
}

// SetHumidity sets the humidity field.
func (bsu *BirthSurroundingUpdate) SetHumidity(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetHumidity()
	bsu.mutation.SetHumidity(i)
	return bsu
}

// AddHumidity adds i to humidity.
func (bsu *BirthSurroundingUpdate) AddHumidity(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddHumidity(i)
	return bsu
}

// SetBreathRateId sets the breathRateId field.
func (bsu *BirthSurroundingUpdate) SetBreathRateId(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetBreathRateId()
	bsu.mutation.SetBreathRateId(i)
	return bsu
}

// AddBreathRateId adds i to breathRateId.
func (bsu *BirthSurroundingUpdate) AddBreathRateId(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddBreathRateId(i)
	return bsu
}

// SetBreathRateName sets the breathRateName field.
func (bsu *BirthSurroundingUpdate) SetBreathRateName(s string) *BirthSurroundingUpdate {
	bsu.mutation.SetBreathRateName(s)
	return bsu
}

// SetWindSpeed sets the windSpeed field.
func (bsu *BirthSurroundingUpdate) SetWindSpeed(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetWindSpeed()
	bsu.mutation.SetWindSpeed(i)
	return bsu
}

// AddWindSpeed adds i to windSpeed.
func (bsu *BirthSurroundingUpdate) AddWindSpeed(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddWindSpeed(i)
	return bsu
}

// SetWindDirectionId sets the windDirectionId field.
func (bsu *BirthSurroundingUpdate) SetWindDirectionId(i int) *BirthSurroundingUpdate {
	bsu.mutation.ResetWindDirectionId()
	bsu.mutation.SetWindDirectionId(i)
	return bsu
}

// AddWindDirectionId adds i to windDirectionId.
func (bsu *BirthSurroundingUpdate) AddWindDirectionId(i int) *BirthSurroundingUpdate {
	bsu.mutation.AddWindDirectionId(i)
	return bsu
}

// SetWindDirection sets the windDirection field.
func (bsu *BirthSurroundingUpdate) SetWindDirection(s string) *BirthSurroundingUpdate {
	bsu.mutation.SetWindDirection(s)
	return bsu
}

// SetLocationChanges sets the locationChanges field.
func (bsu *BirthSurroundingUpdate) SetLocationChanges(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetLocationChanges()
	bsu.mutation.SetLocationChanges(i)
	return bsu
}

// AddLocationChanges adds i to locationChanges.
func (bsu *BirthSurroundingUpdate) AddLocationChanges(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddLocationChanges(i)
	return bsu
}

// SetHairStateId sets the hairStateId field.
func (bsu *BirthSurroundingUpdate) SetHairStateId(i int) *BirthSurroundingUpdate {
	bsu.mutation.ResetHairStateId()
	bsu.mutation.SetHairStateId(i)
	return bsu
}

// AddHairStateId adds i to hairStateId.
func (bsu *BirthSurroundingUpdate) AddHairStateId(i int) *BirthSurroundingUpdate {
	bsu.mutation.AddHairStateId(i)
	return bsu
}

// SetHairStateName sets the hairStateName field.
func (bsu *BirthSurroundingUpdate) SetHairStateName(s string) *BirthSurroundingUpdate {
	bsu.mutation.SetHairStateName(s)
	return bsu
}

// SetSoilDepth sets the soilDepth field.
func (bsu *BirthSurroundingUpdate) SetSoilDepth(i int) *BirthSurroundingUpdate {
	bsu.mutation.ResetSoilDepth()
	bsu.mutation.SetSoilDepth(i)
	return bsu
}

// AddSoilDepth adds i to soilDepth.
func (bsu *BirthSurroundingUpdate) AddSoilDepth(i int) *BirthSurroundingUpdate {
	bsu.mutation.AddSoilDepth(i)
	return bsu
}

// SetSunExposure sets the sunExposure field.
func (bsu *BirthSurroundingUpdate) SetSunExposure(i int) *BirthSurroundingUpdate {
	bsu.mutation.ResetSunExposure()
	bsu.mutation.SetSunExposure(i)
	return bsu
}

// AddSunExposure adds i to sunExposure.
func (bsu *BirthSurroundingUpdate) AddSunExposure(i int) *BirthSurroundingUpdate {
	bsu.mutation.AddSunExposure(i)
	return bsu
}

// SetWalkDistance sets the walkDistance field.
func (bsu *BirthSurroundingUpdate) SetWalkDistance(i int) *BirthSurroundingUpdate {
	bsu.mutation.ResetWalkDistance()
	bsu.mutation.SetWalkDistance(i)
	return bsu
}

// AddWalkDistance adds i to walkDistance.
func (bsu *BirthSurroundingUpdate) AddWalkDistance(i int) *BirthSurroundingUpdate {
	bsu.mutation.AddWalkDistance(i)
	return bsu
}

// SetRained sets the rained field.
func (bsu *BirthSurroundingUpdate) SetRained(i int) *BirthSurroundingUpdate {
	bsu.mutation.ResetRained()
	bsu.mutation.SetRained(i)
	return bsu
}

// SetNillableRained sets the rained field if the given value is not nil.
func (bsu *BirthSurroundingUpdate) SetNillableRained(i *int) *BirthSurroundingUpdate {
	if i != nil {
		bsu.SetRained(*i)
	}
	return bsu
}

// AddRained adds i to rained.
func (bsu *BirthSurroundingUpdate) AddRained(i int) *BirthSurroundingUpdate {
	bsu.mutation.AddRained(i)
	return bsu
}

// SetThIndex sets the thIndex field.
func (bsu *BirthSurroundingUpdate) SetThIndex(f float32) *BirthSurroundingUpdate {
	bsu.mutation.ResetThIndex()
	bsu.mutation.SetThIndex(f)
	return bsu
}

// AddThIndex adds f to thIndex.
func (bsu *BirthSurroundingUpdate) AddThIndex(f float32) *BirthSurroundingUpdate {
	bsu.mutation.AddThIndex(f)
	return bsu
}

// SetRemarks sets the remarks field.
func (bsu *BirthSurroundingUpdate) SetRemarks(s string) *BirthSurroundingUpdate {
	bsu.mutation.SetRemarks(s)
	return bsu
}

// SetCreatedAt sets the createdAt field.
func (bsu *BirthSurroundingUpdate) SetCreatedAt(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetCreatedAt()
	bsu.mutation.SetCreatedAt(i)
	return bsu
}

// AddCreatedAt adds i to createdAt.
func (bsu *BirthSurroundingUpdate) AddCreatedAt(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddCreatedAt(i)
	return bsu
}

// SetUpdatedAt sets the updatedAt field.
func (bsu *BirthSurroundingUpdate) SetUpdatedAt(i int64) *BirthSurroundingUpdate {
	bsu.mutation.ResetUpdatedAt()
	bsu.mutation.SetUpdatedAt(i)
	return bsu
}

// AddUpdatedAt adds i to updatedAt.
func (bsu *BirthSurroundingUpdate) AddUpdatedAt(i int64) *BirthSurroundingUpdate {
	bsu.mutation.AddUpdatedAt(i)
	return bsu
}

// SetDeleted sets the deleted field.
func (bsu *BirthSurroundingUpdate) SetDeleted(i int) *BirthSurroundingUpdate {
	bsu.mutation.ResetDeleted()
	bsu.mutation.SetDeleted(i)
	return bsu
}

// AddDeleted adds i to deleted.
func (bsu *BirthSurroundingUpdate) AddDeleted(i int) *BirthSurroundingUpdate {
	bsu.mutation.AddDeleted(i)
	return bsu
}

// Mutation returns the BirthSurroundingMutation object of the builder.
func (bsu *BirthSurroundingUpdate) Mutation() *BirthSurroundingMutation {
	return bsu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bsu *BirthSurroundingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bsu.hooks) == 0 {
		if err = bsu.check(); err != nil {
			return 0, err
		}
		affected, err = bsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BirthSurroundingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bsu.check(); err != nil {
				return 0, err
			}
			bsu.mutation = mutation
			affected, err = bsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bsu.hooks) - 1; i >= 0; i-- {
			mut = bsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bsu *BirthSurroundingUpdate) SaveX(ctx context.Context) int {
	affected, err := bsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsu *BirthSurroundingUpdate) Exec(ctx context.Context) error {
	_, err := bsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsu *BirthSurroundingUpdate) ExecX(ctx context.Context) {
	if err := bsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsu *BirthSurroundingUpdate) check() error {
	if v, ok := bsu.mutation.FarmName(); ok {
		if err := birthsurrounding.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf("ent: validator failed for field \"farmName\": %w", err)}
		}
	}
	return nil
}

func (bsu *BirthSurroundingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   birthsurrounding.Table,
			Columns: birthsurrounding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: birthsurrounding.FieldID,
			},
		},
	}
	if ps := bsu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldName,
		})
	}
	if value, ok := bsu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldFarmId,
		})
	}
	if value, ok := bsu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldFarmId,
		})
	}
	if value, ok := bsu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldFarmName,
		})
	}
	if value, ok := bsu.mutation.RecordTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldRecordTime,
		})
	}
	if value, ok := bsu.mutation.AddedRecordTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldRecordTime,
		})
	}
	if value, ok := bsu.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUserId,
		})
	}
	if value, ok := bsu.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUserId,
		})
	}
	if value, ok := bsu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldUserName,
		})
	}
	if value, ok := bsu.mutation.Temperature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldTemperature,
		})
	}
	if value, ok := bsu.mutation.AddedTemperature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldTemperature,
		})
	}
	if value, ok := bsu.mutation.Humidity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldHumidity,
		})
	}
	if value, ok := bsu.mutation.AddedHumidity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldHumidity,
		})
	}
	if value, ok := bsu.mutation.BreathRateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldBreathRateId,
		})
	}
	if value, ok := bsu.mutation.AddedBreathRateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldBreathRateId,
		})
	}
	if value, ok := bsu.mutation.BreathRateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldBreathRateName,
		})
	}
	if value, ok := bsu.mutation.WindSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldWindSpeed,
		})
	}
	if value, ok := bsu.mutation.AddedWindSpeed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldWindSpeed,
		})
	}
	if value, ok := bsu.mutation.WindDirectionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWindDirectionId,
		})
	}
	if value, ok := bsu.mutation.AddedWindDirectionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWindDirectionId,
		})
	}
	if value, ok := bsu.mutation.WindDirection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldWindDirection,
		})
	}
	if value, ok := bsu.mutation.LocationChanges(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldLocationChanges,
		})
	}
	if value, ok := bsu.mutation.AddedLocationChanges(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldLocationChanges,
		})
	}
	if value, ok := bsu.mutation.HairStateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldHairStateId,
		})
	}
	if value, ok := bsu.mutation.AddedHairStateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldHairStateId,
		})
	}
	if value, ok := bsu.mutation.HairStateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldHairStateName,
		})
	}
	if value, ok := bsu.mutation.SoilDepth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSoilDepth,
		})
	}
	if value, ok := bsu.mutation.AddedSoilDepth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSoilDepth,
		})
	}
	if value, ok := bsu.mutation.SunExposure(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSunExposure,
		})
	}
	if value, ok := bsu.mutation.AddedSunExposure(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSunExposure,
		})
	}
	if value, ok := bsu.mutation.WalkDistance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWalkDistance,
		})
	}
	if value, ok := bsu.mutation.AddedWalkDistance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWalkDistance,
		})
	}
	if value, ok := bsu.mutation.Rained(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldRained,
		})
	}
	if value, ok := bsu.mutation.AddedRained(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldRained,
		})
	}
	if value, ok := bsu.mutation.ThIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: birthsurrounding.FieldThIndex,
		})
	}
	if value, ok := bsu.mutation.AddedThIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: birthsurrounding.FieldThIndex,
		})
	}
	if value, ok := bsu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldRemarks,
		})
	}
	if value, ok := bsu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldCreatedAt,
		})
	}
	if value, ok := bsu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldCreatedAt,
		})
	}
	if value, ok := bsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUpdatedAt,
		})
	}
	if value, ok := bsu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUpdatedAt,
		})
	}
	if value, ok := bsu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldDeleted,
		})
	}
	if value, ok := bsu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{birthsurrounding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BirthSurroundingUpdateOne is the builder for updating a single BirthSurrounding entity.
type BirthSurroundingUpdateOne struct {
	config
	hooks    []Hook
	mutation *BirthSurroundingMutation
}

// SetName sets the name field.
func (bsuo *BirthSurroundingUpdateOne) SetName(s string) *BirthSurroundingUpdateOne {
	bsuo.mutation.SetName(s)
	return bsuo
}

// SetFarmId sets the farmId field.
func (bsuo *BirthSurroundingUpdateOne) SetFarmId(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetFarmId()
	bsuo.mutation.SetFarmId(i)
	return bsuo
}

// AddFarmId adds i to farmId.
func (bsuo *BirthSurroundingUpdateOne) AddFarmId(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddFarmId(i)
	return bsuo
}

// SetFarmName sets the farmName field.
func (bsuo *BirthSurroundingUpdateOne) SetFarmName(s string) *BirthSurroundingUpdateOne {
	bsuo.mutation.SetFarmName(s)
	return bsuo
}

// SetRecordTime sets the recordTime field.
func (bsuo *BirthSurroundingUpdateOne) SetRecordTime(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetRecordTime()
	bsuo.mutation.SetRecordTime(i)
	return bsuo
}

// AddRecordTime adds i to recordTime.
func (bsuo *BirthSurroundingUpdateOne) AddRecordTime(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddRecordTime(i)
	return bsuo
}

// SetUserId sets the userId field.
func (bsuo *BirthSurroundingUpdateOne) SetUserId(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetUserId()
	bsuo.mutation.SetUserId(i)
	return bsuo
}

// AddUserId adds i to userId.
func (bsuo *BirthSurroundingUpdateOne) AddUserId(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddUserId(i)
	return bsuo
}

// SetUserName sets the userName field.
func (bsuo *BirthSurroundingUpdateOne) SetUserName(s string) *BirthSurroundingUpdateOne {
	bsuo.mutation.SetUserName(s)
	return bsuo
}

// SetTemperature sets the temperature field.
func (bsuo *BirthSurroundingUpdateOne) SetTemperature(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetTemperature()
	bsuo.mutation.SetTemperature(i)
	return bsuo
}

// AddTemperature adds i to temperature.
func (bsuo *BirthSurroundingUpdateOne) AddTemperature(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddTemperature(i)
	return bsuo
}

// SetHumidity sets the humidity field.
func (bsuo *BirthSurroundingUpdateOne) SetHumidity(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetHumidity()
	bsuo.mutation.SetHumidity(i)
	return bsuo
}

// AddHumidity adds i to humidity.
func (bsuo *BirthSurroundingUpdateOne) AddHumidity(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddHumidity(i)
	return bsuo
}

// SetBreathRateId sets the breathRateId field.
func (bsuo *BirthSurroundingUpdateOne) SetBreathRateId(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetBreathRateId()
	bsuo.mutation.SetBreathRateId(i)
	return bsuo
}

// AddBreathRateId adds i to breathRateId.
func (bsuo *BirthSurroundingUpdateOne) AddBreathRateId(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddBreathRateId(i)
	return bsuo
}

// SetBreathRateName sets the breathRateName field.
func (bsuo *BirthSurroundingUpdateOne) SetBreathRateName(s string) *BirthSurroundingUpdateOne {
	bsuo.mutation.SetBreathRateName(s)
	return bsuo
}

// SetWindSpeed sets the windSpeed field.
func (bsuo *BirthSurroundingUpdateOne) SetWindSpeed(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetWindSpeed()
	bsuo.mutation.SetWindSpeed(i)
	return bsuo
}

// AddWindSpeed adds i to windSpeed.
func (bsuo *BirthSurroundingUpdateOne) AddWindSpeed(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddWindSpeed(i)
	return bsuo
}

// SetWindDirectionId sets the windDirectionId field.
func (bsuo *BirthSurroundingUpdateOne) SetWindDirectionId(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetWindDirectionId()
	bsuo.mutation.SetWindDirectionId(i)
	return bsuo
}

// AddWindDirectionId adds i to windDirectionId.
func (bsuo *BirthSurroundingUpdateOne) AddWindDirectionId(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddWindDirectionId(i)
	return bsuo
}

// SetWindDirection sets the windDirection field.
func (bsuo *BirthSurroundingUpdateOne) SetWindDirection(s string) *BirthSurroundingUpdateOne {
	bsuo.mutation.SetWindDirection(s)
	return bsuo
}

// SetLocationChanges sets the locationChanges field.
func (bsuo *BirthSurroundingUpdateOne) SetLocationChanges(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetLocationChanges()
	bsuo.mutation.SetLocationChanges(i)
	return bsuo
}

// AddLocationChanges adds i to locationChanges.
func (bsuo *BirthSurroundingUpdateOne) AddLocationChanges(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddLocationChanges(i)
	return bsuo
}

// SetHairStateId sets the hairStateId field.
func (bsuo *BirthSurroundingUpdateOne) SetHairStateId(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetHairStateId()
	bsuo.mutation.SetHairStateId(i)
	return bsuo
}

// AddHairStateId adds i to hairStateId.
func (bsuo *BirthSurroundingUpdateOne) AddHairStateId(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddHairStateId(i)
	return bsuo
}

// SetHairStateName sets the hairStateName field.
func (bsuo *BirthSurroundingUpdateOne) SetHairStateName(s string) *BirthSurroundingUpdateOne {
	bsuo.mutation.SetHairStateName(s)
	return bsuo
}

// SetSoilDepth sets the soilDepth field.
func (bsuo *BirthSurroundingUpdateOne) SetSoilDepth(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetSoilDepth()
	bsuo.mutation.SetSoilDepth(i)
	return bsuo
}

// AddSoilDepth adds i to soilDepth.
func (bsuo *BirthSurroundingUpdateOne) AddSoilDepth(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddSoilDepth(i)
	return bsuo
}

// SetSunExposure sets the sunExposure field.
func (bsuo *BirthSurroundingUpdateOne) SetSunExposure(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetSunExposure()
	bsuo.mutation.SetSunExposure(i)
	return bsuo
}

// AddSunExposure adds i to sunExposure.
func (bsuo *BirthSurroundingUpdateOne) AddSunExposure(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddSunExposure(i)
	return bsuo
}

// SetWalkDistance sets the walkDistance field.
func (bsuo *BirthSurroundingUpdateOne) SetWalkDistance(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetWalkDistance()
	bsuo.mutation.SetWalkDistance(i)
	return bsuo
}

// AddWalkDistance adds i to walkDistance.
func (bsuo *BirthSurroundingUpdateOne) AddWalkDistance(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddWalkDistance(i)
	return bsuo
}

// SetRained sets the rained field.
func (bsuo *BirthSurroundingUpdateOne) SetRained(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetRained()
	bsuo.mutation.SetRained(i)
	return bsuo
}

// SetNillableRained sets the rained field if the given value is not nil.
func (bsuo *BirthSurroundingUpdateOne) SetNillableRained(i *int) *BirthSurroundingUpdateOne {
	if i != nil {
		bsuo.SetRained(*i)
	}
	return bsuo
}

// AddRained adds i to rained.
func (bsuo *BirthSurroundingUpdateOne) AddRained(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddRained(i)
	return bsuo
}

// SetThIndex sets the thIndex field.
func (bsuo *BirthSurroundingUpdateOne) SetThIndex(f float32) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetThIndex()
	bsuo.mutation.SetThIndex(f)
	return bsuo
}

// AddThIndex adds f to thIndex.
func (bsuo *BirthSurroundingUpdateOne) AddThIndex(f float32) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddThIndex(f)
	return bsuo
}

// SetRemarks sets the remarks field.
func (bsuo *BirthSurroundingUpdateOne) SetRemarks(s string) *BirthSurroundingUpdateOne {
	bsuo.mutation.SetRemarks(s)
	return bsuo
}

// SetCreatedAt sets the createdAt field.
func (bsuo *BirthSurroundingUpdateOne) SetCreatedAt(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetCreatedAt()
	bsuo.mutation.SetCreatedAt(i)
	return bsuo
}

// AddCreatedAt adds i to createdAt.
func (bsuo *BirthSurroundingUpdateOne) AddCreatedAt(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddCreatedAt(i)
	return bsuo
}

// SetUpdatedAt sets the updatedAt field.
func (bsuo *BirthSurroundingUpdateOne) SetUpdatedAt(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetUpdatedAt()
	bsuo.mutation.SetUpdatedAt(i)
	return bsuo
}

// AddUpdatedAt adds i to updatedAt.
func (bsuo *BirthSurroundingUpdateOne) AddUpdatedAt(i int64) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddUpdatedAt(i)
	return bsuo
}

// SetDeleted sets the deleted field.
func (bsuo *BirthSurroundingUpdateOne) SetDeleted(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.ResetDeleted()
	bsuo.mutation.SetDeleted(i)
	return bsuo
}

// AddDeleted adds i to deleted.
func (bsuo *BirthSurroundingUpdateOne) AddDeleted(i int) *BirthSurroundingUpdateOne {
	bsuo.mutation.AddDeleted(i)
	return bsuo
}

// Mutation returns the BirthSurroundingMutation object of the builder.
func (bsuo *BirthSurroundingUpdateOne) Mutation() *BirthSurroundingMutation {
	return bsuo.mutation
}

// Save executes the query and returns the updated entity.
func (bsuo *BirthSurroundingUpdateOne) Save(ctx context.Context) (*BirthSurrounding, error) {
	var (
		err  error
		node *BirthSurrounding
	)
	if len(bsuo.hooks) == 0 {
		if err = bsuo.check(); err != nil {
			return nil, err
		}
		node, err = bsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BirthSurroundingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bsuo.check(); err != nil {
				return nil, err
			}
			bsuo.mutation = mutation
			node, err = bsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bsuo.hooks) - 1; i >= 0; i-- {
			mut = bsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bsuo *BirthSurroundingUpdateOne) SaveX(ctx context.Context) *BirthSurrounding {
	node, err := bsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsuo *BirthSurroundingUpdateOne) Exec(ctx context.Context) error {
	_, err := bsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsuo *BirthSurroundingUpdateOne) ExecX(ctx context.Context) {
	if err := bsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsuo *BirthSurroundingUpdateOne) check() error {
	if v, ok := bsuo.mutation.FarmName(); ok {
		if err := birthsurrounding.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf("ent: validator failed for field \"farmName\": %w", err)}
		}
	}
	return nil
}

func (bsuo *BirthSurroundingUpdateOne) sqlSave(ctx context.Context) (_node *BirthSurrounding, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   birthsurrounding.Table,
			Columns: birthsurrounding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: birthsurrounding.FieldID,
			},
		},
	}
	id, ok := bsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BirthSurrounding.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := bsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldName,
		})
	}
	if value, ok := bsuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldFarmId,
		})
	}
	if value, ok := bsuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldFarmId,
		})
	}
	if value, ok := bsuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldFarmName,
		})
	}
	if value, ok := bsuo.mutation.RecordTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldRecordTime,
		})
	}
	if value, ok := bsuo.mutation.AddedRecordTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldRecordTime,
		})
	}
	if value, ok := bsuo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUserId,
		})
	}
	if value, ok := bsuo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUserId,
		})
	}
	if value, ok := bsuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldUserName,
		})
	}
	if value, ok := bsuo.mutation.Temperature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldTemperature,
		})
	}
	if value, ok := bsuo.mutation.AddedTemperature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldTemperature,
		})
	}
	if value, ok := bsuo.mutation.Humidity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldHumidity,
		})
	}
	if value, ok := bsuo.mutation.AddedHumidity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldHumidity,
		})
	}
	if value, ok := bsuo.mutation.BreathRateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldBreathRateId,
		})
	}
	if value, ok := bsuo.mutation.AddedBreathRateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldBreathRateId,
		})
	}
	if value, ok := bsuo.mutation.BreathRateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldBreathRateName,
		})
	}
	if value, ok := bsuo.mutation.WindSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldWindSpeed,
		})
	}
	if value, ok := bsuo.mutation.AddedWindSpeed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldWindSpeed,
		})
	}
	if value, ok := bsuo.mutation.WindDirectionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWindDirectionId,
		})
	}
	if value, ok := bsuo.mutation.AddedWindDirectionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWindDirectionId,
		})
	}
	if value, ok := bsuo.mutation.WindDirection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldWindDirection,
		})
	}
	if value, ok := bsuo.mutation.LocationChanges(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldLocationChanges,
		})
	}
	if value, ok := bsuo.mutation.AddedLocationChanges(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldLocationChanges,
		})
	}
	if value, ok := bsuo.mutation.HairStateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldHairStateId,
		})
	}
	if value, ok := bsuo.mutation.AddedHairStateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldHairStateId,
		})
	}
	if value, ok := bsuo.mutation.HairStateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldHairStateName,
		})
	}
	if value, ok := bsuo.mutation.SoilDepth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSoilDepth,
		})
	}
	if value, ok := bsuo.mutation.AddedSoilDepth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSoilDepth,
		})
	}
	if value, ok := bsuo.mutation.SunExposure(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSunExposure,
		})
	}
	if value, ok := bsuo.mutation.AddedSunExposure(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldSunExposure,
		})
	}
	if value, ok := bsuo.mutation.WalkDistance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWalkDistance,
		})
	}
	if value, ok := bsuo.mutation.AddedWalkDistance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldWalkDistance,
		})
	}
	if value, ok := bsuo.mutation.Rained(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldRained,
		})
	}
	if value, ok := bsuo.mutation.AddedRained(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldRained,
		})
	}
	if value, ok := bsuo.mutation.ThIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: birthsurrounding.FieldThIndex,
		})
	}
	if value, ok := bsuo.mutation.AddedThIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: birthsurrounding.FieldThIndex,
		})
	}
	if value, ok := bsuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: birthsurrounding.FieldRemarks,
		})
	}
	if value, ok := bsuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldCreatedAt,
		})
	}
	if value, ok := bsuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldCreatedAt,
		})
	}
	if value, ok := bsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUpdatedAt,
		})
	}
	if value, ok := bsuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: birthsurrounding.FieldUpdatedAt,
		})
	}
	if value, ok := bsuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldDeleted,
		})
	}
	if value, ok := bsuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: birthsurrounding.FieldDeleted,
		})
	}
	_node = &BirthSurrounding{config: bsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, bsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{birthsurrounding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

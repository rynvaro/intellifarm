// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/breeding"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Breeding is the model entity for the Breeding schema.
type Breeding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 胎次
	Times int `json:"times,omitempty"`
	// BreedingAt holds the value of the "breedingAt" field.
	BreedingAt int64 `json:"breedingAt,omitempty"`
	// BreedingTypeId holds the value of the "breedingTypeId" field.
	BreedingTypeId int `json:"breedingTypeId,omitempty"`
	// BreedingTypeName holds the value of the "breedingTypeName" field.
	BreedingTypeName string `json:"breedingTypeName,omitempty"`
	// SemenFrozenTypeId holds the value of the "semenFrozenTypeId" field.
	SemenFrozenTypeId int64 `json:"semenFrozenTypeId,omitempty"`
	// SemenFrozenTypeName holds the value of the "semenFrozenTypeName" field.
	SemenFrozenTypeName string `json:"semenFrozenTypeName,omitempty"`
	// BullId holds the value of the "bullId" field.
	BullId string `json:"bullId,omitempty"`
	// 使用数量
	Count int `json:"count,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Breeding) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case breeding.FieldID, breeding.FieldCattleId, breeding.FieldTenantId, breeding.FieldFarmId, breeding.FieldShedId, breeding.FieldTimes, breeding.FieldBreedingAt, breeding.FieldBreedingTypeId, breeding.FieldSemenFrozenTypeId, breeding.FieldCount, breeding.FieldCreatedAt, breeding.FieldUpdatedAt, breeding.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case breeding.FieldTenantName, breeding.FieldFarmName, breeding.FieldShedName, breeding.FieldName, breeding.FieldEarNumber, breeding.FieldBreedingTypeName, breeding.FieldSemenFrozenTypeName, breeding.FieldBullId, breeding.FieldUserName, breeding.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Breeding", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Breeding fields.
func (b *Breeding) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case breeding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case breeding.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				b.CattleId = value.Int64
			}
		case breeding.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				b.TenantId = value.Int64
			}
		case breeding.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				b.TenantName = value.String
			}
		case breeding.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				b.FarmId = value.Int64
			}
		case breeding.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				b.FarmName = value.String
			}
		case breeding.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				b.ShedId = value.Int64
			}
		case breeding.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				b.ShedName = value.String
			}
		case breeding.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case breeding.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				b.EarNumber = value.String
			}
		case breeding.FieldTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field times", values[i])
			} else if value.Valid {
				b.Times = int(value.Int64)
			}
		case breeding.FieldBreedingAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field breedingAt", values[i])
			} else if value.Valid {
				b.BreedingAt = value.Int64
			}
		case breeding.FieldBreedingTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field breedingTypeId", values[i])
			} else if value.Valid {
				b.BreedingTypeId = int(value.Int64)
			}
		case breeding.FieldBreedingTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field breedingTypeName", values[i])
			} else if value.Valid {
				b.BreedingTypeName = value.String
			}
		case breeding.FieldSemenFrozenTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field semenFrozenTypeId", values[i])
			} else if value.Valid {
				b.SemenFrozenTypeId = value.Int64
			}
		case breeding.FieldSemenFrozenTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field semenFrozenTypeName", values[i])
			} else if value.Valid {
				b.SemenFrozenTypeName = value.String
			}
		case breeding.FieldBullId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bullId", values[i])
			} else if value.Valid {
				b.BullId = value.String
			}
		case breeding.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				b.Count = int(value.Int64)
			}
		case breeding.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				b.UserName = value.String
			}
		case breeding.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				b.Remarks = value.String
			}
		case breeding.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Int64
			}
		case breeding.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Int64
			}
		case breeding.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				b.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Breeding.
// Note that you need to call Breeding.Unwrap() before calling this method if this Breeding
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Breeding) Update() *BreedingUpdateOne {
	return (&BreedingClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Breeding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Breeding) Unwrap() *Breeding {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Breeding is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Breeding) String() string {
	var builder strings.Builder
	builder.WriteString("Breeding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", b.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", b.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(b.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", b.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(b.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", b.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(b.ShedName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(b.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("times=")
	builder.WriteString(fmt.Sprintf("%v", b.Times))
	builder.WriteString(", ")
	builder.WriteString("breedingAt=")
	builder.WriteString(fmt.Sprintf("%v", b.BreedingAt))
	builder.WriteString(", ")
	builder.WriteString("breedingTypeId=")
	builder.WriteString(fmt.Sprintf("%v", b.BreedingTypeId))
	builder.WriteString(", ")
	builder.WriteString("breedingTypeName=")
	builder.WriteString(b.BreedingTypeName)
	builder.WriteString(", ")
	builder.WriteString("semenFrozenTypeId=")
	builder.WriteString(fmt.Sprintf("%v", b.SemenFrozenTypeId))
	builder.WriteString(", ")
	builder.WriteString("semenFrozenTypeName=")
	builder.WriteString(b.SemenFrozenTypeName)
	builder.WriteString(", ")
	builder.WriteString("bullId=")
	builder.WriteString(b.BullId)
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", b.Count))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(b.UserName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(b.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", b.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", b.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", b.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Breedings is a parsable slice of Breeding.
type Breedings []*Breeding

func (b Breedings) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}

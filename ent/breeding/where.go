// Code generated by entc, DO NOT EDIT.

package breeding

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// EarNumber applies equality check predicate on the "earNumber" field. It's identical to EarNumberEQ.
func EarNumber(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// Times applies equality check predicate on the "times" field. It's identical to TimesEQ.
func Times(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// BreedingAt applies equality check predicate on the "breedingAt" field. It's identical to BreedingAtEQ.
func BreedingAt(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingAt), v))
	})
}

// BreedingTypeId applies equality check predicate on the "breedingTypeId" field. It's identical to BreedingTypeIdEQ.
func BreedingTypeId(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeName applies equality check predicate on the "breedingTypeName" field. It's identical to BreedingTypeNameEQ.
func BreedingTypeName(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingTypeName), v))
	})
}

// SemenFrozenTypeId applies equality check predicate on the "semenFrozenTypeId" field. It's identical to SemenFrozenTypeIdEQ.
func SemenFrozenTypeId(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSemenFrozenTypeId), v))
	})
}

// SemenFrozenTypeName applies equality check predicate on the "semenFrozenTypeName" field. It's identical to SemenFrozenTypeNameEQ.
func SemenFrozenTypeName(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSemenFrozenTypeName), v))
	})
}

// BullId applies equality check predicate on the "bullId" field. It's identical to BullIdEQ.
func BullId(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBullId), v))
	})
}

// ShedName applies equality check predicate on the "shedName" field. It's identical to ShedNameEQ.
func ShedName(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCount), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EarNumberEQ applies the EQ predicate on the "earNumber" field.
func EarNumberEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberNEQ applies the NEQ predicate on the "earNumber" field.
func EarNumberNEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberIn applies the In predicate on the "earNumber" field.
func EarNumberIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEarNumber), v...))
	})
}

// EarNumberNotIn applies the NotIn predicate on the "earNumber" field.
func EarNumberNotIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEarNumber), v...))
	})
}

// EarNumberGT applies the GT predicate on the "earNumber" field.
func EarNumberGT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEarNumber), v))
	})
}

// EarNumberGTE applies the GTE predicate on the "earNumber" field.
func EarNumberGTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberLT applies the LT predicate on the "earNumber" field.
func EarNumberLT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEarNumber), v))
	})
}

// EarNumberLTE applies the LTE predicate on the "earNumber" field.
func EarNumberLTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberContains applies the Contains predicate on the "earNumber" field.
func EarNumberContains(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasPrefix applies the HasPrefix predicate on the "earNumber" field.
func EarNumberHasPrefix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasSuffix applies the HasSuffix predicate on the "earNumber" field.
func EarNumberHasSuffix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEarNumber), v))
	})
}

// EarNumberEqualFold applies the EqualFold predicate on the "earNumber" field.
func EarNumberEqualFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEarNumber), v))
	})
}

// EarNumberContainsFold applies the ContainsFold predicate on the "earNumber" field.
func EarNumberContainsFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEarNumber), v))
	})
}

// TimesEQ applies the EQ predicate on the "times" field.
func TimesEQ(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// TimesNEQ applies the NEQ predicate on the "times" field.
func TimesNEQ(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimes), v))
	})
}

// TimesIn applies the In predicate on the "times" field.
func TimesIn(vs ...int) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimes), v...))
	})
}

// TimesNotIn applies the NotIn predicate on the "times" field.
func TimesNotIn(vs ...int) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimes), v...))
	})
}

// TimesGT applies the GT predicate on the "times" field.
func TimesGT(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimes), v))
	})
}

// TimesGTE applies the GTE predicate on the "times" field.
func TimesGTE(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimes), v))
	})
}

// TimesLT applies the LT predicate on the "times" field.
func TimesLT(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimes), v))
	})
}

// TimesLTE applies the LTE predicate on the "times" field.
func TimesLTE(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimes), v))
	})
}

// BreedingAtEQ applies the EQ predicate on the "breedingAt" field.
func BreedingAtEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtNEQ applies the NEQ predicate on the "breedingAt" field.
func BreedingAtNEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtIn applies the In predicate on the "breedingAt" field.
func BreedingAtIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBreedingAt), v...))
	})
}

// BreedingAtNotIn applies the NotIn predicate on the "breedingAt" field.
func BreedingAtNotIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBreedingAt), v...))
	})
}

// BreedingAtGT applies the GT predicate on the "breedingAt" field.
func BreedingAtGT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtGTE applies the GTE predicate on the "breedingAt" field.
func BreedingAtGTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtLT applies the LT predicate on the "breedingAt" field.
func BreedingAtLT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtLTE applies the LTE predicate on the "breedingAt" field.
func BreedingAtLTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreedingAt), v))
	})
}

// BreedingTypeIdEQ applies the EQ predicate on the "breedingTypeId" field.
func BreedingTypeIdEQ(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdNEQ applies the NEQ predicate on the "breedingTypeId" field.
func BreedingTypeIdNEQ(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdIn applies the In predicate on the "breedingTypeId" field.
func BreedingTypeIdIn(vs ...int) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBreedingTypeId), v...))
	})
}

// BreedingTypeIdNotIn applies the NotIn predicate on the "breedingTypeId" field.
func BreedingTypeIdNotIn(vs ...int) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBreedingTypeId), v...))
	})
}

// BreedingTypeIdGT applies the GT predicate on the "breedingTypeId" field.
func BreedingTypeIdGT(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdGTE applies the GTE predicate on the "breedingTypeId" field.
func BreedingTypeIdGTE(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdLT applies the LT predicate on the "breedingTypeId" field.
func BreedingTypeIdLT(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdLTE applies the LTE predicate on the "breedingTypeId" field.
func BreedingTypeIdLTE(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeNameEQ applies the EQ predicate on the "breedingTypeName" field.
func BreedingTypeNameEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameNEQ applies the NEQ predicate on the "breedingTypeName" field.
func BreedingTypeNameNEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameIn applies the In predicate on the "breedingTypeName" field.
func BreedingTypeNameIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBreedingTypeName), v...))
	})
}

// BreedingTypeNameNotIn applies the NotIn predicate on the "breedingTypeName" field.
func BreedingTypeNameNotIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBreedingTypeName), v...))
	})
}

// BreedingTypeNameGT applies the GT predicate on the "breedingTypeName" field.
func BreedingTypeNameGT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameGTE applies the GTE predicate on the "breedingTypeName" field.
func BreedingTypeNameGTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameLT applies the LT predicate on the "breedingTypeName" field.
func BreedingTypeNameLT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameLTE applies the LTE predicate on the "breedingTypeName" field.
func BreedingTypeNameLTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameContains applies the Contains predicate on the "breedingTypeName" field.
func BreedingTypeNameContains(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameHasPrefix applies the HasPrefix predicate on the "breedingTypeName" field.
func BreedingTypeNameHasPrefix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameHasSuffix applies the HasSuffix predicate on the "breedingTypeName" field.
func BreedingTypeNameHasSuffix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameEqualFold applies the EqualFold predicate on the "breedingTypeName" field.
func BreedingTypeNameEqualFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameContainsFold applies the ContainsFold predicate on the "breedingTypeName" field.
func BreedingTypeNameContainsFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBreedingTypeName), v))
	})
}

// SemenFrozenTypeIdEQ applies the EQ predicate on the "semenFrozenTypeId" field.
func SemenFrozenTypeIdEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSemenFrozenTypeId), v))
	})
}

// SemenFrozenTypeIdNEQ applies the NEQ predicate on the "semenFrozenTypeId" field.
func SemenFrozenTypeIdNEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSemenFrozenTypeId), v))
	})
}

// SemenFrozenTypeIdIn applies the In predicate on the "semenFrozenTypeId" field.
func SemenFrozenTypeIdIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSemenFrozenTypeId), v...))
	})
}

// SemenFrozenTypeIdNotIn applies the NotIn predicate on the "semenFrozenTypeId" field.
func SemenFrozenTypeIdNotIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSemenFrozenTypeId), v...))
	})
}

// SemenFrozenTypeIdGT applies the GT predicate on the "semenFrozenTypeId" field.
func SemenFrozenTypeIdGT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSemenFrozenTypeId), v))
	})
}

// SemenFrozenTypeIdGTE applies the GTE predicate on the "semenFrozenTypeId" field.
func SemenFrozenTypeIdGTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSemenFrozenTypeId), v))
	})
}

// SemenFrozenTypeIdLT applies the LT predicate on the "semenFrozenTypeId" field.
func SemenFrozenTypeIdLT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSemenFrozenTypeId), v))
	})
}

// SemenFrozenTypeIdLTE applies the LTE predicate on the "semenFrozenTypeId" field.
func SemenFrozenTypeIdLTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSemenFrozenTypeId), v))
	})
}

// SemenFrozenTypeNameEQ applies the EQ predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameNEQ applies the NEQ predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameNEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameIn applies the In predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSemenFrozenTypeName), v...))
	})
}

// SemenFrozenTypeNameNotIn applies the NotIn predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameNotIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSemenFrozenTypeName), v...))
	})
}

// SemenFrozenTypeNameGT applies the GT predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameGT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameGTE applies the GTE predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameGTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameLT applies the LT predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameLT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameLTE applies the LTE predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameLTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameContains applies the Contains predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameContains(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameHasPrefix applies the HasPrefix predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameHasPrefix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameHasSuffix applies the HasSuffix predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameHasSuffix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameEqualFold applies the EqualFold predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameEqualFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSemenFrozenTypeName), v))
	})
}

// SemenFrozenTypeNameContainsFold applies the ContainsFold predicate on the "semenFrozenTypeName" field.
func SemenFrozenTypeNameContainsFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSemenFrozenTypeName), v))
	})
}

// BullIdEQ applies the EQ predicate on the "bullId" field.
func BullIdEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBullId), v))
	})
}

// BullIdNEQ applies the NEQ predicate on the "bullId" field.
func BullIdNEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBullId), v))
	})
}

// BullIdIn applies the In predicate on the "bullId" field.
func BullIdIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBullId), v...))
	})
}

// BullIdNotIn applies the NotIn predicate on the "bullId" field.
func BullIdNotIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBullId), v...))
	})
}

// BullIdGT applies the GT predicate on the "bullId" field.
func BullIdGT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBullId), v))
	})
}

// BullIdGTE applies the GTE predicate on the "bullId" field.
func BullIdGTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBullId), v))
	})
}

// BullIdLT applies the LT predicate on the "bullId" field.
func BullIdLT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBullId), v))
	})
}

// BullIdLTE applies the LTE predicate on the "bullId" field.
func BullIdLTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBullId), v))
	})
}

// BullIdContains applies the Contains predicate on the "bullId" field.
func BullIdContains(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBullId), v))
	})
}

// BullIdHasPrefix applies the HasPrefix predicate on the "bullId" field.
func BullIdHasPrefix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBullId), v))
	})
}

// BullIdHasSuffix applies the HasSuffix predicate on the "bullId" field.
func BullIdHasSuffix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBullId), v))
	})
}

// BullIdEqualFold applies the EqualFold predicate on the "bullId" field.
func BullIdEqualFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBullId), v))
	})
}

// BullIdContainsFold applies the ContainsFold predicate on the "bullId" field.
func BullIdContainsFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBullId), v))
	})
}

// ShedNameEQ applies the EQ predicate on the "shedName" field.
func ShedNameEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// ShedNameNEQ applies the NEQ predicate on the "shedName" field.
func ShedNameNEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedName), v))
	})
}

// ShedNameIn applies the In predicate on the "shedName" field.
func ShedNameIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShedName), v...))
	})
}

// ShedNameNotIn applies the NotIn predicate on the "shedName" field.
func ShedNameNotIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShedName), v...))
	})
}

// ShedNameGT applies the GT predicate on the "shedName" field.
func ShedNameGT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedName), v))
	})
}

// ShedNameGTE applies the GTE predicate on the "shedName" field.
func ShedNameGTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedName), v))
	})
}

// ShedNameLT applies the LT predicate on the "shedName" field.
func ShedNameLT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedName), v))
	})
}

// ShedNameLTE applies the LTE predicate on the "shedName" field.
func ShedNameLTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedName), v))
	})
}

// ShedNameContains applies the Contains predicate on the "shedName" field.
func ShedNameContains(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedName), v))
	})
}

// ShedNameHasPrefix applies the HasPrefix predicate on the "shedName" field.
func ShedNameHasPrefix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedName), v))
	})
}

// ShedNameHasSuffix applies the HasSuffix predicate on the "shedName" field.
func ShedNameHasSuffix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedName), v))
	})
}

// ShedNameEqualFold applies the EqualFold predicate on the "shedName" field.
func ShedNameEqualFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedName), v))
	})
}

// ShedNameContainsFold applies the ContainsFold predicate on the "shedName" field.
func ShedNameContainsFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedName), v))
	})
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCount), v))
	})
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCount), v))
	})
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCount), v...))
	})
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCount), v...))
	})
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCount), v))
	})
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCount), v))
	})
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCount), v))
	})
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCount), v))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.Breeding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Breeding(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Breeding) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Breeding) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Breeding) predicate.Breeding {
	return predicate.Breeding(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/breeding"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BreedingCreate is the builder for creating a Breeding entity.
type BreedingCreate struct {
	config
	mutation *BreedingMutation
	hooks    []Hook
}

// SetCattleId sets the "cattleId" field.
func (bc *BreedingCreate) SetCattleId(i int64) *BreedingCreate {
	bc.mutation.SetCattleId(i)
	return bc
}

// SetTenantId sets the "tenantId" field.
func (bc *BreedingCreate) SetTenantId(i int64) *BreedingCreate {
	bc.mutation.SetTenantId(i)
	return bc
}

// SetTenantName sets the "tenantName" field.
func (bc *BreedingCreate) SetTenantName(s string) *BreedingCreate {
	bc.mutation.SetTenantName(s)
	return bc
}

// SetFarmId sets the "farmId" field.
func (bc *BreedingCreate) SetFarmId(i int64) *BreedingCreate {
	bc.mutation.SetFarmId(i)
	return bc
}

// SetFarmName sets the "farmName" field.
func (bc *BreedingCreate) SetFarmName(s string) *BreedingCreate {
	bc.mutation.SetFarmName(s)
	return bc
}

// SetShedId sets the "shedId" field.
func (bc *BreedingCreate) SetShedId(i int64) *BreedingCreate {
	bc.mutation.SetShedId(i)
	return bc
}

// SetShedName sets the "shedName" field.
func (bc *BreedingCreate) SetShedName(s string) *BreedingCreate {
	bc.mutation.SetShedName(s)
	return bc
}

// SetName sets the "name" field.
func (bc *BreedingCreate) SetName(s string) *BreedingCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bc *BreedingCreate) SetNillableName(s *string) *BreedingCreate {
	if s != nil {
		bc.SetName(*s)
	}
	return bc
}

// SetEarNumber sets the "earNumber" field.
func (bc *BreedingCreate) SetEarNumber(s string) *BreedingCreate {
	bc.mutation.SetEarNumber(s)
	return bc
}

// SetTimes sets the "times" field.
func (bc *BreedingCreate) SetTimes(i int) *BreedingCreate {
	bc.mutation.SetTimes(i)
	return bc
}

// SetBreedingAt sets the "breedingAt" field.
func (bc *BreedingCreate) SetBreedingAt(i int64) *BreedingCreate {
	bc.mutation.SetBreedingAt(i)
	return bc
}

// SetBreedingTypeId sets the "breedingTypeId" field.
func (bc *BreedingCreate) SetBreedingTypeId(i int) *BreedingCreate {
	bc.mutation.SetBreedingTypeId(i)
	return bc
}

// SetBreedingTypeName sets the "breedingTypeName" field.
func (bc *BreedingCreate) SetBreedingTypeName(s string) *BreedingCreate {
	bc.mutation.SetBreedingTypeName(s)
	return bc
}

// SetSemenFrozenTypeId sets the "semenFrozenTypeId" field.
func (bc *BreedingCreate) SetSemenFrozenTypeId(i int64) *BreedingCreate {
	bc.mutation.SetSemenFrozenTypeId(i)
	return bc
}

// SetSemenFrozenTypeName sets the "semenFrozenTypeName" field.
func (bc *BreedingCreate) SetSemenFrozenTypeName(s string) *BreedingCreate {
	bc.mutation.SetSemenFrozenTypeName(s)
	return bc
}

// SetBullId sets the "bullId" field.
func (bc *BreedingCreate) SetBullId(s string) *BreedingCreate {
	bc.mutation.SetBullId(s)
	return bc
}

// SetCount sets the "count" field.
func (bc *BreedingCreate) SetCount(i int) *BreedingCreate {
	bc.mutation.SetCount(i)
	return bc
}

// SetUserName sets the "userName" field.
func (bc *BreedingCreate) SetUserName(s string) *BreedingCreate {
	bc.mutation.SetUserName(s)
	return bc
}

// SetRemarks sets the "remarks" field.
func (bc *BreedingCreate) SetRemarks(s string) *BreedingCreate {
	bc.mutation.SetRemarks(s)
	return bc
}

// SetCreatedAt sets the "createdAt" field.
func (bc *BreedingCreate) SetCreatedAt(i int64) *BreedingCreate {
	bc.mutation.SetCreatedAt(i)
	return bc
}

// SetUpdatedAt sets the "updatedAt" field.
func (bc *BreedingCreate) SetUpdatedAt(i int64) *BreedingCreate {
	bc.mutation.SetUpdatedAt(i)
	return bc
}

// SetDeleted sets the "deleted" field.
func (bc *BreedingCreate) SetDeleted(i int) *BreedingCreate {
	bc.mutation.SetDeleted(i)
	return bc
}

// Mutation returns the BreedingMutation object of the builder.
func (bc *BreedingCreate) Mutation() *BreedingMutation {
	return bc.mutation
}

// Save creates the Breeding in the database.
func (bc *BreedingCreate) Save(ctx context.Context) (*Breeding, error) {
	var (
		err  error
		node *Breeding
	)
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BreedingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Breeding)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BreedingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BreedingCreate) SaveX(ctx context.Context) *Breeding {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BreedingCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BreedingCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BreedingCreate) check() error {
	if _, ok := bc.mutation.CattleId(); !ok {
		return &ValidationError{Name: "cattleId", err: errors.New(`ent: missing required field "Breeding.cattleId"`)}
	}
	if _, ok := bc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "Breeding.tenantId"`)}
	}
	if _, ok := bc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "Breeding.tenantName"`)}
	}
	if _, ok := bc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New(`ent: missing required field "Breeding.farmId"`)}
	}
	if _, ok := bc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New(`ent: missing required field "Breeding.farmName"`)}
	}
	if _, ok := bc.mutation.ShedId(); !ok {
		return &ValidationError{Name: "shedId", err: errors.New(`ent: missing required field "Breeding.shedId"`)}
	}
	if _, ok := bc.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New(`ent: missing required field "Breeding.shedName"`)}
	}
	if _, ok := bc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New(`ent: missing required field "Breeding.earNumber"`)}
	}
	if _, ok := bc.mutation.Times(); !ok {
		return &ValidationError{Name: "times", err: errors.New(`ent: missing required field "Breeding.times"`)}
	}
	if _, ok := bc.mutation.BreedingAt(); !ok {
		return &ValidationError{Name: "breedingAt", err: errors.New(`ent: missing required field "Breeding.breedingAt"`)}
	}
	if _, ok := bc.mutation.BreedingTypeId(); !ok {
		return &ValidationError{Name: "breedingTypeId", err: errors.New(`ent: missing required field "Breeding.breedingTypeId"`)}
	}
	if _, ok := bc.mutation.BreedingTypeName(); !ok {
		return &ValidationError{Name: "breedingTypeName", err: errors.New(`ent: missing required field "Breeding.breedingTypeName"`)}
	}
	if _, ok := bc.mutation.SemenFrozenTypeId(); !ok {
		return &ValidationError{Name: "semenFrozenTypeId", err: errors.New(`ent: missing required field "Breeding.semenFrozenTypeId"`)}
	}
	if _, ok := bc.mutation.SemenFrozenTypeName(); !ok {
		return &ValidationError{Name: "semenFrozenTypeName", err: errors.New(`ent: missing required field "Breeding.semenFrozenTypeName"`)}
	}
	if _, ok := bc.mutation.BullId(); !ok {
		return &ValidationError{Name: "bullId", err: errors.New(`ent: missing required field "Breeding.bullId"`)}
	}
	if _, ok := bc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "Breeding.count"`)}
	}
	if _, ok := bc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New(`ent: missing required field "Breeding.userName"`)}
	}
	if _, ok := bc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "Breeding.remarks"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Breeding.createdAt"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Breeding.updatedAt"`)}
	}
	if _, ok := bc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Breeding.deleted"`)}
	}
	return nil
}

func (bc *BreedingCreate) sqlSave(ctx context.Context) (*Breeding, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bc *BreedingCreate) createSpec() (*Breeding, *sqlgraph.CreateSpec) {
	var (
		_node = &Breeding{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: breeding.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: breeding.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.CattleId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldCattleId,
		})
		_node.CattleId = value
	}
	if value, ok := bc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := bc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := bc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := bc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := bc.mutation.ShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldShedId,
		})
		_node.ShedId = value
	}
	if value, ok := bc.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := bc.mutation.Times(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldTimes,
		})
		_node.Times = value
	}
	if value, ok := bc.mutation.BreedingAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldBreedingAt,
		})
		_node.BreedingAt = value
	}
	if value, ok := bc.mutation.BreedingTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldBreedingTypeId,
		})
		_node.BreedingTypeId = value
	}
	if value, ok := bc.mutation.BreedingTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldBreedingTypeName,
		})
		_node.BreedingTypeName = value
	}
	if value, ok := bc.mutation.SemenFrozenTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldSemenFrozenTypeId,
		})
		_node.SemenFrozenTypeId = value
	}
	if value, ok := bc.mutation.SemenFrozenTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldSemenFrozenTypeName,
		})
		_node.SemenFrozenTypeName = value
	}
	if value, ok := bc.mutation.BullId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldBullId,
		})
		_node.BullId = value
	}
	if value, ok := bc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := bc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := bc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// BreedingCreateBulk is the builder for creating many Breeding entities in bulk.
type BreedingCreateBulk struct {
	config
	builders []*BreedingCreate
}

// Save creates the Breeding entities in the database.
func (bcb *BreedingCreateBulk) Save(ctx context.Context) ([]*Breeding, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Breeding, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BreedingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BreedingCreateBulk) SaveX(ctx context.Context) []*Breeding {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BreedingCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BreedingCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

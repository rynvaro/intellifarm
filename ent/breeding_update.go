// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/breeding"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// BreedingUpdate is the builder for updating Breeding entities.
type BreedingUpdate struct {
	config
	hooks      []Hook
	mutation   *BreedingMutation
	predicates []predicate.Breeding
}

// Where adds a new predicate for the builder.
func (bu *BreedingUpdate) Where(ps ...predicate.Breeding) *BreedingUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetName sets the name field.
func (bu *BreedingUpdate) SetName(s string) *BreedingUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the name field if the given value is not nil.
func (bu *BreedingUpdate) SetNillableName(s *string) *BreedingUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// ClearName clears the value of name.
func (bu *BreedingUpdate) ClearName() *BreedingUpdate {
	bu.mutation.ClearName()
	return bu
}

// SetEarNumber sets the earNumber field.
func (bu *BreedingUpdate) SetEarNumber(s string) *BreedingUpdate {
	bu.mutation.SetEarNumber(s)
	return bu
}

// SetTimes sets the times field.
func (bu *BreedingUpdate) SetTimes(i int) *BreedingUpdate {
	bu.mutation.ResetTimes()
	bu.mutation.SetTimes(i)
	return bu
}

// AddTimes adds i to times.
func (bu *BreedingUpdate) AddTimes(i int) *BreedingUpdate {
	bu.mutation.AddTimes(i)
	return bu
}

// SetBreedingAt sets the breedingAt field.
func (bu *BreedingUpdate) SetBreedingAt(i int64) *BreedingUpdate {
	bu.mutation.ResetBreedingAt()
	bu.mutation.SetBreedingAt(i)
	return bu
}

// AddBreedingAt adds i to breedingAt.
func (bu *BreedingUpdate) AddBreedingAt(i int64) *BreedingUpdate {
	bu.mutation.AddBreedingAt(i)
	return bu
}

// SetBreedingTypeId sets the breedingTypeId field.
func (bu *BreedingUpdate) SetBreedingTypeId(i int) *BreedingUpdate {
	bu.mutation.ResetBreedingTypeId()
	bu.mutation.SetBreedingTypeId(i)
	return bu
}

// AddBreedingTypeId adds i to breedingTypeId.
func (bu *BreedingUpdate) AddBreedingTypeId(i int) *BreedingUpdate {
	bu.mutation.AddBreedingTypeId(i)
	return bu
}

// SetBreedingTypeName sets the breedingTypeName field.
func (bu *BreedingUpdate) SetBreedingTypeName(s string) *BreedingUpdate {
	bu.mutation.SetBreedingTypeName(s)
	return bu
}

// SetSemenFrozenTypeId sets the semenFrozenTypeId field.
func (bu *BreedingUpdate) SetSemenFrozenTypeId(i int64) *BreedingUpdate {
	bu.mutation.ResetSemenFrozenTypeId()
	bu.mutation.SetSemenFrozenTypeId(i)
	return bu
}

// AddSemenFrozenTypeId adds i to semenFrozenTypeId.
func (bu *BreedingUpdate) AddSemenFrozenTypeId(i int64) *BreedingUpdate {
	bu.mutation.AddSemenFrozenTypeId(i)
	return bu
}

// SetSemenFrozenTypeName sets the semenFrozenTypeName field.
func (bu *BreedingUpdate) SetSemenFrozenTypeName(s string) *BreedingUpdate {
	bu.mutation.SetSemenFrozenTypeName(s)
	return bu
}

// SetBullId sets the bullId field.
func (bu *BreedingUpdate) SetBullId(s string) *BreedingUpdate {
	bu.mutation.SetBullId(s)
	return bu
}

// SetShedName sets the shedName field.
func (bu *BreedingUpdate) SetShedName(s string) *BreedingUpdate {
	bu.mutation.SetShedName(s)
	return bu
}

// SetCount sets the count field.
func (bu *BreedingUpdate) SetCount(i int) *BreedingUpdate {
	bu.mutation.ResetCount()
	bu.mutation.SetCount(i)
	return bu
}

// AddCount adds i to count.
func (bu *BreedingUpdate) AddCount(i int) *BreedingUpdate {
	bu.mutation.AddCount(i)
	return bu
}

// SetUserName sets the userName field.
func (bu *BreedingUpdate) SetUserName(s string) *BreedingUpdate {
	bu.mutation.SetUserName(s)
	return bu
}

// SetRemarks sets the remarks field.
func (bu *BreedingUpdate) SetRemarks(s string) *BreedingUpdate {
	bu.mutation.SetRemarks(s)
	return bu
}

// SetCreatedAt sets the createdAt field.
func (bu *BreedingUpdate) SetCreatedAt(i int64) *BreedingUpdate {
	bu.mutation.ResetCreatedAt()
	bu.mutation.SetCreatedAt(i)
	return bu
}

// AddCreatedAt adds i to createdAt.
func (bu *BreedingUpdate) AddCreatedAt(i int64) *BreedingUpdate {
	bu.mutation.AddCreatedAt(i)
	return bu
}

// SetUpdatedAt sets the updatedAt field.
func (bu *BreedingUpdate) SetUpdatedAt(i int64) *BreedingUpdate {
	bu.mutation.ResetUpdatedAt()
	bu.mutation.SetUpdatedAt(i)
	return bu
}

// AddUpdatedAt adds i to updatedAt.
func (bu *BreedingUpdate) AddUpdatedAt(i int64) *BreedingUpdate {
	bu.mutation.AddUpdatedAt(i)
	return bu
}

// SetDeleted sets the deleted field.
func (bu *BreedingUpdate) SetDeleted(i int) *BreedingUpdate {
	bu.mutation.ResetDeleted()
	bu.mutation.SetDeleted(i)
	return bu
}

// AddDeleted adds i to deleted.
func (bu *BreedingUpdate) AddDeleted(i int) *BreedingUpdate {
	bu.mutation.AddDeleted(i)
	return bu
}

// Mutation returns the BreedingMutation object of the builder.
func (bu *BreedingUpdate) Mutation() *BreedingMutation {
	return bu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BreedingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BreedingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BreedingUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BreedingUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BreedingUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BreedingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   breeding.Table,
			Columns: breeding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: breeding.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldName,
		})
	}
	if bu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: breeding.FieldName,
		})
	}
	if value, ok := bu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldEarNumber,
		})
	}
	if value, ok := bu.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldTimes,
		})
	}
	if value, ok := bu.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldTimes,
		})
	}
	if value, ok := bu.mutation.BreedingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldBreedingAt,
		})
	}
	if value, ok := bu.mutation.AddedBreedingAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldBreedingAt,
		})
	}
	if value, ok := bu.mutation.BreedingTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldBreedingTypeId,
		})
	}
	if value, ok := bu.mutation.AddedBreedingTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldBreedingTypeId,
		})
	}
	if value, ok := bu.mutation.BreedingTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldBreedingTypeName,
		})
	}
	if value, ok := bu.mutation.SemenFrozenTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldSemenFrozenTypeId,
		})
	}
	if value, ok := bu.mutation.AddedSemenFrozenTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldSemenFrozenTypeId,
		})
	}
	if value, ok := bu.mutation.SemenFrozenTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldSemenFrozenTypeName,
		})
	}
	if value, ok := bu.mutation.BullId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldBullId,
		})
	}
	if value, ok := bu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldShedName,
		})
	}
	if value, ok := bu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldCount,
		})
	}
	if value, ok := bu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldCount,
		})
	}
	if value, ok := bu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldUserName,
		})
	}
	if value, ok := bu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldRemarks,
		})
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldCreatedAt,
		})
	}
	if value, ok := bu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldCreatedAt,
		})
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldUpdatedAt,
		})
	}
	if value, ok := bu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldUpdatedAt,
		})
	}
	if value, ok := bu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldDeleted,
		})
	}
	if value, ok := bu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{breeding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BreedingUpdateOne is the builder for updating a single Breeding entity.
type BreedingUpdateOne struct {
	config
	hooks    []Hook
	mutation *BreedingMutation
}

// SetName sets the name field.
func (buo *BreedingUpdateOne) SetName(s string) *BreedingUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the name field if the given value is not nil.
func (buo *BreedingUpdateOne) SetNillableName(s *string) *BreedingUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// ClearName clears the value of name.
func (buo *BreedingUpdateOne) ClearName() *BreedingUpdateOne {
	buo.mutation.ClearName()
	return buo
}

// SetEarNumber sets the earNumber field.
func (buo *BreedingUpdateOne) SetEarNumber(s string) *BreedingUpdateOne {
	buo.mutation.SetEarNumber(s)
	return buo
}

// SetTimes sets the times field.
func (buo *BreedingUpdateOne) SetTimes(i int) *BreedingUpdateOne {
	buo.mutation.ResetTimes()
	buo.mutation.SetTimes(i)
	return buo
}

// AddTimes adds i to times.
func (buo *BreedingUpdateOne) AddTimes(i int) *BreedingUpdateOne {
	buo.mutation.AddTimes(i)
	return buo
}

// SetBreedingAt sets the breedingAt field.
func (buo *BreedingUpdateOne) SetBreedingAt(i int64) *BreedingUpdateOne {
	buo.mutation.ResetBreedingAt()
	buo.mutation.SetBreedingAt(i)
	return buo
}

// AddBreedingAt adds i to breedingAt.
func (buo *BreedingUpdateOne) AddBreedingAt(i int64) *BreedingUpdateOne {
	buo.mutation.AddBreedingAt(i)
	return buo
}

// SetBreedingTypeId sets the breedingTypeId field.
func (buo *BreedingUpdateOne) SetBreedingTypeId(i int) *BreedingUpdateOne {
	buo.mutation.ResetBreedingTypeId()
	buo.mutation.SetBreedingTypeId(i)
	return buo
}

// AddBreedingTypeId adds i to breedingTypeId.
func (buo *BreedingUpdateOne) AddBreedingTypeId(i int) *BreedingUpdateOne {
	buo.mutation.AddBreedingTypeId(i)
	return buo
}

// SetBreedingTypeName sets the breedingTypeName field.
func (buo *BreedingUpdateOne) SetBreedingTypeName(s string) *BreedingUpdateOne {
	buo.mutation.SetBreedingTypeName(s)
	return buo
}

// SetSemenFrozenTypeId sets the semenFrozenTypeId field.
func (buo *BreedingUpdateOne) SetSemenFrozenTypeId(i int64) *BreedingUpdateOne {
	buo.mutation.ResetSemenFrozenTypeId()
	buo.mutation.SetSemenFrozenTypeId(i)
	return buo
}

// AddSemenFrozenTypeId adds i to semenFrozenTypeId.
func (buo *BreedingUpdateOne) AddSemenFrozenTypeId(i int64) *BreedingUpdateOne {
	buo.mutation.AddSemenFrozenTypeId(i)
	return buo
}

// SetSemenFrozenTypeName sets the semenFrozenTypeName field.
func (buo *BreedingUpdateOne) SetSemenFrozenTypeName(s string) *BreedingUpdateOne {
	buo.mutation.SetSemenFrozenTypeName(s)
	return buo
}

// SetBullId sets the bullId field.
func (buo *BreedingUpdateOne) SetBullId(s string) *BreedingUpdateOne {
	buo.mutation.SetBullId(s)
	return buo
}

// SetShedName sets the shedName field.
func (buo *BreedingUpdateOne) SetShedName(s string) *BreedingUpdateOne {
	buo.mutation.SetShedName(s)
	return buo
}

// SetCount sets the count field.
func (buo *BreedingUpdateOne) SetCount(i int) *BreedingUpdateOne {
	buo.mutation.ResetCount()
	buo.mutation.SetCount(i)
	return buo
}

// AddCount adds i to count.
func (buo *BreedingUpdateOne) AddCount(i int) *BreedingUpdateOne {
	buo.mutation.AddCount(i)
	return buo
}

// SetUserName sets the userName field.
func (buo *BreedingUpdateOne) SetUserName(s string) *BreedingUpdateOne {
	buo.mutation.SetUserName(s)
	return buo
}

// SetRemarks sets the remarks field.
func (buo *BreedingUpdateOne) SetRemarks(s string) *BreedingUpdateOne {
	buo.mutation.SetRemarks(s)
	return buo
}

// SetCreatedAt sets the createdAt field.
func (buo *BreedingUpdateOne) SetCreatedAt(i int64) *BreedingUpdateOne {
	buo.mutation.ResetCreatedAt()
	buo.mutation.SetCreatedAt(i)
	return buo
}

// AddCreatedAt adds i to createdAt.
func (buo *BreedingUpdateOne) AddCreatedAt(i int64) *BreedingUpdateOne {
	buo.mutation.AddCreatedAt(i)
	return buo
}

// SetUpdatedAt sets the updatedAt field.
func (buo *BreedingUpdateOne) SetUpdatedAt(i int64) *BreedingUpdateOne {
	buo.mutation.ResetUpdatedAt()
	buo.mutation.SetUpdatedAt(i)
	return buo
}

// AddUpdatedAt adds i to updatedAt.
func (buo *BreedingUpdateOne) AddUpdatedAt(i int64) *BreedingUpdateOne {
	buo.mutation.AddUpdatedAt(i)
	return buo
}

// SetDeleted sets the deleted field.
func (buo *BreedingUpdateOne) SetDeleted(i int) *BreedingUpdateOne {
	buo.mutation.ResetDeleted()
	buo.mutation.SetDeleted(i)
	return buo
}

// AddDeleted adds i to deleted.
func (buo *BreedingUpdateOne) AddDeleted(i int) *BreedingUpdateOne {
	buo.mutation.AddDeleted(i)
	return buo
}

// Mutation returns the BreedingMutation object of the builder.
func (buo *BreedingUpdateOne) Mutation() *BreedingMutation {
	return buo.mutation
}

// Save executes the query and returns the updated entity.
func (buo *BreedingUpdateOne) Save(ctx context.Context) (*Breeding, error) {
	var (
		err  error
		node *Breeding
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BreedingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BreedingUpdateOne) SaveX(ctx context.Context) *Breeding {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BreedingUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BreedingUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BreedingUpdateOne) sqlSave(ctx context.Context) (_node *Breeding, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   breeding.Table,
			Columns: breeding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: breeding.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Breeding.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldName,
		})
	}
	if buo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: breeding.FieldName,
		})
	}
	if value, ok := buo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldEarNumber,
		})
	}
	if value, ok := buo.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldTimes,
		})
	}
	if value, ok := buo.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldTimes,
		})
	}
	if value, ok := buo.mutation.BreedingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldBreedingAt,
		})
	}
	if value, ok := buo.mutation.AddedBreedingAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldBreedingAt,
		})
	}
	if value, ok := buo.mutation.BreedingTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldBreedingTypeId,
		})
	}
	if value, ok := buo.mutation.AddedBreedingTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldBreedingTypeId,
		})
	}
	if value, ok := buo.mutation.BreedingTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldBreedingTypeName,
		})
	}
	if value, ok := buo.mutation.SemenFrozenTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldSemenFrozenTypeId,
		})
	}
	if value, ok := buo.mutation.AddedSemenFrozenTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldSemenFrozenTypeId,
		})
	}
	if value, ok := buo.mutation.SemenFrozenTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldSemenFrozenTypeName,
		})
	}
	if value, ok := buo.mutation.BullId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldBullId,
		})
	}
	if value, ok := buo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldShedName,
		})
	}
	if value, ok := buo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldCount,
		})
	}
	if value, ok := buo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldCount,
		})
	}
	if value, ok := buo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldUserName,
		})
	}
	if value, ok := buo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: breeding.FieldRemarks,
		})
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldCreatedAt,
		})
	}
	if value, ok := buo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldCreatedAt,
		})
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldUpdatedAt,
		})
	}
	if value, ok := buo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: breeding.FieldUpdatedAt,
		})
	}
	if value, ok := buo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldDeleted,
		})
	}
	if value, ok := buo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: breeding.FieldDeleted,
		})
	}
	_node = &Breeding{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{breeding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

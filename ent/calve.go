// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/calve"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Calve is the model entity for the Calve schema.
type Calve struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// Times holds the value of the "times" field.
	Times int `json:"times,omitempty"`
	// PregnantAt holds the value of the "pregnantAt" field.
	PregnantAt int64 `json:"pregnantAt,omitempty"`
	// CalveAt holds the value of the "calveAt" field.
	CalveAt int64 `json:"calveAt,omitempty"`
	// CalveTypeId holds the value of the "calveTypeId" field.
	CalveTypeId int `json:"calveTypeId,omitempty"`
	// CalveTypeName holds the value of the "calveTypeName" field.
	CalveTypeName string `json:"calveTypeName,omitempty"`
	// CalveCate holds the value of the "calveCate" field.
	CalveCate int `json:"calveCate,omitempty"`
	// CalveCountId holds the value of the "calveCountId" field.
	CalveCountId int `json:"calveCountId,omitempty"`
	// CalveCountName holds the value of the "calveCountName" field.
	CalveCountName string `json:"calveCountName,omitempty"`
	// Complexity holds the value of the "complexity" field.
	Complexity int `json:"complexity,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// BabyStatus holds the value of the "babyStatus" field.
	BabyStatus int `json:"babyStatus,omitempty"`
	// BabyGender holds the value of the "babyGender" field.
	BabyGender int `json:"babyGender,omitempty"`
	// BabyEarNumber holds the value of the "babyEarNumber" field.
	BabyEarNumber int `json:"babyEarNumber,omitempty"`
	// BabyBreedId holds the value of the "babyBreedId" field.
	BabyBreedId int `json:"babyBreedId,omitempty"`
	// BabyBreedName holds the value of the "babyBreedName" field.
	BabyBreedName string `json:"babyBreedName,omitempty"`
	// BabyHairColorId holds the value of the "babyHairColorId" field.
	BabyHairColorId int `json:"babyHairColorId,omitempty"`
	// BabyHairColorName holds the value of the "babyHairColorName" field.
	BabyHairColorName string `json:"babyHairColorName,omitempty"`
	// BabyWeight holds the value of the "babyWeight" field.
	BabyWeight float32 `json:"babyWeight,omitempty"`
	// BabyShedId holds the value of the "babyShedId" field.
	BabyShedId int `json:"babyShedId,omitempty"`
	// BabyShedName holds the value of the "babyShedName" field.
	BabyShedName string `json:"babyShedName,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Calve) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // name
		&sql.NullString{},  // earNumber
		&sql.NullInt64{},   // times
		&sql.NullInt64{},   // pregnantAt
		&sql.NullInt64{},   // calveAt
		&sql.NullInt64{},   // calveTypeId
		&sql.NullString{},  // calveTypeName
		&sql.NullInt64{},   // calveCate
		&sql.NullInt64{},   // calveCountId
		&sql.NullString{},  // calveCountName
		&sql.NullInt64{},   // complexity
		&sql.NullString{},  // userName
		&sql.NullInt64{},   // babyStatus
		&sql.NullInt64{},   // babyGender
		&sql.NullInt64{},   // babyEarNumber
		&sql.NullInt64{},   // babyBreedId
		&sql.NullString{},  // babyBreedName
		&sql.NullInt64{},   // babyHairColorId
		&sql.NullString{},  // babyHairColorName
		&sql.NullFloat64{}, // babyWeight
		&sql.NullInt64{},   // babyShedId
		&sql.NullString{},  // babyShedName
		&sql.NullInt64{},   // tenantId
		&sql.NullString{},  // tenantName
		&sql.NullString{},  // remarks
		&sql.NullInt64{},   // createdAt
		&sql.NullInt64{},   // updatedAt
		&sql.NullInt64{},   // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Calve fields.
func (c *Calve) assignValues(values ...interface{}) error {
	if m, n := len(values), len(calve.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[1])
	} else if value.Valid {
		c.EarNumber = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field times", values[2])
	} else if value.Valid {
		c.Times = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pregnantAt", values[3])
	} else if value.Valid {
		c.PregnantAt = value.Int64
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field calveAt", values[4])
	} else if value.Valid {
		c.CalveAt = value.Int64
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field calveTypeId", values[5])
	} else if value.Valid {
		c.CalveTypeId = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field calveTypeName", values[6])
	} else if value.Valid {
		c.CalveTypeName = value.String
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field calveCate", values[7])
	} else if value.Valid {
		c.CalveCate = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field calveCountId", values[8])
	} else if value.Valid {
		c.CalveCountId = int(value.Int64)
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field calveCountName", values[9])
	} else if value.Valid {
		c.CalveCountName = value.String
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field complexity", values[10])
	} else if value.Valid {
		c.Complexity = int(value.Int64)
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[11])
	} else if value.Valid {
		c.UserName = value.String
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field babyStatus", values[12])
	} else if value.Valid {
		c.BabyStatus = int(value.Int64)
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field babyGender", values[13])
	} else if value.Valid {
		c.BabyGender = int(value.Int64)
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field babyEarNumber", values[14])
	} else if value.Valid {
		c.BabyEarNumber = int(value.Int64)
	}
	if value, ok := values[15].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field babyBreedId", values[15])
	} else if value.Valid {
		c.BabyBreedId = int(value.Int64)
	}
	if value, ok := values[16].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field babyBreedName", values[16])
	} else if value.Valid {
		c.BabyBreedName = value.String
	}
	if value, ok := values[17].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field babyHairColorId", values[17])
	} else if value.Valid {
		c.BabyHairColorId = int(value.Int64)
	}
	if value, ok := values[18].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field babyHairColorName", values[18])
	} else if value.Valid {
		c.BabyHairColorName = value.String
	}
	if value, ok := values[19].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field babyWeight", values[19])
	} else if value.Valid {
		c.BabyWeight = float32(value.Float64)
	}
	if value, ok := values[20].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field babyShedId", values[20])
	} else if value.Valid {
		c.BabyShedId = int(value.Int64)
	}
	if value, ok := values[21].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field babyShedName", values[21])
	} else if value.Valid {
		c.BabyShedName = value.String
	}
	if value, ok := values[22].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[22])
	} else if value.Valid {
		c.TenantId = value.Int64
	}
	if value, ok := values[23].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[23])
	} else if value.Valid {
		c.TenantName = value.String
	}
	if value, ok := values[24].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[24])
	} else if value.Valid {
		c.Remarks = value.String
	}
	if value, ok := values[25].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[25])
	} else if value.Valid {
		c.CreatedAt = value.Int64
	}
	if value, ok := values[26].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[26])
	} else if value.Valid {
		c.UpdatedAt = value.Int64
	}
	if value, ok := values[27].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[27])
	} else if value.Valid {
		c.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Calve.
// Note that, you need to call Calve.Unwrap() before calling this method, if this Calve
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Calve) Update() *CalveUpdateOne {
	return (&CalveClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Calve) Unwrap() *Calve {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Calve is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Calve) String() string {
	var builder strings.Builder
	builder.WriteString("Calve(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", earNumber=")
	builder.WriteString(c.EarNumber)
	builder.WriteString(", times=")
	builder.WriteString(fmt.Sprintf("%v", c.Times))
	builder.WriteString(", pregnantAt=")
	builder.WriteString(fmt.Sprintf("%v", c.PregnantAt))
	builder.WriteString(", calveAt=")
	builder.WriteString(fmt.Sprintf("%v", c.CalveAt))
	builder.WriteString(", calveTypeId=")
	builder.WriteString(fmt.Sprintf("%v", c.CalveTypeId))
	builder.WriteString(", calveTypeName=")
	builder.WriteString(c.CalveTypeName)
	builder.WriteString(", calveCate=")
	builder.WriteString(fmt.Sprintf("%v", c.CalveCate))
	builder.WriteString(", calveCountId=")
	builder.WriteString(fmt.Sprintf("%v", c.CalveCountId))
	builder.WriteString(", calveCountName=")
	builder.WriteString(c.CalveCountName)
	builder.WriteString(", complexity=")
	builder.WriteString(fmt.Sprintf("%v", c.Complexity))
	builder.WriteString(", userName=")
	builder.WriteString(c.UserName)
	builder.WriteString(", babyStatus=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyStatus))
	builder.WriteString(", babyGender=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyGender))
	builder.WriteString(", babyEarNumber=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyEarNumber))
	builder.WriteString(", babyBreedId=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyBreedId))
	builder.WriteString(", babyBreedName=")
	builder.WriteString(c.BabyBreedName)
	builder.WriteString(", babyHairColorId=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyHairColorId))
	builder.WriteString(", babyHairColorName=")
	builder.WriteString(c.BabyHairColorName)
	builder.WriteString(", babyWeight=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyWeight))
	builder.WriteString(", babyShedId=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyShedId))
	builder.WriteString(", babyShedName=")
	builder.WriteString(c.BabyShedName)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", c.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(c.TenantName)
	builder.WriteString(", remarks=")
	builder.WriteString(c.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", c.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Calves is a parsable slice of Calve.
type Calves []*Calve

func (c Calves) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}

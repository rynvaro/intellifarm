// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/calve"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Calve is the model entity for the Calve schema.
type Calve struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 胎次
	Times int `json:"times,omitempty"`
	// 怀孕日期
	PregnantAt int64 `json:"pregnantAt,omitempty"`
	// CalveAt holds the value of the "calveAt" field.
	CalveAt int64 `json:"calveAt,omitempty"`
	// CalveTypeId holds the value of the "calveTypeId" field.
	CalveTypeId int `json:"calveTypeId,omitempty"`
	// CalveTypeName holds the value of the "calveTypeName" field.
	CalveTypeName string `json:"calveTypeName,omitempty"`
	// 产犊类别： 1 正常 2 早产
	CalveCate int `json:"calveCate,omitempty"`
	// CalveCountId holds the value of the "calveCountId" field.
	CalveCountId int `json:"calveCountId,omitempty"`
	// CalveCountName holds the value of the "calveCountName" field.
	CalveCountName string `json:"calveCountName,omitempty"`
	// Complexity holds the value of the "complexity" field.
	Complexity int `json:"complexity,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 胎儿状况： 1，正常 2 死胎
	BabyStatus int `json:"babyStatus,omitempty"`
	// 1 公 2 母
	BabyGender int `json:"babyGender,omitempty"`
	// BabyEarNumber holds the value of the "babyEarNumber" field.
	BabyEarNumber int `json:"babyEarNumber,omitempty"`
	// BabyBreedId holds the value of the "babyBreedId" field.
	BabyBreedId int `json:"babyBreedId,omitempty"`
	// BabyBreedName holds the value of the "babyBreedName" field.
	BabyBreedName string `json:"babyBreedName,omitempty"`
	// BabyHairColorId holds the value of the "babyHairColorId" field.
	BabyHairColorId int `json:"babyHairColorId,omitempty"`
	// BabyHairColorName holds the value of the "babyHairColorName" field.
	BabyHairColorName string `json:"babyHairColorName,omitempty"`
	// BabyWeight holds the value of the "babyWeight" field.
	BabyWeight float32 `json:"babyWeight,omitempty"`
	// BabyShedId holds the value of the "babyShedId" field.
	BabyShedId int `json:"babyShedId,omitempty"`
	// BabyShedName holds the value of the "babyShedName" field.
	BabyShedName string `json:"babyShedName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Calve) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case calve.FieldBabyWeight:
			values[i] = new(sql.NullFloat64)
		case calve.FieldID, calve.FieldCattleId, calve.FieldTenantId, calve.FieldFarmId, calve.FieldShedId, calve.FieldTimes, calve.FieldPregnantAt, calve.FieldCalveAt, calve.FieldCalveTypeId, calve.FieldCalveCate, calve.FieldCalveCountId, calve.FieldComplexity, calve.FieldBabyStatus, calve.FieldBabyGender, calve.FieldBabyEarNumber, calve.FieldBabyBreedId, calve.FieldBabyHairColorId, calve.FieldBabyShedId, calve.FieldCreatedAt, calve.FieldUpdatedAt, calve.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case calve.FieldTenantName, calve.FieldFarmName, calve.FieldShedName, calve.FieldName, calve.FieldEarNumber, calve.FieldCalveTypeName, calve.FieldCalveCountName, calve.FieldUserName, calve.FieldBabyBreedName, calve.FieldBabyHairColorName, calve.FieldBabyShedName, calve.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Calve", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Calve fields.
func (c *Calve) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case calve.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case calve.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				c.CattleId = value.Int64
			}
		case calve.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				c.TenantId = value.Int64
			}
		case calve.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				c.TenantName = value.String
			}
		case calve.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				c.FarmId = value.Int64
			}
		case calve.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				c.FarmName = value.String
			}
		case calve.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				c.ShedId = value.Int64
			}
		case calve.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				c.ShedName = value.String
			}
		case calve.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case calve.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				c.EarNumber = value.String
			}
		case calve.FieldTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field times", values[i])
			} else if value.Valid {
				c.Times = int(value.Int64)
			}
		case calve.FieldPregnantAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pregnantAt", values[i])
			} else if value.Valid {
				c.PregnantAt = value.Int64
			}
		case calve.FieldCalveAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field calveAt", values[i])
			} else if value.Valid {
				c.CalveAt = value.Int64
			}
		case calve.FieldCalveTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field calveTypeId", values[i])
			} else if value.Valid {
				c.CalveTypeId = int(value.Int64)
			}
		case calve.FieldCalveTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field calveTypeName", values[i])
			} else if value.Valid {
				c.CalveTypeName = value.String
			}
		case calve.FieldCalveCate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field calveCate", values[i])
			} else if value.Valid {
				c.CalveCate = int(value.Int64)
			}
		case calve.FieldCalveCountId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field calveCountId", values[i])
			} else if value.Valid {
				c.CalveCountId = int(value.Int64)
			}
		case calve.FieldCalveCountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field calveCountName", values[i])
			} else if value.Valid {
				c.CalveCountName = value.String
			}
		case calve.FieldComplexity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field complexity", values[i])
			} else if value.Valid {
				c.Complexity = int(value.Int64)
			}
		case calve.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				c.UserName = value.String
			}
		case calve.FieldBabyStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field babyStatus", values[i])
			} else if value.Valid {
				c.BabyStatus = int(value.Int64)
			}
		case calve.FieldBabyGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field babyGender", values[i])
			} else if value.Valid {
				c.BabyGender = int(value.Int64)
			}
		case calve.FieldBabyEarNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field babyEarNumber", values[i])
			} else if value.Valid {
				c.BabyEarNumber = int(value.Int64)
			}
		case calve.FieldBabyBreedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field babyBreedId", values[i])
			} else if value.Valid {
				c.BabyBreedId = int(value.Int64)
			}
		case calve.FieldBabyBreedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field babyBreedName", values[i])
			} else if value.Valid {
				c.BabyBreedName = value.String
			}
		case calve.FieldBabyHairColorId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field babyHairColorId", values[i])
			} else if value.Valid {
				c.BabyHairColorId = int(value.Int64)
			}
		case calve.FieldBabyHairColorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field babyHairColorName", values[i])
			} else if value.Valid {
				c.BabyHairColorName = value.String
			}
		case calve.FieldBabyWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field babyWeight", values[i])
			} else if value.Valid {
				c.BabyWeight = float32(value.Float64)
			}
		case calve.FieldBabyShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field babyShedId", values[i])
			} else if value.Valid {
				c.BabyShedId = int(value.Int64)
			}
		case calve.FieldBabyShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field babyShedName", values[i])
			} else if value.Valid {
				c.BabyShedName = value.String
			}
		case calve.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				c.Remarks = value.String
			}
		case calve.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Int64
			}
		case calve.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Int64
			}
		case calve.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				c.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Calve.
// Note that you need to call Calve.Unwrap() before calling this method if this Calve
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Calve) Update() *CalveUpdateOne {
	return (&CalveClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Calve entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Calve) Unwrap() *Calve {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Calve is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Calve) String() string {
	var builder strings.Builder
	builder.WriteString("Calve(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", c.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", c.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(c.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", c.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(c.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", c.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(c.ShedName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(c.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("times=")
	builder.WriteString(fmt.Sprintf("%v", c.Times))
	builder.WriteString(", ")
	builder.WriteString("pregnantAt=")
	builder.WriteString(fmt.Sprintf("%v", c.PregnantAt))
	builder.WriteString(", ")
	builder.WriteString("calveAt=")
	builder.WriteString(fmt.Sprintf("%v", c.CalveAt))
	builder.WriteString(", ")
	builder.WriteString("calveTypeId=")
	builder.WriteString(fmt.Sprintf("%v", c.CalveTypeId))
	builder.WriteString(", ")
	builder.WriteString("calveTypeName=")
	builder.WriteString(c.CalveTypeName)
	builder.WriteString(", ")
	builder.WriteString("calveCate=")
	builder.WriteString(fmt.Sprintf("%v", c.CalveCate))
	builder.WriteString(", ")
	builder.WriteString("calveCountId=")
	builder.WriteString(fmt.Sprintf("%v", c.CalveCountId))
	builder.WriteString(", ")
	builder.WriteString("calveCountName=")
	builder.WriteString(c.CalveCountName)
	builder.WriteString(", ")
	builder.WriteString("complexity=")
	builder.WriteString(fmt.Sprintf("%v", c.Complexity))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(c.UserName)
	builder.WriteString(", ")
	builder.WriteString("babyStatus=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyStatus))
	builder.WriteString(", ")
	builder.WriteString("babyGender=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyGender))
	builder.WriteString(", ")
	builder.WriteString("babyEarNumber=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyEarNumber))
	builder.WriteString(", ")
	builder.WriteString("babyBreedId=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyBreedId))
	builder.WriteString(", ")
	builder.WriteString("babyBreedName=")
	builder.WriteString(c.BabyBreedName)
	builder.WriteString(", ")
	builder.WriteString("babyHairColorId=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyHairColorId))
	builder.WriteString(", ")
	builder.WriteString("babyHairColorName=")
	builder.WriteString(c.BabyHairColorName)
	builder.WriteString(", ")
	builder.WriteString("babyWeight=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyWeight))
	builder.WriteString(", ")
	builder.WriteString("babyShedId=")
	builder.WriteString(fmt.Sprintf("%v", c.BabyShedId))
	builder.WriteString(", ")
	builder.WriteString("babyShedName=")
	builder.WriteString(c.BabyShedName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(c.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", c.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Calves is a parsable slice of Calve.
type Calves []*Calve

func (c Calves) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}

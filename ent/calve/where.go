// Code generated by entc, DO NOT EDIT.

package calve

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CattleId applies equality check predicate on the "cattleId" field. It's identical to CattleIdEQ.
func CattleId(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCattleId), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// FarmId applies equality check predicate on the "farmId" field. It's identical to FarmIdEQ.
func FarmId(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmName applies equality check predicate on the "farmName" field. It's identical to FarmNameEQ.
func FarmName(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// ShedId applies equality check predicate on the "shedId" field. It's identical to ShedIdEQ.
func ShedId(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedId), v))
	})
}

// ShedName applies equality check predicate on the "shedName" field. It's identical to ShedNameEQ.
func ShedName(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// EarNumber applies equality check predicate on the "earNumber" field. It's identical to EarNumberEQ.
func EarNumber(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// Times applies equality check predicate on the "times" field. It's identical to TimesEQ.
func Times(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// PregnantAt applies equality check predicate on the "pregnantAt" field. It's identical to PregnantAtEQ.
func PregnantAt(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPregnantAt), v))
	})
}

// CalveAt applies equality check predicate on the "calveAt" field. It's identical to CalveAtEQ.
func CalveAt(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveAt), v))
	})
}

// CalveTypeId applies equality check predicate on the "calveTypeId" field. It's identical to CalveTypeIdEQ.
func CalveTypeId(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveTypeId), v))
	})
}

// CalveTypeName applies equality check predicate on the "calveTypeName" field. It's identical to CalveTypeNameEQ.
func CalveTypeName(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveTypeName), v))
	})
}

// CalveCate applies equality check predicate on the "calveCate" field. It's identical to CalveCateEQ.
func CalveCate(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveCate), v))
	})
}

// CalveCountId applies equality check predicate on the "calveCountId" field. It's identical to CalveCountIdEQ.
func CalveCountId(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveCountId), v))
	})
}

// CalveCountName applies equality check predicate on the "calveCountName" field. It's identical to CalveCountNameEQ.
func CalveCountName(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveCountName), v))
	})
}

// Complexity applies equality check predicate on the "complexity" field. It's identical to ComplexityEQ.
func Complexity(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComplexity), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// BabyStatus applies equality check predicate on the "babyStatus" field. It's identical to BabyStatusEQ.
func BabyStatus(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyStatus), v))
	})
}

// BabyGender applies equality check predicate on the "babyGender" field. It's identical to BabyGenderEQ.
func BabyGender(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyGender), v))
	})
}

// BabyEarNumber applies equality check predicate on the "babyEarNumber" field. It's identical to BabyEarNumberEQ.
func BabyEarNumber(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyEarNumber), v))
	})
}

// BabyBreedId applies equality check predicate on the "babyBreedId" field. It's identical to BabyBreedIdEQ.
func BabyBreedId(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyBreedId), v))
	})
}

// BabyBreedName applies equality check predicate on the "babyBreedName" field. It's identical to BabyBreedNameEQ.
func BabyBreedName(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyBreedName), v))
	})
}

// BabyHairColorId applies equality check predicate on the "babyHairColorId" field. It's identical to BabyHairColorIdEQ.
func BabyHairColorId(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyHairColorId), v))
	})
}

// BabyHairColorName applies equality check predicate on the "babyHairColorName" field. It's identical to BabyHairColorNameEQ.
func BabyHairColorName(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyHairColorName), v))
	})
}

// BabyWeight applies equality check predicate on the "babyWeight" field. It's identical to BabyWeightEQ.
func BabyWeight(v float32) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyWeight), v))
	})
}

// BabyShedId applies equality check predicate on the "babyShedId" field. It's identical to BabyShedIdEQ.
func BabyShedId(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyShedId), v))
	})
}

// BabyShedName applies equality check predicate on the "babyShedName" field. It's identical to BabyShedNameEQ.
func BabyShedName(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyShedName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// CattleIdEQ applies the EQ predicate on the "cattleId" field.
func CattleIdEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCattleId), v))
	})
}

// CattleIdNEQ applies the NEQ predicate on the "cattleId" field.
func CattleIdNEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCattleId), v))
	})
}

// CattleIdIn applies the In predicate on the "cattleId" field.
func CattleIdIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCattleId), v...))
	})
}

// CattleIdNotIn applies the NotIn predicate on the "cattleId" field.
func CattleIdNotIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCattleId), v...))
	})
}

// CattleIdGT applies the GT predicate on the "cattleId" field.
func CattleIdGT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCattleId), v))
	})
}

// CattleIdGTE applies the GTE predicate on the "cattleId" field.
func CattleIdGTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCattleId), v))
	})
}

// CattleIdLT applies the LT predicate on the "cattleId" field.
func CattleIdLT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCattleId), v))
	})
}

// CattleIdLTE applies the LTE predicate on the "cattleId" field.
func CattleIdLTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCattleId), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// FarmIdEQ applies the EQ predicate on the "farmId" field.
func FarmIdEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmIdNEQ applies the NEQ predicate on the "farmId" field.
func FarmIdNEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmId), v))
	})
}

// FarmIdIn applies the In predicate on the "farmId" field.
func FarmIdIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFarmId), v...))
	})
}

// FarmIdNotIn applies the NotIn predicate on the "farmId" field.
func FarmIdNotIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFarmId), v...))
	})
}

// FarmIdGT applies the GT predicate on the "farmId" field.
func FarmIdGT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmId), v))
	})
}

// FarmIdGTE applies the GTE predicate on the "farmId" field.
func FarmIdGTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmId), v))
	})
}

// FarmIdLT applies the LT predicate on the "farmId" field.
func FarmIdLT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmId), v))
	})
}

// FarmIdLTE applies the LTE predicate on the "farmId" field.
func FarmIdLTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmId), v))
	})
}

// FarmNameEQ applies the EQ predicate on the "farmName" field.
func FarmNameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// FarmNameNEQ applies the NEQ predicate on the "farmName" field.
func FarmNameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmName), v))
	})
}

// FarmNameIn applies the In predicate on the "farmName" field.
func FarmNameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFarmName), v...))
	})
}

// FarmNameNotIn applies the NotIn predicate on the "farmName" field.
func FarmNameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFarmName), v...))
	})
}

// FarmNameGT applies the GT predicate on the "farmName" field.
func FarmNameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmName), v))
	})
}

// FarmNameGTE applies the GTE predicate on the "farmName" field.
func FarmNameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmName), v))
	})
}

// FarmNameLT applies the LT predicate on the "farmName" field.
func FarmNameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmName), v))
	})
}

// FarmNameLTE applies the LTE predicate on the "farmName" field.
func FarmNameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmName), v))
	})
}

// FarmNameContains applies the Contains predicate on the "farmName" field.
func FarmNameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFarmName), v))
	})
}

// FarmNameHasPrefix applies the HasPrefix predicate on the "farmName" field.
func FarmNameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFarmName), v))
	})
}

// FarmNameHasSuffix applies the HasSuffix predicate on the "farmName" field.
func FarmNameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFarmName), v))
	})
}

// FarmNameEqualFold applies the EqualFold predicate on the "farmName" field.
func FarmNameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFarmName), v))
	})
}

// FarmNameContainsFold applies the ContainsFold predicate on the "farmName" field.
func FarmNameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFarmName), v))
	})
}

// ShedIdEQ applies the EQ predicate on the "shedId" field.
func ShedIdEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedId), v))
	})
}

// ShedIdNEQ applies the NEQ predicate on the "shedId" field.
func ShedIdNEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedId), v))
	})
}

// ShedIdIn applies the In predicate on the "shedId" field.
func ShedIdIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShedId), v...))
	})
}

// ShedIdNotIn applies the NotIn predicate on the "shedId" field.
func ShedIdNotIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShedId), v...))
	})
}

// ShedIdGT applies the GT predicate on the "shedId" field.
func ShedIdGT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedId), v))
	})
}

// ShedIdGTE applies the GTE predicate on the "shedId" field.
func ShedIdGTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedId), v))
	})
}

// ShedIdLT applies the LT predicate on the "shedId" field.
func ShedIdLT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedId), v))
	})
}

// ShedIdLTE applies the LTE predicate on the "shedId" field.
func ShedIdLTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedId), v))
	})
}

// ShedNameEQ applies the EQ predicate on the "shedName" field.
func ShedNameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// ShedNameNEQ applies the NEQ predicate on the "shedName" field.
func ShedNameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedName), v))
	})
}

// ShedNameIn applies the In predicate on the "shedName" field.
func ShedNameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShedName), v...))
	})
}

// ShedNameNotIn applies the NotIn predicate on the "shedName" field.
func ShedNameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShedName), v...))
	})
}

// ShedNameGT applies the GT predicate on the "shedName" field.
func ShedNameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedName), v))
	})
}

// ShedNameGTE applies the GTE predicate on the "shedName" field.
func ShedNameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedName), v))
	})
}

// ShedNameLT applies the LT predicate on the "shedName" field.
func ShedNameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedName), v))
	})
}

// ShedNameLTE applies the LTE predicate on the "shedName" field.
func ShedNameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedName), v))
	})
}

// ShedNameContains applies the Contains predicate on the "shedName" field.
func ShedNameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedName), v))
	})
}

// ShedNameHasPrefix applies the HasPrefix predicate on the "shedName" field.
func ShedNameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedName), v))
	})
}

// ShedNameHasSuffix applies the HasSuffix predicate on the "shedName" field.
func ShedNameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedName), v))
	})
}

// ShedNameEqualFold applies the EqualFold predicate on the "shedName" field.
func ShedNameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedName), v))
	})
}

// ShedNameContainsFold applies the ContainsFold predicate on the "shedName" field.
func ShedNameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedName), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EarNumberEQ applies the EQ predicate on the "earNumber" field.
func EarNumberEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberNEQ applies the NEQ predicate on the "earNumber" field.
func EarNumberNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberIn applies the In predicate on the "earNumber" field.
func EarNumberIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEarNumber), v...))
	})
}

// EarNumberNotIn applies the NotIn predicate on the "earNumber" field.
func EarNumberNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEarNumber), v...))
	})
}

// EarNumberGT applies the GT predicate on the "earNumber" field.
func EarNumberGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEarNumber), v))
	})
}

// EarNumberGTE applies the GTE predicate on the "earNumber" field.
func EarNumberGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberLT applies the LT predicate on the "earNumber" field.
func EarNumberLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEarNumber), v))
	})
}

// EarNumberLTE applies the LTE predicate on the "earNumber" field.
func EarNumberLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberContains applies the Contains predicate on the "earNumber" field.
func EarNumberContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasPrefix applies the HasPrefix predicate on the "earNumber" field.
func EarNumberHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasSuffix applies the HasSuffix predicate on the "earNumber" field.
func EarNumberHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEarNumber), v))
	})
}

// EarNumberEqualFold applies the EqualFold predicate on the "earNumber" field.
func EarNumberEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEarNumber), v))
	})
}

// EarNumberContainsFold applies the ContainsFold predicate on the "earNumber" field.
func EarNumberContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEarNumber), v))
	})
}

// TimesEQ applies the EQ predicate on the "times" field.
func TimesEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// TimesNEQ applies the NEQ predicate on the "times" field.
func TimesNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimes), v))
	})
}

// TimesIn applies the In predicate on the "times" field.
func TimesIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimes), v...))
	})
}

// TimesNotIn applies the NotIn predicate on the "times" field.
func TimesNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimes), v...))
	})
}

// TimesGT applies the GT predicate on the "times" field.
func TimesGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimes), v))
	})
}

// TimesGTE applies the GTE predicate on the "times" field.
func TimesGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimes), v))
	})
}

// TimesLT applies the LT predicate on the "times" field.
func TimesLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimes), v))
	})
}

// TimesLTE applies the LTE predicate on the "times" field.
func TimesLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimes), v))
	})
}

// PregnantAtEQ applies the EQ predicate on the "pregnantAt" field.
func PregnantAtEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPregnantAt), v))
	})
}

// PregnantAtNEQ applies the NEQ predicate on the "pregnantAt" field.
func PregnantAtNEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPregnantAt), v))
	})
}

// PregnantAtIn applies the In predicate on the "pregnantAt" field.
func PregnantAtIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPregnantAt), v...))
	})
}

// PregnantAtNotIn applies the NotIn predicate on the "pregnantAt" field.
func PregnantAtNotIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPregnantAt), v...))
	})
}

// PregnantAtGT applies the GT predicate on the "pregnantAt" field.
func PregnantAtGT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPregnantAt), v))
	})
}

// PregnantAtGTE applies the GTE predicate on the "pregnantAt" field.
func PregnantAtGTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPregnantAt), v))
	})
}

// PregnantAtLT applies the LT predicate on the "pregnantAt" field.
func PregnantAtLT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPregnantAt), v))
	})
}

// PregnantAtLTE applies the LTE predicate on the "pregnantAt" field.
func PregnantAtLTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPregnantAt), v))
	})
}

// CalveAtEQ applies the EQ predicate on the "calveAt" field.
func CalveAtEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveAt), v))
	})
}

// CalveAtNEQ applies the NEQ predicate on the "calveAt" field.
func CalveAtNEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCalveAt), v))
	})
}

// CalveAtIn applies the In predicate on the "calveAt" field.
func CalveAtIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCalveAt), v...))
	})
}

// CalveAtNotIn applies the NotIn predicate on the "calveAt" field.
func CalveAtNotIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCalveAt), v...))
	})
}

// CalveAtGT applies the GT predicate on the "calveAt" field.
func CalveAtGT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCalveAt), v))
	})
}

// CalveAtGTE applies the GTE predicate on the "calveAt" field.
func CalveAtGTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCalveAt), v))
	})
}

// CalveAtLT applies the LT predicate on the "calveAt" field.
func CalveAtLT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCalveAt), v))
	})
}

// CalveAtLTE applies the LTE predicate on the "calveAt" field.
func CalveAtLTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCalveAt), v))
	})
}

// CalveTypeIdEQ applies the EQ predicate on the "calveTypeId" field.
func CalveTypeIdEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveTypeId), v))
	})
}

// CalveTypeIdNEQ applies the NEQ predicate on the "calveTypeId" field.
func CalveTypeIdNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCalveTypeId), v))
	})
}

// CalveTypeIdIn applies the In predicate on the "calveTypeId" field.
func CalveTypeIdIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCalveTypeId), v...))
	})
}

// CalveTypeIdNotIn applies the NotIn predicate on the "calveTypeId" field.
func CalveTypeIdNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCalveTypeId), v...))
	})
}

// CalveTypeIdGT applies the GT predicate on the "calveTypeId" field.
func CalveTypeIdGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCalveTypeId), v))
	})
}

// CalveTypeIdGTE applies the GTE predicate on the "calveTypeId" field.
func CalveTypeIdGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCalveTypeId), v))
	})
}

// CalveTypeIdLT applies the LT predicate on the "calveTypeId" field.
func CalveTypeIdLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCalveTypeId), v))
	})
}

// CalveTypeIdLTE applies the LTE predicate on the "calveTypeId" field.
func CalveTypeIdLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCalveTypeId), v))
	})
}

// CalveTypeNameEQ applies the EQ predicate on the "calveTypeName" field.
func CalveTypeNameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameNEQ applies the NEQ predicate on the "calveTypeName" field.
func CalveTypeNameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameIn applies the In predicate on the "calveTypeName" field.
func CalveTypeNameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCalveTypeName), v...))
	})
}

// CalveTypeNameNotIn applies the NotIn predicate on the "calveTypeName" field.
func CalveTypeNameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCalveTypeName), v...))
	})
}

// CalveTypeNameGT applies the GT predicate on the "calveTypeName" field.
func CalveTypeNameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameGTE applies the GTE predicate on the "calveTypeName" field.
func CalveTypeNameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameLT applies the LT predicate on the "calveTypeName" field.
func CalveTypeNameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameLTE applies the LTE predicate on the "calveTypeName" field.
func CalveTypeNameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameContains applies the Contains predicate on the "calveTypeName" field.
func CalveTypeNameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameHasPrefix applies the HasPrefix predicate on the "calveTypeName" field.
func CalveTypeNameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameHasSuffix applies the HasSuffix predicate on the "calveTypeName" field.
func CalveTypeNameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameEqualFold applies the EqualFold predicate on the "calveTypeName" field.
func CalveTypeNameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCalveTypeName), v))
	})
}

// CalveTypeNameContainsFold applies the ContainsFold predicate on the "calveTypeName" field.
func CalveTypeNameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCalveTypeName), v))
	})
}

// CalveCateEQ applies the EQ predicate on the "calveCate" field.
func CalveCateEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveCate), v))
	})
}

// CalveCateNEQ applies the NEQ predicate on the "calveCate" field.
func CalveCateNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCalveCate), v))
	})
}

// CalveCateIn applies the In predicate on the "calveCate" field.
func CalveCateIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCalveCate), v...))
	})
}

// CalveCateNotIn applies the NotIn predicate on the "calveCate" field.
func CalveCateNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCalveCate), v...))
	})
}

// CalveCateGT applies the GT predicate on the "calveCate" field.
func CalveCateGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCalveCate), v))
	})
}

// CalveCateGTE applies the GTE predicate on the "calveCate" field.
func CalveCateGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCalveCate), v))
	})
}

// CalveCateLT applies the LT predicate on the "calveCate" field.
func CalveCateLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCalveCate), v))
	})
}

// CalveCateLTE applies the LTE predicate on the "calveCate" field.
func CalveCateLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCalveCate), v))
	})
}

// CalveCountIdEQ applies the EQ predicate on the "calveCountId" field.
func CalveCountIdEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveCountId), v))
	})
}

// CalveCountIdNEQ applies the NEQ predicate on the "calveCountId" field.
func CalveCountIdNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCalveCountId), v))
	})
}

// CalveCountIdIn applies the In predicate on the "calveCountId" field.
func CalveCountIdIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCalveCountId), v...))
	})
}

// CalveCountIdNotIn applies the NotIn predicate on the "calveCountId" field.
func CalveCountIdNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCalveCountId), v...))
	})
}

// CalveCountIdGT applies the GT predicate on the "calveCountId" field.
func CalveCountIdGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCalveCountId), v))
	})
}

// CalveCountIdGTE applies the GTE predicate on the "calveCountId" field.
func CalveCountIdGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCalveCountId), v))
	})
}

// CalveCountIdLT applies the LT predicate on the "calveCountId" field.
func CalveCountIdLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCalveCountId), v))
	})
}

// CalveCountIdLTE applies the LTE predicate on the "calveCountId" field.
func CalveCountIdLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCalveCountId), v))
	})
}

// CalveCountNameEQ applies the EQ predicate on the "calveCountName" field.
func CalveCountNameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameNEQ applies the NEQ predicate on the "calveCountName" field.
func CalveCountNameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameIn applies the In predicate on the "calveCountName" field.
func CalveCountNameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCalveCountName), v...))
	})
}

// CalveCountNameNotIn applies the NotIn predicate on the "calveCountName" field.
func CalveCountNameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCalveCountName), v...))
	})
}

// CalveCountNameGT applies the GT predicate on the "calveCountName" field.
func CalveCountNameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameGTE applies the GTE predicate on the "calveCountName" field.
func CalveCountNameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameLT applies the LT predicate on the "calveCountName" field.
func CalveCountNameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameLTE applies the LTE predicate on the "calveCountName" field.
func CalveCountNameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameContains applies the Contains predicate on the "calveCountName" field.
func CalveCountNameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameHasPrefix applies the HasPrefix predicate on the "calveCountName" field.
func CalveCountNameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameHasSuffix applies the HasSuffix predicate on the "calveCountName" field.
func CalveCountNameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameEqualFold applies the EqualFold predicate on the "calveCountName" field.
func CalveCountNameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCalveCountName), v))
	})
}

// CalveCountNameContainsFold applies the ContainsFold predicate on the "calveCountName" field.
func CalveCountNameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCalveCountName), v))
	})
}

// ComplexityEQ applies the EQ predicate on the "complexity" field.
func ComplexityEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComplexity), v))
	})
}

// ComplexityNEQ applies the NEQ predicate on the "complexity" field.
func ComplexityNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComplexity), v))
	})
}

// ComplexityIn applies the In predicate on the "complexity" field.
func ComplexityIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComplexity), v...))
	})
}

// ComplexityNotIn applies the NotIn predicate on the "complexity" field.
func ComplexityNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComplexity), v...))
	})
}

// ComplexityGT applies the GT predicate on the "complexity" field.
func ComplexityGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComplexity), v))
	})
}

// ComplexityGTE applies the GTE predicate on the "complexity" field.
func ComplexityGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComplexity), v))
	})
}

// ComplexityLT applies the LT predicate on the "complexity" field.
func ComplexityLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComplexity), v))
	})
}

// ComplexityLTE applies the LTE predicate on the "complexity" field.
func ComplexityLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComplexity), v))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// BabyStatusEQ applies the EQ predicate on the "babyStatus" field.
func BabyStatusEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyStatus), v))
	})
}

// BabyStatusNEQ applies the NEQ predicate on the "babyStatus" field.
func BabyStatusNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyStatus), v))
	})
}

// BabyStatusIn applies the In predicate on the "babyStatus" field.
func BabyStatusIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyStatus), v...))
	})
}

// BabyStatusNotIn applies the NotIn predicate on the "babyStatus" field.
func BabyStatusNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyStatus), v...))
	})
}

// BabyStatusGT applies the GT predicate on the "babyStatus" field.
func BabyStatusGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyStatus), v))
	})
}

// BabyStatusGTE applies the GTE predicate on the "babyStatus" field.
func BabyStatusGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyStatus), v))
	})
}

// BabyStatusLT applies the LT predicate on the "babyStatus" field.
func BabyStatusLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyStatus), v))
	})
}

// BabyStatusLTE applies the LTE predicate on the "babyStatus" field.
func BabyStatusLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyStatus), v))
	})
}

// BabyGenderEQ applies the EQ predicate on the "babyGender" field.
func BabyGenderEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyGender), v))
	})
}

// BabyGenderNEQ applies the NEQ predicate on the "babyGender" field.
func BabyGenderNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyGender), v))
	})
}

// BabyGenderIn applies the In predicate on the "babyGender" field.
func BabyGenderIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyGender), v...))
	})
}

// BabyGenderNotIn applies the NotIn predicate on the "babyGender" field.
func BabyGenderNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyGender), v...))
	})
}

// BabyGenderGT applies the GT predicate on the "babyGender" field.
func BabyGenderGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyGender), v))
	})
}

// BabyGenderGTE applies the GTE predicate on the "babyGender" field.
func BabyGenderGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyGender), v))
	})
}

// BabyGenderLT applies the LT predicate on the "babyGender" field.
func BabyGenderLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyGender), v))
	})
}

// BabyGenderLTE applies the LTE predicate on the "babyGender" field.
func BabyGenderLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyGender), v))
	})
}

// BabyEarNumberEQ applies the EQ predicate on the "babyEarNumber" field.
func BabyEarNumberEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyEarNumber), v))
	})
}

// BabyEarNumberNEQ applies the NEQ predicate on the "babyEarNumber" field.
func BabyEarNumberNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyEarNumber), v))
	})
}

// BabyEarNumberIn applies the In predicate on the "babyEarNumber" field.
func BabyEarNumberIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyEarNumber), v...))
	})
}

// BabyEarNumberNotIn applies the NotIn predicate on the "babyEarNumber" field.
func BabyEarNumberNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyEarNumber), v...))
	})
}

// BabyEarNumberGT applies the GT predicate on the "babyEarNumber" field.
func BabyEarNumberGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyEarNumber), v))
	})
}

// BabyEarNumberGTE applies the GTE predicate on the "babyEarNumber" field.
func BabyEarNumberGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyEarNumber), v))
	})
}

// BabyEarNumberLT applies the LT predicate on the "babyEarNumber" field.
func BabyEarNumberLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyEarNumber), v))
	})
}

// BabyEarNumberLTE applies the LTE predicate on the "babyEarNumber" field.
func BabyEarNumberLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyEarNumber), v))
	})
}

// BabyBreedIdEQ applies the EQ predicate on the "babyBreedId" field.
func BabyBreedIdEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyBreedId), v))
	})
}

// BabyBreedIdNEQ applies the NEQ predicate on the "babyBreedId" field.
func BabyBreedIdNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyBreedId), v))
	})
}

// BabyBreedIdIn applies the In predicate on the "babyBreedId" field.
func BabyBreedIdIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyBreedId), v...))
	})
}

// BabyBreedIdNotIn applies the NotIn predicate on the "babyBreedId" field.
func BabyBreedIdNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyBreedId), v...))
	})
}

// BabyBreedIdGT applies the GT predicate on the "babyBreedId" field.
func BabyBreedIdGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyBreedId), v))
	})
}

// BabyBreedIdGTE applies the GTE predicate on the "babyBreedId" field.
func BabyBreedIdGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyBreedId), v))
	})
}

// BabyBreedIdLT applies the LT predicate on the "babyBreedId" field.
func BabyBreedIdLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyBreedId), v))
	})
}

// BabyBreedIdLTE applies the LTE predicate on the "babyBreedId" field.
func BabyBreedIdLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyBreedId), v))
	})
}

// BabyBreedNameEQ applies the EQ predicate on the "babyBreedName" field.
func BabyBreedNameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameNEQ applies the NEQ predicate on the "babyBreedName" field.
func BabyBreedNameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameIn applies the In predicate on the "babyBreedName" field.
func BabyBreedNameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyBreedName), v...))
	})
}

// BabyBreedNameNotIn applies the NotIn predicate on the "babyBreedName" field.
func BabyBreedNameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyBreedName), v...))
	})
}

// BabyBreedNameGT applies the GT predicate on the "babyBreedName" field.
func BabyBreedNameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameGTE applies the GTE predicate on the "babyBreedName" field.
func BabyBreedNameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameLT applies the LT predicate on the "babyBreedName" field.
func BabyBreedNameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameLTE applies the LTE predicate on the "babyBreedName" field.
func BabyBreedNameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameContains applies the Contains predicate on the "babyBreedName" field.
func BabyBreedNameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameHasPrefix applies the HasPrefix predicate on the "babyBreedName" field.
func BabyBreedNameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameHasSuffix applies the HasSuffix predicate on the "babyBreedName" field.
func BabyBreedNameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameEqualFold applies the EqualFold predicate on the "babyBreedName" field.
func BabyBreedNameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBabyBreedName), v))
	})
}

// BabyBreedNameContainsFold applies the ContainsFold predicate on the "babyBreedName" field.
func BabyBreedNameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBabyBreedName), v))
	})
}

// BabyHairColorIdEQ applies the EQ predicate on the "babyHairColorId" field.
func BabyHairColorIdEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyHairColorId), v))
	})
}

// BabyHairColorIdNEQ applies the NEQ predicate on the "babyHairColorId" field.
func BabyHairColorIdNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyHairColorId), v))
	})
}

// BabyHairColorIdIn applies the In predicate on the "babyHairColorId" field.
func BabyHairColorIdIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyHairColorId), v...))
	})
}

// BabyHairColorIdNotIn applies the NotIn predicate on the "babyHairColorId" field.
func BabyHairColorIdNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyHairColorId), v...))
	})
}

// BabyHairColorIdGT applies the GT predicate on the "babyHairColorId" field.
func BabyHairColorIdGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyHairColorId), v))
	})
}

// BabyHairColorIdGTE applies the GTE predicate on the "babyHairColorId" field.
func BabyHairColorIdGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyHairColorId), v))
	})
}

// BabyHairColorIdLT applies the LT predicate on the "babyHairColorId" field.
func BabyHairColorIdLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyHairColorId), v))
	})
}

// BabyHairColorIdLTE applies the LTE predicate on the "babyHairColorId" field.
func BabyHairColorIdLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyHairColorId), v))
	})
}

// BabyHairColorNameEQ applies the EQ predicate on the "babyHairColorName" field.
func BabyHairColorNameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameNEQ applies the NEQ predicate on the "babyHairColorName" field.
func BabyHairColorNameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameIn applies the In predicate on the "babyHairColorName" field.
func BabyHairColorNameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyHairColorName), v...))
	})
}

// BabyHairColorNameNotIn applies the NotIn predicate on the "babyHairColorName" field.
func BabyHairColorNameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyHairColorName), v...))
	})
}

// BabyHairColorNameGT applies the GT predicate on the "babyHairColorName" field.
func BabyHairColorNameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameGTE applies the GTE predicate on the "babyHairColorName" field.
func BabyHairColorNameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameLT applies the LT predicate on the "babyHairColorName" field.
func BabyHairColorNameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameLTE applies the LTE predicate on the "babyHairColorName" field.
func BabyHairColorNameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameContains applies the Contains predicate on the "babyHairColorName" field.
func BabyHairColorNameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameHasPrefix applies the HasPrefix predicate on the "babyHairColorName" field.
func BabyHairColorNameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameHasSuffix applies the HasSuffix predicate on the "babyHairColorName" field.
func BabyHairColorNameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameEqualFold applies the EqualFold predicate on the "babyHairColorName" field.
func BabyHairColorNameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBabyHairColorName), v))
	})
}

// BabyHairColorNameContainsFold applies the ContainsFold predicate on the "babyHairColorName" field.
func BabyHairColorNameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBabyHairColorName), v))
	})
}

// BabyWeightEQ applies the EQ predicate on the "babyWeight" field.
func BabyWeightEQ(v float32) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyWeight), v))
	})
}

// BabyWeightNEQ applies the NEQ predicate on the "babyWeight" field.
func BabyWeightNEQ(v float32) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyWeight), v))
	})
}

// BabyWeightIn applies the In predicate on the "babyWeight" field.
func BabyWeightIn(vs ...float32) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyWeight), v...))
	})
}

// BabyWeightNotIn applies the NotIn predicate on the "babyWeight" field.
func BabyWeightNotIn(vs ...float32) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyWeight), v...))
	})
}

// BabyWeightGT applies the GT predicate on the "babyWeight" field.
func BabyWeightGT(v float32) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyWeight), v))
	})
}

// BabyWeightGTE applies the GTE predicate on the "babyWeight" field.
func BabyWeightGTE(v float32) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyWeight), v))
	})
}

// BabyWeightLT applies the LT predicate on the "babyWeight" field.
func BabyWeightLT(v float32) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyWeight), v))
	})
}

// BabyWeightLTE applies the LTE predicate on the "babyWeight" field.
func BabyWeightLTE(v float32) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyWeight), v))
	})
}

// BabyShedIdEQ applies the EQ predicate on the "babyShedId" field.
func BabyShedIdEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyShedId), v))
	})
}

// BabyShedIdNEQ applies the NEQ predicate on the "babyShedId" field.
func BabyShedIdNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyShedId), v))
	})
}

// BabyShedIdIn applies the In predicate on the "babyShedId" field.
func BabyShedIdIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyShedId), v...))
	})
}

// BabyShedIdNotIn applies the NotIn predicate on the "babyShedId" field.
func BabyShedIdNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyShedId), v...))
	})
}

// BabyShedIdGT applies the GT predicate on the "babyShedId" field.
func BabyShedIdGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyShedId), v))
	})
}

// BabyShedIdGTE applies the GTE predicate on the "babyShedId" field.
func BabyShedIdGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyShedId), v))
	})
}

// BabyShedIdLT applies the LT predicate on the "babyShedId" field.
func BabyShedIdLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyShedId), v))
	})
}

// BabyShedIdLTE applies the LTE predicate on the "babyShedId" field.
func BabyShedIdLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyShedId), v))
	})
}

// BabyShedNameEQ applies the EQ predicate on the "babyShedName" field.
func BabyShedNameEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameNEQ applies the NEQ predicate on the "babyShedName" field.
func BabyShedNameNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameIn applies the In predicate on the "babyShedName" field.
func BabyShedNameIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBabyShedName), v...))
	})
}

// BabyShedNameNotIn applies the NotIn predicate on the "babyShedName" field.
func BabyShedNameNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBabyShedName), v...))
	})
}

// BabyShedNameGT applies the GT predicate on the "babyShedName" field.
func BabyShedNameGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameGTE applies the GTE predicate on the "babyShedName" field.
func BabyShedNameGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameLT applies the LT predicate on the "babyShedName" field.
func BabyShedNameLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameLTE applies the LTE predicate on the "babyShedName" field.
func BabyShedNameLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameContains applies the Contains predicate on the "babyShedName" field.
func BabyShedNameContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameHasPrefix applies the HasPrefix predicate on the "babyShedName" field.
func BabyShedNameHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameHasSuffix applies the HasSuffix predicate on the "babyShedName" field.
func BabyShedNameHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameEqualFold applies the EqualFold predicate on the "babyShedName" field.
func BabyShedNameEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBabyShedName), v))
	})
}

// BabyShedNameContainsFold applies the ContainsFold predicate on the "babyShedName" field.
func BabyShedNameContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBabyShedName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.Calve {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calve(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Calve) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Calve) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Calve) predicate.Calve {
	return predicate.Calve(func(s *sql.Selector) {
		p(s.Not())
	})
}

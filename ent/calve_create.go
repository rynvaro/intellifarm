// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/calve"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CalveCreate is the builder for creating a Calve entity.
type CalveCreate struct {
	config
	mutation *CalveMutation
	hooks    []Hook
}

// SetCattleId sets the "cattleId" field.
func (cc *CalveCreate) SetCattleId(i int64) *CalveCreate {
	cc.mutation.SetCattleId(i)
	return cc
}

// SetTenantId sets the "tenantId" field.
func (cc *CalveCreate) SetTenantId(i int64) *CalveCreate {
	cc.mutation.SetTenantId(i)
	return cc
}

// SetTenantName sets the "tenantName" field.
func (cc *CalveCreate) SetTenantName(s string) *CalveCreate {
	cc.mutation.SetTenantName(s)
	return cc
}

// SetFarmId sets the "farmId" field.
func (cc *CalveCreate) SetFarmId(i int64) *CalveCreate {
	cc.mutation.SetFarmId(i)
	return cc
}

// SetFarmName sets the "farmName" field.
func (cc *CalveCreate) SetFarmName(s string) *CalveCreate {
	cc.mutation.SetFarmName(s)
	return cc
}

// SetShedId sets the "shedId" field.
func (cc *CalveCreate) SetShedId(i int64) *CalveCreate {
	cc.mutation.SetShedId(i)
	return cc
}

// SetShedName sets the "shedName" field.
func (cc *CalveCreate) SetShedName(s string) *CalveCreate {
	cc.mutation.SetShedName(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CalveCreate) SetName(s string) *CalveCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CalveCreate) SetNillableName(s *string) *CalveCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetEarNumber sets the "earNumber" field.
func (cc *CalveCreate) SetEarNumber(s string) *CalveCreate {
	cc.mutation.SetEarNumber(s)
	return cc
}

// SetTimes sets the "times" field.
func (cc *CalveCreate) SetTimes(i int) *CalveCreate {
	cc.mutation.SetTimes(i)
	return cc
}

// SetPregnantAt sets the "pregnantAt" field.
func (cc *CalveCreate) SetPregnantAt(i int64) *CalveCreate {
	cc.mutation.SetPregnantAt(i)
	return cc
}

// SetCalveAt sets the "calveAt" field.
func (cc *CalveCreate) SetCalveAt(i int64) *CalveCreate {
	cc.mutation.SetCalveAt(i)
	return cc
}

// SetCalveTypeId sets the "calveTypeId" field.
func (cc *CalveCreate) SetCalveTypeId(i int) *CalveCreate {
	cc.mutation.SetCalveTypeId(i)
	return cc
}

// SetCalveTypeName sets the "calveTypeName" field.
func (cc *CalveCreate) SetCalveTypeName(s string) *CalveCreate {
	cc.mutation.SetCalveTypeName(s)
	return cc
}

// SetCalveCate sets the "calveCate" field.
func (cc *CalveCreate) SetCalveCate(i int) *CalveCreate {
	cc.mutation.SetCalveCate(i)
	return cc
}

// SetCalveCountId sets the "calveCountId" field.
func (cc *CalveCreate) SetCalveCountId(i int) *CalveCreate {
	cc.mutation.SetCalveCountId(i)
	return cc
}

// SetCalveCountName sets the "calveCountName" field.
func (cc *CalveCreate) SetCalveCountName(s string) *CalveCreate {
	cc.mutation.SetCalveCountName(s)
	return cc
}

// SetComplexity sets the "complexity" field.
func (cc *CalveCreate) SetComplexity(i int) *CalveCreate {
	cc.mutation.SetComplexity(i)
	return cc
}

// SetUserName sets the "userName" field.
func (cc *CalveCreate) SetUserName(s string) *CalveCreate {
	cc.mutation.SetUserName(s)
	return cc
}

// SetBabyStatus sets the "babyStatus" field.
func (cc *CalveCreate) SetBabyStatus(i int) *CalveCreate {
	cc.mutation.SetBabyStatus(i)
	return cc
}

// SetBabyGender sets the "babyGender" field.
func (cc *CalveCreate) SetBabyGender(i int) *CalveCreate {
	cc.mutation.SetBabyGender(i)
	return cc
}

// SetBabyEarNumber sets the "babyEarNumber" field.
func (cc *CalveCreate) SetBabyEarNumber(i int) *CalveCreate {
	cc.mutation.SetBabyEarNumber(i)
	return cc
}

// SetBabyBreedId sets the "babyBreedId" field.
func (cc *CalveCreate) SetBabyBreedId(i int) *CalveCreate {
	cc.mutation.SetBabyBreedId(i)
	return cc
}

// SetBabyBreedName sets the "babyBreedName" field.
func (cc *CalveCreate) SetBabyBreedName(s string) *CalveCreate {
	cc.mutation.SetBabyBreedName(s)
	return cc
}

// SetBabyHairColorId sets the "babyHairColorId" field.
func (cc *CalveCreate) SetBabyHairColorId(i int) *CalveCreate {
	cc.mutation.SetBabyHairColorId(i)
	return cc
}

// SetBabyHairColorName sets the "babyHairColorName" field.
func (cc *CalveCreate) SetBabyHairColorName(s string) *CalveCreate {
	cc.mutation.SetBabyHairColorName(s)
	return cc
}

// SetBabyWeight sets the "babyWeight" field.
func (cc *CalveCreate) SetBabyWeight(f float32) *CalveCreate {
	cc.mutation.SetBabyWeight(f)
	return cc
}

// SetBabyShedId sets the "babyShedId" field.
func (cc *CalveCreate) SetBabyShedId(i int) *CalveCreate {
	cc.mutation.SetBabyShedId(i)
	return cc
}

// SetBabyShedName sets the "babyShedName" field.
func (cc *CalveCreate) SetBabyShedName(s string) *CalveCreate {
	cc.mutation.SetBabyShedName(s)
	return cc
}

// SetRemarks sets the "remarks" field.
func (cc *CalveCreate) SetRemarks(s string) *CalveCreate {
	cc.mutation.SetRemarks(s)
	return cc
}

// SetCreatedAt sets the "createdAt" field.
func (cc *CalveCreate) SetCreatedAt(i int64) *CalveCreate {
	cc.mutation.SetCreatedAt(i)
	return cc
}

// SetUpdatedAt sets the "updatedAt" field.
func (cc *CalveCreate) SetUpdatedAt(i int64) *CalveCreate {
	cc.mutation.SetUpdatedAt(i)
	return cc
}

// SetDeleted sets the "deleted" field.
func (cc *CalveCreate) SetDeleted(i int) *CalveCreate {
	cc.mutation.SetDeleted(i)
	return cc
}

// Mutation returns the CalveMutation object of the builder.
func (cc *CalveCreate) Mutation() *CalveMutation {
	return cc.mutation
}

// Save creates the Calve in the database.
func (cc *CalveCreate) Save(ctx context.Context) (*Calve, error) {
	var (
		err  error
		node *Calve
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CalveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Calve)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CalveMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CalveCreate) SaveX(ctx context.Context) *Calve {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CalveCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CalveCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CalveCreate) check() error {
	if _, ok := cc.mutation.CattleId(); !ok {
		return &ValidationError{Name: "cattleId", err: errors.New(`ent: missing required field "Calve.cattleId"`)}
	}
	if _, ok := cc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "Calve.tenantId"`)}
	}
	if _, ok := cc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "Calve.tenantName"`)}
	}
	if _, ok := cc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New(`ent: missing required field "Calve.farmId"`)}
	}
	if _, ok := cc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New(`ent: missing required field "Calve.farmName"`)}
	}
	if _, ok := cc.mutation.ShedId(); !ok {
		return &ValidationError{Name: "shedId", err: errors.New(`ent: missing required field "Calve.shedId"`)}
	}
	if _, ok := cc.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New(`ent: missing required field "Calve.shedName"`)}
	}
	if _, ok := cc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New(`ent: missing required field "Calve.earNumber"`)}
	}
	if _, ok := cc.mutation.Times(); !ok {
		return &ValidationError{Name: "times", err: errors.New(`ent: missing required field "Calve.times"`)}
	}
	if _, ok := cc.mutation.PregnantAt(); !ok {
		return &ValidationError{Name: "pregnantAt", err: errors.New(`ent: missing required field "Calve.pregnantAt"`)}
	}
	if _, ok := cc.mutation.CalveAt(); !ok {
		return &ValidationError{Name: "calveAt", err: errors.New(`ent: missing required field "Calve.calveAt"`)}
	}
	if _, ok := cc.mutation.CalveTypeId(); !ok {
		return &ValidationError{Name: "calveTypeId", err: errors.New(`ent: missing required field "Calve.calveTypeId"`)}
	}
	if _, ok := cc.mutation.CalveTypeName(); !ok {
		return &ValidationError{Name: "calveTypeName", err: errors.New(`ent: missing required field "Calve.calveTypeName"`)}
	}
	if _, ok := cc.mutation.CalveCate(); !ok {
		return &ValidationError{Name: "calveCate", err: errors.New(`ent: missing required field "Calve.calveCate"`)}
	}
	if _, ok := cc.mutation.CalveCountId(); !ok {
		return &ValidationError{Name: "calveCountId", err: errors.New(`ent: missing required field "Calve.calveCountId"`)}
	}
	if _, ok := cc.mutation.CalveCountName(); !ok {
		return &ValidationError{Name: "calveCountName", err: errors.New(`ent: missing required field "Calve.calveCountName"`)}
	}
	if _, ok := cc.mutation.Complexity(); !ok {
		return &ValidationError{Name: "complexity", err: errors.New(`ent: missing required field "Calve.complexity"`)}
	}
	if _, ok := cc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New(`ent: missing required field "Calve.userName"`)}
	}
	if _, ok := cc.mutation.BabyStatus(); !ok {
		return &ValidationError{Name: "babyStatus", err: errors.New(`ent: missing required field "Calve.babyStatus"`)}
	}
	if _, ok := cc.mutation.BabyGender(); !ok {
		return &ValidationError{Name: "babyGender", err: errors.New(`ent: missing required field "Calve.babyGender"`)}
	}
	if _, ok := cc.mutation.BabyEarNumber(); !ok {
		return &ValidationError{Name: "babyEarNumber", err: errors.New(`ent: missing required field "Calve.babyEarNumber"`)}
	}
	if _, ok := cc.mutation.BabyBreedId(); !ok {
		return &ValidationError{Name: "babyBreedId", err: errors.New(`ent: missing required field "Calve.babyBreedId"`)}
	}
	if _, ok := cc.mutation.BabyBreedName(); !ok {
		return &ValidationError{Name: "babyBreedName", err: errors.New(`ent: missing required field "Calve.babyBreedName"`)}
	}
	if _, ok := cc.mutation.BabyHairColorId(); !ok {
		return &ValidationError{Name: "babyHairColorId", err: errors.New(`ent: missing required field "Calve.babyHairColorId"`)}
	}
	if _, ok := cc.mutation.BabyHairColorName(); !ok {
		return &ValidationError{Name: "babyHairColorName", err: errors.New(`ent: missing required field "Calve.babyHairColorName"`)}
	}
	if _, ok := cc.mutation.BabyWeight(); !ok {
		return &ValidationError{Name: "babyWeight", err: errors.New(`ent: missing required field "Calve.babyWeight"`)}
	}
	if _, ok := cc.mutation.BabyShedId(); !ok {
		return &ValidationError{Name: "babyShedId", err: errors.New(`ent: missing required field "Calve.babyShedId"`)}
	}
	if _, ok := cc.mutation.BabyShedName(); !ok {
		return &ValidationError{Name: "babyShedName", err: errors.New(`ent: missing required field "Calve.babyShedName"`)}
	}
	if _, ok := cc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "Calve.remarks"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Calve.createdAt"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Calve.updatedAt"`)}
	}
	if _, ok := cc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Calve.deleted"`)}
	}
	return nil
}

func (cc *CalveCreate) sqlSave(ctx context.Context) (*Calve, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CalveCreate) createSpec() (*Calve, *sqlgraph.CreateSpec) {
	var (
		_node = &Calve{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: calve.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: calve.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CattleId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCattleId,
		})
		_node.CattleId = value
	}
	if value, ok := cc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := cc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := cc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := cc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := cc.mutation.ShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldShedId,
		})
		_node.ShedId = value
	}
	if value, ok := cc.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := cc.mutation.Times(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldTimes,
		})
		_node.Times = value
	}
	if value, ok := cc.mutation.PregnantAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldPregnantAt,
		})
		_node.PregnantAt = value
	}
	if value, ok := cc.mutation.CalveAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCalveAt,
		})
		_node.CalveAt = value
	}
	if value, ok := cc.mutation.CalveTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveTypeId,
		})
		_node.CalveTypeId = value
	}
	if value, ok := cc.mutation.CalveTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldCalveTypeName,
		})
		_node.CalveTypeName = value
	}
	if value, ok := cc.mutation.CalveCate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCate,
		})
		_node.CalveCate = value
	}
	if value, ok := cc.mutation.CalveCountId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCountId,
		})
		_node.CalveCountId = value
	}
	if value, ok := cc.mutation.CalveCountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldCalveCountName,
		})
		_node.CalveCountName = value
	}
	if value, ok := cc.mutation.Complexity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldComplexity,
		})
		_node.Complexity = value
	}
	if value, ok := cc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := cc.mutation.BabyStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyStatus,
		})
		_node.BabyStatus = value
	}
	if value, ok := cc.mutation.BabyGender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyGender,
		})
		_node.BabyGender = value
	}
	if value, ok := cc.mutation.BabyEarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyEarNumber,
		})
		_node.BabyEarNumber = value
	}
	if value, ok := cc.mutation.BabyBreedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyBreedId,
		})
		_node.BabyBreedId = value
	}
	if value, ok := cc.mutation.BabyBreedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldBabyBreedName,
		})
		_node.BabyBreedName = value
	}
	if value, ok := cc.mutation.BabyHairColorId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyHairColorId,
		})
		_node.BabyHairColorId = value
	}
	if value, ok := cc.mutation.BabyHairColorName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldBabyHairColorName,
		})
		_node.BabyHairColorName = value
	}
	if value, ok := cc.mutation.BabyWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: calve.FieldBabyWeight,
		})
		_node.BabyWeight = value
	}
	if value, ok := cc.mutation.BabyShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyShedId,
		})
		_node.BabyShedId = value
	}
	if value, ok := cc.mutation.BabyShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldBabyShedName,
		})
		_node.BabyShedName = value
	}
	if value, ok := cc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// CalveCreateBulk is the builder for creating many Calve entities in bulk.
type CalveCreateBulk struct {
	config
	builders []*CalveCreate
}

// Save creates the Calve entities in the database.
func (ccb *CalveCreateBulk) Save(ctx context.Context) ([]*Calve, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Calve, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CalveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CalveCreateBulk) SaveX(ctx context.Context) []*Calve {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CalveCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CalveCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

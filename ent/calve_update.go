// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/calve"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CalveUpdate is the builder for updating Calve entities.
type CalveUpdate struct {
	config
	hooks      []Hook
	mutation   *CalveMutation
	predicates []predicate.Calve
}

// Where adds a new predicate for the builder.
func (cu *CalveUpdate) Where(ps ...predicate.Calve) *CalveUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *CalveUpdate) SetName(s string) *CalveUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the name field if the given value is not nil.
func (cu *CalveUpdate) SetNillableName(s *string) *CalveUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of name.
func (cu *CalveUpdate) ClearName() *CalveUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetEarNumber sets the earNumber field.
func (cu *CalveUpdate) SetEarNumber(s string) *CalveUpdate {
	cu.mutation.SetEarNumber(s)
	return cu
}

// SetTimes sets the times field.
func (cu *CalveUpdate) SetTimes(i int) *CalveUpdate {
	cu.mutation.ResetTimes()
	cu.mutation.SetTimes(i)
	return cu
}

// AddTimes adds i to times.
func (cu *CalveUpdate) AddTimes(i int) *CalveUpdate {
	cu.mutation.AddTimes(i)
	return cu
}

// SetPregnantAt sets the pregnantAt field.
func (cu *CalveUpdate) SetPregnantAt(i int64) *CalveUpdate {
	cu.mutation.ResetPregnantAt()
	cu.mutation.SetPregnantAt(i)
	return cu
}

// AddPregnantAt adds i to pregnantAt.
func (cu *CalveUpdate) AddPregnantAt(i int64) *CalveUpdate {
	cu.mutation.AddPregnantAt(i)
	return cu
}

// SetCalveAt sets the calveAt field.
func (cu *CalveUpdate) SetCalveAt(i int64) *CalveUpdate {
	cu.mutation.ResetCalveAt()
	cu.mutation.SetCalveAt(i)
	return cu
}

// AddCalveAt adds i to calveAt.
func (cu *CalveUpdate) AddCalveAt(i int64) *CalveUpdate {
	cu.mutation.AddCalveAt(i)
	return cu
}

// SetCalveTypeId sets the calveTypeId field.
func (cu *CalveUpdate) SetCalveTypeId(i int) *CalveUpdate {
	cu.mutation.ResetCalveTypeId()
	cu.mutation.SetCalveTypeId(i)
	return cu
}

// AddCalveTypeId adds i to calveTypeId.
func (cu *CalveUpdate) AddCalveTypeId(i int) *CalveUpdate {
	cu.mutation.AddCalveTypeId(i)
	return cu
}

// SetCalveTypeName sets the calveTypeName field.
func (cu *CalveUpdate) SetCalveTypeName(s string) *CalveUpdate {
	cu.mutation.SetCalveTypeName(s)
	return cu
}

// SetCalveCate sets the calveCate field.
func (cu *CalveUpdate) SetCalveCate(i int) *CalveUpdate {
	cu.mutation.ResetCalveCate()
	cu.mutation.SetCalveCate(i)
	return cu
}

// AddCalveCate adds i to calveCate.
func (cu *CalveUpdate) AddCalveCate(i int) *CalveUpdate {
	cu.mutation.AddCalveCate(i)
	return cu
}

// SetCalveCountId sets the calveCountId field.
func (cu *CalveUpdate) SetCalveCountId(i int) *CalveUpdate {
	cu.mutation.ResetCalveCountId()
	cu.mutation.SetCalveCountId(i)
	return cu
}

// AddCalveCountId adds i to calveCountId.
func (cu *CalveUpdate) AddCalveCountId(i int) *CalveUpdate {
	cu.mutation.AddCalveCountId(i)
	return cu
}

// SetCalveCountName sets the calveCountName field.
func (cu *CalveUpdate) SetCalveCountName(s string) *CalveUpdate {
	cu.mutation.SetCalveCountName(s)
	return cu
}

// SetComplexity sets the complexity field.
func (cu *CalveUpdate) SetComplexity(i int) *CalveUpdate {
	cu.mutation.ResetComplexity()
	cu.mutation.SetComplexity(i)
	return cu
}

// AddComplexity adds i to complexity.
func (cu *CalveUpdate) AddComplexity(i int) *CalveUpdate {
	cu.mutation.AddComplexity(i)
	return cu
}

// SetUserName sets the userName field.
func (cu *CalveUpdate) SetUserName(s string) *CalveUpdate {
	cu.mutation.SetUserName(s)
	return cu
}

// SetBabyStatus sets the babyStatus field.
func (cu *CalveUpdate) SetBabyStatus(i int) *CalveUpdate {
	cu.mutation.ResetBabyStatus()
	cu.mutation.SetBabyStatus(i)
	return cu
}

// AddBabyStatus adds i to babyStatus.
func (cu *CalveUpdate) AddBabyStatus(i int) *CalveUpdate {
	cu.mutation.AddBabyStatus(i)
	return cu
}

// SetBabyGender sets the babyGender field.
func (cu *CalveUpdate) SetBabyGender(i int) *CalveUpdate {
	cu.mutation.ResetBabyGender()
	cu.mutation.SetBabyGender(i)
	return cu
}

// AddBabyGender adds i to babyGender.
func (cu *CalveUpdate) AddBabyGender(i int) *CalveUpdate {
	cu.mutation.AddBabyGender(i)
	return cu
}

// SetBabyEarNumber sets the babyEarNumber field.
func (cu *CalveUpdate) SetBabyEarNumber(i int) *CalveUpdate {
	cu.mutation.ResetBabyEarNumber()
	cu.mutation.SetBabyEarNumber(i)
	return cu
}

// AddBabyEarNumber adds i to babyEarNumber.
func (cu *CalveUpdate) AddBabyEarNumber(i int) *CalveUpdate {
	cu.mutation.AddBabyEarNumber(i)
	return cu
}

// SetBabyBreedId sets the babyBreedId field.
func (cu *CalveUpdate) SetBabyBreedId(i int) *CalveUpdate {
	cu.mutation.ResetBabyBreedId()
	cu.mutation.SetBabyBreedId(i)
	return cu
}

// AddBabyBreedId adds i to babyBreedId.
func (cu *CalveUpdate) AddBabyBreedId(i int) *CalveUpdate {
	cu.mutation.AddBabyBreedId(i)
	return cu
}

// SetBabyBreedName sets the babyBreedName field.
func (cu *CalveUpdate) SetBabyBreedName(s string) *CalveUpdate {
	cu.mutation.SetBabyBreedName(s)
	return cu
}

// SetBabyHairColorId sets the babyHairColorId field.
func (cu *CalveUpdate) SetBabyHairColorId(i int) *CalveUpdate {
	cu.mutation.ResetBabyHairColorId()
	cu.mutation.SetBabyHairColorId(i)
	return cu
}

// AddBabyHairColorId adds i to babyHairColorId.
func (cu *CalveUpdate) AddBabyHairColorId(i int) *CalveUpdate {
	cu.mutation.AddBabyHairColorId(i)
	return cu
}

// SetBabyHairColorName sets the babyHairColorName field.
func (cu *CalveUpdate) SetBabyHairColorName(s string) *CalveUpdate {
	cu.mutation.SetBabyHairColorName(s)
	return cu
}

// SetBabyWeight sets the babyWeight field.
func (cu *CalveUpdate) SetBabyWeight(f float32) *CalveUpdate {
	cu.mutation.ResetBabyWeight()
	cu.mutation.SetBabyWeight(f)
	return cu
}

// AddBabyWeight adds f to babyWeight.
func (cu *CalveUpdate) AddBabyWeight(f float32) *CalveUpdate {
	cu.mutation.AddBabyWeight(f)
	return cu
}

// SetBabyShedId sets the babyShedId field.
func (cu *CalveUpdate) SetBabyShedId(i int) *CalveUpdate {
	cu.mutation.ResetBabyShedId()
	cu.mutation.SetBabyShedId(i)
	return cu
}

// AddBabyShedId adds i to babyShedId.
func (cu *CalveUpdate) AddBabyShedId(i int) *CalveUpdate {
	cu.mutation.AddBabyShedId(i)
	return cu
}

// SetBabyShedName sets the babyShedName field.
func (cu *CalveUpdate) SetBabyShedName(s string) *CalveUpdate {
	cu.mutation.SetBabyShedName(s)
	return cu
}

// SetRemarks sets the remarks field.
func (cu *CalveUpdate) SetRemarks(s string) *CalveUpdate {
	cu.mutation.SetRemarks(s)
	return cu
}

// SetCreatedAt sets the createdAt field.
func (cu *CalveUpdate) SetCreatedAt(i int64) *CalveUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(i)
	return cu
}

// AddCreatedAt adds i to createdAt.
func (cu *CalveUpdate) AddCreatedAt(i int64) *CalveUpdate {
	cu.mutation.AddCreatedAt(i)
	return cu
}

// SetUpdatedAt sets the updatedAt field.
func (cu *CalveUpdate) SetUpdatedAt(i int64) *CalveUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(i)
	return cu
}

// AddUpdatedAt adds i to updatedAt.
func (cu *CalveUpdate) AddUpdatedAt(i int64) *CalveUpdate {
	cu.mutation.AddUpdatedAt(i)
	return cu
}

// SetDeleted sets the deleted field.
func (cu *CalveUpdate) SetDeleted(i int) *CalveUpdate {
	cu.mutation.ResetDeleted()
	cu.mutation.SetDeleted(i)
	return cu
}

// AddDeleted adds i to deleted.
func (cu *CalveUpdate) AddDeleted(i int) *CalveUpdate {
	cu.mutation.AddDeleted(i)
	return cu
}

// Mutation returns the CalveMutation object of the builder.
func (cu *CalveUpdate) Mutation() *CalveMutation {
	return cu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CalveUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CalveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CalveUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CalveUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CalveUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CalveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   calve.Table,
			Columns: calve.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: calve.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldName,
		})
	}
	if cu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: calve.FieldName,
		})
	}
	if value, ok := cu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldEarNumber,
		})
	}
	if value, ok := cu.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldTimes,
		})
	}
	if value, ok := cu.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldTimes,
		})
	}
	if value, ok := cu.mutation.PregnantAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldPregnantAt,
		})
	}
	if value, ok := cu.mutation.AddedPregnantAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldPregnantAt,
		})
	}
	if value, ok := cu.mutation.CalveAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCalveAt,
		})
	}
	if value, ok := cu.mutation.AddedCalveAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCalveAt,
		})
	}
	if value, ok := cu.mutation.CalveTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveTypeId,
		})
	}
	if value, ok := cu.mutation.AddedCalveTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveTypeId,
		})
	}
	if value, ok := cu.mutation.CalveTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldCalveTypeName,
		})
	}
	if value, ok := cu.mutation.CalveCate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCate,
		})
	}
	if value, ok := cu.mutation.AddedCalveCate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCate,
		})
	}
	if value, ok := cu.mutation.CalveCountId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCountId,
		})
	}
	if value, ok := cu.mutation.AddedCalveCountId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCountId,
		})
	}
	if value, ok := cu.mutation.CalveCountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldCalveCountName,
		})
	}
	if value, ok := cu.mutation.Complexity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldComplexity,
		})
	}
	if value, ok := cu.mutation.AddedComplexity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldComplexity,
		})
	}
	if value, ok := cu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldUserName,
		})
	}
	if value, ok := cu.mutation.BabyStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyStatus,
		})
	}
	if value, ok := cu.mutation.AddedBabyStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyStatus,
		})
	}
	if value, ok := cu.mutation.BabyGender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyGender,
		})
	}
	if value, ok := cu.mutation.AddedBabyGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyGender,
		})
	}
	if value, ok := cu.mutation.BabyEarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyEarNumber,
		})
	}
	if value, ok := cu.mutation.AddedBabyEarNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyEarNumber,
		})
	}
	if value, ok := cu.mutation.BabyBreedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyBreedId,
		})
	}
	if value, ok := cu.mutation.AddedBabyBreedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyBreedId,
		})
	}
	if value, ok := cu.mutation.BabyBreedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldBabyBreedName,
		})
	}
	if value, ok := cu.mutation.BabyHairColorId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyHairColorId,
		})
	}
	if value, ok := cu.mutation.AddedBabyHairColorId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyHairColorId,
		})
	}
	if value, ok := cu.mutation.BabyHairColorName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldBabyHairColorName,
		})
	}
	if value, ok := cu.mutation.BabyWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: calve.FieldBabyWeight,
		})
	}
	if value, ok := cu.mutation.AddedBabyWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: calve.FieldBabyWeight,
		})
	}
	if value, ok := cu.mutation.BabyShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyShedId,
		})
	}
	if value, ok := cu.mutation.AddedBabyShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyShedId,
		})
	}
	if value, ok := cu.mutation.BabyShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldBabyShedName,
		})
	}
	if value, ok := cu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldRemarks,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldDeleted,
		})
	}
	if value, ok := cu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{calve.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CalveUpdateOne is the builder for updating a single Calve entity.
type CalveUpdateOne struct {
	config
	hooks    []Hook
	mutation *CalveMutation
}

// SetName sets the name field.
func (cuo *CalveUpdateOne) SetName(s string) *CalveUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the name field if the given value is not nil.
func (cuo *CalveUpdateOne) SetNillableName(s *string) *CalveUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of name.
func (cuo *CalveUpdateOne) ClearName() *CalveUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetEarNumber sets the earNumber field.
func (cuo *CalveUpdateOne) SetEarNumber(s string) *CalveUpdateOne {
	cuo.mutation.SetEarNumber(s)
	return cuo
}

// SetTimes sets the times field.
func (cuo *CalveUpdateOne) SetTimes(i int) *CalveUpdateOne {
	cuo.mutation.ResetTimes()
	cuo.mutation.SetTimes(i)
	return cuo
}

// AddTimes adds i to times.
func (cuo *CalveUpdateOne) AddTimes(i int) *CalveUpdateOne {
	cuo.mutation.AddTimes(i)
	return cuo
}

// SetPregnantAt sets the pregnantAt field.
func (cuo *CalveUpdateOne) SetPregnantAt(i int64) *CalveUpdateOne {
	cuo.mutation.ResetPregnantAt()
	cuo.mutation.SetPregnantAt(i)
	return cuo
}

// AddPregnantAt adds i to pregnantAt.
func (cuo *CalveUpdateOne) AddPregnantAt(i int64) *CalveUpdateOne {
	cuo.mutation.AddPregnantAt(i)
	return cuo
}

// SetCalveAt sets the calveAt field.
func (cuo *CalveUpdateOne) SetCalveAt(i int64) *CalveUpdateOne {
	cuo.mutation.ResetCalveAt()
	cuo.mutation.SetCalveAt(i)
	return cuo
}

// AddCalveAt adds i to calveAt.
func (cuo *CalveUpdateOne) AddCalveAt(i int64) *CalveUpdateOne {
	cuo.mutation.AddCalveAt(i)
	return cuo
}

// SetCalveTypeId sets the calveTypeId field.
func (cuo *CalveUpdateOne) SetCalveTypeId(i int) *CalveUpdateOne {
	cuo.mutation.ResetCalveTypeId()
	cuo.mutation.SetCalveTypeId(i)
	return cuo
}

// AddCalveTypeId adds i to calveTypeId.
func (cuo *CalveUpdateOne) AddCalveTypeId(i int) *CalveUpdateOne {
	cuo.mutation.AddCalveTypeId(i)
	return cuo
}

// SetCalveTypeName sets the calveTypeName field.
func (cuo *CalveUpdateOne) SetCalveTypeName(s string) *CalveUpdateOne {
	cuo.mutation.SetCalveTypeName(s)
	return cuo
}

// SetCalveCate sets the calveCate field.
func (cuo *CalveUpdateOne) SetCalveCate(i int) *CalveUpdateOne {
	cuo.mutation.ResetCalveCate()
	cuo.mutation.SetCalveCate(i)
	return cuo
}

// AddCalveCate adds i to calveCate.
func (cuo *CalveUpdateOne) AddCalveCate(i int) *CalveUpdateOne {
	cuo.mutation.AddCalveCate(i)
	return cuo
}

// SetCalveCountId sets the calveCountId field.
func (cuo *CalveUpdateOne) SetCalveCountId(i int) *CalveUpdateOne {
	cuo.mutation.ResetCalveCountId()
	cuo.mutation.SetCalveCountId(i)
	return cuo
}

// AddCalveCountId adds i to calveCountId.
func (cuo *CalveUpdateOne) AddCalveCountId(i int) *CalveUpdateOne {
	cuo.mutation.AddCalveCountId(i)
	return cuo
}

// SetCalveCountName sets the calveCountName field.
func (cuo *CalveUpdateOne) SetCalveCountName(s string) *CalveUpdateOne {
	cuo.mutation.SetCalveCountName(s)
	return cuo
}

// SetComplexity sets the complexity field.
func (cuo *CalveUpdateOne) SetComplexity(i int) *CalveUpdateOne {
	cuo.mutation.ResetComplexity()
	cuo.mutation.SetComplexity(i)
	return cuo
}

// AddComplexity adds i to complexity.
func (cuo *CalveUpdateOne) AddComplexity(i int) *CalveUpdateOne {
	cuo.mutation.AddComplexity(i)
	return cuo
}

// SetUserName sets the userName field.
func (cuo *CalveUpdateOne) SetUserName(s string) *CalveUpdateOne {
	cuo.mutation.SetUserName(s)
	return cuo
}

// SetBabyStatus sets the babyStatus field.
func (cuo *CalveUpdateOne) SetBabyStatus(i int) *CalveUpdateOne {
	cuo.mutation.ResetBabyStatus()
	cuo.mutation.SetBabyStatus(i)
	return cuo
}

// AddBabyStatus adds i to babyStatus.
func (cuo *CalveUpdateOne) AddBabyStatus(i int) *CalveUpdateOne {
	cuo.mutation.AddBabyStatus(i)
	return cuo
}

// SetBabyGender sets the babyGender field.
func (cuo *CalveUpdateOne) SetBabyGender(i int) *CalveUpdateOne {
	cuo.mutation.ResetBabyGender()
	cuo.mutation.SetBabyGender(i)
	return cuo
}

// AddBabyGender adds i to babyGender.
func (cuo *CalveUpdateOne) AddBabyGender(i int) *CalveUpdateOne {
	cuo.mutation.AddBabyGender(i)
	return cuo
}

// SetBabyEarNumber sets the babyEarNumber field.
func (cuo *CalveUpdateOne) SetBabyEarNumber(i int) *CalveUpdateOne {
	cuo.mutation.ResetBabyEarNumber()
	cuo.mutation.SetBabyEarNumber(i)
	return cuo
}

// AddBabyEarNumber adds i to babyEarNumber.
func (cuo *CalveUpdateOne) AddBabyEarNumber(i int) *CalveUpdateOne {
	cuo.mutation.AddBabyEarNumber(i)
	return cuo
}

// SetBabyBreedId sets the babyBreedId field.
func (cuo *CalveUpdateOne) SetBabyBreedId(i int) *CalveUpdateOne {
	cuo.mutation.ResetBabyBreedId()
	cuo.mutation.SetBabyBreedId(i)
	return cuo
}

// AddBabyBreedId adds i to babyBreedId.
func (cuo *CalveUpdateOne) AddBabyBreedId(i int) *CalveUpdateOne {
	cuo.mutation.AddBabyBreedId(i)
	return cuo
}

// SetBabyBreedName sets the babyBreedName field.
func (cuo *CalveUpdateOne) SetBabyBreedName(s string) *CalveUpdateOne {
	cuo.mutation.SetBabyBreedName(s)
	return cuo
}

// SetBabyHairColorId sets the babyHairColorId field.
func (cuo *CalveUpdateOne) SetBabyHairColorId(i int) *CalveUpdateOne {
	cuo.mutation.ResetBabyHairColorId()
	cuo.mutation.SetBabyHairColorId(i)
	return cuo
}

// AddBabyHairColorId adds i to babyHairColorId.
func (cuo *CalveUpdateOne) AddBabyHairColorId(i int) *CalveUpdateOne {
	cuo.mutation.AddBabyHairColorId(i)
	return cuo
}

// SetBabyHairColorName sets the babyHairColorName field.
func (cuo *CalveUpdateOne) SetBabyHairColorName(s string) *CalveUpdateOne {
	cuo.mutation.SetBabyHairColorName(s)
	return cuo
}

// SetBabyWeight sets the babyWeight field.
func (cuo *CalveUpdateOne) SetBabyWeight(f float32) *CalveUpdateOne {
	cuo.mutation.ResetBabyWeight()
	cuo.mutation.SetBabyWeight(f)
	return cuo
}

// AddBabyWeight adds f to babyWeight.
func (cuo *CalveUpdateOne) AddBabyWeight(f float32) *CalveUpdateOne {
	cuo.mutation.AddBabyWeight(f)
	return cuo
}

// SetBabyShedId sets the babyShedId field.
func (cuo *CalveUpdateOne) SetBabyShedId(i int) *CalveUpdateOne {
	cuo.mutation.ResetBabyShedId()
	cuo.mutation.SetBabyShedId(i)
	return cuo
}

// AddBabyShedId adds i to babyShedId.
func (cuo *CalveUpdateOne) AddBabyShedId(i int) *CalveUpdateOne {
	cuo.mutation.AddBabyShedId(i)
	return cuo
}

// SetBabyShedName sets the babyShedName field.
func (cuo *CalveUpdateOne) SetBabyShedName(s string) *CalveUpdateOne {
	cuo.mutation.SetBabyShedName(s)
	return cuo
}

// SetRemarks sets the remarks field.
func (cuo *CalveUpdateOne) SetRemarks(s string) *CalveUpdateOne {
	cuo.mutation.SetRemarks(s)
	return cuo
}

// SetCreatedAt sets the createdAt field.
func (cuo *CalveUpdateOne) SetCreatedAt(i int64) *CalveUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(i)
	return cuo
}

// AddCreatedAt adds i to createdAt.
func (cuo *CalveUpdateOne) AddCreatedAt(i int64) *CalveUpdateOne {
	cuo.mutation.AddCreatedAt(i)
	return cuo
}

// SetUpdatedAt sets the updatedAt field.
func (cuo *CalveUpdateOne) SetUpdatedAt(i int64) *CalveUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(i)
	return cuo
}

// AddUpdatedAt adds i to updatedAt.
func (cuo *CalveUpdateOne) AddUpdatedAt(i int64) *CalveUpdateOne {
	cuo.mutation.AddUpdatedAt(i)
	return cuo
}

// SetDeleted sets the deleted field.
func (cuo *CalveUpdateOne) SetDeleted(i int) *CalveUpdateOne {
	cuo.mutation.ResetDeleted()
	cuo.mutation.SetDeleted(i)
	return cuo
}

// AddDeleted adds i to deleted.
func (cuo *CalveUpdateOne) AddDeleted(i int) *CalveUpdateOne {
	cuo.mutation.AddDeleted(i)
	return cuo
}

// Mutation returns the CalveMutation object of the builder.
func (cuo *CalveUpdateOne) Mutation() *CalveMutation {
	return cuo.mutation
}

// Save executes the query and returns the updated entity.
func (cuo *CalveUpdateOne) Save(ctx context.Context) (*Calve, error) {
	var (
		err  error
		node *Calve
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CalveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CalveUpdateOne) SaveX(ctx context.Context) *Calve {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CalveUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CalveUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CalveUpdateOne) sqlSave(ctx context.Context) (_node *Calve, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   calve.Table,
			Columns: calve.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: calve.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Calve.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldName,
		})
	}
	if cuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: calve.FieldName,
		})
	}
	if value, ok := cuo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldEarNumber,
		})
	}
	if value, ok := cuo.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldTimes,
		})
	}
	if value, ok := cuo.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldTimes,
		})
	}
	if value, ok := cuo.mutation.PregnantAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldPregnantAt,
		})
	}
	if value, ok := cuo.mutation.AddedPregnantAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldPregnantAt,
		})
	}
	if value, ok := cuo.mutation.CalveAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCalveAt,
		})
	}
	if value, ok := cuo.mutation.AddedCalveAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCalveAt,
		})
	}
	if value, ok := cuo.mutation.CalveTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveTypeId,
		})
	}
	if value, ok := cuo.mutation.AddedCalveTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveTypeId,
		})
	}
	if value, ok := cuo.mutation.CalveTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldCalveTypeName,
		})
	}
	if value, ok := cuo.mutation.CalveCate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCate,
		})
	}
	if value, ok := cuo.mutation.AddedCalveCate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCate,
		})
	}
	if value, ok := cuo.mutation.CalveCountId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCountId,
		})
	}
	if value, ok := cuo.mutation.AddedCalveCountId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldCalveCountId,
		})
	}
	if value, ok := cuo.mutation.CalveCountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldCalveCountName,
		})
	}
	if value, ok := cuo.mutation.Complexity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldComplexity,
		})
	}
	if value, ok := cuo.mutation.AddedComplexity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldComplexity,
		})
	}
	if value, ok := cuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldUserName,
		})
	}
	if value, ok := cuo.mutation.BabyStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyStatus,
		})
	}
	if value, ok := cuo.mutation.AddedBabyStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyStatus,
		})
	}
	if value, ok := cuo.mutation.BabyGender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyGender,
		})
	}
	if value, ok := cuo.mutation.AddedBabyGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyGender,
		})
	}
	if value, ok := cuo.mutation.BabyEarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyEarNumber,
		})
	}
	if value, ok := cuo.mutation.AddedBabyEarNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyEarNumber,
		})
	}
	if value, ok := cuo.mutation.BabyBreedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyBreedId,
		})
	}
	if value, ok := cuo.mutation.AddedBabyBreedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyBreedId,
		})
	}
	if value, ok := cuo.mutation.BabyBreedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldBabyBreedName,
		})
	}
	if value, ok := cuo.mutation.BabyHairColorId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyHairColorId,
		})
	}
	if value, ok := cuo.mutation.AddedBabyHairColorId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyHairColorId,
		})
	}
	if value, ok := cuo.mutation.BabyHairColorName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldBabyHairColorName,
		})
	}
	if value, ok := cuo.mutation.BabyWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: calve.FieldBabyWeight,
		})
	}
	if value, ok := cuo.mutation.AddedBabyWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: calve.FieldBabyWeight,
		})
	}
	if value, ok := cuo.mutation.BabyShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyShedId,
		})
	}
	if value, ok := cuo.mutation.AddedBabyShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldBabyShedId,
		})
	}
	if value, ok := cuo.mutation.BabyShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldBabyShedName,
		})
	}
	if value, ok := cuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calve.FieldRemarks,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: calve.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldDeleted,
		})
	}
	if value, ok := cuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calve.FieldDeleted,
		})
	}
	_node = &Calve{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{calve.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

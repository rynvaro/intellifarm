// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattle"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Cattle is the model entity for the Cattle schema.
type Cattle struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// ShedId holds the value of the "shedId" field.
	ShedId int64 `json:"shedId,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// ShedTypeId holds the value of the "shedTypeId" field.
	ShedTypeId int64 `json:"shedTypeId,omitempty"`
	// ShedTypeName holds the value of the "shedTypeName" field.
	ShedTypeName string `json:"shedTypeName,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// ElectronicEarNumber holds the value of the "electronicEarNumber" field.
	ElectronicEarNumber string `json:"electronicEarNumber,omitempty"`
	// Pedometer holds the value of the "pedometer" field.
	Pedometer string `json:"pedometer,omitempty"`
	// GenderId holds the value of the "genderId" field.
	GenderId int `json:"genderId,omitempty"`
	// GenderName holds the value of the "genderName" field.
	GenderName string `json:"genderName,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday int64 `json:"birthday,omitempty"`
	// JoinedAt holds the value of the "joinedAt" field.
	JoinedAt int64 `json:"joinedAt,omitempty"`
	// CateId holds the value of the "cateId" field.
	CateId int `json:"cateId,omitempty"`
	// CateName holds the value of the "cateName" field.
	CateName string `json:"cateName,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// TypeName holds the value of the "typeName" field.
	TypeName string `json:"typeName,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int32 `json:"weight,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// Breed holds the value of the "breed" field.
	Breed string `json:"breed,omitempty"`
	// JoinedTypeId holds the value of the "joinedTypeId" field.
	JoinedTypeId int `json:"joinedTypeId,omitempty"`
	// JoinedTypeName holds the value of the "joinedTypeName" field.
	JoinedTypeName string `json:"joinedTypeName,omitempty"`
	// Mother holds the value of the "mother" field.
	Mother string `json:"mother,omitempty"`
	// Father holds the value of the "father" field.
	Father string `json:"father,omitempty"`
	// Grandfather holds the value of the "grandfather" field.
	Grandfather string `json:"grandfather,omitempty"`
	// OwnerId holds the value of the "ownerId" field.
	OwnerId int64 `json:"ownerId,omitempty"`
	// OwnerName holds the value of the "ownerName" field.
	OwnerName string `json:"ownerName,omitempty"`
	// HairColorId holds the value of the "hairColorId" field.
	HairColorId int64 `json:"hairColorId,omitempty"`
	// HairColorName holds the value of the "hairColorName" field.
	HairColorName string `json:"hairColorName,omitempty"`
	// ReproductiveStateId holds the value of the "reproductiveStateId" field.
	ReproductiveStateId int `json:"reproductiveStateId,omitempty"`
	// ReproductiveStateName holds the value of the "reproductiveStateName" field.
	ReproductiveStateName string `json:"reproductiveStateName,omitempty"`
	// PregnantTimes holds the value of the "pregnantTimes" field.
	PregnantTimes int `json:"pregnantTimes,omitempty"`
	// LastCalvingAt holds the value of the "lastCalvingAt" field.
	LastCalvingAt int64 `json:"lastCalvingAt,omitempty"`
	// BreedingAt holds the value of the "breedingAt" field.
	BreedingAt int64 `json:"breedingAt,omitempty"`
	// BreedingTypeId holds the value of the "breedingTypeId" field.
	BreedingTypeId int `json:"breedingTypeId,omitempty"`
	// BreedingTypeName holds the value of the "breedingTypeName" field.
	BreedingTypeName string `json:"breedingTypeName,omitempty"`
	// BullId holds the value of the "bullId" field.
	BullId int64 `json:"bullId,omitempty"`
	// PregnancyCheckAt holds the value of the "pregnancyCheckAt" field.
	PregnancyCheckAt int64 `json:"pregnancyCheckAt,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cattle) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullInt64{},  // farmId
		&sql.NullString{}, // farmName
		&sql.NullInt64{},  // shedId
		&sql.NullString{}, // shedName
		&sql.NullInt64{},  // shedTypeId
		&sql.NullString{}, // shedTypeName
		&sql.NullString{}, // earNumber
		&sql.NullString{}, // electronicEarNumber
		&sql.NullString{}, // pedometer
		&sql.NullInt64{},  // genderId
		&sql.NullString{}, // genderName
		&sql.NullInt64{},  // birthday
		&sql.NullInt64{},  // joinedAt
		&sql.NullInt64{},  // cateId
		&sql.NullString{}, // cateName
		&sql.NullInt64{},  // type
		&sql.NullString{}, // typeName
		&sql.NullInt64{},  // weight
		&sql.NullString{}, // from
		&sql.NullString{}, // breed
		&sql.NullInt64{},  // joinedTypeId
		&sql.NullString{}, // joinedTypeName
		&sql.NullString{}, // mother
		&sql.NullString{}, // father
		&sql.NullString{}, // grandfather
		&sql.NullInt64{},  // ownerId
		&sql.NullString{}, // ownerName
		&sql.NullInt64{},  // hairColorId
		&sql.NullString{}, // hairColorName
		&sql.NullInt64{},  // reproductiveStateId
		&sql.NullString{}, // reproductiveStateName
		&sql.NullInt64{},  // pregnantTimes
		&sql.NullInt64{},  // lastCalvingAt
		&sql.NullInt64{},  // breedingAt
		&sql.NullInt64{},  // breedingTypeId
		&sql.NullString{}, // breedingTypeName
		&sql.NullInt64{},  // bullId
		&sql.NullInt64{},  // pregnancyCheckAt
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cattle fields.
func (c *Cattle) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cattle.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[1])
	} else if value.Valid {
		c.FarmId = value.Int64
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[2])
	} else if value.Valid {
		c.FarmName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field shedId", values[3])
	} else if value.Valid {
		c.ShedId = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[4])
	} else if value.Valid {
		c.ShedName = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field shedTypeId", values[5])
	} else if value.Valid {
		c.ShedTypeId = value.Int64
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedTypeName", values[6])
	} else if value.Valid {
		c.ShedTypeName = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[7])
	} else if value.Valid {
		c.EarNumber = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field electronicEarNumber", values[8])
	} else if value.Valid {
		c.ElectronicEarNumber = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field pedometer", values[9])
	} else if value.Valid {
		c.Pedometer = value.String
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field genderId", values[10])
	} else if value.Valid {
		c.GenderId = int(value.Int64)
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field genderName", values[11])
	} else if value.Valid {
		c.GenderName = value.String
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field birthday", values[12])
	} else if value.Valid {
		c.Birthday = value.Int64
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field joinedAt", values[13])
	} else if value.Valid {
		c.JoinedAt = value.Int64
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field cateId", values[14])
	} else if value.Valid {
		c.CateId = int(value.Int64)
	}
	if value, ok := values[15].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cateName", values[15])
	} else if value.Valid {
		c.CateName = value.String
	}
	if value, ok := values[16].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[16])
	} else if value.Valid {
		c.Type = int(value.Int64)
	}
	if value, ok := values[17].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field typeName", values[17])
	} else if value.Valid {
		c.TypeName = value.String
	}
	if value, ok := values[18].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field weight", values[18])
	} else if value.Valid {
		c.Weight = int32(value.Int64)
	}
	if value, ok := values[19].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field from", values[19])
	} else if value.Valid {
		c.From = value.String
	}
	if value, ok := values[20].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field breed", values[20])
	} else if value.Valid {
		c.Breed = value.String
	}
	if value, ok := values[21].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field joinedTypeId", values[21])
	} else if value.Valid {
		c.JoinedTypeId = int(value.Int64)
	}
	if value, ok := values[22].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field joinedTypeName", values[22])
	} else if value.Valid {
		c.JoinedTypeName = value.String
	}
	if value, ok := values[23].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field mother", values[23])
	} else if value.Valid {
		c.Mother = value.String
	}
	if value, ok := values[24].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field father", values[24])
	} else if value.Valid {
		c.Father = value.String
	}
	if value, ok := values[25].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field grandfather", values[25])
	} else if value.Valid {
		c.Grandfather = value.String
	}
	if value, ok := values[26].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field ownerId", values[26])
	} else if value.Valid {
		c.OwnerId = value.Int64
	}
	if value, ok := values[27].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ownerName", values[27])
	} else if value.Valid {
		c.OwnerName = value.String
	}
	if value, ok := values[28].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field hairColorId", values[28])
	} else if value.Valid {
		c.HairColorId = value.Int64
	}
	if value, ok := values[29].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field hairColorName", values[29])
	} else if value.Valid {
		c.HairColorName = value.String
	}
	if value, ok := values[30].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field reproductiveStateId", values[30])
	} else if value.Valid {
		c.ReproductiveStateId = int(value.Int64)
	}
	if value, ok := values[31].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reproductiveStateName", values[31])
	} else if value.Valid {
		c.ReproductiveStateName = value.String
	}
	if value, ok := values[32].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pregnantTimes", values[32])
	} else if value.Valid {
		c.PregnantTimes = int(value.Int64)
	}
	if value, ok := values[33].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field lastCalvingAt", values[33])
	} else if value.Valid {
		c.LastCalvingAt = value.Int64
	}
	if value, ok := values[34].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field breedingAt", values[34])
	} else if value.Valid {
		c.BreedingAt = value.Int64
	}
	if value, ok := values[35].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field breedingTypeId", values[35])
	} else if value.Valid {
		c.BreedingTypeId = int(value.Int64)
	}
	if value, ok := values[36].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field breedingTypeName", values[36])
	} else if value.Valid {
		c.BreedingTypeName = value.String
	}
	if value, ok := values[37].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field bullId", values[37])
	} else if value.Valid {
		c.BullId = value.Int64
	}
	if value, ok := values[38].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pregnancyCheckAt", values[38])
	} else if value.Valid {
		c.PregnancyCheckAt = value.Int64
	}
	if value, ok := values[39].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[39])
	} else if value.Valid {
		c.CreatedAt = value.Int64
	}
	if value, ok := values[40].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[40])
	} else if value.Valid {
		c.UpdatedAt = value.Int64
	}
	if value, ok := values[41].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[41])
	} else if value.Valid {
		c.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Cattle.
// Note that, you need to call Cattle.Unwrap() before calling this method, if this Cattle
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cattle) Update() *CattleUpdateOne {
	return (&CattleClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Cattle) Unwrap() *Cattle {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cattle is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cattle) String() string {
	var builder strings.Builder
	builder.WriteString("Cattle(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", c.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(c.FarmName)
	builder.WriteString(", shedId=")
	builder.WriteString(fmt.Sprintf("%v", c.ShedId))
	builder.WriteString(", shedName=")
	builder.WriteString(c.ShedName)
	builder.WriteString(", shedTypeId=")
	builder.WriteString(fmt.Sprintf("%v", c.ShedTypeId))
	builder.WriteString(", shedTypeName=")
	builder.WriteString(c.ShedTypeName)
	builder.WriteString(", earNumber=")
	builder.WriteString(c.EarNumber)
	builder.WriteString(", electronicEarNumber=")
	builder.WriteString(c.ElectronicEarNumber)
	builder.WriteString(", pedometer=")
	builder.WriteString(c.Pedometer)
	builder.WriteString(", genderId=")
	builder.WriteString(fmt.Sprintf("%v", c.GenderId))
	builder.WriteString(", genderName=")
	builder.WriteString(c.GenderName)
	builder.WriteString(", birthday=")
	builder.WriteString(fmt.Sprintf("%v", c.Birthday))
	builder.WriteString(", joinedAt=")
	builder.WriteString(fmt.Sprintf("%v", c.JoinedAt))
	builder.WriteString(", cateId=")
	builder.WriteString(fmt.Sprintf("%v", c.CateId))
	builder.WriteString(", cateName=")
	builder.WriteString(c.CateName)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", typeName=")
	builder.WriteString(c.TypeName)
	builder.WriteString(", weight=")
	builder.WriteString(fmt.Sprintf("%v", c.Weight))
	builder.WriteString(", from=")
	builder.WriteString(c.From)
	builder.WriteString(", breed=")
	builder.WriteString(c.Breed)
	builder.WriteString(", joinedTypeId=")
	builder.WriteString(fmt.Sprintf("%v", c.JoinedTypeId))
	builder.WriteString(", joinedTypeName=")
	builder.WriteString(c.JoinedTypeName)
	builder.WriteString(", mother=")
	builder.WriteString(c.Mother)
	builder.WriteString(", father=")
	builder.WriteString(c.Father)
	builder.WriteString(", grandfather=")
	builder.WriteString(c.Grandfather)
	builder.WriteString(", ownerId=")
	builder.WriteString(fmt.Sprintf("%v", c.OwnerId))
	builder.WriteString(", ownerName=")
	builder.WriteString(c.OwnerName)
	builder.WriteString(", hairColorId=")
	builder.WriteString(fmt.Sprintf("%v", c.HairColorId))
	builder.WriteString(", hairColorName=")
	builder.WriteString(c.HairColorName)
	builder.WriteString(", reproductiveStateId=")
	builder.WriteString(fmt.Sprintf("%v", c.ReproductiveStateId))
	builder.WriteString(", reproductiveStateName=")
	builder.WriteString(c.ReproductiveStateName)
	builder.WriteString(", pregnantTimes=")
	builder.WriteString(fmt.Sprintf("%v", c.PregnantTimes))
	builder.WriteString(", lastCalvingAt=")
	builder.WriteString(fmt.Sprintf("%v", c.LastCalvingAt))
	builder.WriteString(", breedingAt=")
	builder.WriteString(fmt.Sprintf("%v", c.BreedingAt))
	builder.WriteString(", breedingTypeId=")
	builder.WriteString(fmt.Sprintf("%v", c.BreedingTypeId))
	builder.WriteString(", breedingTypeName=")
	builder.WriteString(c.BreedingTypeName)
	builder.WriteString(", bullId=")
	builder.WriteString(fmt.Sprintf("%v", c.BullId))
	builder.WriteString(", pregnancyCheckAt=")
	builder.WriteString(fmt.Sprintf("%v", c.PregnancyCheckAt))
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", c.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Cattles is a parsable slice of Cattle.
type Cattles []*Cattle

func (c Cattles) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattle"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Cattle is the model entity for the Cattle schema.
type Cattle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 生存状态, 1: 存活，2: 死亡
	Alive int `json:"alive,omitempty"`
	// 健康状态, 1: 健康，2: 发病
	Health int `json:"health,omitempty"`
	// 繁育状态ID
	ReproductiveStateId int `json:"reproductiveStateId,omitempty"`
	// 繁育状态
	ReproductiveStateName string `json:"reproductiveStateName,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// 牛舍类型ID
	ShedTypeId int64 `json:"shedTypeId,omitempty"`
	// 牛舍类型
	ShedTypeName string `json:"shedTypeName,omitempty"`
	// 牛耳号
	EarNumber string `json:"earNumber,omitempty"`
	// 电子耳号
	ElectronicEarNumber string `json:"electronicEarNumber,omitempty"`
	// 计步器
	Pedometer string `json:"pedometer,omitempty"`
	// 性别ID
	GenderId int `json:"genderId,omitempty"`
	// 性别名称
	GenderName string `json:"genderName,omitempty"`
	// 出生日期
	Birthday int64 `json:"birthday,omitempty"`
	// 入群日期
	JoinedAt int64 `json:"joinedAt,omitempty"`
	// 用途ID
	CateId int `json:"cateId,omitempty"`
	// 用途
	CateName string `json:"cateName,omitempty"`
	// 牛只类型ID
	Type int `json:"type,omitempty"`
	// 牛只类型
	TypeName string `json:"typeName,omitempty"`
	// 入群体重
	Weight int32 `json:"weight,omitempty"`
	// 来源
	From string `json:"from,omitempty"`
	// 品种
	Breed string `json:"breed,omitempty"`
	// 入群类型ID
	JoinedTypeId int `json:"joinedTypeId,omitempty"`
	// 入群类型
	JoinedTypeName string `json:"joinedTypeName,omitempty"`
	// 母亲号
	Mother string `json:"mother,omitempty"`
	// 父亲号
	Father string `json:"father,omitempty"`
	// 外祖父号
	Grandfather string `json:"grandfather,omitempty"`
	// 拥有者ID
	OwnerId int64 `json:"ownerId,omitempty"`
	// 拥有者
	OwnerName string `json:"ownerName,omitempty"`
	// 毛色ID
	HairColorId int64 `json:"hairColorId,omitempty"`
	// 毛色
	HairColorName string `json:"hairColorName,omitempty"`
	// 胎次
	PregnantTimes int `json:"pregnantTimes,omitempty"`
	// 最后产犊日期
	LastCalvingAt int64 `json:"lastCalvingAt,omitempty"`
	// 配种日期
	BreedingAt int64 `json:"breedingAt,omitempty"`
	// 配种类型ID
	BreedingTypeId int `json:"breedingTypeId,omitempty"`
	// 配种类型
	BreedingTypeName string `json:"breedingTypeName,omitempty"`
	// 公牛号
	BullId int64 `json:"bullId,omitempty"`
	// 妊检日期
	PregnancyCheckAt int64 `json:"pregnancyCheckAt,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cattle) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattle.FieldID, cattle.FieldAlive, cattle.FieldHealth, cattle.FieldReproductiveStateId, cattle.FieldFarmId, cattle.FieldShedId, cattle.FieldShedTypeId, cattle.FieldGenderId, cattle.FieldBirthday, cattle.FieldJoinedAt, cattle.FieldCateId, cattle.FieldType, cattle.FieldWeight, cattle.FieldJoinedTypeId, cattle.FieldOwnerId, cattle.FieldHairColorId, cattle.FieldPregnantTimes, cattle.FieldLastCalvingAt, cattle.FieldBreedingAt, cattle.FieldBreedingTypeId, cattle.FieldBullId, cattle.FieldPregnancyCheckAt, cattle.FieldTenantId, cattle.FieldCreatedAt, cattle.FieldUpdatedAt, cattle.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattle.FieldReproductiveStateName, cattle.FieldName, cattle.FieldFarmName, cattle.FieldShedName, cattle.FieldShedTypeName, cattle.FieldEarNumber, cattle.FieldElectronicEarNumber, cattle.FieldPedometer, cattle.FieldGenderName, cattle.FieldCateName, cattle.FieldTypeName, cattle.FieldFrom, cattle.FieldBreed, cattle.FieldJoinedTypeName, cattle.FieldMother, cattle.FieldFather, cattle.FieldGrandfather, cattle.FieldOwnerName, cattle.FieldHairColorName, cattle.FieldBreedingTypeName, cattle.FieldTenantName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cattle", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cattle fields.
func (c *Cattle) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case cattle.FieldAlive:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alive", values[i])
			} else if value.Valid {
				c.Alive = int(value.Int64)
			}
		case cattle.FieldHealth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field health", values[i])
			} else if value.Valid {
				c.Health = int(value.Int64)
			}
		case cattle.FieldReproductiveStateId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reproductiveStateId", values[i])
			} else if value.Valid {
				c.ReproductiveStateId = int(value.Int64)
			}
		case cattle.FieldReproductiveStateName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reproductiveStateName", values[i])
			} else if value.Valid {
				c.ReproductiveStateName = value.String
			}
		case cattle.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cattle.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				c.FarmId = value.Int64
			}
		case cattle.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				c.FarmName = value.String
			}
		case cattle.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				c.ShedId = value.Int64
			}
		case cattle.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				c.ShedName = value.String
			}
		case cattle.FieldShedTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedTypeId", values[i])
			} else if value.Valid {
				c.ShedTypeId = value.Int64
			}
		case cattle.FieldShedTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedTypeName", values[i])
			} else if value.Valid {
				c.ShedTypeName = value.String
			}
		case cattle.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				c.EarNumber = value.String
			}
		case cattle.FieldElectronicEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field electronicEarNumber", values[i])
			} else if value.Valid {
				c.ElectronicEarNumber = value.String
			}
		case cattle.FieldPedometer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pedometer", values[i])
			} else if value.Valid {
				c.Pedometer = value.String
			}
		case cattle.FieldGenderId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field genderId", values[i])
			} else if value.Valid {
				c.GenderId = int(value.Int64)
			}
		case cattle.FieldGenderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genderName", values[i])
			} else if value.Valid {
				c.GenderName = value.String
			}
		case cattle.FieldBirthday:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				c.Birthday = value.Int64
			}
		case cattle.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field joinedAt", values[i])
			} else if value.Valid {
				c.JoinedAt = value.Int64
			}
		case cattle.FieldCateId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cateId", values[i])
			} else if value.Valid {
				c.CateId = int(value.Int64)
			}
		case cattle.FieldCateName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cateName", values[i])
			} else if value.Valid {
				c.CateName = value.String
			}
		case cattle.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = int(value.Int64)
			}
		case cattle.FieldTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field typeName", values[i])
			} else if value.Valid {
				c.TypeName = value.String
			}
		case cattle.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				c.Weight = int32(value.Int64)
			}
		case cattle.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				c.From = value.String
			}
		case cattle.FieldBreed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field breed", values[i])
			} else if value.Valid {
				c.Breed = value.String
			}
		case cattle.FieldJoinedTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field joinedTypeId", values[i])
			} else if value.Valid {
				c.JoinedTypeId = int(value.Int64)
			}
		case cattle.FieldJoinedTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field joinedTypeName", values[i])
			} else if value.Valid {
				c.JoinedTypeName = value.String
			}
		case cattle.FieldMother:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mother", values[i])
			} else if value.Valid {
				c.Mother = value.String
			}
		case cattle.FieldFather:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field father", values[i])
			} else if value.Valid {
				c.Father = value.String
			}
		case cattle.FieldGrandfather:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field grandfather", values[i])
			} else if value.Valid {
				c.Grandfather = value.String
			}
		case cattle.FieldOwnerId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ownerId", values[i])
			} else if value.Valid {
				c.OwnerId = value.Int64
			}
		case cattle.FieldOwnerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ownerName", values[i])
			} else if value.Valid {
				c.OwnerName = value.String
			}
		case cattle.FieldHairColorId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hairColorId", values[i])
			} else if value.Valid {
				c.HairColorId = value.Int64
			}
		case cattle.FieldHairColorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hairColorName", values[i])
			} else if value.Valid {
				c.HairColorName = value.String
			}
		case cattle.FieldPregnantTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pregnantTimes", values[i])
			} else if value.Valid {
				c.PregnantTimes = int(value.Int64)
			}
		case cattle.FieldLastCalvingAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lastCalvingAt", values[i])
			} else if value.Valid {
				c.LastCalvingAt = value.Int64
			}
		case cattle.FieldBreedingAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field breedingAt", values[i])
			} else if value.Valid {
				c.BreedingAt = value.Int64
			}
		case cattle.FieldBreedingTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field breedingTypeId", values[i])
			} else if value.Valid {
				c.BreedingTypeId = int(value.Int64)
			}
		case cattle.FieldBreedingTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field breedingTypeName", values[i])
			} else if value.Valid {
				c.BreedingTypeName = value.String
			}
		case cattle.FieldBullId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bullId", values[i])
			} else if value.Valid {
				c.BullId = value.Int64
			}
		case cattle.FieldPregnancyCheckAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pregnancyCheckAt", values[i])
			} else if value.Valid {
				c.PregnancyCheckAt = value.Int64
			}
		case cattle.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				c.TenantId = value.Int64
			}
		case cattle.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				c.TenantName = value.String
			}
		case cattle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Int64
			}
		case cattle.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Int64
			}
		case cattle.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				c.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Cattle.
// Note that you need to call Cattle.Unwrap() before calling this method if this Cattle
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cattle) Update() *CattleUpdateOne {
	return (&CattleClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Cattle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cattle) Unwrap() *Cattle {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cattle is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cattle) String() string {
	var builder strings.Builder
	builder.WriteString("Cattle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("alive=")
	builder.WriteString(fmt.Sprintf("%v", c.Alive))
	builder.WriteString(", ")
	builder.WriteString("health=")
	builder.WriteString(fmt.Sprintf("%v", c.Health))
	builder.WriteString(", ")
	builder.WriteString("reproductiveStateId=")
	builder.WriteString(fmt.Sprintf("%v", c.ReproductiveStateId))
	builder.WriteString(", ")
	builder.WriteString("reproductiveStateName=")
	builder.WriteString(c.ReproductiveStateName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", c.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(c.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", c.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(c.ShedName)
	builder.WriteString(", ")
	builder.WriteString("shedTypeId=")
	builder.WriteString(fmt.Sprintf("%v", c.ShedTypeId))
	builder.WriteString(", ")
	builder.WriteString("shedTypeName=")
	builder.WriteString(c.ShedTypeName)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(c.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("electronicEarNumber=")
	builder.WriteString(c.ElectronicEarNumber)
	builder.WriteString(", ")
	builder.WriteString("pedometer=")
	builder.WriteString(c.Pedometer)
	builder.WriteString(", ")
	builder.WriteString("genderId=")
	builder.WriteString(fmt.Sprintf("%v", c.GenderId))
	builder.WriteString(", ")
	builder.WriteString("genderName=")
	builder.WriteString(c.GenderName)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(fmt.Sprintf("%v", c.Birthday))
	builder.WriteString(", ")
	builder.WriteString("joinedAt=")
	builder.WriteString(fmt.Sprintf("%v", c.JoinedAt))
	builder.WriteString(", ")
	builder.WriteString("cateId=")
	builder.WriteString(fmt.Sprintf("%v", c.CateId))
	builder.WriteString(", ")
	builder.WriteString("cateName=")
	builder.WriteString(c.CateName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("typeName=")
	builder.WriteString(c.TypeName)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", c.Weight))
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(c.From)
	builder.WriteString(", ")
	builder.WriteString("breed=")
	builder.WriteString(c.Breed)
	builder.WriteString(", ")
	builder.WriteString("joinedTypeId=")
	builder.WriteString(fmt.Sprintf("%v", c.JoinedTypeId))
	builder.WriteString(", ")
	builder.WriteString("joinedTypeName=")
	builder.WriteString(c.JoinedTypeName)
	builder.WriteString(", ")
	builder.WriteString("mother=")
	builder.WriteString(c.Mother)
	builder.WriteString(", ")
	builder.WriteString("father=")
	builder.WriteString(c.Father)
	builder.WriteString(", ")
	builder.WriteString("grandfather=")
	builder.WriteString(c.Grandfather)
	builder.WriteString(", ")
	builder.WriteString("ownerId=")
	builder.WriteString(fmt.Sprintf("%v", c.OwnerId))
	builder.WriteString(", ")
	builder.WriteString("ownerName=")
	builder.WriteString(c.OwnerName)
	builder.WriteString(", ")
	builder.WriteString("hairColorId=")
	builder.WriteString(fmt.Sprintf("%v", c.HairColorId))
	builder.WriteString(", ")
	builder.WriteString("hairColorName=")
	builder.WriteString(c.HairColorName)
	builder.WriteString(", ")
	builder.WriteString("pregnantTimes=")
	builder.WriteString(fmt.Sprintf("%v", c.PregnantTimes))
	builder.WriteString(", ")
	builder.WriteString("lastCalvingAt=")
	builder.WriteString(fmt.Sprintf("%v", c.LastCalvingAt))
	builder.WriteString(", ")
	builder.WriteString("breedingAt=")
	builder.WriteString(fmt.Sprintf("%v", c.BreedingAt))
	builder.WriteString(", ")
	builder.WriteString("breedingTypeId=")
	builder.WriteString(fmt.Sprintf("%v", c.BreedingTypeId))
	builder.WriteString(", ")
	builder.WriteString("breedingTypeName=")
	builder.WriteString(c.BreedingTypeName)
	builder.WriteString(", ")
	builder.WriteString("bullId=")
	builder.WriteString(fmt.Sprintf("%v", c.BullId))
	builder.WriteString(", ")
	builder.WriteString("pregnancyCheckAt=")
	builder.WriteString(fmt.Sprintf("%v", c.PregnancyCheckAt))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", c.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(c.TenantName)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", c.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Cattles is a parsable slice of Cattle.
type Cattles []*Cattle

func (c Cattles) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}

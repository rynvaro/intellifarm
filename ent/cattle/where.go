// Code generated by ent, DO NOT EDIT.

package cattle

import (
	"cattleai/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Alive applies equality check predicate on the "alive" field. It's identical to AliveEQ.
func Alive(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlive), v))
	})
}

// Health applies equality check predicate on the "health" field. It's identical to HealthEQ.
func Health(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHealth), v))
	})
}

// ReproductiveStateId applies equality check predicate on the "reproductiveStateId" field. It's identical to ReproductiveStateIdEQ.
func ReproductiveStateId(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReproductiveStateId), v))
	})
}

// ReproductiveStateName applies equality check predicate on the "reproductiveStateName" field. It's identical to ReproductiveStateNameEQ.
func ReproductiveStateName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReproductiveStateName), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// FarmId applies equality check predicate on the "farmId" field. It's identical to FarmIdEQ.
func FarmId(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmName applies equality check predicate on the "farmName" field. It's identical to FarmNameEQ.
func FarmName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// ShedId applies equality check predicate on the "shedId" field. It's identical to ShedIdEQ.
func ShedId(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedId), v))
	})
}

// ShedName applies equality check predicate on the "shedName" field. It's identical to ShedNameEQ.
func ShedName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// ShedTypeId applies equality check predicate on the "shedTypeId" field. It's identical to ShedTypeIdEQ.
func ShedTypeId(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeName applies equality check predicate on the "shedTypeName" field. It's identical to ShedTypeNameEQ.
func ShedTypeName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedTypeName), v))
	})
}

// EarNumber applies equality check predicate on the "earNumber" field. It's identical to EarNumberEQ.
func EarNumber(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// ElectronicEarNumber applies equality check predicate on the "electronicEarNumber" field. It's identical to ElectronicEarNumberEQ.
func ElectronicEarNumber(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectronicEarNumber), v))
	})
}

// Pedometer applies equality check predicate on the "pedometer" field. It's identical to PedometerEQ.
func Pedometer(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPedometer), v))
	})
}

// GenderId applies equality check predicate on the "genderId" field. It's identical to GenderIdEQ.
func GenderId(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenderId), v))
	})
}

// GenderName applies equality check predicate on the "genderName" field. It's identical to GenderNameEQ.
func GenderName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenderName), v))
	})
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthday), v))
	})
}

// JoinedAt applies equality check predicate on the "joinedAt" field. It's identical to JoinedAtEQ.
func JoinedAt(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedAt), v))
	})
}

// CateId applies equality check predicate on the "cateId" field. It's identical to CateIdEQ.
func CateId(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCateId), v))
	})
}

// CateName applies equality check predicate on the "cateName" field. It's identical to CateNameEQ.
func CateName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCateName), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeName applies equality check predicate on the "typeName" field. It's identical to TypeNameEQ.
func TypeName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeName), v))
	})
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int32) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrom), v))
	})
}

// Breed applies equality check predicate on the "breed" field. It's identical to BreedEQ.
func Breed(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreed), v))
	})
}

// JoinedTypeId applies equality check predicate on the "joinedTypeId" field. It's identical to JoinedTypeIdEQ.
func JoinedTypeId(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedTypeId), v))
	})
}

// JoinedTypeName applies equality check predicate on the "joinedTypeName" field. It's identical to JoinedTypeNameEQ.
func JoinedTypeName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedTypeName), v))
	})
}

// Mother applies equality check predicate on the "mother" field. It's identical to MotherEQ.
func Mother(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMother), v))
	})
}

// Father applies equality check predicate on the "father" field. It's identical to FatherEQ.
func Father(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFather), v))
	})
}

// Grandfather applies equality check predicate on the "grandfather" field. It's identical to GrandfatherEQ.
func Grandfather(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrandfather), v))
	})
}

// OwnerId applies equality check predicate on the "ownerId" field. It's identical to OwnerIdEQ.
func OwnerId(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerId), v))
	})
}

// OwnerName applies equality check predicate on the "ownerName" field. It's identical to OwnerNameEQ.
func OwnerName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerName), v))
	})
}

// HairColorId applies equality check predicate on the "hairColorId" field. It's identical to HairColorIdEQ.
func HairColorId(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairColorId), v))
	})
}

// HairColorName applies equality check predicate on the "hairColorName" field. It's identical to HairColorNameEQ.
func HairColorName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairColorName), v))
	})
}

// PregnantTimes applies equality check predicate on the "pregnantTimes" field. It's identical to PregnantTimesEQ.
func PregnantTimes(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPregnantTimes), v))
	})
}

// LastCalvingAt applies equality check predicate on the "lastCalvingAt" field. It's identical to LastCalvingAtEQ.
func LastCalvingAt(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastCalvingAt), v))
	})
}

// BreedingAt applies equality check predicate on the "breedingAt" field. It's identical to BreedingAtEQ.
func BreedingAt(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingAt), v))
	})
}

// BreedingTypeId applies equality check predicate on the "breedingTypeId" field. It's identical to BreedingTypeIdEQ.
func BreedingTypeId(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeName applies equality check predicate on the "breedingTypeName" field. It's identical to BreedingTypeNameEQ.
func BreedingTypeName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingTypeName), v))
	})
}

// BullId applies equality check predicate on the "bullId" field. It's identical to BullIdEQ.
func BullId(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBullId), v))
	})
}

// PregnancyCheckAt applies equality check predicate on the "pregnancyCheckAt" field. It's identical to PregnancyCheckAtEQ.
func PregnancyCheckAt(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPregnancyCheckAt), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// AliveEQ applies the EQ predicate on the "alive" field.
func AliveEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlive), v))
	})
}

// AliveNEQ applies the NEQ predicate on the "alive" field.
func AliveNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlive), v))
	})
}

// AliveIn applies the In predicate on the "alive" field.
func AliveIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAlive), v...))
	})
}

// AliveNotIn applies the NotIn predicate on the "alive" field.
func AliveNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAlive), v...))
	})
}

// AliveGT applies the GT predicate on the "alive" field.
func AliveGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlive), v))
	})
}

// AliveGTE applies the GTE predicate on the "alive" field.
func AliveGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlive), v))
	})
}

// AliveLT applies the LT predicate on the "alive" field.
func AliveLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlive), v))
	})
}

// AliveLTE applies the LTE predicate on the "alive" field.
func AliveLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlive), v))
	})
}

// HealthEQ applies the EQ predicate on the "health" field.
func HealthEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHealth), v))
	})
}

// HealthNEQ applies the NEQ predicate on the "health" field.
func HealthNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHealth), v))
	})
}

// HealthIn applies the In predicate on the "health" field.
func HealthIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHealth), v...))
	})
}

// HealthNotIn applies the NotIn predicate on the "health" field.
func HealthNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHealth), v...))
	})
}

// HealthGT applies the GT predicate on the "health" field.
func HealthGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHealth), v))
	})
}

// HealthGTE applies the GTE predicate on the "health" field.
func HealthGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHealth), v))
	})
}

// HealthLT applies the LT predicate on the "health" field.
func HealthLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHealth), v))
	})
}

// HealthLTE applies the LTE predicate on the "health" field.
func HealthLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHealth), v))
	})
}

// ReproductiveStateIdEQ applies the EQ predicate on the "reproductiveStateId" field.
func ReproductiveStateIdEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReproductiveStateId), v))
	})
}

// ReproductiveStateIdNEQ applies the NEQ predicate on the "reproductiveStateId" field.
func ReproductiveStateIdNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReproductiveStateId), v))
	})
}

// ReproductiveStateIdIn applies the In predicate on the "reproductiveStateId" field.
func ReproductiveStateIdIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReproductiveStateId), v...))
	})
}

// ReproductiveStateIdNotIn applies the NotIn predicate on the "reproductiveStateId" field.
func ReproductiveStateIdNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReproductiveStateId), v...))
	})
}

// ReproductiveStateIdGT applies the GT predicate on the "reproductiveStateId" field.
func ReproductiveStateIdGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReproductiveStateId), v))
	})
}

// ReproductiveStateIdGTE applies the GTE predicate on the "reproductiveStateId" field.
func ReproductiveStateIdGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReproductiveStateId), v))
	})
}

// ReproductiveStateIdLT applies the LT predicate on the "reproductiveStateId" field.
func ReproductiveStateIdLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReproductiveStateId), v))
	})
}

// ReproductiveStateIdLTE applies the LTE predicate on the "reproductiveStateId" field.
func ReproductiveStateIdLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReproductiveStateId), v))
	})
}

// ReproductiveStateNameEQ applies the EQ predicate on the "reproductiveStateName" field.
func ReproductiveStateNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameNEQ applies the NEQ predicate on the "reproductiveStateName" field.
func ReproductiveStateNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameIn applies the In predicate on the "reproductiveStateName" field.
func ReproductiveStateNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReproductiveStateName), v...))
	})
}

// ReproductiveStateNameNotIn applies the NotIn predicate on the "reproductiveStateName" field.
func ReproductiveStateNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReproductiveStateName), v...))
	})
}

// ReproductiveStateNameGT applies the GT predicate on the "reproductiveStateName" field.
func ReproductiveStateNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameGTE applies the GTE predicate on the "reproductiveStateName" field.
func ReproductiveStateNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameLT applies the LT predicate on the "reproductiveStateName" field.
func ReproductiveStateNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameLTE applies the LTE predicate on the "reproductiveStateName" field.
func ReproductiveStateNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameContains applies the Contains predicate on the "reproductiveStateName" field.
func ReproductiveStateNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameHasPrefix applies the HasPrefix predicate on the "reproductiveStateName" field.
func ReproductiveStateNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameHasSuffix applies the HasSuffix predicate on the "reproductiveStateName" field.
func ReproductiveStateNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameEqualFold applies the EqualFold predicate on the "reproductiveStateName" field.
func ReproductiveStateNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReproductiveStateName), v))
	})
}

// ReproductiveStateNameContainsFold applies the ContainsFold predicate on the "reproductiveStateName" field.
func ReproductiveStateNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReproductiveStateName), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// FarmIdEQ applies the EQ predicate on the "farmId" field.
func FarmIdEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmIdNEQ applies the NEQ predicate on the "farmId" field.
func FarmIdNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmId), v))
	})
}

// FarmIdIn applies the In predicate on the "farmId" field.
func FarmIdIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFarmId), v...))
	})
}

// FarmIdNotIn applies the NotIn predicate on the "farmId" field.
func FarmIdNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFarmId), v...))
	})
}

// FarmIdGT applies the GT predicate on the "farmId" field.
func FarmIdGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmId), v))
	})
}

// FarmIdGTE applies the GTE predicate on the "farmId" field.
func FarmIdGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmId), v))
	})
}

// FarmIdLT applies the LT predicate on the "farmId" field.
func FarmIdLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmId), v))
	})
}

// FarmIdLTE applies the LTE predicate on the "farmId" field.
func FarmIdLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmId), v))
	})
}

// FarmNameEQ applies the EQ predicate on the "farmName" field.
func FarmNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// FarmNameNEQ applies the NEQ predicate on the "farmName" field.
func FarmNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmName), v))
	})
}

// FarmNameIn applies the In predicate on the "farmName" field.
func FarmNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFarmName), v...))
	})
}

// FarmNameNotIn applies the NotIn predicate on the "farmName" field.
func FarmNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFarmName), v...))
	})
}

// FarmNameGT applies the GT predicate on the "farmName" field.
func FarmNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmName), v))
	})
}

// FarmNameGTE applies the GTE predicate on the "farmName" field.
func FarmNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmName), v))
	})
}

// FarmNameLT applies the LT predicate on the "farmName" field.
func FarmNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmName), v))
	})
}

// FarmNameLTE applies the LTE predicate on the "farmName" field.
func FarmNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmName), v))
	})
}

// FarmNameContains applies the Contains predicate on the "farmName" field.
func FarmNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFarmName), v))
	})
}

// FarmNameHasPrefix applies the HasPrefix predicate on the "farmName" field.
func FarmNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFarmName), v))
	})
}

// FarmNameHasSuffix applies the HasSuffix predicate on the "farmName" field.
func FarmNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFarmName), v))
	})
}

// FarmNameEqualFold applies the EqualFold predicate on the "farmName" field.
func FarmNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFarmName), v))
	})
}

// FarmNameContainsFold applies the ContainsFold predicate on the "farmName" field.
func FarmNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFarmName), v))
	})
}

// ShedIdEQ applies the EQ predicate on the "shedId" field.
func ShedIdEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedId), v))
	})
}

// ShedIdNEQ applies the NEQ predicate on the "shedId" field.
func ShedIdNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedId), v))
	})
}

// ShedIdIn applies the In predicate on the "shedId" field.
func ShedIdIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedId), v...))
	})
}

// ShedIdNotIn applies the NotIn predicate on the "shedId" field.
func ShedIdNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedId), v...))
	})
}

// ShedIdGT applies the GT predicate on the "shedId" field.
func ShedIdGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedId), v))
	})
}

// ShedIdGTE applies the GTE predicate on the "shedId" field.
func ShedIdGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedId), v))
	})
}

// ShedIdLT applies the LT predicate on the "shedId" field.
func ShedIdLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedId), v))
	})
}

// ShedIdLTE applies the LTE predicate on the "shedId" field.
func ShedIdLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedId), v))
	})
}

// ShedNameEQ applies the EQ predicate on the "shedName" field.
func ShedNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// ShedNameNEQ applies the NEQ predicate on the "shedName" field.
func ShedNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedName), v))
	})
}

// ShedNameIn applies the In predicate on the "shedName" field.
func ShedNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedName), v...))
	})
}

// ShedNameNotIn applies the NotIn predicate on the "shedName" field.
func ShedNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedName), v...))
	})
}

// ShedNameGT applies the GT predicate on the "shedName" field.
func ShedNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedName), v))
	})
}

// ShedNameGTE applies the GTE predicate on the "shedName" field.
func ShedNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedName), v))
	})
}

// ShedNameLT applies the LT predicate on the "shedName" field.
func ShedNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedName), v))
	})
}

// ShedNameLTE applies the LTE predicate on the "shedName" field.
func ShedNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedName), v))
	})
}

// ShedNameContains applies the Contains predicate on the "shedName" field.
func ShedNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedName), v))
	})
}

// ShedNameHasPrefix applies the HasPrefix predicate on the "shedName" field.
func ShedNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedName), v))
	})
}

// ShedNameHasSuffix applies the HasSuffix predicate on the "shedName" field.
func ShedNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedName), v))
	})
}

// ShedNameEqualFold applies the EqualFold predicate on the "shedName" field.
func ShedNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedName), v))
	})
}

// ShedNameContainsFold applies the ContainsFold predicate on the "shedName" field.
func ShedNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedName), v))
	})
}

// ShedTypeIdEQ applies the EQ predicate on the "shedTypeId" field.
func ShedTypeIdEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdNEQ applies the NEQ predicate on the "shedTypeId" field.
func ShedTypeIdNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdIn applies the In predicate on the "shedTypeId" field.
func ShedTypeIdIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedTypeId), v...))
	})
}

// ShedTypeIdNotIn applies the NotIn predicate on the "shedTypeId" field.
func ShedTypeIdNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedTypeId), v...))
	})
}

// ShedTypeIdGT applies the GT predicate on the "shedTypeId" field.
func ShedTypeIdGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdGTE applies the GTE predicate on the "shedTypeId" field.
func ShedTypeIdGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdLT applies the LT predicate on the "shedTypeId" field.
func ShedTypeIdLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdLTE applies the LTE predicate on the "shedTypeId" field.
func ShedTypeIdLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeNameEQ applies the EQ predicate on the "shedTypeName" field.
func ShedTypeNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameNEQ applies the NEQ predicate on the "shedTypeName" field.
func ShedTypeNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameIn applies the In predicate on the "shedTypeName" field.
func ShedTypeNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedTypeName), v...))
	})
}

// ShedTypeNameNotIn applies the NotIn predicate on the "shedTypeName" field.
func ShedTypeNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedTypeName), v...))
	})
}

// ShedTypeNameGT applies the GT predicate on the "shedTypeName" field.
func ShedTypeNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameGTE applies the GTE predicate on the "shedTypeName" field.
func ShedTypeNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameLT applies the LT predicate on the "shedTypeName" field.
func ShedTypeNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameLTE applies the LTE predicate on the "shedTypeName" field.
func ShedTypeNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameContains applies the Contains predicate on the "shedTypeName" field.
func ShedTypeNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameHasPrefix applies the HasPrefix predicate on the "shedTypeName" field.
func ShedTypeNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameHasSuffix applies the HasSuffix predicate on the "shedTypeName" field.
func ShedTypeNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameEqualFold applies the EqualFold predicate on the "shedTypeName" field.
func ShedTypeNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameContainsFold applies the ContainsFold predicate on the "shedTypeName" field.
func ShedTypeNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedTypeName), v))
	})
}

// EarNumberEQ applies the EQ predicate on the "earNumber" field.
func EarNumberEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberNEQ applies the NEQ predicate on the "earNumber" field.
func EarNumberNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberIn applies the In predicate on the "earNumber" field.
func EarNumberIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEarNumber), v...))
	})
}

// EarNumberNotIn applies the NotIn predicate on the "earNumber" field.
func EarNumberNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEarNumber), v...))
	})
}

// EarNumberGT applies the GT predicate on the "earNumber" field.
func EarNumberGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEarNumber), v))
	})
}

// EarNumberGTE applies the GTE predicate on the "earNumber" field.
func EarNumberGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberLT applies the LT predicate on the "earNumber" field.
func EarNumberLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEarNumber), v))
	})
}

// EarNumberLTE applies the LTE predicate on the "earNumber" field.
func EarNumberLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberContains applies the Contains predicate on the "earNumber" field.
func EarNumberContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasPrefix applies the HasPrefix predicate on the "earNumber" field.
func EarNumberHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasSuffix applies the HasSuffix predicate on the "earNumber" field.
func EarNumberHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEarNumber), v))
	})
}

// EarNumberEqualFold applies the EqualFold predicate on the "earNumber" field.
func EarNumberEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEarNumber), v))
	})
}

// EarNumberContainsFold applies the ContainsFold predicate on the "earNumber" field.
func EarNumberContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEarNumber), v))
	})
}

// ElectronicEarNumberEQ applies the EQ predicate on the "electronicEarNumber" field.
func ElectronicEarNumberEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberNEQ applies the NEQ predicate on the "electronicEarNumber" field.
func ElectronicEarNumberNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberIn applies the In predicate on the "electronicEarNumber" field.
func ElectronicEarNumberIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldElectronicEarNumber), v...))
	})
}

// ElectronicEarNumberNotIn applies the NotIn predicate on the "electronicEarNumber" field.
func ElectronicEarNumberNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldElectronicEarNumber), v...))
	})
}

// ElectronicEarNumberGT applies the GT predicate on the "electronicEarNumber" field.
func ElectronicEarNumberGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberGTE applies the GTE predicate on the "electronicEarNumber" field.
func ElectronicEarNumberGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberLT applies the LT predicate on the "electronicEarNumber" field.
func ElectronicEarNumberLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberLTE applies the LTE predicate on the "electronicEarNumber" field.
func ElectronicEarNumberLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberContains applies the Contains predicate on the "electronicEarNumber" field.
func ElectronicEarNumberContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberHasPrefix applies the HasPrefix predicate on the "electronicEarNumber" field.
func ElectronicEarNumberHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberHasSuffix applies the HasSuffix predicate on the "electronicEarNumber" field.
func ElectronicEarNumberHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberEqualFold applies the EqualFold predicate on the "electronicEarNumber" field.
func ElectronicEarNumberEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldElectronicEarNumber), v))
	})
}

// ElectronicEarNumberContainsFold applies the ContainsFold predicate on the "electronicEarNumber" field.
func ElectronicEarNumberContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldElectronicEarNumber), v))
	})
}

// PedometerEQ applies the EQ predicate on the "pedometer" field.
func PedometerEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPedometer), v))
	})
}

// PedometerNEQ applies the NEQ predicate on the "pedometer" field.
func PedometerNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPedometer), v))
	})
}

// PedometerIn applies the In predicate on the "pedometer" field.
func PedometerIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPedometer), v...))
	})
}

// PedometerNotIn applies the NotIn predicate on the "pedometer" field.
func PedometerNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPedometer), v...))
	})
}

// PedometerGT applies the GT predicate on the "pedometer" field.
func PedometerGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPedometer), v))
	})
}

// PedometerGTE applies the GTE predicate on the "pedometer" field.
func PedometerGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPedometer), v))
	})
}

// PedometerLT applies the LT predicate on the "pedometer" field.
func PedometerLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPedometer), v))
	})
}

// PedometerLTE applies the LTE predicate on the "pedometer" field.
func PedometerLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPedometer), v))
	})
}

// PedometerContains applies the Contains predicate on the "pedometer" field.
func PedometerContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPedometer), v))
	})
}

// PedometerHasPrefix applies the HasPrefix predicate on the "pedometer" field.
func PedometerHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPedometer), v))
	})
}

// PedometerHasSuffix applies the HasSuffix predicate on the "pedometer" field.
func PedometerHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPedometer), v))
	})
}

// PedometerEqualFold applies the EqualFold predicate on the "pedometer" field.
func PedometerEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPedometer), v))
	})
}

// PedometerContainsFold applies the ContainsFold predicate on the "pedometer" field.
func PedometerContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPedometer), v))
	})
}

// GenderIdEQ applies the EQ predicate on the "genderId" field.
func GenderIdEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenderId), v))
	})
}

// GenderIdNEQ applies the NEQ predicate on the "genderId" field.
func GenderIdNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGenderId), v))
	})
}

// GenderIdIn applies the In predicate on the "genderId" field.
func GenderIdIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGenderId), v...))
	})
}

// GenderIdNotIn applies the NotIn predicate on the "genderId" field.
func GenderIdNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGenderId), v...))
	})
}

// GenderIdGT applies the GT predicate on the "genderId" field.
func GenderIdGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGenderId), v))
	})
}

// GenderIdGTE applies the GTE predicate on the "genderId" field.
func GenderIdGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGenderId), v))
	})
}

// GenderIdLT applies the LT predicate on the "genderId" field.
func GenderIdLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGenderId), v))
	})
}

// GenderIdLTE applies the LTE predicate on the "genderId" field.
func GenderIdLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGenderId), v))
	})
}

// GenderNameEQ applies the EQ predicate on the "genderName" field.
func GenderNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenderName), v))
	})
}

// GenderNameNEQ applies the NEQ predicate on the "genderName" field.
func GenderNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGenderName), v))
	})
}

// GenderNameIn applies the In predicate on the "genderName" field.
func GenderNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGenderName), v...))
	})
}

// GenderNameNotIn applies the NotIn predicate on the "genderName" field.
func GenderNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGenderName), v...))
	})
}

// GenderNameGT applies the GT predicate on the "genderName" field.
func GenderNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGenderName), v))
	})
}

// GenderNameGTE applies the GTE predicate on the "genderName" field.
func GenderNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGenderName), v))
	})
}

// GenderNameLT applies the LT predicate on the "genderName" field.
func GenderNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGenderName), v))
	})
}

// GenderNameLTE applies the LTE predicate on the "genderName" field.
func GenderNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGenderName), v))
	})
}

// GenderNameContains applies the Contains predicate on the "genderName" field.
func GenderNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGenderName), v))
	})
}

// GenderNameHasPrefix applies the HasPrefix predicate on the "genderName" field.
func GenderNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGenderName), v))
	})
}

// GenderNameHasSuffix applies the HasSuffix predicate on the "genderName" field.
func GenderNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGenderName), v))
	})
}

// GenderNameEqualFold applies the EqualFold predicate on the "genderName" field.
func GenderNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGenderName), v))
	})
}

// GenderNameContainsFold applies the ContainsFold predicate on the "genderName" field.
func GenderNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGenderName), v))
	})
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthday), v))
	})
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthday), v))
	})
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBirthday), v...))
	})
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBirthday), v...))
	})
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthday), v))
	})
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthday), v))
	})
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthday), v))
	})
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthday), v))
	})
}

// JoinedAtEQ applies the EQ predicate on the "joinedAt" field.
func JoinedAtEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtNEQ applies the NEQ predicate on the "joinedAt" field.
func JoinedAtNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtIn applies the In predicate on the "joinedAt" field.
func JoinedAtIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJoinedAt), v...))
	})
}

// JoinedAtNotIn applies the NotIn predicate on the "joinedAt" field.
func JoinedAtNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJoinedAt), v...))
	})
}

// JoinedAtGT applies the GT predicate on the "joinedAt" field.
func JoinedAtGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtGTE applies the GTE predicate on the "joinedAt" field.
func JoinedAtGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtLT applies the LT predicate on the "joinedAt" field.
func JoinedAtLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtLTE applies the LTE predicate on the "joinedAt" field.
func JoinedAtLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJoinedAt), v))
	})
}

// CateIdEQ applies the EQ predicate on the "cateId" field.
func CateIdEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCateId), v))
	})
}

// CateIdNEQ applies the NEQ predicate on the "cateId" field.
func CateIdNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCateId), v))
	})
}

// CateIdIn applies the In predicate on the "cateId" field.
func CateIdIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCateId), v...))
	})
}

// CateIdNotIn applies the NotIn predicate on the "cateId" field.
func CateIdNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCateId), v...))
	})
}

// CateIdGT applies the GT predicate on the "cateId" field.
func CateIdGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCateId), v))
	})
}

// CateIdGTE applies the GTE predicate on the "cateId" field.
func CateIdGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCateId), v))
	})
}

// CateIdLT applies the LT predicate on the "cateId" field.
func CateIdLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCateId), v))
	})
}

// CateIdLTE applies the LTE predicate on the "cateId" field.
func CateIdLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCateId), v))
	})
}

// CateNameEQ applies the EQ predicate on the "cateName" field.
func CateNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCateName), v))
	})
}

// CateNameNEQ applies the NEQ predicate on the "cateName" field.
func CateNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCateName), v))
	})
}

// CateNameIn applies the In predicate on the "cateName" field.
func CateNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCateName), v...))
	})
}

// CateNameNotIn applies the NotIn predicate on the "cateName" field.
func CateNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCateName), v...))
	})
}

// CateNameGT applies the GT predicate on the "cateName" field.
func CateNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCateName), v))
	})
}

// CateNameGTE applies the GTE predicate on the "cateName" field.
func CateNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCateName), v))
	})
}

// CateNameLT applies the LT predicate on the "cateName" field.
func CateNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCateName), v))
	})
}

// CateNameLTE applies the LTE predicate on the "cateName" field.
func CateNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCateName), v))
	})
}

// CateNameContains applies the Contains predicate on the "cateName" field.
func CateNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCateName), v))
	})
}

// CateNameHasPrefix applies the HasPrefix predicate on the "cateName" field.
func CateNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCateName), v))
	})
}

// CateNameHasSuffix applies the HasSuffix predicate on the "cateName" field.
func CateNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCateName), v))
	})
}

// CateNameEqualFold applies the EqualFold predicate on the "cateName" field.
func CateNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCateName), v))
	})
}

// CateNameContainsFold applies the ContainsFold predicate on the "cateName" field.
func CateNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCateName), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeNameEQ applies the EQ predicate on the "typeName" field.
func TypeNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeName), v))
	})
}

// TypeNameNEQ applies the NEQ predicate on the "typeName" field.
func TypeNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeName), v))
	})
}

// TypeNameIn applies the In predicate on the "typeName" field.
func TypeNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTypeName), v...))
	})
}

// TypeNameNotIn applies the NotIn predicate on the "typeName" field.
func TypeNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTypeName), v...))
	})
}

// TypeNameGT applies the GT predicate on the "typeName" field.
func TypeNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeName), v))
	})
}

// TypeNameGTE applies the GTE predicate on the "typeName" field.
func TypeNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeName), v))
	})
}

// TypeNameLT applies the LT predicate on the "typeName" field.
func TypeNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeName), v))
	})
}

// TypeNameLTE applies the LTE predicate on the "typeName" field.
func TypeNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeName), v))
	})
}

// TypeNameContains applies the Contains predicate on the "typeName" field.
func TypeNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTypeName), v))
	})
}

// TypeNameHasPrefix applies the HasPrefix predicate on the "typeName" field.
func TypeNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTypeName), v))
	})
}

// TypeNameHasSuffix applies the HasSuffix predicate on the "typeName" field.
func TypeNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTypeName), v))
	})
}

// TypeNameEqualFold applies the EqualFold predicate on the "typeName" field.
func TypeNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTypeName), v))
	})
}

// TypeNameContainsFold applies the ContainsFold predicate on the "typeName" field.
func TypeNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTypeName), v))
	})
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int32) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int32) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeight), v))
	})
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int32) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeight), v...))
	})
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int32) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeight), v...))
	})
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int32) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeight), v))
	})
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int32) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeight), v))
	})
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int32) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeight), v))
	})
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int32) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeight), v))
	})
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrom), v))
	})
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrom), v))
	})
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFrom), v...))
	})
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFrom), v...))
	})
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrom), v))
	})
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrom), v))
	})
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrom), v))
	})
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrom), v))
	})
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFrom), v))
	})
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFrom), v))
	})
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFrom), v))
	})
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFrom), v))
	})
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFrom), v))
	})
}

// BreedEQ applies the EQ predicate on the "breed" field.
func BreedEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreed), v))
	})
}

// BreedNEQ applies the NEQ predicate on the "breed" field.
func BreedNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreed), v))
	})
}

// BreedIn applies the In predicate on the "breed" field.
func BreedIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBreed), v...))
	})
}

// BreedNotIn applies the NotIn predicate on the "breed" field.
func BreedNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBreed), v...))
	})
}

// BreedGT applies the GT predicate on the "breed" field.
func BreedGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreed), v))
	})
}

// BreedGTE applies the GTE predicate on the "breed" field.
func BreedGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreed), v))
	})
}

// BreedLT applies the LT predicate on the "breed" field.
func BreedLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreed), v))
	})
}

// BreedLTE applies the LTE predicate on the "breed" field.
func BreedLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreed), v))
	})
}

// BreedContains applies the Contains predicate on the "breed" field.
func BreedContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBreed), v))
	})
}

// BreedHasPrefix applies the HasPrefix predicate on the "breed" field.
func BreedHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBreed), v))
	})
}

// BreedHasSuffix applies the HasSuffix predicate on the "breed" field.
func BreedHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBreed), v))
	})
}

// BreedEqualFold applies the EqualFold predicate on the "breed" field.
func BreedEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBreed), v))
	})
}

// BreedContainsFold applies the ContainsFold predicate on the "breed" field.
func BreedContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBreed), v))
	})
}

// JoinedTypeIdEQ applies the EQ predicate on the "joinedTypeId" field.
func JoinedTypeIdEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedTypeId), v))
	})
}

// JoinedTypeIdNEQ applies the NEQ predicate on the "joinedTypeId" field.
func JoinedTypeIdNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJoinedTypeId), v))
	})
}

// JoinedTypeIdIn applies the In predicate on the "joinedTypeId" field.
func JoinedTypeIdIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJoinedTypeId), v...))
	})
}

// JoinedTypeIdNotIn applies the NotIn predicate on the "joinedTypeId" field.
func JoinedTypeIdNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJoinedTypeId), v...))
	})
}

// JoinedTypeIdGT applies the GT predicate on the "joinedTypeId" field.
func JoinedTypeIdGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJoinedTypeId), v))
	})
}

// JoinedTypeIdGTE applies the GTE predicate on the "joinedTypeId" field.
func JoinedTypeIdGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJoinedTypeId), v))
	})
}

// JoinedTypeIdLT applies the LT predicate on the "joinedTypeId" field.
func JoinedTypeIdLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJoinedTypeId), v))
	})
}

// JoinedTypeIdLTE applies the LTE predicate on the "joinedTypeId" field.
func JoinedTypeIdLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJoinedTypeId), v))
	})
}

// JoinedTypeNameEQ applies the EQ predicate on the "joinedTypeName" field.
func JoinedTypeNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameNEQ applies the NEQ predicate on the "joinedTypeName" field.
func JoinedTypeNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameIn applies the In predicate on the "joinedTypeName" field.
func JoinedTypeNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJoinedTypeName), v...))
	})
}

// JoinedTypeNameNotIn applies the NotIn predicate on the "joinedTypeName" field.
func JoinedTypeNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJoinedTypeName), v...))
	})
}

// JoinedTypeNameGT applies the GT predicate on the "joinedTypeName" field.
func JoinedTypeNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameGTE applies the GTE predicate on the "joinedTypeName" field.
func JoinedTypeNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameLT applies the LT predicate on the "joinedTypeName" field.
func JoinedTypeNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameLTE applies the LTE predicate on the "joinedTypeName" field.
func JoinedTypeNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameContains applies the Contains predicate on the "joinedTypeName" field.
func JoinedTypeNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameHasPrefix applies the HasPrefix predicate on the "joinedTypeName" field.
func JoinedTypeNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameHasSuffix applies the HasSuffix predicate on the "joinedTypeName" field.
func JoinedTypeNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameEqualFold applies the EqualFold predicate on the "joinedTypeName" field.
func JoinedTypeNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJoinedTypeName), v))
	})
}

// JoinedTypeNameContainsFold applies the ContainsFold predicate on the "joinedTypeName" field.
func JoinedTypeNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJoinedTypeName), v))
	})
}

// MotherEQ applies the EQ predicate on the "mother" field.
func MotherEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMother), v))
	})
}

// MotherNEQ applies the NEQ predicate on the "mother" field.
func MotherNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMother), v))
	})
}

// MotherIn applies the In predicate on the "mother" field.
func MotherIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMother), v...))
	})
}

// MotherNotIn applies the NotIn predicate on the "mother" field.
func MotherNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMother), v...))
	})
}

// MotherGT applies the GT predicate on the "mother" field.
func MotherGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMother), v))
	})
}

// MotherGTE applies the GTE predicate on the "mother" field.
func MotherGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMother), v))
	})
}

// MotherLT applies the LT predicate on the "mother" field.
func MotherLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMother), v))
	})
}

// MotherLTE applies the LTE predicate on the "mother" field.
func MotherLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMother), v))
	})
}

// MotherContains applies the Contains predicate on the "mother" field.
func MotherContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMother), v))
	})
}

// MotherHasPrefix applies the HasPrefix predicate on the "mother" field.
func MotherHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMother), v))
	})
}

// MotherHasSuffix applies the HasSuffix predicate on the "mother" field.
func MotherHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMother), v))
	})
}

// MotherEqualFold applies the EqualFold predicate on the "mother" field.
func MotherEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMother), v))
	})
}

// MotherContainsFold applies the ContainsFold predicate on the "mother" field.
func MotherContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMother), v))
	})
}

// FatherEQ applies the EQ predicate on the "father" field.
func FatherEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFather), v))
	})
}

// FatherNEQ applies the NEQ predicate on the "father" field.
func FatherNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFather), v))
	})
}

// FatherIn applies the In predicate on the "father" field.
func FatherIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFather), v...))
	})
}

// FatherNotIn applies the NotIn predicate on the "father" field.
func FatherNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFather), v...))
	})
}

// FatherGT applies the GT predicate on the "father" field.
func FatherGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFather), v))
	})
}

// FatherGTE applies the GTE predicate on the "father" field.
func FatherGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFather), v))
	})
}

// FatherLT applies the LT predicate on the "father" field.
func FatherLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFather), v))
	})
}

// FatherLTE applies the LTE predicate on the "father" field.
func FatherLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFather), v))
	})
}

// FatherContains applies the Contains predicate on the "father" field.
func FatherContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFather), v))
	})
}

// FatherHasPrefix applies the HasPrefix predicate on the "father" field.
func FatherHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFather), v))
	})
}

// FatherHasSuffix applies the HasSuffix predicate on the "father" field.
func FatherHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFather), v))
	})
}

// FatherEqualFold applies the EqualFold predicate on the "father" field.
func FatherEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFather), v))
	})
}

// FatherContainsFold applies the ContainsFold predicate on the "father" field.
func FatherContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFather), v))
	})
}

// GrandfatherEQ applies the EQ predicate on the "grandfather" field.
func GrandfatherEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrandfather), v))
	})
}

// GrandfatherNEQ applies the NEQ predicate on the "grandfather" field.
func GrandfatherNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGrandfather), v))
	})
}

// GrandfatherIn applies the In predicate on the "grandfather" field.
func GrandfatherIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGrandfather), v...))
	})
}

// GrandfatherNotIn applies the NotIn predicate on the "grandfather" field.
func GrandfatherNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGrandfather), v...))
	})
}

// GrandfatherGT applies the GT predicate on the "grandfather" field.
func GrandfatherGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGrandfather), v))
	})
}

// GrandfatherGTE applies the GTE predicate on the "grandfather" field.
func GrandfatherGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGrandfather), v))
	})
}

// GrandfatherLT applies the LT predicate on the "grandfather" field.
func GrandfatherLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGrandfather), v))
	})
}

// GrandfatherLTE applies the LTE predicate on the "grandfather" field.
func GrandfatherLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGrandfather), v))
	})
}

// GrandfatherContains applies the Contains predicate on the "grandfather" field.
func GrandfatherContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGrandfather), v))
	})
}

// GrandfatherHasPrefix applies the HasPrefix predicate on the "grandfather" field.
func GrandfatherHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGrandfather), v))
	})
}

// GrandfatherHasSuffix applies the HasSuffix predicate on the "grandfather" field.
func GrandfatherHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGrandfather), v))
	})
}

// GrandfatherEqualFold applies the EqualFold predicate on the "grandfather" field.
func GrandfatherEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGrandfather), v))
	})
}

// GrandfatherContainsFold applies the ContainsFold predicate on the "grandfather" field.
func GrandfatherContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGrandfather), v))
	})
}

// OwnerIdEQ applies the EQ predicate on the "ownerId" field.
func OwnerIdEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerId), v))
	})
}

// OwnerIdNEQ applies the NEQ predicate on the "ownerId" field.
func OwnerIdNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerId), v))
	})
}

// OwnerIdIn applies the In predicate on the "ownerId" field.
func OwnerIdIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOwnerId), v...))
	})
}

// OwnerIdNotIn applies the NotIn predicate on the "ownerId" field.
func OwnerIdNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOwnerId), v...))
	})
}

// OwnerIdGT applies the GT predicate on the "ownerId" field.
func OwnerIdGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerId), v))
	})
}

// OwnerIdGTE applies the GTE predicate on the "ownerId" field.
func OwnerIdGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerId), v))
	})
}

// OwnerIdLT applies the LT predicate on the "ownerId" field.
func OwnerIdLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerId), v))
	})
}

// OwnerIdLTE applies the LTE predicate on the "ownerId" field.
func OwnerIdLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerId), v))
	})
}

// OwnerNameEQ applies the EQ predicate on the "ownerName" field.
func OwnerNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerName), v))
	})
}

// OwnerNameNEQ applies the NEQ predicate on the "ownerName" field.
func OwnerNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerName), v))
	})
}

// OwnerNameIn applies the In predicate on the "ownerName" field.
func OwnerNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOwnerName), v...))
	})
}

// OwnerNameNotIn applies the NotIn predicate on the "ownerName" field.
func OwnerNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOwnerName), v...))
	})
}

// OwnerNameGT applies the GT predicate on the "ownerName" field.
func OwnerNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerName), v))
	})
}

// OwnerNameGTE applies the GTE predicate on the "ownerName" field.
func OwnerNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerName), v))
	})
}

// OwnerNameLT applies the LT predicate on the "ownerName" field.
func OwnerNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerName), v))
	})
}

// OwnerNameLTE applies the LTE predicate on the "ownerName" field.
func OwnerNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerName), v))
	})
}

// OwnerNameContains applies the Contains predicate on the "ownerName" field.
func OwnerNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnerName), v))
	})
}

// OwnerNameHasPrefix applies the HasPrefix predicate on the "ownerName" field.
func OwnerNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnerName), v))
	})
}

// OwnerNameHasSuffix applies the HasSuffix predicate on the "ownerName" field.
func OwnerNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnerName), v))
	})
}

// OwnerNameEqualFold applies the EqualFold predicate on the "ownerName" field.
func OwnerNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnerName), v))
	})
}

// OwnerNameContainsFold applies the ContainsFold predicate on the "ownerName" field.
func OwnerNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnerName), v))
	})
}

// HairColorIdEQ applies the EQ predicate on the "hairColorId" field.
func HairColorIdEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairColorId), v))
	})
}

// HairColorIdNEQ applies the NEQ predicate on the "hairColorId" field.
func HairColorIdNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHairColorId), v))
	})
}

// HairColorIdIn applies the In predicate on the "hairColorId" field.
func HairColorIdIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHairColorId), v...))
	})
}

// HairColorIdNotIn applies the NotIn predicate on the "hairColorId" field.
func HairColorIdNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHairColorId), v...))
	})
}

// HairColorIdGT applies the GT predicate on the "hairColorId" field.
func HairColorIdGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHairColorId), v))
	})
}

// HairColorIdGTE applies the GTE predicate on the "hairColorId" field.
func HairColorIdGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHairColorId), v))
	})
}

// HairColorIdLT applies the LT predicate on the "hairColorId" field.
func HairColorIdLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHairColorId), v))
	})
}

// HairColorIdLTE applies the LTE predicate on the "hairColorId" field.
func HairColorIdLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHairColorId), v))
	})
}

// HairColorNameEQ applies the EQ predicate on the "hairColorName" field.
func HairColorNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairColorName), v))
	})
}

// HairColorNameNEQ applies the NEQ predicate on the "hairColorName" field.
func HairColorNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHairColorName), v))
	})
}

// HairColorNameIn applies the In predicate on the "hairColorName" field.
func HairColorNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHairColorName), v...))
	})
}

// HairColorNameNotIn applies the NotIn predicate on the "hairColorName" field.
func HairColorNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHairColorName), v...))
	})
}

// HairColorNameGT applies the GT predicate on the "hairColorName" field.
func HairColorNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHairColorName), v))
	})
}

// HairColorNameGTE applies the GTE predicate on the "hairColorName" field.
func HairColorNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHairColorName), v))
	})
}

// HairColorNameLT applies the LT predicate on the "hairColorName" field.
func HairColorNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHairColorName), v))
	})
}

// HairColorNameLTE applies the LTE predicate on the "hairColorName" field.
func HairColorNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHairColorName), v))
	})
}

// HairColorNameContains applies the Contains predicate on the "hairColorName" field.
func HairColorNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHairColorName), v))
	})
}

// HairColorNameHasPrefix applies the HasPrefix predicate on the "hairColorName" field.
func HairColorNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHairColorName), v))
	})
}

// HairColorNameHasSuffix applies the HasSuffix predicate on the "hairColorName" field.
func HairColorNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHairColorName), v))
	})
}

// HairColorNameEqualFold applies the EqualFold predicate on the "hairColorName" field.
func HairColorNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHairColorName), v))
	})
}

// HairColorNameContainsFold applies the ContainsFold predicate on the "hairColorName" field.
func HairColorNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHairColorName), v))
	})
}

// PregnantTimesEQ applies the EQ predicate on the "pregnantTimes" field.
func PregnantTimesEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPregnantTimes), v))
	})
}

// PregnantTimesNEQ applies the NEQ predicate on the "pregnantTimes" field.
func PregnantTimesNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPregnantTimes), v))
	})
}

// PregnantTimesIn applies the In predicate on the "pregnantTimes" field.
func PregnantTimesIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPregnantTimes), v...))
	})
}

// PregnantTimesNotIn applies the NotIn predicate on the "pregnantTimes" field.
func PregnantTimesNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPregnantTimes), v...))
	})
}

// PregnantTimesGT applies the GT predicate on the "pregnantTimes" field.
func PregnantTimesGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPregnantTimes), v))
	})
}

// PregnantTimesGTE applies the GTE predicate on the "pregnantTimes" field.
func PregnantTimesGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPregnantTimes), v))
	})
}

// PregnantTimesLT applies the LT predicate on the "pregnantTimes" field.
func PregnantTimesLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPregnantTimes), v))
	})
}

// PregnantTimesLTE applies the LTE predicate on the "pregnantTimes" field.
func PregnantTimesLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPregnantTimes), v))
	})
}

// LastCalvingAtEQ applies the EQ predicate on the "lastCalvingAt" field.
func LastCalvingAtEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastCalvingAt), v))
	})
}

// LastCalvingAtNEQ applies the NEQ predicate on the "lastCalvingAt" field.
func LastCalvingAtNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastCalvingAt), v))
	})
}

// LastCalvingAtIn applies the In predicate on the "lastCalvingAt" field.
func LastCalvingAtIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastCalvingAt), v...))
	})
}

// LastCalvingAtNotIn applies the NotIn predicate on the "lastCalvingAt" field.
func LastCalvingAtNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastCalvingAt), v...))
	})
}

// LastCalvingAtGT applies the GT predicate on the "lastCalvingAt" field.
func LastCalvingAtGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastCalvingAt), v))
	})
}

// LastCalvingAtGTE applies the GTE predicate on the "lastCalvingAt" field.
func LastCalvingAtGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastCalvingAt), v))
	})
}

// LastCalvingAtLT applies the LT predicate on the "lastCalvingAt" field.
func LastCalvingAtLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastCalvingAt), v))
	})
}

// LastCalvingAtLTE applies the LTE predicate on the "lastCalvingAt" field.
func LastCalvingAtLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastCalvingAt), v))
	})
}

// BreedingAtEQ applies the EQ predicate on the "breedingAt" field.
func BreedingAtEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtNEQ applies the NEQ predicate on the "breedingAt" field.
func BreedingAtNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtIn applies the In predicate on the "breedingAt" field.
func BreedingAtIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBreedingAt), v...))
	})
}

// BreedingAtNotIn applies the NotIn predicate on the "breedingAt" field.
func BreedingAtNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBreedingAt), v...))
	})
}

// BreedingAtGT applies the GT predicate on the "breedingAt" field.
func BreedingAtGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtGTE applies the GTE predicate on the "breedingAt" field.
func BreedingAtGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtLT applies the LT predicate on the "breedingAt" field.
func BreedingAtLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreedingAt), v))
	})
}

// BreedingAtLTE applies the LTE predicate on the "breedingAt" field.
func BreedingAtLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreedingAt), v))
	})
}

// BreedingTypeIdEQ applies the EQ predicate on the "breedingTypeId" field.
func BreedingTypeIdEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdNEQ applies the NEQ predicate on the "breedingTypeId" field.
func BreedingTypeIdNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdIn applies the In predicate on the "breedingTypeId" field.
func BreedingTypeIdIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBreedingTypeId), v...))
	})
}

// BreedingTypeIdNotIn applies the NotIn predicate on the "breedingTypeId" field.
func BreedingTypeIdNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBreedingTypeId), v...))
	})
}

// BreedingTypeIdGT applies the GT predicate on the "breedingTypeId" field.
func BreedingTypeIdGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdGTE applies the GTE predicate on the "breedingTypeId" field.
func BreedingTypeIdGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdLT applies the LT predicate on the "breedingTypeId" field.
func BreedingTypeIdLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeIdLTE applies the LTE predicate on the "breedingTypeId" field.
func BreedingTypeIdLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreedingTypeId), v))
	})
}

// BreedingTypeNameEQ applies the EQ predicate on the "breedingTypeName" field.
func BreedingTypeNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameNEQ applies the NEQ predicate on the "breedingTypeName" field.
func BreedingTypeNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameIn applies the In predicate on the "breedingTypeName" field.
func BreedingTypeNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBreedingTypeName), v...))
	})
}

// BreedingTypeNameNotIn applies the NotIn predicate on the "breedingTypeName" field.
func BreedingTypeNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBreedingTypeName), v...))
	})
}

// BreedingTypeNameGT applies the GT predicate on the "breedingTypeName" field.
func BreedingTypeNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameGTE applies the GTE predicate on the "breedingTypeName" field.
func BreedingTypeNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameLT applies the LT predicate on the "breedingTypeName" field.
func BreedingTypeNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameLTE applies the LTE predicate on the "breedingTypeName" field.
func BreedingTypeNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameContains applies the Contains predicate on the "breedingTypeName" field.
func BreedingTypeNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameHasPrefix applies the HasPrefix predicate on the "breedingTypeName" field.
func BreedingTypeNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameHasSuffix applies the HasSuffix predicate on the "breedingTypeName" field.
func BreedingTypeNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameEqualFold applies the EqualFold predicate on the "breedingTypeName" field.
func BreedingTypeNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBreedingTypeName), v))
	})
}

// BreedingTypeNameContainsFold applies the ContainsFold predicate on the "breedingTypeName" field.
func BreedingTypeNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBreedingTypeName), v))
	})
}

// BullIdEQ applies the EQ predicate on the "bullId" field.
func BullIdEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBullId), v))
	})
}

// BullIdNEQ applies the NEQ predicate on the "bullId" field.
func BullIdNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBullId), v))
	})
}

// BullIdIn applies the In predicate on the "bullId" field.
func BullIdIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBullId), v...))
	})
}

// BullIdNotIn applies the NotIn predicate on the "bullId" field.
func BullIdNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBullId), v...))
	})
}

// BullIdGT applies the GT predicate on the "bullId" field.
func BullIdGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBullId), v))
	})
}

// BullIdGTE applies the GTE predicate on the "bullId" field.
func BullIdGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBullId), v))
	})
}

// BullIdLT applies the LT predicate on the "bullId" field.
func BullIdLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBullId), v))
	})
}

// BullIdLTE applies the LTE predicate on the "bullId" field.
func BullIdLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBullId), v))
	})
}

// PregnancyCheckAtEQ applies the EQ predicate on the "pregnancyCheckAt" field.
func PregnancyCheckAtEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPregnancyCheckAt), v))
	})
}

// PregnancyCheckAtNEQ applies the NEQ predicate on the "pregnancyCheckAt" field.
func PregnancyCheckAtNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPregnancyCheckAt), v))
	})
}

// PregnancyCheckAtIn applies the In predicate on the "pregnancyCheckAt" field.
func PregnancyCheckAtIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPregnancyCheckAt), v...))
	})
}

// PregnancyCheckAtNotIn applies the NotIn predicate on the "pregnancyCheckAt" field.
func PregnancyCheckAtNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPregnancyCheckAt), v...))
	})
}

// PregnancyCheckAtGT applies the GT predicate on the "pregnancyCheckAt" field.
func PregnancyCheckAtGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPregnancyCheckAt), v))
	})
}

// PregnancyCheckAtGTE applies the GTE predicate on the "pregnancyCheckAt" field.
func PregnancyCheckAtGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPregnancyCheckAt), v))
	})
}

// PregnancyCheckAtLT applies the LT predicate on the "pregnancyCheckAt" field.
func PregnancyCheckAtLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPregnancyCheckAt), v))
	})
}

// PregnancyCheckAtLTE applies the LTE predicate on the "pregnancyCheckAt" field.
func PregnancyCheckAtLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPregnancyCheckAt), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.Cattle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cattle) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cattle) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cattle) predicate.Cattle {
	return predicate.Cattle(func(s *sql.Selector) {
		p(s.Not())
	})
}

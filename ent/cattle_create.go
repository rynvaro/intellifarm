// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattle"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CattleCreate is the builder for creating a Cattle entity.
type CattleCreate struct {
	config
	mutation *CattleMutation
	hooks    []Hook
}

// SetAlive sets the "alive" field.
func (cc *CattleCreate) SetAlive(i int) *CattleCreate {
	cc.mutation.SetAlive(i)
	return cc
}

// SetNillableAlive sets the "alive" field if the given value is not nil.
func (cc *CattleCreate) SetNillableAlive(i *int) *CattleCreate {
	if i != nil {
		cc.SetAlive(*i)
	}
	return cc
}

// SetHealth sets the "health" field.
func (cc *CattleCreate) SetHealth(i int) *CattleCreate {
	cc.mutation.SetHealth(i)
	return cc
}

// SetNillableHealth sets the "health" field if the given value is not nil.
func (cc *CattleCreate) SetNillableHealth(i *int) *CattleCreate {
	if i != nil {
		cc.SetHealth(*i)
	}
	return cc
}

// SetReproductiveStateId sets the "reproductiveStateId" field.
func (cc *CattleCreate) SetReproductiveStateId(i int) *CattleCreate {
	cc.mutation.SetReproductiveStateId(i)
	return cc
}

// SetReproductiveStateName sets the "reproductiveStateName" field.
func (cc *CattleCreate) SetReproductiveStateName(s string) *CattleCreate {
	cc.mutation.SetReproductiveStateName(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CattleCreate) SetName(s string) *CattleCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CattleCreate) SetNillableName(s *string) *CattleCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetFarmId sets the "farmId" field.
func (cc *CattleCreate) SetFarmId(i int64) *CattleCreate {
	cc.mutation.SetFarmId(i)
	return cc
}

// SetFarmName sets the "farmName" field.
func (cc *CattleCreate) SetFarmName(s string) *CattleCreate {
	cc.mutation.SetFarmName(s)
	return cc
}

// SetShedId sets the "shedId" field.
func (cc *CattleCreate) SetShedId(i int64) *CattleCreate {
	cc.mutation.SetShedId(i)
	return cc
}

// SetShedName sets the "shedName" field.
func (cc *CattleCreate) SetShedName(s string) *CattleCreate {
	cc.mutation.SetShedName(s)
	return cc
}

// SetShedTypeId sets the "shedTypeId" field.
func (cc *CattleCreate) SetShedTypeId(i int64) *CattleCreate {
	cc.mutation.SetShedTypeId(i)
	return cc
}

// SetShedTypeName sets the "shedTypeName" field.
func (cc *CattleCreate) SetShedTypeName(s string) *CattleCreate {
	cc.mutation.SetShedTypeName(s)
	return cc
}

// SetEarNumber sets the "earNumber" field.
func (cc *CattleCreate) SetEarNumber(s string) *CattleCreate {
	cc.mutation.SetEarNumber(s)
	return cc
}

// SetElectronicEarNumber sets the "electronicEarNumber" field.
func (cc *CattleCreate) SetElectronicEarNumber(s string) *CattleCreate {
	cc.mutation.SetElectronicEarNumber(s)
	return cc
}

// SetPedometer sets the "pedometer" field.
func (cc *CattleCreate) SetPedometer(s string) *CattleCreate {
	cc.mutation.SetPedometer(s)
	return cc
}

// SetGenderId sets the "genderId" field.
func (cc *CattleCreate) SetGenderId(i int) *CattleCreate {
	cc.mutation.SetGenderId(i)
	return cc
}

// SetGenderName sets the "genderName" field.
func (cc *CattleCreate) SetGenderName(s string) *CattleCreate {
	cc.mutation.SetGenderName(s)
	return cc
}

// SetBirthday sets the "birthday" field.
func (cc *CattleCreate) SetBirthday(i int64) *CattleCreate {
	cc.mutation.SetBirthday(i)
	return cc
}

// SetJoinedAt sets the "joinedAt" field.
func (cc *CattleCreate) SetJoinedAt(i int64) *CattleCreate {
	cc.mutation.SetJoinedAt(i)
	return cc
}

// SetCateId sets the "cateId" field.
func (cc *CattleCreate) SetCateId(i int) *CattleCreate {
	cc.mutation.SetCateId(i)
	return cc
}

// SetCateName sets the "cateName" field.
func (cc *CattleCreate) SetCateName(s string) *CattleCreate {
	cc.mutation.SetCateName(s)
	return cc
}

// SetType sets the "type" field.
func (cc *CattleCreate) SetType(i int) *CattleCreate {
	cc.mutation.SetType(i)
	return cc
}

// SetTypeName sets the "typeName" field.
func (cc *CattleCreate) SetTypeName(s string) *CattleCreate {
	cc.mutation.SetTypeName(s)
	return cc
}

// SetWeight sets the "weight" field.
func (cc *CattleCreate) SetWeight(i int32) *CattleCreate {
	cc.mutation.SetWeight(i)
	return cc
}

// SetFrom sets the "from" field.
func (cc *CattleCreate) SetFrom(s string) *CattleCreate {
	cc.mutation.SetFrom(s)
	return cc
}

// SetBreed sets the "breed" field.
func (cc *CattleCreate) SetBreed(s string) *CattleCreate {
	cc.mutation.SetBreed(s)
	return cc
}

// SetJoinedTypeId sets the "joinedTypeId" field.
func (cc *CattleCreate) SetJoinedTypeId(i int) *CattleCreate {
	cc.mutation.SetJoinedTypeId(i)
	return cc
}

// SetJoinedTypeName sets the "joinedTypeName" field.
func (cc *CattleCreate) SetJoinedTypeName(s string) *CattleCreate {
	cc.mutation.SetJoinedTypeName(s)
	return cc
}

// SetMother sets the "mother" field.
func (cc *CattleCreate) SetMother(s string) *CattleCreate {
	cc.mutation.SetMother(s)
	return cc
}

// SetFather sets the "father" field.
func (cc *CattleCreate) SetFather(s string) *CattleCreate {
	cc.mutation.SetFather(s)
	return cc
}

// SetGrandfather sets the "grandfather" field.
func (cc *CattleCreate) SetGrandfather(s string) *CattleCreate {
	cc.mutation.SetGrandfather(s)
	return cc
}

// SetOwnerId sets the "ownerId" field.
func (cc *CattleCreate) SetOwnerId(i int64) *CattleCreate {
	cc.mutation.SetOwnerId(i)
	return cc
}

// SetOwnerName sets the "ownerName" field.
func (cc *CattleCreate) SetOwnerName(s string) *CattleCreate {
	cc.mutation.SetOwnerName(s)
	return cc
}

// SetHairColorId sets the "hairColorId" field.
func (cc *CattleCreate) SetHairColorId(i int64) *CattleCreate {
	cc.mutation.SetHairColorId(i)
	return cc
}

// SetHairColorName sets the "hairColorName" field.
func (cc *CattleCreate) SetHairColorName(s string) *CattleCreate {
	cc.mutation.SetHairColorName(s)
	return cc
}

// SetPregnantTimes sets the "pregnantTimes" field.
func (cc *CattleCreate) SetPregnantTimes(i int) *CattleCreate {
	cc.mutation.SetPregnantTimes(i)
	return cc
}

// SetLastCalvingAt sets the "lastCalvingAt" field.
func (cc *CattleCreate) SetLastCalvingAt(i int64) *CattleCreate {
	cc.mutation.SetLastCalvingAt(i)
	return cc
}

// SetBreedingAt sets the "breedingAt" field.
func (cc *CattleCreate) SetBreedingAt(i int64) *CattleCreate {
	cc.mutation.SetBreedingAt(i)
	return cc
}

// SetBreedingTypeId sets the "breedingTypeId" field.
func (cc *CattleCreate) SetBreedingTypeId(i int) *CattleCreate {
	cc.mutation.SetBreedingTypeId(i)
	return cc
}

// SetBreedingTypeName sets the "breedingTypeName" field.
func (cc *CattleCreate) SetBreedingTypeName(s string) *CattleCreate {
	cc.mutation.SetBreedingTypeName(s)
	return cc
}

// SetBullId sets the "bullId" field.
func (cc *CattleCreate) SetBullId(i int64) *CattleCreate {
	cc.mutation.SetBullId(i)
	return cc
}

// SetPregnancyCheckAt sets the "pregnancyCheckAt" field.
func (cc *CattleCreate) SetPregnancyCheckAt(i int64) *CattleCreate {
	cc.mutation.SetPregnancyCheckAt(i)
	return cc
}

// SetTenantId sets the "tenantId" field.
func (cc *CattleCreate) SetTenantId(i int64) *CattleCreate {
	cc.mutation.SetTenantId(i)
	return cc
}

// SetTenantName sets the "tenantName" field.
func (cc *CattleCreate) SetTenantName(s string) *CattleCreate {
	cc.mutation.SetTenantName(s)
	return cc
}

// SetCreatedAt sets the "createdAt" field.
func (cc *CattleCreate) SetCreatedAt(i int64) *CattleCreate {
	cc.mutation.SetCreatedAt(i)
	return cc
}

// SetUpdatedAt sets the "updatedAt" field.
func (cc *CattleCreate) SetUpdatedAt(i int64) *CattleCreate {
	cc.mutation.SetUpdatedAt(i)
	return cc
}

// SetDeleted sets the "deleted" field.
func (cc *CattleCreate) SetDeleted(i int) *CattleCreate {
	cc.mutation.SetDeleted(i)
	return cc
}

// Mutation returns the CattleMutation object of the builder.
func (cc *CattleCreate) Mutation() *CattleMutation {
	return cc.mutation
}

// Save creates the Cattle in the database.
func (cc *CattleCreate) Save(ctx context.Context) (*Cattle, error) {
	var (
		err  error
		node *Cattle
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Cattle)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CattleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CattleCreate) SaveX(ctx context.Context) *Cattle {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CattleCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CattleCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CattleCreate) defaults() {
	if _, ok := cc.mutation.Alive(); !ok {
		v := cattle.DefaultAlive
		cc.mutation.SetAlive(v)
	}
	if _, ok := cc.mutation.Health(); !ok {
		v := cattle.DefaultHealth
		cc.mutation.SetHealth(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CattleCreate) check() error {
	if _, ok := cc.mutation.Alive(); !ok {
		return &ValidationError{Name: "alive", err: errors.New(`ent: missing required field "Cattle.alive"`)}
	}
	if _, ok := cc.mutation.Health(); !ok {
		return &ValidationError{Name: "health", err: errors.New(`ent: missing required field "Cattle.health"`)}
	}
	if _, ok := cc.mutation.ReproductiveStateId(); !ok {
		return &ValidationError{Name: "reproductiveStateId", err: errors.New(`ent: missing required field "Cattle.reproductiveStateId"`)}
	}
	if _, ok := cc.mutation.ReproductiveStateName(); !ok {
		return &ValidationError{Name: "reproductiveStateName", err: errors.New(`ent: missing required field "Cattle.reproductiveStateName"`)}
	}
	if _, ok := cc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New(`ent: missing required field "Cattle.farmId"`)}
	}
	if _, ok := cc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New(`ent: missing required field "Cattle.farmName"`)}
	}
	if v, ok := cc.mutation.FarmName(); ok {
		if err := cattle.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf(`ent: validator failed for field "Cattle.farmName": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ShedId(); !ok {
		return &ValidationError{Name: "shedId", err: errors.New(`ent: missing required field "Cattle.shedId"`)}
	}
	if _, ok := cc.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New(`ent: missing required field "Cattle.shedName"`)}
	}
	if v, ok := cc.mutation.ShedName(); ok {
		if err := cattle.ShedNameValidator(v); err != nil {
			return &ValidationError{Name: "shedName", err: fmt.Errorf(`ent: validator failed for field "Cattle.shedName": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ShedTypeId(); !ok {
		return &ValidationError{Name: "shedTypeId", err: errors.New(`ent: missing required field "Cattle.shedTypeId"`)}
	}
	if _, ok := cc.mutation.ShedTypeName(); !ok {
		return &ValidationError{Name: "shedTypeName", err: errors.New(`ent: missing required field "Cattle.shedTypeName"`)}
	}
	if v, ok := cc.mutation.ShedTypeName(); ok {
		if err := cattle.ShedTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "shedTypeName", err: fmt.Errorf(`ent: validator failed for field "Cattle.shedTypeName": %w`, err)}
		}
	}
	if _, ok := cc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New(`ent: missing required field "Cattle.earNumber"`)}
	}
	if v, ok := cc.mutation.EarNumber(); ok {
		if err := cattle.EarNumberValidator(v); err != nil {
			return &ValidationError{Name: "earNumber", err: fmt.Errorf(`ent: validator failed for field "Cattle.earNumber": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ElectronicEarNumber(); !ok {
		return &ValidationError{Name: "electronicEarNumber", err: errors.New(`ent: missing required field "Cattle.electronicEarNumber"`)}
	}
	if _, ok := cc.mutation.Pedometer(); !ok {
		return &ValidationError{Name: "pedometer", err: errors.New(`ent: missing required field "Cattle.pedometer"`)}
	}
	if _, ok := cc.mutation.GenderId(); !ok {
		return &ValidationError{Name: "genderId", err: errors.New(`ent: missing required field "Cattle.genderId"`)}
	}
	if _, ok := cc.mutation.GenderName(); !ok {
		return &ValidationError{Name: "genderName", err: errors.New(`ent: missing required field "Cattle.genderName"`)}
	}
	if _, ok := cc.mutation.Birthday(); !ok {
		return &ValidationError{Name: "birthday", err: errors.New(`ent: missing required field "Cattle.birthday"`)}
	}
	if _, ok := cc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joinedAt", err: errors.New(`ent: missing required field "Cattle.joinedAt"`)}
	}
	if _, ok := cc.mutation.CateId(); !ok {
		return &ValidationError{Name: "cateId", err: errors.New(`ent: missing required field "Cattle.cateId"`)}
	}
	if _, ok := cc.mutation.CateName(); !ok {
		return &ValidationError{Name: "cateName", err: errors.New(`ent: missing required field "Cattle.cateName"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Cattle.type"`)}
	}
	if _, ok := cc.mutation.TypeName(); !ok {
		return &ValidationError{Name: "typeName", err: errors.New(`ent: missing required field "Cattle.typeName"`)}
	}
	if _, ok := cc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "Cattle.weight"`)}
	}
	if _, ok := cc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "Cattle.from"`)}
	}
	if _, ok := cc.mutation.Breed(); !ok {
		return &ValidationError{Name: "breed", err: errors.New(`ent: missing required field "Cattle.breed"`)}
	}
	if _, ok := cc.mutation.JoinedTypeId(); !ok {
		return &ValidationError{Name: "joinedTypeId", err: errors.New(`ent: missing required field "Cattle.joinedTypeId"`)}
	}
	if _, ok := cc.mutation.JoinedTypeName(); !ok {
		return &ValidationError{Name: "joinedTypeName", err: errors.New(`ent: missing required field "Cattle.joinedTypeName"`)}
	}
	if _, ok := cc.mutation.Mother(); !ok {
		return &ValidationError{Name: "mother", err: errors.New(`ent: missing required field "Cattle.mother"`)}
	}
	if _, ok := cc.mutation.Father(); !ok {
		return &ValidationError{Name: "father", err: errors.New(`ent: missing required field "Cattle.father"`)}
	}
	if _, ok := cc.mutation.Grandfather(); !ok {
		return &ValidationError{Name: "grandfather", err: errors.New(`ent: missing required field "Cattle.grandfather"`)}
	}
	if _, ok := cc.mutation.OwnerId(); !ok {
		return &ValidationError{Name: "ownerId", err: errors.New(`ent: missing required field "Cattle.ownerId"`)}
	}
	if _, ok := cc.mutation.OwnerName(); !ok {
		return &ValidationError{Name: "ownerName", err: errors.New(`ent: missing required field "Cattle.ownerName"`)}
	}
	if _, ok := cc.mutation.HairColorId(); !ok {
		return &ValidationError{Name: "hairColorId", err: errors.New(`ent: missing required field "Cattle.hairColorId"`)}
	}
	if _, ok := cc.mutation.HairColorName(); !ok {
		return &ValidationError{Name: "hairColorName", err: errors.New(`ent: missing required field "Cattle.hairColorName"`)}
	}
	if _, ok := cc.mutation.PregnantTimes(); !ok {
		return &ValidationError{Name: "pregnantTimes", err: errors.New(`ent: missing required field "Cattle.pregnantTimes"`)}
	}
	if _, ok := cc.mutation.LastCalvingAt(); !ok {
		return &ValidationError{Name: "lastCalvingAt", err: errors.New(`ent: missing required field "Cattle.lastCalvingAt"`)}
	}
	if _, ok := cc.mutation.BreedingAt(); !ok {
		return &ValidationError{Name: "breedingAt", err: errors.New(`ent: missing required field "Cattle.breedingAt"`)}
	}
	if _, ok := cc.mutation.BreedingTypeId(); !ok {
		return &ValidationError{Name: "breedingTypeId", err: errors.New(`ent: missing required field "Cattle.breedingTypeId"`)}
	}
	if _, ok := cc.mutation.BreedingTypeName(); !ok {
		return &ValidationError{Name: "breedingTypeName", err: errors.New(`ent: missing required field "Cattle.breedingTypeName"`)}
	}
	if _, ok := cc.mutation.BullId(); !ok {
		return &ValidationError{Name: "bullId", err: errors.New(`ent: missing required field "Cattle.bullId"`)}
	}
	if _, ok := cc.mutation.PregnancyCheckAt(); !ok {
		return &ValidationError{Name: "pregnancyCheckAt", err: errors.New(`ent: missing required field "Cattle.pregnancyCheckAt"`)}
	}
	if _, ok := cc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "Cattle.tenantId"`)}
	}
	if _, ok := cc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "Cattle.tenantName"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Cattle.createdAt"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Cattle.updatedAt"`)}
	}
	if _, ok := cc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Cattle.deleted"`)}
	}
	return nil
}

func (cc *CattleCreate) sqlSave(ctx context.Context) (*Cattle, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CattleCreate) createSpec() (*Cattle, *sqlgraph.CreateSpec) {
	var (
		_node = &Cattle{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cattle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattle.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Alive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldAlive,
		})
		_node.Alive = value
	}
	if value, ok := cc.mutation.Health(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldHealth,
		})
		_node.Health = value
	}
	if value, ok := cc.mutation.ReproductiveStateId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldReproductiveStateId,
		})
		_node.ReproductiveStateId = value
	}
	if value, ok := cc.mutation.ReproductiveStateName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldReproductiveStateName,
		})
		_node.ReproductiveStateName = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := cc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := cc.mutation.ShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedId,
		})
		_node.ShedId = value
	}
	if value, ok := cc.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := cc.mutation.ShedTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedTypeId,
		})
		_node.ShedTypeId = value
	}
	if value, ok := cc.mutation.ShedTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldShedTypeName,
		})
		_node.ShedTypeName = value
	}
	if value, ok := cc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := cc.mutation.ElectronicEarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldElectronicEarNumber,
		})
		_node.ElectronicEarNumber = value
	}
	if value, ok := cc.mutation.Pedometer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldPedometer,
		})
		_node.Pedometer = value
	}
	if value, ok := cc.mutation.GenderId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldGenderId,
		})
		_node.GenderId = value
	}
	if value, ok := cc.mutation.GenderName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldGenderName,
		})
		_node.GenderName = value
	}
	if value, ok := cc.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBirthday,
		})
		_node.Birthday = value
	}
	if value, ok := cc.mutation.JoinedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldJoinedAt,
		})
		_node.JoinedAt = value
	}
	if value, ok := cc.mutation.CateId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldCateId,
		})
		_node.CateId = value
	}
	if value, ok := cc.mutation.CateName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldCateName,
		})
		_node.CateName = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldType,
		})
		_node.Type = value
	}
	if value, ok := cc.mutation.TypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldTypeName,
		})
		_node.TypeName = value
	}
	if value, ok := cc.mutation.Weight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cattle.FieldWeight,
		})
		_node.Weight = value
	}
	if value, ok := cc.mutation.From(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldFrom,
		})
		_node.From = value
	}
	if value, ok := cc.mutation.Breed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldBreed,
		})
		_node.Breed = value
	}
	if value, ok := cc.mutation.JoinedTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldJoinedTypeId,
		})
		_node.JoinedTypeId = value
	}
	if value, ok := cc.mutation.JoinedTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldJoinedTypeName,
		})
		_node.JoinedTypeName = value
	}
	if value, ok := cc.mutation.Mother(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldMother,
		})
		_node.Mother = value
	}
	if value, ok := cc.mutation.Father(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldFather,
		})
		_node.Father = value
	}
	if value, ok := cc.mutation.Grandfather(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldGrandfather,
		})
		_node.Grandfather = value
	}
	if value, ok := cc.mutation.OwnerId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldOwnerId,
		})
		_node.OwnerId = value
	}
	if value, ok := cc.mutation.OwnerName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldOwnerName,
		})
		_node.OwnerName = value
	}
	if value, ok := cc.mutation.HairColorId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldHairColorId,
		})
		_node.HairColorId = value
	}
	if value, ok := cc.mutation.HairColorName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldHairColorName,
		})
		_node.HairColorName = value
	}
	if value, ok := cc.mutation.PregnantTimes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldPregnantTimes,
		})
		_node.PregnantTimes = value
	}
	if value, ok := cc.mutation.LastCalvingAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldLastCalvingAt,
		})
		_node.LastCalvingAt = value
	}
	if value, ok := cc.mutation.BreedingAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBreedingAt,
		})
		_node.BreedingAt = value
	}
	if value, ok := cc.mutation.BreedingTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldBreedingTypeId,
		})
		_node.BreedingTypeId = value
	}
	if value, ok := cc.mutation.BreedingTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldBreedingTypeName,
		})
		_node.BreedingTypeName = value
	}
	if value, ok := cc.mutation.BullId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBullId,
		})
		_node.BullId = value
	}
	if value, ok := cc.mutation.PregnancyCheckAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldPregnancyCheckAt,
		})
		_node.PregnancyCheckAt = value
	}
	if value, ok := cc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := cc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// CattleCreateBulk is the builder for creating many Cattle entities in bulk.
type CattleCreateBulk struct {
	config
	builders []*CattleCreate
}

// Save creates the Cattle entities in the database.
func (ccb *CattleCreateBulk) Save(ctx context.Context) ([]*Cattle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cattle, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CattleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CattleCreateBulk) SaveX(ctx context.Context) []*Cattle {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CattleCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CattleCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

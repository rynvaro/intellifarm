// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattle"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleUpdate is the builder for updating Cattle entities.
type CattleUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleMutation
	predicates []predicate.Cattle
}

// Where adds a new predicate for the builder.
func (cu *CattleUpdate) Where(ps ...predicate.Cattle) *CattleUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *CattleUpdate) SetName(s string) *CattleUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the name field if the given value is not nil.
func (cu *CattleUpdate) SetNillableName(s *string) *CattleUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of name.
func (cu *CattleUpdate) ClearName() *CattleUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetFarmId sets the farmId field.
func (cu *CattleUpdate) SetFarmId(i int64) *CattleUpdate {
	cu.mutation.ResetFarmId()
	cu.mutation.SetFarmId(i)
	return cu
}

// AddFarmId adds i to farmId.
func (cu *CattleUpdate) AddFarmId(i int64) *CattleUpdate {
	cu.mutation.AddFarmId(i)
	return cu
}

// SetFarmName sets the farmName field.
func (cu *CattleUpdate) SetFarmName(s string) *CattleUpdate {
	cu.mutation.SetFarmName(s)
	return cu
}

// SetShedId sets the shedId field.
func (cu *CattleUpdate) SetShedId(i int64) *CattleUpdate {
	cu.mutation.ResetShedId()
	cu.mutation.SetShedId(i)
	return cu
}

// AddShedId adds i to shedId.
func (cu *CattleUpdate) AddShedId(i int64) *CattleUpdate {
	cu.mutation.AddShedId(i)
	return cu
}

// SetShedName sets the shedName field.
func (cu *CattleUpdate) SetShedName(s string) *CattleUpdate {
	cu.mutation.SetShedName(s)
	return cu
}

// SetShedTypeId sets the shedTypeId field.
func (cu *CattleUpdate) SetShedTypeId(i int64) *CattleUpdate {
	cu.mutation.ResetShedTypeId()
	cu.mutation.SetShedTypeId(i)
	return cu
}

// AddShedTypeId adds i to shedTypeId.
func (cu *CattleUpdate) AddShedTypeId(i int64) *CattleUpdate {
	cu.mutation.AddShedTypeId(i)
	return cu
}

// SetShedTypeName sets the shedTypeName field.
func (cu *CattleUpdate) SetShedTypeName(s string) *CattleUpdate {
	cu.mutation.SetShedTypeName(s)
	return cu
}

// SetEarNumber sets the earNumber field.
func (cu *CattleUpdate) SetEarNumber(s string) *CattleUpdate {
	cu.mutation.SetEarNumber(s)
	return cu
}

// SetElectronicEarNumber sets the electronicEarNumber field.
func (cu *CattleUpdate) SetElectronicEarNumber(s string) *CattleUpdate {
	cu.mutation.SetElectronicEarNumber(s)
	return cu
}

// SetPedometer sets the pedometer field.
func (cu *CattleUpdate) SetPedometer(s string) *CattleUpdate {
	cu.mutation.SetPedometer(s)
	return cu
}

// SetGenderId sets the genderId field.
func (cu *CattleUpdate) SetGenderId(i int) *CattleUpdate {
	cu.mutation.ResetGenderId()
	cu.mutation.SetGenderId(i)
	return cu
}

// AddGenderId adds i to genderId.
func (cu *CattleUpdate) AddGenderId(i int) *CattleUpdate {
	cu.mutation.AddGenderId(i)
	return cu
}

// SetGenderName sets the genderName field.
func (cu *CattleUpdate) SetGenderName(s string) *CattleUpdate {
	cu.mutation.SetGenderName(s)
	return cu
}

// SetBirthday sets the birthday field.
func (cu *CattleUpdate) SetBirthday(i int64) *CattleUpdate {
	cu.mutation.ResetBirthday()
	cu.mutation.SetBirthday(i)
	return cu
}

// AddBirthday adds i to birthday.
func (cu *CattleUpdate) AddBirthday(i int64) *CattleUpdate {
	cu.mutation.AddBirthday(i)
	return cu
}

// SetJoinedAt sets the joinedAt field.
func (cu *CattleUpdate) SetJoinedAt(i int64) *CattleUpdate {
	cu.mutation.ResetJoinedAt()
	cu.mutation.SetJoinedAt(i)
	return cu
}

// AddJoinedAt adds i to joinedAt.
func (cu *CattleUpdate) AddJoinedAt(i int64) *CattleUpdate {
	cu.mutation.AddJoinedAt(i)
	return cu
}

// SetCateId sets the cateId field.
func (cu *CattleUpdate) SetCateId(i int) *CattleUpdate {
	cu.mutation.ResetCateId()
	cu.mutation.SetCateId(i)
	return cu
}

// AddCateId adds i to cateId.
func (cu *CattleUpdate) AddCateId(i int) *CattleUpdate {
	cu.mutation.AddCateId(i)
	return cu
}

// SetCateName sets the cateName field.
func (cu *CattleUpdate) SetCateName(s string) *CattleUpdate {
	cu.mutation.SetCateName(s)
	return cu
}

// SetType sets the type field.
func (cu *CattleUpdate) SetType(i int) *CattleUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(i)
	return cu
}

// AddType adds i to type.
func (cu *CattleUpdate) AddType(i int) *CattleUpdate {
	cu.mutation.AddType(i)
	return cu
}

// SetTypeName sets the typeName field.
func (cu *CattleUpdate) SetTypeName(s string) *CattleUpdate {
	cu.mutation.SetTypeName(s)
	return cu
}

// SetWeight sets the weight field.
func (cu *CattleUpdate) SetWeight(i int32) *CattleUpdate {
	cu.mutation.ResetWeight()
	cu.mutation.SetWeight(i)
	return cu
}

// AddWeight adds i to weight.
func (cu *CattleUpdate) AddWeight(i int32) *CattleUpdate {
	cu.mutation.AddWeight(i)
	return cu
}

// SetFrom sets the from field.
func (cu *CattleUpdate) SetFrom(s string) *CattleUpdate {
	cu.mutation.SetFrom(s)
	return cu
}

// SetBreed sets the breed field.
func (cu *CattleUpdate) SetBreed(s string) *CattleUpdate {
	cu.mutation.SetBreed(s)
	return cu
}

// SetJoinedTypeId sets the joinedTypeId field.
func (cu *CattleUpdate) SetJoinedTypeId(i int) *CattleUpdate {
	cu.mutation.ResetJoinedTypeId()
	cu.mutation.SetJoinedTypeId(i)
	return cu
}

// AddJoinedTypeId adds i to joinedTypeId.
func (cu *CattleUpdate) AddJoinedTypeId(i int) *CattleUpdate {
	cu.mutation.AddJoinedTypeId(i)
	return cu
}

// SetJoinedTypeName sets the joinedTypeName field.
func (cu *CattleUpdate) SetJoinedTypeName(s string) *CattleUpdate {
	cu.mutation.SetJoinedTypeName(s)
	return cu
}

// SetMother sets the mother field.
func (cu *CattleUpdate) SetMother(s string) *CattleUpdate {
	cu.mutation.SetMother(s)
	return cu
}

// SetFather sets the father field.
func (cu *CattleUpdate) SetFather(s string) *CattleUpdate {
	cu.mutation.SetFather(s)
	return cu
}

// SetGrandfather sets the grandfather field.
func (cu *CattleUpdate) SetGrandfather(s string) *CattleUpdate {
	cu.mutation.SetGrandfather(s)
	return cu
}

// SetOwnerId sets the ownerId field.
func (cu *CattleUpdate) SetOwnerId(i int64) *CattleUpdate {
	cu.mutation.ResetOwnerId()
	cu.mutation.SetOwnerId(i)
	return cu
}

// AddOwnerId adds i to ownerId.
func (cu *CattleUpdate) AddOwnerId(i int64) *CattleUpdate {
	cu.mutation.AddOwnerId(i)
	return cu
}

// SetOwnerName sets the ownerName field.
func (cu *CattleUpdate) SetOwnerName(s string) *CattleUpdate {
	cu.mutation.SetOwnerName(s)
	return cu
}

// SetHairColorId sets the hairColorId field.
func (cu *CattleUpdate) SetHairColorId(i int64) *CattleUpdate {
	cu.mutation.ResetHairColorId()
	cu.mutation.SetHairColorId(i)
	return cu
}

// AddHairColorId adds i to hairColorId.
func (cu *CattleUpdate) AddHairColorId(i int64) *CattleUpdate {
	cu.mutation.AddHairColorId(i)
	return cu
}

// SetHairColorName sets the hairColorName field.
func (cu *CattleUpdate) SetHairColorName(s string) *CattleUpdate {
	cu.mutation.SetHairColorName(s)
	return cu
}

// SetReproductiveStateId sets the reproductiveStateId field.
func (cu *CattleUpdate) SetReproductiveStateId(i int) *CattleUpdate {
	cu.mutation.ResetReproductiveStateId()
	cu.mutation.SetReproductiveStateId(i)
	return cu
}

// AddReproductiveStateId adds i to reproductiveStateId.
func (cu *CattleUpdate) AddReproductiveStateId(i int) *CattleUpdate {
	cu.mutation.AddReproductiveStateId(i)
	return cu
}

// SetReproductiveStateName sets the reproductiveStateName field.
func (cu *CattleUpdate) SetReproductiveStateName(s string) *CattleUpdate {
	cu.mutation.SetReproductiveStateName(s)
	return cu
}

// SetPregnantTimes sets the pregnantTimes field.
func (cu *CattleUpdate) SetPregnantTimes(i int) *CattleUpdate {
	cu.mutation.ResetPregnantTimes()
	cu.mutation.SetPregnantTimes(i)
	return cu
}

// AddPregnantTimes adds i to pregnantTimes.
func (cu *CattleUpdate) AddPregnantTimes(i int) *CattleUpdate {
	cu.mutation.AddPregnantTimes(i)
	return cu
}

// SetLastCalvingAt sets the lastCalvingAt field.
func (cu *CattleUpdate) SetLastCalvingAt(i int64) *CattleUpdate {
	cu.mutation.ResetLastCalvingAt()
	cu.mutation.SetLastCalvingAt(i)
	return cu
}

// AddLastCalvingAt adds i to lastCalvingAt.
func (cu *CattleUpdate) AddLastCalvingAt(i int64) *CattleUpdate {
	cu.mutation.AddLastCalvingAt(i)
	return cu
}

// SetBreedingAt sets the breedingAt field.
func (cu *CattleUpdate) SetBreedingAt(i int64) *CattleUpdate {
	cu.mutation.ResetBreedingAt()
	cu.mutation.SetBreedingAt(i)
	return cu
}

// AddBreedingAt adds i to breedingAt.
func (cu *CattleUpdate) AddBreedingAt(i int64) *CattleUpdate {
	cu.mutation.AddBreedingAt(i)
	return cu
}

// SetBreedingTypeId sets the breedingTypeId field.
func (cu *CattleUpdate) SetBreedingTypeId(i int) *CattleUpdate {
	cu.mutation.ResetBreedingTypeId()
	cu.mutation.SetBreedingTypeId(i)
	return cu
}

// AddBreedingTypeId adds i to breedingTypeId.
func (cu *CattleUpdate) AddBreedingTypeId(i int) *CattleUpdate {
	cu.mutation.AddBreedingTypeId(i)
	return cu
}

// SetBreedingTypeName sets the breedingTypeName field.
func (cu *CattleUpdate) SetBreedingTypeName(s string) *CattleUpdate {
	cu.mutation.SetBreedingTypeName(s)
	return cu
}

// SetBullId sets the bullId field.
func (cu *CattleUpdate) SetBullId(i int64) *CattleUpdate {
	cu.mutation.ResetBullId()
	cu.mutation.SetBullId(i)
	return cu
}

// AddBullId adds i to bullId.
func (cu *CattleUpdate) AddBullId(i int64) *CattleUpdate {
	cu.mutation.AddBullId(i)
	return cu
}

// SetPregnancyCheckAt sets the pregnancyCheckAt field.
func (cu *CattleUpdate) SetPregnancyCheckAt(i int64) *CattleUpdate {
	cu.mutation.ResetPregnancyCheckAt()
	cu.mutation.SetPregnancyCheckAt(i)
	return cu
}

// AddPregnancyCheckAt adds i to pregnancyCheckAt.
func (cu *CattleUpdate) AddPregnancyCheckAt(i int64) *CattleUpdate {
	cu.mutation.AddPregnancyCheckAt(i)
	return cu
}

// SetTenantId sets the tenantId field.
func (cu *CattleUpdate) SetTenantId(i int64) *CattleUpdate {
	cu.mutation.ResetTenantId()
	cu.mutation.SetTenantId(i)
	return cu
}

// AddTenantId adds i to tenantId.
func (cu *CattleUpdate) AddTenantId(i int64) *CattleUpdate {
	cu.mutation.AddTenantId(i)
	return cu
}

// SetTenantName sets the tenantName field.
func (cu *CattleUpdate) SetTenantName(s string) *CattleUpdate {
	cu.mutation.SetTenantName(s)
	return cu
}

// SetCreatedAt sets the createdAt field.
func (cu *CattleUpdate) SetCreatedAt(i int64) *CattleUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(i)
	return cu
}

// AddCreatedAt adds i to createdAt.
func (cu *CattleUpdate) AddCreatedAt(i int64) *CattleUpdate {
	cu.mutation.AddCreatedAt(i)
	return cu
}

// SetUpdatedAt sets the updatedAt field.
func (cu *CattleUpdate) SetUpdatedAt(i int64) *CattleUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(i)
	return cu
}

// AddUpdatedAt adds i to updatedAt.
func (cu *CattleUpdate) AddUpdatedAt(i int64) *CattleUpdate {
	cu.mutation.AddUpdatedAt(i)
	return cu
}

// SetDeleted sets the deleted field.
func (cu *CattleUpdate) SetDeleted(i int) *CattleUpdate {
	cu.mutation.ResetDeleted()
	cu.mutation.SetDeleted(i)
	return cu
}

// AddDeleted adds i to deleted.
func (cu *CattleUpdate) AddDeleted(i int) *CattleUpdate {
	cu.mutation.AddDeleted(i)
	return cu
}

// Mutation returns the CattleMutation object of the builder.
func (cu *CattleUpdate) Mutation() *CattleMutation {
	return cu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CattleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CattleUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CattleUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CattleUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CattleUpdate) check() error {
	if v, ok := cu.mutation.FarmName(); ok {
		if err := cattle.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf("ent: validator failed for field \"farmName\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ShedName(); ok {
		if err := cattle.ShedNameValidator(v); err != nil {
			return &ValidationError{Name: "shedName", err: fmt.Errorf("ent: validator failed for field \"shedName\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ShedTypeName(); ok {
		if err := cattle.ShedTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "shedTypeName", err: fmt.Errorf("ent: validator failed for field \"shedTypeName\": %w", err)}
		}
	}
	if v, ok := cu.mutation.EarNumber(); ok {
		if err := cattle.EarNumberValidator(v); err != nil {
			return &ValidationError{Name: "earNumber", err: fmt.Errorf("ent: validator failed for field \"earNumber\": %w", err)}
		}
	}
	return nil
}

func (cu *CattleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattle.Table,
			Columns: cattle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattle.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldName,
		})
	}
	if cu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattle.FieldName,
		})
	}
	if value, ok := cu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldFarmId,
		})
	}
	if value, ok := cu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldFarmId,
		})
	}
	if value, ok := cu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldFarmName,
		})
	}
	if value, ok := cu.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedId,
		})
	}
	if value, ok := cu.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedId,
		})
	}
	if value, ok := cu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldShedName,
		})
	}
	if value, ok := cu.mutation.ShedTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedTypeId,
		})
	}
	if value, ok := cu.mutation.AddedShedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedTypeId,
		})
	}
	if value, ok := cu.mutation.ShedTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldShedTypeName,
		})
	}
	if value, ok := cu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldEarNumber,
		})
	}
	if value, ok := cu.mutation.ElectronicEarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldElectronicEarNumber,
		})
	}
	if value, ok := cu.mutation.Pedometer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldPedometer,
		})
	}
	if value, ok := cu.mutation.GenderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldGenderId,
		})
	}
	if value, ok := cu.mutation.AddedGenderId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldGenderId,
		})
	}
	if value, ok := cu.mutation.GenderName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldGenderName,
		})
	}
	if value, ok := cu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBirthday,
		})
	}
	if value, ok := cu.mutation.AddedBirthday(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBirthday,
		})
	}
	if value, ok := cu.mutation.JoinedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldJoinedAt,
		})
	}
	if value, ok := cu.mutation.AddedJoinedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldJoinedAt,
		})
	}
	if value, ok := cu.mutation.CateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldCateId,
		})
	}
	if value, ok := cu.mutation.AddedCateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldCateId,
		})
	}
	if value, ok := cu.mutation.CateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldCateName,
		})
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldType,
		})
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldType,
		})
	}
	if value, ok := cu.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldTypeName,
		})
	}
	if value, ok := cu.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cattle.FieldWeight,
		})
	}
	if value, ok := cu.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cattle.FieldWeight,
		})
	}
	if value, ok := cu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldFrom,
		})
	}
	if value, ok := cu.mutation.Breed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldBreed,
		})
	}
	if value, ok := cu.mutation.JoinedTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldJoinedTypeId,
		})
	}
	if value, ok := cu.mutation.AddedJoinedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldJoinedTypeId,
		})
	}
	if value, ok := cu.mutation.JoinedTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldJoinedTypeName,
		})
	}
	if value, ok := cu.mutation.Mother(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldMother,
		})
	}
	if value, ok := cu.mutation.Father(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldFather,
		})
	}
	if value, ok := cu.mutation.Grandfather(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldGrandfather,
		})
	}
	if value, ok := cu.mutation.OwnerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldOwnerId,
		})
	}
	if value, ok := cu.mutation.AddedOwnerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldOwnerId,
		})
	}
	if value, ok := cu.mutation.OwnerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldOwnerName,
		})
	}
	if value, ok := cu.mutation.HairColorId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldHairColorId,
		})
	}
	if value, ok := cu.mutation.AddedHairColorId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldHairColorId,
		})
	}
	if value, ok := cu.mutation.HairColorName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldHairColorName,
		})
	}
	if value, ok := cu.mutation.ReproductiveStateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldReproductiveStateId,
		})
	}
	if value, ok := cu.mutation.AddedReproductiveStateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldReproductiveStateId,
		})
	}
	if value, ok := cu.mutation.ReproductiveStateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldReproductiveStateName,
		})
	}
	if value, ok := cu.mutation.PregnantTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldPregnantTimes,
		})
	}
	if value, ok := cu.mutation.AddedPregnantTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldPregnantTimes,
		})
	}
	if value, ok := cu.mutation.LastCalvingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldLastCalvingAt,
		})
	}
	if value, ok := cu.mutation.AddedLastCalvingAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldLastCalvingAt,
		})
	}
	if value, ok := cu.mutation.BreedingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBreedingAt,
		})
	}
	if value, ok := cu.mutation.AddedBreedingAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBreedingAt,
		})
	}
	if value, ok := cu.mutation.BreedingTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldBreedingTypeId,
		})
	}
	if value, ok := cu.mutation.AddedBreedingTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldBreedingTypeId,
		})
	}
	if value, ok := cu.mutation.BreedingTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldBreedingTypeName,
		})
	}
	if value, ok := cu.mutation.BullId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBullId,
		})
	}
	if value, ok := cu.mutation.AddedBullId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBullId,
		})
	}
	if value, ok := cu.mutation.PregnancyCheckAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldPregnancyCheckAt,
		})
	}
	if value, ok := cu.mutation.AddedPregnancyCheckAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldPregnancyCheckAt,
		})
	}
	if value, ok := cu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldTenantId,
		})
	}
	if value, ok := cu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldTenantId,
		})
	}
	if value, ok := cu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldTenantName,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldDeleted,
		})
	}
	if value, ok := cu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattle.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleUpdateOne is the builder for updating a single Cattle entity.
type CattleUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleMutation
}

// SetName sets the name field.
func (cuo *CattleUpdateOne) SetName(s string) *CattleUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the name field if the given value is not nil.
func (cuo *CattleUpdateOne) SetNillableName(s *string) *CattleUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of name.
func (cuo *CattleUpdateOne) ClearName() *CattleUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetFarmId sets the farmId field.
func (cuo *CattleUpdateOne) SetFarmId(i int64) *CattleUpdateOne {
	cuo.mutation.ResetFarmId()
	cuo.mutation.SetFarmId(i)
	return cuo
}

// AddFarmId adds i to farmId.
func (cuo *CattleUpdateOne) AddFarmId(i int64) *CattleUpdateOne {
	cuo.mutation.AddFarmId(i)
	return cuo
}

// SetFarmName sets the farmName field.
func (cuo *CattleUpdateOne) SetFarmName(s string) *CattleUpdateOne {
	cuo.mutation.SetFarmName(s)
	return cuo
}

// SetShedId sets the shedId field.
func (cuo *CattleUpdateOne) SetShedId(i int64) *CattleUpdateOne {
	cuo.mutation.ResetShedId()
	cuo.mutation.SetShedId(i)
	return cuo
}

// AddShedId adds i to shedId.
func (cuo *CattleUpdateOne) AddShedId(i int64) *CattleUpdateOne {
	cuo.mutation.AddShedId(i)
	return cuo
}

// SetShedName sets the shedName field.
func (cuo *CattleUpdateOne) SetShedName(s string) *CattleUpdateOne {
	cuo.mutation.SetShedName(s)
	return cuo
}

// SetShedTypeId sets the shedTypeId field.
func (cuo *CattleUpdateOne) SetShedTypeId(i int64) *CattleUpdateOne {
	cuo.mutation.ResetShedTypeId()
	cuo.mutation.SetShedTypeId(i)
	return cuo
}

// AddShedTypeId adds i to shedTypeId.
func (cuo *CattleUpdateOne) AddShedTypeId(i int64) *CattleUpdateOne {
	cuo.mutation.AddShedTypeId(i)
	return cuo
}

// SetShedTypeName sets the shedTypeName field.
func (cuo *CattleUpdateOne) SetShedTypeName(s string) *CattleUpdateOne {
	cuo.mutation.SetShedTypeName(s)
	return cuo
}

// SetEarNumber sets the earNumber field.
func (cuo *CattleUpdateOne) SetEarNumber(s string) *CattleUpdateOne {
	cuo.mutation.SetEarNumber(s)
	return cuo
}

// SetElectronicEarNumber sets the electronicEarNumber field.
func (cuo *CattleUpdateOne) SetElectronicEarNumber(s string) *CattleUpdateOne {
	cuo.mutation.SetElectronicEarNumber(s)
	return cuo
}

// SetPedometer sets the pedometer field.
func (cuo *CattleUpdateOne) SetPedometer(s string) *CattleUpdateOne {
	cuo.mutation.SetPedometer(s)
	return cuo
}

// SetGenderId sets the genderId field.
func (cuo *CattleUpdateOne) SetGenderId(i int) *CattleUpdateOne {
	cuo.mutation.ResetGenderId()
	cuo.mutation.SetGenderId(i)
	return cuo
}

// AddGenderId adds i to genderId.
func (cuo *CattleUpdateOne) AddGenderId(i int) *CattleUpdateOne {
	cuo.mutation.AddGenderId(i)
	return cuo
}

// SetGenderName sets the genderName field.
func (cuo *CattleUpdateOne) SetGenderName(s string) *CattleUpdateOne {
	cuo.mutation.SetGenderName(s)
	return cuo
}

// SetBirthday sets the birthday field.
func (cuo *CattleUpdateOne) SetBirthday(i int64) *CattleUpdateOne {
	cuo.mutation.ResetBirthday()
	cuo.mutation.SetBirthday(i)
	return cuo
}

// AddBirthday adds i to birthday.
func (cuo *CattleUpdateOne) AddBirthday(i int64) *CattleUpdateOne {
	cuo.mutation.AddBirthday(i)
	return cuo
}

// SetJoinedAt sets the joinedAt field.
func (cuo *CattleUpdateOne) SetJoinedAt(i int64) *CattleUpdateOne {
	cuo.mutation.ResetJoinedAt()
	cuo.mutation.SetJoinedAt(i)
	return cuo
}

// AddJoinedAt adds i to joinedAt.
func (cuo *CattleUpdateOne) AddJoinedAt(i int64) *CattleUpdateOne {
	cuo.mutation.AddJoinedAt(i)
	return cuo
}

// SetCateId sets the cateId field.
func (cuo *CattleUpdateOne) SetCateId(i int) *CattleUpdateOne {
	cuo.mutation.ResetCateId()
	cuo.mutation.SetCateId(i)
	return cuo
}

// AddCateId adds i to cateId.
func (cuo *CattleUpdateOne) AddCateId(i int) *CattleUpdateOne {
	cuo.mutation.AddCateId(i)
	return cuo
}

// SetCateName sets the cateName field.
func (cuo *CattleUpdateOne) SetCateName(s string) *CattleUpdateOne {
	cuo.mutation.SetCateName(s)
	return cuo
}

// SetType sets the type field.
func (cuo *CattleUpdateOne) SetType(i int) *CattleUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(i)
	return cuo
}

// AddType adds i to type.
func (cuo *CattleUpdateOne) AddType(i int) *CattleUpdateOne {
	cuo.mutation.AddType(i)
	return cuo
}

// SetTypeName sets the typeName field.
func (cuo *CattleUpdateOne) SetTypeName(s string) *CattleUpdateOne {
	cuo.mutation.SetTypeName(s)
	return cuo
}

// SetWeight sets the weight field.
func (cuo *CattleUpdateOne) SetWeight(i int32) *CattleUpdateOne {
	cuo.mutation.ResetWeight()
	cuo.mutation.SetWeight(i)
	return cuo
}

// AddWeight adds i to weight.
func (cuo *CattleUpdateOne) AddWeight(i int32) *CattleUpdateOne {
	cuo.mutation.AddWeight(i)
	return cuo
}

// SetFrom sets the from field.
func (cuo *CattleUpdateOne) SetFrom(s string) *CattleUpdateOne {
	cuo.mutation.SetFrom(s)
	return cuo
}

// SetBreed sets the breed field.
func (cuo *CattleUpdateOne) SetBreed(s string) *CattleUpdateOne {
	cuo.mutation.SetBreed(s)
	return cuo
}

// SetJoinedTypeId sets the joinedTypeId field.
func (cuo *CattleUpdateOne) SetJoinedTypeId(i int) *CattleUpdateOne {
	cuo.mutation.ResetJoinedTypeId()
	cuo.mutation.SetJoinedTypeId(i)
	return cuo
}

// AddJoinedTypeId adds i to joinedTypeId.
func (cuo *CattleUpdateOne) AddJoinedTypeId(i int) *CattleUpdateOne {
	cuo.mutation.AddJoinedTypeId(i)
	return cuo
}

// SetJoinedTypeName sets the joinedTypeName field.
func (cuo *CattleUpdateOne) SetJoinedTypeName(s string) *CattleUpdateOne {
	cuo.mutation.SetJoinedTypeName(s)
	return cuo
}

// SetMother sets the mother field.
func (cuo *CattleUpdateOne) SetMother(s string) *CattleUpdateOne {
	cuo.mutation.SetMother(s)
	return cuo
}

// SetFather sets the father field.
func (cuo *CattleUpdateOne) SetFather(s string) *CattleUpdateOne {
	cuo.mutation.SetFather(s)
	return cuo
}

// SetGrandfather sets the grandfather field.
func (cuo *CattleUpdateOne) SetGrandfather(s string) *CattleUpdateOne {
	cuo.mutation.SetGrandfather(s)
	return cuo
}

// SetOwnerId sets the ownerId field.
func (cuo *CattleUpdateOne) SetOwnerId(i int64) *CattleUpdateOne {
	cuo.mutation.ResetOwnerId()
	cuo.mutation.SetOwnerId(i)
	return cuo
}

// AddOwnerId adds i to ownerId.
func (cuo *CattleUpdateOne) AddOwnerId(i int64) *CattleUpdateOne {
	cuo.mutation.AddOwnerId(i)
	return cuo
}

// SetOwnerName sets the ownerName field.
func (cuo *CattleUpdateOne) SetOwnerName(s string) *CattleUpdateOne {
	cuo.mutation.SetOwnerName(s)
	return cuo
}

// SetHairColorId sets the hairColorId field.
func (cuo *CattleUpdateOne) SetHairColorId(i int64) *CattleUpdateOne {
	cuo.mutation.ResetHairColorId()
	cuo.mutation.SetHairColorId(i)
	return cuo
}

// AddHairColorId adds i to hairColorId.
func (cuo *CattleUpdateOne) AddHairColorId(i int64) *CattleUpdateOne {
	cuo.mutation.AddHairColorId(i)
	return cuo
}

// SetHairColorName sets the hairColorName field.
func (cuo *CattleUpdateOne) SetHairColorName(s string) *CattleUpdateOne {
	cuo.mutation.SetHairColorName(s)
	return cuo
}

// SetReproductiveStateId sets the reproductiveStateId field.
func (cuo *CattleUpdateOne) SetReproductiveStateId(i int) *CattleUpdateOne {
	cuo.mutation.ResetReproductiveStateId()
	cuo.mutation.SetReproductiveStateId(i)
	return cuo
}

// AddReproductiveStateId adds i to reproductiveStateId.
func (cuo *CattleUpdateOne) AddReproductiveStateId(i int) *CattleUpdateOne {
	cuo.mutation.AddReproductiveStateId(i)
	return cuo
}

// SetReproductiveStateName sets the reproductiveStateName field.
func (cuo *CattleUpdateOne) SetReproductiveStateName(s string) *CattleUpdateOne {
	cuo.mutation.SetReproductiveStateName(s)
	return cuo
}

// SetPregnantTimes sets the pregnantTimes field.
func (cuo *CattleUpdateOne) SetPregnantTimes(i int) *CattleUpdateOne {
	cuo.mutation.ResetPregnantTimes()
	cuo.mutation.SetPregnantTimes(i)
	return cuo
}

// AddPregnantTimes adds i to pregnantTimes.
func (cuo *CattleUpdateOne) AddPregnantTimes(i int) *CattleUpdateOne {
	cuo.mutation.AddPregnantTimes(i)
	return cuo
}

// SetLastCalvingAt sets the lastCalvingAt field.
func (cuo *CattleUpdateOne) SetLastCalvingAt(i int64) *CattleUpdateOne {
	cuo.mutation.ResetLastCalvingAt()
	cuo.mutation.SetLastCalvingAt(i)
	return cuo
}

// AddLastCalvingAt adds i to lastCalvingAt.
func (cuo *CattleUpdateOne) AddLastCalvingAt(i int64) *CattleUpdateOne {
	cuo.mutation.AddLastCalvingAt(i)
	return cuo
}

// SetBreedingAt sets the breedingAt field.
func (cuo *CattleUpdateOne) SetBreedingAt(i int64) *CattleUpdateOne {
	cuo.mutation.ResetBreedingAt()
	cuo.mutation.SetBreedingAt(i)
	return cuo
}

// AddBreedingAt adds i to breedingAt.
func (cuo *CattleUpdateOne) AddBreedingAt(i int64) *CattleUpdateOne {
	cuo.mutation.AddBreedingAt(i)
	return cuo
}

// SetBreedingTypeId sets the breedingTypeId field.
func (cuo *CattleUpdateOne) SetBreedingTypeId(i int) *CattleUpdateOne {
	cuo.mutation.ResetBreedingTypeId()
	cuo.mutation.SetBreedingTypeId(i)
	return cuo
}

// AddBreedingTypeId adds i to breedingTypeId.
func (cuo *CattleUpdateOne) AddBreedingTypeId(i int) *CattleUpdateOne {
	cuo.mutation.AddBreedingTypeId(i)
	return cuo
}

// SetBreedingTypeName sets the breedingTypeName field.
func (cuo *CattleUpdateOne) SetBreedingTypeName(s string) *CattleUpdateOne {
	cuo.mutation.SetBreedingTypeName(s)
	return cuo
}

// SetBullId sets the bullId field.
func (cuo *CattleUpdateOne) SetBullId(i int64) *CattleUpdateOne {
	cuo.mutation.ResetBullId()
	cuo.mutation.SetBullId(i)
	return cuo
}

// AddBullId adds i to bullId.
func (cuo *CattleUpdateOne) AddBullId(i int64) *CattleUpdateOne {
	cuo.mutation.AddBullId(i)
	return cuo
}

// SetPregnancyCheckAt sets the pregnancyCheckAt field.
func (cuo *CattleUpdateOne) SetPregnancyCheckAt(i int64) *CattleUpdateOne {
	cuo.mutation.ResetPregnancyCheckAt()
	cuo.mutation.SetPregnancyCheckAt(i)
	return cuo
}

// AddPregnancyCheckAt adds i to pregnancyCheckAt.
func (cuo *CattleUpdateOne) AddPregnancyCheckAt(i int64) *CattleUpdateOne {
	cuo.mutation.AddPregnancyCheckAt(i)
	return cuo
}

// SetTenantId sets the tenantId field.
func (cuo *CattleUpdateOne) SetTenantId(i int64) *CattleUpdateOne {
	cuo.mutation.ResetTenantId()
	cuo.mutation.SetTenantId(i)
	return cuo
}

// AddTenantId adds i to tenantId.
func (cuo *CattleUpdateOne) AddTenantId(i int64) *CattleUpdateOne {
	cuo.mutation.AddTenantId(i)
	return cuo
}

// SetTenantName sets the tenantName field.
func (cuo *CattleUpdateOne) SetTenantName(s string) *CattleUpdateOne {
	cuo.mutation.SetTenantName(s)
	return cuo
}

// SetCreatedAt sets the createdAt field.
func (cuo *CattleUpdateOne) SetCreatedAt(i int64) *CattleUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(i)
	return cuo
}

// AddCreatedAt adds i to createdAt.
func (cuo *CattleUpdateOne) AddCreatedAt(i int64) *CattleUpdateOne {
	cuo.mutation.AddCreatedAt(i)
	return cuo
}

// SetUpdatedAt sets the updatedAt field.
func (cuo *CattleUpdateOne) SetUpdatedAt(i int64) *CattleUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(i)
	return cuo
}

// AddUpdatedAt adds i to updatedAt.
func (cuo *CattleUpdateOne) AddUpdatedAt(i int64) *CattleUpdateOne {
	cuo.mutation.AddUpdatedAt(i)
	return cuo
}

// SetDeleted sets the deleted field.
func (cuo *CattleUpdateOne) SetDeleted(i int) *CattleUpdateOne {
	cuo.mutation.ResetDeleted()
	cuo.mutation.SetDeleted(i)
	return cuo
}

// AddDeleted adds i to deleted.
func (cuo *CattleUpdateOne) AddDeleted(i int) *CattleUpdateOne {
	cuo.mutation.AddDeleted(i)
	return cuo
}

// Mutation returns the CattleMutation object of the builder.
func (cuo *CattleUpdateOne) Mutation() *CattleMutation {
	return cuo.mutation
}

// Save executes the query and returns the updated entity.
func (cuo *CattleUpdateOne) Save(ctx context.Context) (*Cattle, error) {
	var (
		err  error
		node *Cattle
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CattleUpdateOne) SaveX(ctx context.Context) *Cattle {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CattleUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CattleUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CattleUpdateOne) check() error {
	if v, ok := cuo.mutation.FarmName(); ok {
		if err := cattle.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf("ent: validator failed for field \"farmName\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ShedName(); ok {
		if err := cattle.ShedNameValidator(v); err != nil {
			return &ValidationError{Name: "shedName", err: fmt.Errorf("ent: validator failed for field \"shedName\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ShedTypeName(); ok {
		if err := cattle.ShedTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "shedTypeName", err: fmt.Errorf("ent: validator failed for field \"shedTypeName\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.EarNumber(); ok {
		if err := cattle.EarNumberValidator(v); err != nil {
			return &ValidationError{Name: "earNumber", err: fmt.Errorf("ent: validator failed for field \"earNumber\": %w", err)}
		}
	}
	return nil
}

func (cuo *CattleUpdateOne) sqlSave(ctx context.Context) (_node *Cattle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattle.Table,
			Columns: cattle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattle.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Cattle.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldName,
		})
	}
	if cuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattle.FieldName,
		})
	}
	if value, ok := cuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldFarmId,
		})
	}
	if value, ok := cuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldFarmId,
		})
	}
	if value, ok := cuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldFarmName,
		})
	}
	if value, ok := cuo.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedId,
		})
	}
	if value, ok := cuo.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedId,
		})
	}
	if value, ok := cuo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldShedName,
		})
	}
	if value, ok := cuo.mutation.ShedTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedTypeId,
		})
	}
	if value, ok := cuo.mutation.AddedShedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldShedTypeId,
		})
	}
	if value, ok := cuo.mutation.ShedTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldShedTypeName,
		})
	}
	if value, ok := cuo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldEarNumber,
		})
	}
	if value, ok := cuo.mutation.ElectronicEarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldElectronicEarNumber,
		})
	}
	if value, ok := cuo.mutation.Pedometer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldPedometer,
		})
	}
	if value, ok := cuo.mutation.GenderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldGenderId,
		})
	}
	if value, ok := cuo.mutation.AddedGenderId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldGenderId,
		})
	}
	if value, ok := cuo.mutation.GenderName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldGenderName,
		})
	}
	if value, ok := cuo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBirthday,
		})
	}
	if value, ok := cuo.mutation.AddedBirthday(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBirthday,
		})
	}
	if value, ok := cuo.mutation.JoinedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldJoinedAt,
		})
	}
	if value, ok := cuo.mutation.AddedJoinedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldJoinedAt,
		})
	}
	if value, ok := cuo.mutation.CateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldCateId,
		})
	}
	if value, ok := cuo.mutation.AddedCateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldCateId,
		})
	}
	if value, ok := cuo.mutation.CateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldCateName,
		})
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldType,
		})
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldType,
		})
	}
	if value, ok := cuo.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldTypeName,
		})
	}
	if value, ok := cuo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cattle.FieldWeight,
		})
	}
	if value, ok := cuo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cattle.FieldWeight,
		})
	}
	if value, ok := cuo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldFrom,
		})
	}
	if value, ok := cuo.mutation.Breed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldBreed,
		})
	}
	if value, ok := cuo.mutation.JoinedTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldJoinedTypeId,
		})
	}
	if value, ok := cuo.mutation.AddedJoinedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldJoinedTypeId,
		})
	}
	if value, ok := cuo.mutation.JoinedTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldJoinedTypeName,
		})
	}
	if value, ok := cuo.mutation.Mother(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldMother,
		})
	}
	if value, ok := cuo.mutation.Father(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldFather,
		})
	}
	if value, ok := cuo.mutation.Grandfather(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldGrandfather,
		})
	}
	if value, ok := cuo.mutation.OwnerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldOwnerId,
		})
	}
	if value, ok := cuo.mutation.AddedOwnerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldOwnerId,
		})
	}
	if value, ok := cuo.mutation.OwnerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldOwnerName,
		})
	}
	if value, ok := cuo.mutation.HairColorId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldHairColorId,
		})
	}
	if value, ok := cuo.mutation.AddedHairColorId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldHairColorId,
		})
	}
	if value, ok := cuo.mutation.HairColorName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldHairColorName,
		})
	}
	if value, ok := cuo.mutation.ReproductiveStateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldReproductiveStateId,
		})
	}
	if value, ok := cuo.mutation.AddedReproductiveStateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldReproductiveStateId,
		})
	}
	if value, ok := cuo.mutation.ReproductiveStateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldReproductiveStateName,
		})
	}
	if value, ok := cuo.mutation.PregnantTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldPregnantTimes,
		})
	}
	if value, ok := cuo.mutation.AddedPregnantTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldPregnantTimes,
		})
	}
	if value, ok := cuo.mutation.LastCalvingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldLastCalvingAt,
		})
	}
	if value, ok := cuo.mutation.AddedLastCalvingAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldLastCalvingAt,
		})
	}
	if value, ok := cuo.mutation.BreedingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBreedingAt,
		})
	}
	if value, ok := cuo.mutation.AddedBreedingAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBreedingAt,
		})
	}
	if value, ok := cuo.mutation.BreedingTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldBreedingTypeId,
		})
	}
	if value, ok := cuo.mutation.AddedBreedingTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldBreedingTypeId,
		})
	}
	if value, ok := cuo.mutation.BreedingTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldBreedingTypeName,
		})
	}
	if value, ok := cuo.mutation.BullId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBullId,
		})
	}
	if value, ok := cuo.mutation.AddedBullId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldBullId,
		})
	}
	if value, ok := cuo.mutation.PregnancyCheckAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldPregnancyCheckAt,
		})
	}
	if value, ok := cuo.mutation.AddedPregnancyCheckAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldPregnancyCheckAt,
		})
	}
	if value, ok := cuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldTenantId,
		})
	}
	if value, ok := cuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldTenantId,
		})
	}
	if value, ok := cuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattle.FieldTenantName,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattle.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldDeleted,
		})
	}
	if value, ok := cuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattle.FieldDeleted,
		})
	}
	_node = &Cattle{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattle.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

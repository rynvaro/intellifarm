// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlebreed"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleBreed is the model entity for the CattleBreed schema.
type CattleBreed struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 代码
	Code string `json:"code,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 排序数字
	Order int `json:"order,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleBreed) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattlebreed.FieldID, cattlebreed.FieldTenantId, cattlebreed.FieldOrder, cattlebreed.FieldCreatedAt, cattlebreed.FieldUpdatedAt, cattlebreed.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattlebreed.FieldName, cattlebreed.FieldCode, cattlebreed.FieldTenantName, cattlebreed.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleBreed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleBreed fields.
func (cb *CattleBreed) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattlebreed.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cb.ID = int(value.Int64)
		case cattlebreed.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cb.Name = value.String
			}
		case cattlebreed.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				cb.Code = value.String
			}
		case cattlebreed.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cb.TenantId = value.Int64
			}
		case cattlebreed.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				cb.TenantName = value.String
			}
		case cattlebreed.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				cb.Order = int(value.Int64)
			}
		case cattlebreed.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				cb.Remarks = value.String
			}
		case cattlebreed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cb.CreatedAt = value.Int64
			}
		case cattlebreed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cb.UpdatedAt = value.Int64
			}
		case cattlebreed.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cb.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleBreed.
// Note that you need to call CattleBreed.Unwrap() before calling this method if this CattleBreed
// was returned from a transaction, and the transaction was committed or rolled back.
func (cb *CattleBreed) Update() *CattleBreedUpdateOne {
	return (&CattleBreedClient{config: cb.config}).UpdateOne(cb)
}

// Unwrap unwraps the CattleBreed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cb *CattleBreed) Unwrap() *CattleBreed {
	_tx, ok := cb.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleBreed is not a transactional entity")
	}
	cb.config.driver = _tx.drv
	return cb
}

// String implements the fmt.Stringer.
func (cb *CattleBreed) String() string {
	var builder strings.Builder
	builder.WriteString("CattleBreed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cb.ID))
	builder.WriteString("name=")
	builder.WriteString(cb.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(cb.Code)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cb.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(cb.TenantName)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", cb.Order))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(cb.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cb.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cb.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cb.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleBreeds is a parsable slice of CattleBreed.
type CattleBreeds []*CattleBreed

func (cb CattleBreeds) config(cfg config) {
	for _i := range cb {
		cb[_i].config = cfg
	}
}

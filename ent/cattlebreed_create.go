// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlebreed"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CattleBreedCreate is the builder for creating a CattleBreed entity.
type CattleBreedCreate struct {
	config
	mutation *CattleBreedMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cbc *CattleBreedCreate) SetName(s string) *CattleBreedCreate {
	cbc.mutation.SetName(s)
	return cbc
}

// SetCode sets the "code" field.
func (cbc *CattleBreedCreate) SetCode(s string) *CattleBreedCreate {
	cbc.mutation.SetCode(s)
	return cbc
}

// SetTenantId sets the "tenantId" field.
func (cbc *CattleBreedCreate) SetTenantId(i int64) *CattleBreedCreate {
	cbc.mutation.SetTenantId(i)
	return cbc
}

// SetTenantName sets the "tenantName" field.
func (cbc *CattleBreedCreate) SetTenantName(s string) *CattleBreedCreate {
	cbc.mutation.SetTenantName(s)
	return cbc
}

// SetOrder sets the "order" field.
func (cbc *CattleBreedCreate) SetOrder(i int) *CattleBreedCreate {
	cbc.mutation.SetOrder(i)
	return cbc
}

// SetRemarks sets the "remarks" field.
func (cbc *CattleBreedCreate) SetRemarks(s string) *CattleBreedCreate {
	cbc.mutation.SetRemarks(s)
	return cbc
}

// SetCreatedAt sets the "createdAt" field.
func (cbc *CattleBreedCreate) SetCreatedAt(i int64) *CattleBreedCreate {
	cbc.mutation.SetCreatedAt(i)
	return cbc
}

// SetUpdatedAt sets the "updatedAt" field.
func (cbc *CattleBreedCreate) SetUpdatedAt(i int64) *CattleBreedCreate {
	cbc.mutation.SetUpdatedAt(i)
	return cbc
}

// SetDeleted sets the "deleted" field.
func (cbc *CattleBreedCreate) SetDeleted(i int) *CattleBreedCreate {
	cbc.mutation.SetDeleted(i)
	return cbc
}

// Mutation returns the CattleBreedMutation object of the builder.
func (cbc *CattleBreedCreate) Mutation() *CattleBreedMutation {
	return cbc.mutation
}

// Save creates the CattleBreed in the database.
func (cbc *CattleBreedCreate) Save(ctx context.Context) (*CattleBreed, error) {
	var (
		err  error
		node *CattleBreed
	)
	if len(cbc.hooks) == 0 {
		if err = cbc.check(); err != nil {
			return nil, err
		}
		node, err = cbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleBreedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cbc.check(); err != nil {
				return nil, err
			}
			cbc.mutation = mutation
			if node, err = cbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cbc.hooks) - 1; i >= 0; i-- {
			if cbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cbc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cbc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CattleBreed)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CattleBreedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cbc *CattleBreedCreate) SaveX(ctx context.Context) *CattleBreed {
	v, err := cbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbc *CattleBreedCreate) Exec(ctx context.Context) error {
	_, err := cbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbc *CattleBreedCreate) ExecX(ctx context.Context) {
	if err := cbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbc *CattleBreedCreate) check() error {
	if _, ok := cbc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CattleBreed.name"`)}
	}
	if _, ok := cbc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "CattleBreed.code"`)}
	}
	if _, ok := cbc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "CattleBreed.tenantId"`)}
	}
	if _, ok := cbc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "CattleBreed.tenantName"`)}
	}
	if _, ok := cbc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "CattleBreed.order"`)}
	}
	if _, ok := cbc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "CattleBreed.remarks"`)}
	}
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "CattleBreed.createdAt"`)}
	}
	if _, ok := cbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "CattleBreed.updatedAt"`)}
	}
	if _, ok := cbc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "CattleBreed.deleted"`)}
	}
	return nil
}

func (cbc *CattleBreedCreate) sqlSave(ctx context.Context) (*CattleBreed, error) {
	_node, _spec := cbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cbc *CattleBreedCreate) createSpec() (*CattleBreed, *sqlgraph.CreateSpec) {
	var (
		_node = &CattleBreed{config: cbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cattlebreed.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlebreed.FieldID,
			},
		}
	)
	if value, ok := cbc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cbc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := cbc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := cbc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := cbc.mutation.Order(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldOrder,
		})
		_node.Order = value
	}
	if value, ok := cbc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := cbc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cbc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cbc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// CattleBreedCreateBulk is the builder for creating many CattleBreed entities in bulk.
type CattleBreedCreateBulk struct {
	config
	builders []*CattleBreedCreate
}

// Save creates the CattleBreed entities in the database.
func (cbcb *CattleBreedCreateBulk) Save(ctx context.Context) ([]*CattleBreed, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cbcb.builders))
	nodes := make([]*CattleBreed, len(cbcb.builders))
	mutators := make([]Mutator, len(cbcb.builders))
	for i := range cbcb.builders {
		func(i int, root context.Context) {
			builder := cbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CattleBreedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cbcb *CattleBreedCreateBulk) SaveX(ctx context.Context) []*CattleBreed {
	v, err := cbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbcb *CattleBreedCreateBulk) Exec(ctx context.Context) error {
	_, err := cbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbcb *CattleBreedCreateBulk) ExecX(ctx context.Context) {
	if err := cbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

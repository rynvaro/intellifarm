// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlebreed"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleBreedUpdate is the builder for updating CattleBreed entities.
type CattleBreedUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleBreedMutation
	predicates []predicate.CattleBreed
}

// Where adds a new predicate for the builder.
func (cbu *CattleBreedUpdate) Where(ps ...predicate.CattleBreed) *CattleBreedUpdate {
	cbu.predicates = append(cbu.predicates, ps...)
	return cbu
}

// SetName sets the name field.
func (cbu *CattleBreedUpdate) SetName(s string) *CattleBreedUpdate {
	cbu.mutation.SetName(s)
	return cbu
}

// SetCode sets the code field.
func (cbu *CattleBreedUpdate) SetCode(s string) *CattleBreedUpdate {
	cbu.mutation.SetCode(s)
	return cbu
}

// SetTenantId sets the tenantId field.
func (cbu *CattleBreedUpdate) SetTenantId(i int64) *CattleBreedUpdate {
	cbu.mutation.ResetTenantId()
	cbu.mutation.SetTenantId(i)
	return cbu
}

// AddTenantId adds i to tenantId.
func (cbu *CattleBreedUpdate) AddTenantId(i int64) *CattleBreedUpdate {
	cbu.mutation.AddTenantId(i)
	return cbu
}

// SetTenantName sets the tenantName field.
func (cbu *CattleBreedUpdate) SetTenantName(s string) *CattleBreedUpdate {
	cbu.mutation.SetTenantName(s)
	return cbu
}

// SetOrder sets the order field.
func (cbu *CattleBreedUpdate) SetOrder(i int) *CattleBreedUpdate {
	cbu.mutation.ResetOrder()
	cbu.mutation.SetOrder(i)
	return cbu
}

// AddOrder adds i to order.
func (cbu *CattleBreedUpdate) AddOrder(i int) *CattleBreedUpdate {
	cbu.mutation.AddOrder(i)
	return cbu
}

// SetRemarks sets the remarks field.
func (cbu *CattleBreedUpdate) SetRemarks(s string) *CattleBreedUpdate {
	cbu.mutation.SetRemarks(s)
	return cbu
}

// SetCreatedAt sets the createdAt field.
func (cbu *CattleBreedUpdate) SetCreatedAt(i int64) *CattleBreedUpdate {
	cbu.mutation.ResetCreatedAt()
	cbu.mutation.SetCreatedAt(i)
	return cbu
}

// AddCreatedAt adds i to createdAt.
func (cbu *CattleBreedUpdate) AddCreatedAt(i int64) *CattleBreedUpdate {
	cbu.mutation.AddCreatedAt(i)
	return cbu
}

// SetUpdatedAt sets the updatedAt field.
func (cbu *CattleBreedUpdate) SetUpdatedAt(i int64) *CattleBreedUpdate {
	cbu.mutation.ResetUpdatedAt()
	cbu.mutation.SetUpdatedAt(i)
	return cbu
}

// AddUpdatedAt adds i to updatedAt.
func (cbu *CattleBreedUpdate) AddUpdatedAt(i int64) *CattleBreedUpdate {
	cbu.mutation.AddUpdatedAt(i)
	return cbu
}

// SetDeleted sets the deleted field.
func (cbu *CattleBreedUpdate) SetDeleted(i int) *CattleBreedUpdate {
	cbu.mutation.ResetDeleted()
	cbu.mutation.SetDeleted(i)
	return cbu
}

// AddDeleted adds i to deleted.
func (cbu *CattleBreedUpdate) AddDeleted(i int) *CattleBreedUpdate {
	cbu.mutation.AddDeleted(i)
	return cbu
}

// Mutation returns the CattleBreedMutation object of the builder.
func (cbu *CattleBreedUpdate) Mutation() *CattleBreedMutation {
	return cbu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cbu *CattleBreedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cbu.hooks) == 0 {
		affected, err = cbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleBreedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cbu.mutation = mutation
			affected, err = cbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cbu.hooks) - 1; i >= 0; i-- {
			mut = cbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cbu *CattleBreedUpdate) SaveX(ctx context.Context) int {
	affected, err := cbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cbu *CattleBreedUpdate) Exec(ctx context.Context) error {
	_, err := cbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbu *CattleBreedUpdate) ExecX(ctx context.Context) {
	if err := cbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cbu *CattleBreedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlebreed.Table,
			Columns: cattlebreed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlebreed.FieldID,
			},
		},
	}
	if ps := cbu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldName,
		})
	}
	if value, ok := cbu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldCode,
		})
	}
	if value, ok := cbu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldTenantId,
		})
	}
	if value, ok := cbu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldTenantId,
		})
	}
	if value, ok := cbu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldTenantName,
		})
	}
	if value, ok := cbu.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldOrder,
		})
	}
	if value, ok := cbu.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldOrder,
		})
	}
	if value, ok := cbu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldRemarks,
		})
	}
	if value, ok := cbu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldCreatedAt,
		})
	}
	if value, ok := cbu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldCreatedAt,
		})
	}
	if value, ok := cbu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldUpdatedAt,
		})
	}
	if value, ok := cbu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldUpdatedAt,
		})
	}
	if value, ok := cbu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldDeleted,
		})
	}
	if value, ok := cbu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlebreed.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleBreedUpdateOne is the builder for updating a single CattleBreed entity.
type CattleBreedUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleBreedMutation
}

// SetName sets the name field.
func (cbuo *CattleBreedUpdateOne) SetName(s string) *CattleBreedUpdateOne {
	cbuo.mutation.SetName(s)
	return cbuo
}

// SetCode sets the code field.
func (cbuo *CattleBreedUpdateOne) SetCode(s string) *CattleBreedUpdateOne {
	cbuo.mutation.SetCode(s)
	return cbuo
}

// SetTenantId sets the tenantId field.
func (cbuo *CattleBreedUpdateOne) SetTenantId(i int64) *CattleBreedUpdateOne {
	cbuo.mutation.ResetTenantId()
	cbuo.mutation.SetTenantId(i)
	return cbuo
}

// AddTenantId adds i to tenantId.
func (cbuo *CattleBreedUpdateOne) AddTenantId(i int64) *CattleBreedUpdateOne {
	cbuo.mutation.AddTenantId(i)
	return cbuo
}

// SetTenantName sets the tenantName field.
func (cbuo *CattleBreedUpdateOne) SetTenantName(s string) *CattleBreedUpdateOne {
	cbuo.mutation.SetTenantName(s)
	return cbuo
}

// SetOrder sets the order field.
func (cbuo *CattleBreedUpdateOne) SetOrder(i int) *CattleBreedUpdateOne {
	cbuo.mutation.ResetOrder()
	cbuo.mutation.SetOrder(i)
	return cbuo
}

// AddOrder adds i to order.
func (cbuo *CattleBreedUpdateOne) AddOrder(i int) *CattleBreedUpdateOne {
	cbuo.mutation.AddOrder(i)
	return cbuo
}

// SetRemarks sets the remarks field.
func (cbuo *CattleBreedUpdateOne) SetRemarks(s string) *CattleBreedUpdateOne {
	cbuo.mutation.SetRemarks(s)
	return cbuo
}

// SetCreatedAt sets the createdAt field.
func (cbuo *CattleBreedUpdateOne) SetCreatedAt(i int64) *CattleBreedUpdateOne {
	cbuo.mutation.ResetCreatedAt()
	cbuo.mutation.SetCreatedAt(i)
	return cbuo
}

// AddCreatedAt adds i to createdAt.
func (cbuo *CattleBreedUpdateOne) AddCreatedAt(i int64) *CattleBreedUpdateOne {
	cbuo.mutation.AddCreatedAt(i)
	return cbuo
}

// SetUpdatedAt sets the updatedAt field.
func (cbuo *CattleBreedUpdateOne) SetUpdatedAt(i int64) *CattleBreedUpdateOne {
	cbuo.mutation.ResetUpdatedAt()
	cbuo.mutation.SetUpdatedAt(i)
	return cbuo
}

// AddUpdatedAt adds i to updatedAt.
func (cbuo *CattleBreedUpdateOne) AddUpdatedAt(i int64) *CattleBreedUpdateOne {
	cbuo.mutation.AddUpdatedAt(i)
	return cbuo
}

// SetDeleted sets the deleted field.
func (cbuo *CattleBreedUpdateOne) SetDeleted(i int) *CattleBreedUpdateOne {
	cbuo.mutation.ResetDeleted()
	cbuo.mutation.SetDeleted(i)
	return cbuo
}

// AddDeleted adds i to deleted.
func (cbuo *CattleBreedUpdateOne) AddDeleted(i int) *CattleBreedUpdateOne {
	cbuo.mutation.AddDeleted(i)
	return cbuo
}

// Mutation returns the CattleBreedMutation object of the builder.
func (cbuo *CattleBreedUpdateOne) Mutation() *CattleBreedMutation {
	return cbuo.mutation
}

// Save executes the query and returns the updated entity.
func (cbuo *CattleBreedUpdateOne) Save(ctx context.Context) (*CattleBreed, error) {
	var (
		err  error
		node *CattleBreed
	)
	if len(cbuo.hooks) == 0 {
		node, err = cbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleBreedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cbuo.mutation = mutation
			node, err = cbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cbuo.hooks) - 1; i >= 0; i-- {
			mut = cbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cbuo *CattleBreedUpdateOne) SaveX(ctx context.Context) *CattleBreed {
	node, err := cbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cbuo *CattleBreedUpdateOne) Exec(ctx context.Context) error {
	_, err := cbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbuo *CattleBreedUpdateOne) ExecX(ctx context.Context) {
	if err := cbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cbuo *CattleBreedUpdateOne) sqlSave(ctx context.Context) (_node *CattleBreed, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlebreed.Table,
			Columns: cattlebreed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlebreed.FieldID,
			},
		},
	}
	id, ok := cbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CattleBreed.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cbuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldName,
		})
	}
	if value, ok := cbuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldCode,
		})
	}
	if value, ok := cbuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldTenantId,
		})
	}
	if value, ok := cbuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldTenantId,
		})
	}
	if value, ok := cbuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldTenantName,
		})
	}
	if value, ok := cbuo.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldOrder,
		})
	}
	if value, ok := cbuo.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldOrder,
		})
	}
	if value, ok := cbuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlebreed.FieldRemarks,
		})
	}
	if value, ok := cbuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldCreatedAt,
		})
	}
	if value, ok := cbuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldCreatedAt,
		})
	}
	if value, ok := cbuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldUpdatedAt,
		})
	}
	if value, ok := cbuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlebreed.FieldUpdatedAt,
		})
	}
	if value, ok := cbuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldDeleted,
		})
	}
	if value, ok := cbuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlebreed.FieldDeleted,
		})
	}
	_node = &CattleBreed{config: cbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlebreed.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

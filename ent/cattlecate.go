// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlecate"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleCate is the model entity for the CattleCate schema.
type CattleCate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 性别ID
	GenderIds string `json:"genderIds,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleCate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattlecate.FieldID:
			values[i] = new(sql.NullInt64)
		case cattlecate.FieldName, cattlecate.FieldGenderIds:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleCate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleCate fields.
func (cc *CattleCate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattlecate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case cattlecate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cc.Name = value.String
			}
		case cattlecate.FieldGenderIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genderIds", values[i])
			} else if value.Valid {
				cc.GenderIds = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleCate.
// Note that you need to call CattleCate.Unwrap() before calling this method if this CattleCate
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CattleCate) Update() *CattleCateUpdateOne {
	return (&CattleCateClient{config: cc.config}).UpdateOne(cc)
}

// Unwrap unwraps the CattleCate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CattleCate) Unwrap() *CattleCate {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleCate is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CattleCate) String() string {
	var builder strings.Builder
	builder.WriteString("CattleCate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("name=")
	builder.WriteString(cc.Name)
	builder.WriteString(", ")
	builder.WriteString("genderIds=")
	builder.WriteString(cc.GenderIds)
	builder.WriteByte(')')
	return builder.String()
}

// CattleCates is a parsable slice of CattleCate.
type CattleCates []*CattleCate

func (cc CattleCates) config(cfg config) {
	for _i := range cc {
		cc[_i].config = cfg
	}
}

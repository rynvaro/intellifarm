// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlecate"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CattleCateUpdate is the builder for updating CattleCate entities.
type CattleCateUpdate struct {
	config
	hooks    []Hook
	mutation *CattleCateMutation
}

// Where appends a list predicates to the CattleCateUpdate builder.
func (ccu *CattleCateUpdate) Where(ps ...predicate.CattleCate) *CattleCateUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetName sets the "name" field.
func (ccu *CattleCateUpdate) SetName(s string) *CattleCateUpdate {
	ccu.mutation.SetName(s)
	return ccu
}

// SetGenderIds sets the "genderIds" field.
func (ccu *CattleCateUpdate) SetGenderIds(s string) *CattleCateUpdate {
	ccu.mutation.SetGenderIds(s)
	return ccu
}

// Mutation returns the CattleCateMutation object of the builder.
func (ccu *CattleCateUpdate) Mutation() *CattleCateMutation {
	return ccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CattleCateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ccu.hooks) == 0 {
		if err = ccu.check(); err != nil {
			return 0, err
		}
		affected, err = ccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleCateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccu.check(); err != nil {
				return 0, err
			}
			ccu.mutation = mutation
			affected, err = ccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccu.hooks) - 1; i >= 0; i-- {
			if ccu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CattleCateUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CattleCateUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CattleCateUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccu *CattleCateUpdate) check() error {
	if v, ok := ccu.mutation.Name(); ok {
		if err := cattlecate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CattleCate.name": %w`, err)}
		}
	}
	if v, ok := ccu.mutation.GenderIds(); ok {
		if err := cattlecate.GenderIdsValidator(v); err != nil {
			return &ValidationError{Name: "genderIds", err: fmt.Errorf(`ent: validator failed for field "CattleCate.genderIds": %w`, err)}
		}
	}
	return nil
}

func (ccu *CattleCateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlecate.Table,
			Columns: cattlecate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlecate.FieldID,
			},
		},
	}
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlecate.FieldName,
		})
	}
	if value, ok := ccu.mutation.GenderIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlecate.FieldGenderIds,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlecate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CattleCateUpdateOne is the builder for updating a single CattleCate entity.
type CattleCateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CattleCateMutation
}

// SetName sets the "name" field.
func (ccuo *CattleCateUpdateOne) SetName(s string) *CattleCateUpdateOne {
	ccuo.mutation.SetName(s)
	return ccuo
}

// SetGenderIds sets the "genderIds" field.
func (ccuo *CattleCateUpdateOne) SetGenderIds(s string) *CattleCateUpdateOne {
	ccuo.mutation.SetGenderIds(s)
	return ccuo
}

// Mutation returns the CattleCateMutation object of the builder.
func (ccuo *CattleCateUpdateOne) Mutation() *CattleCateMutation {
	return ccuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CattleCateUpdateOne) Select(field string, fields ...string) *CattleCateUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CattleCate entity.
func (ccuo *CattleCateUpdateOne) Save(ctx context.Context) (*CattleCate, error) {
	var (
		err  error
		node *CattleCate
	)
	if len(ccuo.hooks) == 0 {
		if err = ccuo.check(); err != nil {
			return nil, err
		}
		node, err = ccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleCateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccuo.check(); err != nil {
				return nil, err
			}
			ccuo.mutation = mutation
			node, err = ccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccuo.hooks) - 1; i >= 0; i-- {
			if ccuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CattleCate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CattleCateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CattleCateUpdateOne) SaveX(ctx context.Context) *CattleCate {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CattleCateUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CattleCateUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *CattleCateUpdateOne) check() error {
	if v, ok := ccuo.mutation.Name(); ok {
		if err := cattlecate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CattleCate.name": %w`, err)}
		}
	}
	if v, ok := ccuo.mutation.GenderIds(); ok {
		if err := cattlecate.GenderIdsValidator(v); err != nil {
			return &ValidationError{Name: "genderIds", err: fmt.Errorf(`ent: validator failed for field "CattleCate.genderIds": %w`, err)}
		}
	}
	return nil
}

func (ccuo *CattleCateUpdateOne) sqlSave(ctx context.Context) (_node *CattleCate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlecate.Table,
			Columns: cattlecate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlecate.FieldID,
			},
		},
	}
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CattleCate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cattlecate.FieldID)
		for _, f := range fields {
			if !cattlecate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cattlecate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlecate.FieldName,
		})
	}
	if value, ok := ccuo.mutation.GenderIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlecate.FieldGenderIds,
		})
	}
	_node = &CattleCate{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlecate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

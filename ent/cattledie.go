// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattledie"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleDie is the model entity for the CattleDie schema.
type CattleDie struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 日期
	Date int64 `json:"date,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// ReasonId holds the value of the "reasonId" field.
	ReasonId int `json:"reasonId,omitempty"`
	// ReasonName holds the value of the "reasonName" field.
	ReasonName string `json:"reasonName,omitempty"`
	// 是否参保
	Insured int `json:"insured,omitempty"`
	// 参保单号
	InsuredCode string `json:"insuredCode,omitempty"`
	// 投保公司
	InsuredCompany string `json:"insuredCompany,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int64 `json:"weight,omitempty"`
	// HandleMethod holds the value of the "handleMethod" field.
	HandleMethod string `json:"handleMethod,omitempty"`
	// 是否申报
	Declared int `json:"declared,omitempty"`
	// 诊断兽医
	DUserName string `json:"dUserName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleDie) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattledie.FieldID, cattledie.FieldCattleId, cattledie.FieldTenantId, cattledie.FieldFarmId, cattledie.FieldShedId, cattledie.FieldDate, cattledie.FieldReasonId, cattledie.FieldInsured, cattledie.FieldWeight, cattledie.FieldDeclared, cattledie.FieldCreatedAt, cattledie.FieldUpdatedAt, cattledie.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattledie.FieldTenantName, cattledie.FieldFarmName, cattledie.FieldShedName, cattledie.FieldEarNumber, cattledie.FieldUserName, cattledie.FieldReasonName, cattledie.FieldInsuredCode, cattledie.FieldInsuredCompany, cattledie.FieldHandleMethod, cattledie.FieldDUserName, cattledie.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleDie", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleDie fields.
func (cd *CattleDie) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattledie.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cd.ID = int(value.Int64)
		case cattledie.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				cd.CattleId = value.Int64
			}
		case cattledie.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cd.TenantId = value.Int64
			}
		case cattledie.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				cd.TenantName = value.String
			}
		case cattledie.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				cd.FarmId = value.Int64
			}
		case cattledie.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				cd.FarmName = value.String
			}
		case cattledie.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				cd.ShedId = value.Int64
			}
		case cattledie.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				cd.ShedName = value.String
			}
		case cattledie.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				cd.EarNumber = value.String
			}
		case cattledie.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				cd.Date = value.Int64
			}
		case cattledie.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				cd.UserName = value.String
			}
		case cattledie.FieldReasonId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reasonId", values[i])
			} else if value.Valid {
				cd.ReasonId = int(value.Int64)
			}
		case cattledie.FieldReasonName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reasonName", values[i])
			} else if value.Valid {
				cd.ReasonName = value.String
			}
		case cattledie.FieldInsured:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field insured", values[i])
			} else if value.Valid {
				cd.Insured = int(value.Int64)
			}
		case cattledie.FieldInsuredCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field insuredCode", values[i])
			} else if value.Valid {
				cd.InsuredCode = value.String
			}
		case cattledie.FieldInsuredCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field insuredCompany", values[i])
			} else if value.Valid {
				cd.InsuredCompany = value.String
			}
		case cattledie.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				cd.Weight = value.Int64
			}
		case cattledie.FieldHandleMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handleMethod", values[i])
			} else if value.Valid {
				cd.HandleMethod = value.String
			}
		case cattledie.FieldDeclared:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field declared", values[i])
			} else if value.Valid {
				cd.Declared = int(value.Int64)
			}
		case cattledie.FieldDUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dUserName", values[i])
			} else if value.Valid {
				cd.DUserName = value.String
			}
		case cattledie.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				cd.Remarks = value.String
			}
		case cattledie.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cd.CreatedAt = value.Int64
			}
		case cattledie.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cd.UpdatedAt = value.Int64
			}
		case cattledie.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cd.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleDie.
// Note that you need to call CattleDie.Unwrap() before calling this method if this CattleDie
// was returned from a transaction, and the transaction was committed or rolled back.
func (cd *CattleDie) Update() *CattleDieUpdateOne {
	return (&CattleDieClient{config: cd.config}).UpdateOne(cd)
}

// Unwrap unwraps the CattleDie entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cd *CattleDie) Unwrap() *CattleDie {
	_tx, ok := cd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleDie is not a transactional entity")
	}
	cd.config.driver = _tx.drv
	return cd
}

// String implements the fmt.Stringer.
func (cd *CattleDie) String() string {
	var builder strings.Builder
	builder.WriteString("CattleDie(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cd.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", cd.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cd.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(cd.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", cd.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(cd.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", cd.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(cd.ShedName)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(cd.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", cd.Date))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(cd.UserName)
	builder.WriteString(", ")
	builder.WriteString("reasonId=")
	builder.WriteString(fmt.Sprintf("%v", cd.ReasonId))
	builder.WriteString(", ")
	builder.WriteString("reasonName=")
	builder.WriteString(cd.ReasonName)
	builder.WriteString(", ")
	builder.WriteString("insured=")
	builder.WriteString(fmt.Sprintf("%v", cd.Insured))
	builder.WriteString(", ")
	builder.WriteString("insuredCode=")
	builder.WriteString(cd.InsuredCode)
	builder.WriteString(", ")
	builder.WriteString("insuredCompany=")
	builder.WriteString(cd.InsuredCompany)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", cd.Weight))
	builder.WriteString(", ")
	builder.WriteString("handleMethod=")
	builder.WriteString(cd.HandleMethod)
	builder.WriteString(", ")
	builder.WriteString("declared=")
	builder.WriteString(fmt.Sprintf("%v", cd.Declared))
	builder.WriteString(", ")
	builder.WriteString("dUserName=")
	builder.WriteString(cd.DUserName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(cd.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cd.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cd.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cd.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleDies is a parsable slice of CattleDie.
type CattleDies []*CattleDie

func (cd CattleDies) config(cfg config) {
	for _i := range cd {
		cd[_i].config = cfg
	}
}

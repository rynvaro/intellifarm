// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattledie"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// CattleDie is the model entity for the CattleDie schema.
type CattleDie struct {
	config
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleDie) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleDie fields.
func (cd *CattleDie) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cattledie.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cd.ID = int64(value.Int64)
	values = values[1:]
	return nil
}

// Update returns a builder for updating this CattleDie.
// Note that, you need to call CattleDie.Unwrap() before calling this method, if this CattleDie
// was returned from a transaction, and the transaction was committed or rolled back.
func (cd *CattleDie) Update() *CattleDieUpdateOne {
	return (&CattleDieClient{config: cd.config}).UpdateOne(cd)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cd *CattleDie) Unwrap() *CattleDie {
	tx, ok := cd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleDie is not a transactional entity")
	}
	cd.config.driver = tx.drv
	return cd
}

// String implements the fmt.Stringer.
func (cd *CattleDie) String() string {
	var builder strings.Builder
	builder.WriteString("CattleDie(")
	builder.WriteString(fmt.Sprintf("id=%v", cd.ID))
	builder.WriteByte(')')
	return builder.String()
}

// CattleDies is a parsable slice of CattleDie.
type CattleDies []*CattleDie

func (cd CattleDies) config(cfg config) {
	for _i := range cd {
		cd[_i].config = cfg
	}
}

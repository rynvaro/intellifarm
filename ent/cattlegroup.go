// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegroup"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleGroup is the model entity for the CattleGroup schema.
type CattleGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 日期
	Date int64 `json:"date,omitempty"`
	// 转到的栋舍
	ToShed string `json:"toShed,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattlegroup.FieldID, cattlegroup.FieldDate, cattlegroup.FieldTenantId, cattlegroup.FieldCreatedAt, cattlegroup.FieldUpdatedAt, cattlegroup.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattlegroup.FieldEarNumber, cattlegroup.FieldToShed, cattlegroup.FieldTenantName, cattlegroup.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleGroup fields.
func (cg *CattleGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattlegroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cg.ID = int(value.Int64)
		case cattlegroup.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				cg.EarNumber = value.String
			}
		case cattlegroup.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				cg.Date = value.Int64
			}
		case cattlegroup.FieldToShed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field toShed", values[i])
			} else if value.Valid {
				cg.ToShed = value.String
			}
		case cattlegroup.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cg.TenantId = value.Int64
			}
		case cattlegroup.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				cg.TenantName = value.String
			}
		case cattlegroup.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				cg.Remarks = value.String
			}
		case cattlegroup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cg.CreatedAt = value.Int64
			}
		case cattlegroup.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cg.UpdatedAt = value.Int64
			}
		case cattlegroup.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cg.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleGroup.
// Note that you need to call CattleGroup.Unwrap() before calling this method if this CattleGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (cg *CattleGroup) Update() *CattleGroupUpdateOne {
	return (&CattleGroupClient{config: cg.config}).UpdateOne(cg)
}

// Unwrap unwraps the CattleGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cg *CattleGroup) Unwrap() *CattleGroup {
	_tx, ok := cg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleGroup is not a transactional entity")
	}
	cg.config.driver = _tx.drv
	return cg
}

// String implements the fmt.Stringer.
func (cg *CattleGroup) String() string {
	var builder strings.Builder
	builder.WriteString("CattleGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cg.ID))
	builder.WriteString("earNumber=")
	builder.WriteString(cg.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", cg.Date))
	builder.WriteString(", ")
	builder.WriteString("toShed=")
	builder.WriteString(cg.ToShed)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cg.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(cg.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(cg.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cg.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cg.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cg.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleGroups is a parsable slice of CattleGroup.
type CattleGroups []*CattleGroup

func (cg CattleGroups) config(cfg config) {
	for _i := range cg {
		cg[_i].config = cfg
	}
}

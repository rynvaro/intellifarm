// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegroup"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleGroupUpdate is the builder for updating CattleGroup entities.
type CattleGroupUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleGroupMutation
	predicates []predicate.CattleGroup
}

// Where adds a new predicate for the builder.
func (cgu *CattleGroupUpdate) Where(ps ...predicate.CattleGroup) *CattleGroupUpdate {
	cgu.predicates = append(cgu.predicates, ps...)
	return cgu
}

// Mutation returns the CattleGroupMutation object of the builder.
func (cgu *CattleGroupUpdate) Mutation() *CattleGroupMutation {
	return cgu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cgu *CattleGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cgu.hooks) == 0 {
		affected, err = cgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cgu.mutation = mutation
			affected, err = cgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cgu.hooks) - 1; i >= 0; i-- {
			mut = cgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cgu *CattleGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := cgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgu *CattleGroupUpdate) Exec(ctx context.Context) error {
	_, err := cgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgu *CattleGroupUpdate) ExecX(ctx context.Context) {
	if err := cgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cgu *CattleGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegroup.Table,
			Columns: cattlegroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegroup.FieldID,
			},
		},
	}
	if ps := cgu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleGroupUpdateOne is the builder for updating a single CattleGroup entity.
type CattleGroupUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleGroupMutation
}

// Mutation returns the CattleGroupMutation object of the builder.
func (cguo *CattleGroupUpdateOne) Mutation() *CattleGroupMutation {
	return cguo.mutation
}

// Save executes the query and returns the updated entity.
func (cguo *CattleGroupUpdateOne) Save(ctx context.Context) (*CattleGroup, error) {
	var (
		err  error
		node *CattleGroup
	)
	if len(cguo.hooks) == 0 {
		node, err = cguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cguo.mutation = mutation
			node, err = cguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cguo.hooks) - 1; i >= 0; i-- {
			mut = cguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cguo *CattleGroupUpdateOne) SaveX(ctx context.Context) *CattleGroup {
	node, err := cguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cguo *CattleGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := cguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cguo *CattleGroupUpdateOne) ExecX(ctx context.Context) {
	if err := cguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cguo *CattleGroupUpdateOne) sqlSave(ctx context.Context) (_node *CattleGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegroup.Table,
			Columns: cattlegroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegroup.FieldID,
			},
		},
	}
	id, ok := cguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CattleGroup.ID for update")}
	}
	_spec.Node.ID.Value = id
	_node = &CattleGroup{config: cguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

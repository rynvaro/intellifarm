// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrow"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleGrow is the model entity for the CattleGrow schema.
type CattleGrow struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 牛耳号
	EarNumber string `json:"earNumber,omitempty"`
	// 生长阶段
	Stage string `json:"stage,omitempty"`
	// 开始日期
	DateStart int64 `json:"dateStart,omitempty"`
	// 结束日期
	DateEnd int64 `json:"dateEnd,omitempty"`
	// 初始体重(kg)
	WeightStart float32 `json:"weightStart,omitempty"`
	// 最终体重(kg)
	WeightEnd float32 `json:"weightEnd,omitempty"`
	// 日增重(kg)
	DailyWeight float32 `json:"dailyWeight,omitempty"`
	// 总耗料量(kg)
	FeedWeight float32 `json:"feedWeight,omitempty"`
	// 平均日耗料量(kg)
	DailyFeedWeight float32 `json:"dailyFeedWeight,omitempty"`
	// 饲料转化效率
	ConversionRate float32 `json:"conversionRate,omitempty"`
	// 记录人
	UserName string `json:"userName,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleGrow) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattlegrow.FieldWeightStart, cattlegrow.FieldWeightEnd, cattlegrow.FieldDailyWeight, cattlegrow.FieldFeedWeight, cattlegrow.FieldDailyFeedWeight, cattlegrow.FieldConversionRate:
			values[i] = new(sql.NullFloat64)
		case cattlegrow.FieldID, cattlegrow.FieldDateStart, cattlegrow.FieldDateEnd, cattlegrow.FieldTenantId, cattlegrow.FieldCreatedAt, cattlegrow.FieldUpdatedAt, cattlegrow.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattlegrow.FieldName, cattlegrow.FieldEarNumber, cattlegrow.FieldStage, cattlegrow.FieldUserName, cattlegrow.FieldTenantName, cattlegrow.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleGrow", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleGrow fields.
func (cg *CattleGrow) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattlegrow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cg.ID = int(value.Int64)
		case cattlegrow.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cg.Name = value.String
			}
		case cattlegrow.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				cg.EarNumber = value.String
			}
		case cattlegrow.FieldStage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stage", values[i])
			} else if value.Valid {
				cg.Stage = value.String
			}
		case cattlegrow.FieldDateStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dateStart", values[i])
			} else if value.Valid {
				cg.DateStart = value.Int64
			}
		case cattlegrow.FieldDateEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dateEnd", values[i])
			} else if value.Valid {
				cg.DateEnd = value.Int64
			}
		case cattlegrow.FieldWeightStart:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weightStart", values[i])
			} else if value.Valid {
				cg.WeightStart = float32(value.Float64)
			}
		case cattlegrow.FieldWeightEnd:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weightEnd", values[i])
			} else if value.Valid {
				cg.WeightEnd = float32(value.Float64)
			}
		case cattlegrow.FieldDailyWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field dailyWeight", values[i])
			} else if value.Valid {
				cg.DailyWeight = float32(value.Float64)
			}
		case cattlegrow.FieldFeedWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field feedWeight", values[i])
			} else if value.Valid {
				cg.FeedWeight = float32(value.Float64)
			}
		case cattlegrow.FieldDailyFeedWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field dailyFeedWeight", values[i])
			} else if value.Valid {
				cg.DailyFeedWeight = float32(value.Float64)
			}
		case cattlegrow.FieldConversionRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field conversionRate", values[i])
			} else if value.Valid {
				cg.ConversionRate = float32(value.Float64)
			}
		case cattlegrow.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				cg.UserName = value.String
			}
		case cattlegrow.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cg.TenantId = value.Int64
			}
		case cattlegrow.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				cg.TenantName = value.String
			}
		case cattlegrow.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				cg.Remarks = value.String
			}
		case cattlegrow.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cg.CreatedAt = value.Int64
			}
		case cattlegrow.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cg.UpdatedAt = value.Int64
			}
		case cattlegrow.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cg.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleGrow.
// Note that you need to call CattleGrow.Unwrap() before calling this method if this CattleGrow
// was returned from a transaction, and the transaction was committed or rolled back.
func (cg *CattleGrow) Update() *CattleGrowUpdateOne {
	return (&CattleGrowClient{config: cg.config}).UpdateOne(cg)
}

// Unwrap unwraps the CattleGrow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cg *CattleGrow) Unwrap() *CattleGrow {
	_tx, ok := cg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleGrow is not a transactional entity")
	}
	cg.config.driver = _tx.drv
	return cg
}

// String implements the fmt.Stringer.
func (cg *CattleGrow) String() string {
	var builder strings.Builder
	builder.WriteString("CattleGrow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cg.ID))
	builder.WriteString("name=")
	builder.WriteString(cg.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(cg.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("stage=")
	builder.WriteString(cg.Stage)
	builder.WriteString(", ")
	builder.WriteString("dateStart=")
	builder.WriteString(fmt.Sprintf("%v", cg.DateStart))
	builder.WriteString(", ")
	builder.WriteString("dateEnd=")
	builder.WriteString(fmt.Sprintf("%v", cg.DateEnd))
	builder.WriteString(", ")
	builder.WriteString("weightStart=")
	builder.WriteString(fmt.Sprintf("%v", cg.WeightStart))
	builder.WriteString(", ")
	builder.WriteString("weightEnd=")
	builder.WriteString(fmt.Sprintf("%v", cg.WeightEnd))
	builder.WriteString(", ")
	builder.WriteString("dailyWeight=")
	builder.WriteString(fmt.Sprintf("%v", cg.DailyWeight))
	builder.WriteString(", ")
	builder.WriteString("feedWeight=")
	builder.WriteString(fmt.Sprintf("%v", cg.FeedWeight))
	builder.WriteString(", ")
	builder.WriteString("dailyFeedWeight=")
	builder.WriteString(fmt.Sprintf("%v", cg.DailyFeedWeight))
	builder.WriteString(", ")
	builder.WriteString("conversionRate=")
	builder.WriteString(fmt.Sprintf("%v", cg.ConversionRate))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(cg.UserName)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cg.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(cg.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(cg.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cg.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cg.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cg.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleGrows is a parsable slice of CattleGrow.
type CattleGrows []*CattleGrow

func (cg CattleGrows) config(cfg config) {
	for _i := range cg {
		cg[_i].config = cfg
	}
}

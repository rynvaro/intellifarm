// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrow"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// CattleGrow is the model entity for the CattleGrow schema.
type CattleGrow struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// Stage holds the value of the "stage" field.
	Stage string `json:"stage,omitempty"`
	// DateStart holds the value of the "dateStart" field.
	DateStart int64 `json:"dateStart,omitempty"`
	// DateEnd holds the value of the "dateEnd" field.
	DateEnd int64 `json:"dateEnd,omitempty"`
	// WeightStart holds the value of the "weightStart" field.
	WeightStart float32 `json:"weightStart,omitempty"`
	// WeightEnd holds the value of the "weightEnd" field.
	WeightEnd float32 `json:"weightEnd,omitempty"`
	// DailyWeight holds the value of the "dailyWeight" field.
	DailyWeight float32 `json:"dailyWeight,omitempty"`
	// FeedWeight holds the value of the "feedWeight" field.
	FeedWeight float32 `json:"feedWeight,omitempty"`
	// DailyFeedWeight holds the value of the "dailyFeedWeight" field.
	DailyFeedWeight float32 `json:"dailyFeedWeight,omitempty"`
	// ConversionRate holds the value of the "conversionRate" field.
	ConversionRate float32 `json:"conversionRate,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleGrow) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // name
		&sql.NullString{},  // earNumber
		&sql.NullString{},  // stage
		&sql.NullInt64{},   // dateStart
		&sql.NullInt64{},   // dateEnd
		&sql.NullFloat64{}, // weightStart
		&sql.NullFloat64{}, // weightEnd
		&sql.NullFloat64{}, // dailyWeight
		&sql.NullFloat64{}, // feedWeight
		&sql.NullFloat64{}, // dailyFeedWeight
		&sql.NullFloat64{}, // conversionRate
		&sql.NullString{},  // userName
		&sql.NullInt64{},   // tenantId
		&sql.NullString{},  // tenantName
		&sql.NullString{},  // remarks
		&sql.NullInt64{},   // createdAt
		&sql.NullInt64{},   // updatedAt
		&sql.NullInt64{},   // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleGrow fields.
func (cg *CattleGrow) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cattlegrow.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cg.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		cg.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[1])
	} else if value.Valid {
		cg.EarNumber = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field stage", values[2])
	} else if value.Valid {
		cg.Stage = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field dateStart", values[3])
	} else if value.Valid {
		cg.DateStart = value.Int64
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field dateEnd", values[4])
	} else if value.Valid {
		cg.DateEnd = value.Int64
	}
	if value, ok := values[5].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field weightStart", values[5])
	} else if value.Valid {
		cg.WeightStart = float32(value.Float64)
	}
	if value, ok := values[6].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field weightEnd", values[6])
	} else if value.Valid {
		cg.WeightEnd = float32(value.Float64)
	}
	if value, ok := values[7].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field dailyWeight", values[7])
	} else if value.Valid {
		cg.DailyWeight = float32(value.Float64)
	}
	if value, ok := values[8].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field feedWeight", values[8])
	} else if value.Valid {
		cg.FeedWeight = float32(value.Float64)
	}
	if value, ok := values[9].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field dailyFeedWeight", values[9])
	} else if value.Valid {
		cg.DailyFeedWeight = float32(value.Float64)
	}
	if value, ok := values[10].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field conversionRate", values[10])
	} else if value.Valid {
		cg.ConversionRate = float32(value.Float64)
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[11])
	} else if value.Valid {
		cg.UserName = value.String
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[12])
	} else if value.Valid {
		cg.TenantId = value.Int64
	}
	if value, ok := values[13].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[13])
	} else if value.Valid {
		cg.TenantName = value.String
	}
	if value, ok := values[14].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[14])
	} else if value.Valid {
		cg.Remarks = value.String
	}
	if value, ok := values[15].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[15])
	} else if value.Valid {
		cg.CreatedAt = value.Int64
	}
	if value, ok := values[16].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[16])
	} else if value.Valid {
		cg.UpdatedAt = value.Int64
	}
	if value, ok := values[17].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[17])
	} else if value.Valid {
		cg.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this CattleGrow.
// Note that, you need to call CattleGrow.Unwrap() before calling this method, if this CattleGrow
// was returned from a transaction, and the transaction was committed or rolled back.
func (cg *CattleGrow) Update() *CattleGrowUpdateOne {
	return (&CattleGrowClient{config: cg.config}).UpdateOne(cg)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cg *CattleGrow) Unwrap() *CattleGrow {
	tx, ok := cg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleGrow is not a transactional entity")
	}
	cg.config.driver = tx.drv
	return cg
}

// String implements the fmt.Stringer.
func (cg *CattleGrow) String() string {
	var builder strings.Builder
	builder.WriteString("CattleGrow(")
	builder.WriteString(fmt.Sprintf("id=%v", cg.ID))
	builder.WriteString(", name=")
	builder.WriteString(cg.Name)
	builder.WriteString(", earNumber=")
	builder.WriteString(cg.EarNumber)
	builder.WriteString(", stage=")
	builder.WriteString(cg.Stage)
	builder.WriteString(", dateStart=")
	builder.WriteString(fmt.Sprintf("%v", cg.DateStart))
	builder.WriteString(", dateEnd=")
	builder.WriteString(fmt.Sprintf("%v", cg.DateEnd))
	builder.WriteString(", weightStart=")
	builder.WriteString(fmt.Sprintf("%v", cg.WeightStart))
	builder.WriteString(", weightEnd=")
	builder.WriteString(fmt.Sprintf("%v", cg.WeightEnd))
	builder.WriteString(", dailyWeight=")
	builder.WriteString(fmt.Sprintf("%v", cg.DailyWeight))
	builder.WriteString(", feedWeight=")
	builder.WriteString(fmt.Sprintf("%v", cg.FeedWeight))
	builder.WriteString(", dailyFeedWeight=")
	builder.WriteString(fmt.Sprintf("%v", cg.DailyFeedWeight))
	builder.WriteString(", conversionRate=")
	builder.WriteString(fmt.Sprintf("%v", cg.ConversionRate))
	builder.WriteString(", userName=")
	builder.WriteString(cg.UserName)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cg.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(cg.TenantName)
	builder.WriteString(", remarks=")
	builder.WriteString(cg.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cg.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cg.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", cg.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleGrows is a parsable slice of CattleGrow.
type CattleGrows []*CattleGrow

func (cg CattleGrows) config(cfg config) {
	for _i := range cg {
		cg[_i].config = cfg
	}
}

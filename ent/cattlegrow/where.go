// Code generated by ent, DO NOT EDIT.

package cattlegrow

import (
	"cattleai/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// EarNumber applies equality check predicate on the "earNumber" field. It's identical to EarNumberEQ.
func EarNumber(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// Stage applies equality check predicate on the "stage" field. It's identical to StageEQ.
func Stage(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStage), v))
	})
}

// DateStart applies equality check predicate on the "dateStart" field. It's identical to DateStartEQ.
func DateStart(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateStart), v))
	})
}

// DateEnd applies equality check predicate on the "dateEnd" field. It's identical to DateEndEQ.
func DateEnd(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateEnd), v))
	})
}

// WeightStart applies equality check predicate on the "weightStart" field. It's identical to WeightStartEQ.
func WeightStart(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeightStart), v))
	})
}

// WeightEnd applies equality check predicate on the "weightEnd" field. It's identical to WeightEndEQ.
func WeightEnd(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeightEnd), v))
	})
}

// DailyWeight applies equality check predicate on the "dailyWeight" field. It's identical to DailyWeightEQ.
func DailyWeight(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDailyWeight), v))
	})
}

// FeedWeight applies equality check predicate on the "feedWeight" field. It's identical to FeedWeightEQ.
func FeedWeight(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedWeight), v))
	})
}

// DailyFeedWeight applies equality check predicate on the "dailyFeedWeight" field. It's identical to DailyFeedWeightEQ.
func DailyFeedWeight(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDailyFeedWeight), v))
	})
}

// ConversionRate applies equality check predicate on the "conversionRate" field. It's identical to ConversionRateEQ.
func ConversionRate(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConversionRate), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EarNumberEQ applies the EQ predicate on the "earNumber" field.
func EarNumberEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberNEQ applies the NEQ predicate on the "earNumber" field.
func EarNumberNEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberIn applies the In predicate on the "earNumber" field.
func EarNumberIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEarNumber), v...))
	})
}

// EarNumberNotIn applies the NotIn predicate on the "earNumber" field.
func EarNumberNotIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEarNumber), v...))
	})
}

// EarNumberGT applies the GT predicate on the "earNumber" field.
func EarNumberGT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEarNumber), v))
	})
}

// EarNumberGTE applies the GTE predicate on the "earNumber" field.
func EarNumberGTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberLT applies the LT predicate on the "earNumber" field.
func EarNumberLT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEarNumber), v))
	})
}

// EarNumberLTE applies the LTE predicate on the "earNumber" field.
func EarNumberLTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberContains applies the Contains predicate on the "earNumber" field.
func EarNumberContains(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasPrefix applies the HasPrefix predicate on the "earNumber" field.
func EarNumberHasPrefix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasSuffix applies the HasSuffix predicate on the "earNumber" field.
func EarNumberHasSuffix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEarNumber), v))
	})
}

// EarNumberEqualFold applies the EqualFold predicate on the "earNumber" field.
func EarNumberEqualFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEarNumber), v))
	})
}

// EarNumberContainsFold applies the ContainsFold predicate on the "earNumber" field.
func EarNumberContainsFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEarNumber), v))
	})
}

// StageEQ applies the EQ predicate on the "stage" field.
func StageEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStage), v))
	})
}

// StageNEQ applies the NEQ predicate on the "stage" field.
func StageNEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStage), v))
	})
}

// StageIn applies the In predicate on the "stage" field.
func StageIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStage), v...))
	})
}

// StageNotIn applies the NotIn predicate on the "stage" field.
func StageNotIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStage), v...))
	})
}

// StageGT applies the GT predicate on the "stage" field.
func StageGT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStage), v))
	})
}

// StageGTE applies the GTE predicate on the "stage" field.
func StageGTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStage), v))
	})
}

// StageLT applies the LT predicate on the "stage" field.
func StageLT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStage), v))
	})
}

// StageLTE applies the LTE predicate on the "stage" field.
func StageLTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStage), v))
	})
}

// StageContains applies the Contains predicate on the "stage" field.
func StageContains(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStage), v))
	})
}

// StageHasPrefix applies the HasPrefix predicate on the "stage" field.
func StageHasPrefix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStage), v))
	})
}

// StageHasSuffix applies the HasSuffix predicate on the "stage" field.
func StageHasSuffix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStage), v))
	})
}

// StageEqualFold applies the EqualFold predicate on the "stage" field.
func StageEqualFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStage), v))
	})
}

// StageContainsFold applies the ContainsFold predicate on the "stage" field.
func StageContainsFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStage), v))
	})
}

// DateStartEQ applies the EQ predicate on the "dateStart" field.
func DateStartEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateStart), v))
	})
}

// DateStartNEQ applies the NEQ predicate on the "dateStart" field.
func DateStartNEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateStart), v))
	})
}

// DateStartIn applies the In predicate on the "dateStart" field.
func DateStartIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDateStart), v...))
	})
}

// DateStartNotIn applies the NotIn predicate on the "dateStart" field.
func DateStartNotIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDateStart), v...))
	})
}

// DateStartGT applies the GT predicate on the "dateStart" field.
func DateStartGT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateStart), v))
	})
}

// DateStartGTE applies the GTE predicate on the "dateStart" field.
func DateStartGTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateStart), v))
	})
}

// DateStartLT applies the LT predicate on the "dateStart" field.
func DateStartLT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateStart), v))
	})
}

// DateStartLTE applies the LTE predicate on the "dateStart" field.
func DateStartLTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateStart), v))
	})
}

// DateEndEQ applies the EQ predicate on the "dateEnd" field.
func DateEndEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateEnd), v))
	})
}

// DateEndNEQ applies the NEQ predicate on the "dateEnd" field.
func DateEndNEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateEnd), v))
	})
}

// DateEndIn applies the In predicate on the "dateEnd" field.
func DateEndIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDateEnd), v...))
	})
}

// DateEndNotIn applies the NotIn predicate on the "dateEnd" field.
func DateEndNotIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDateEnd), v...))
	})
}

// DateEndGT applies the GT predicate on the "dateEnd" field.
func DateEndGT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateEnd), v))
	})
}

// DateEndGTE applies the GTE predicate on the "dateEnd" field.
func DateEndGTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateEnd), v))
	})
}

// DateEndLT applies the LT predicate on the "dateEnd" field.
func DateEndLT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateEnd), v))
	})
}

// DateEndLTE applies the LTE predicate on the "dateEnd" field.
func DateEndLTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateEnd), v))
	})
}

// WeightStartEQ applies the EQ predicate on the "weightStart" field.
func WeightStartEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeightStart), v))
	})
}

// WeightStartNEQ applies the NEQ predicate on the "weightStart" field.
func WeightStartNEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeightStart), v))
	})
}

// WeightStartIn applies the In predicate on the "weightStart" field.
func WeightStartIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeightStart), v...))
	})
}

// WeightStartNotIn applies the NotIn predicate on the "weightStart" field.
func WeightStartNotIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeightStart), v...))
	})
}

// WeightStartGT applies the GT predicate on the "weightStart" field.
func WeightStartGT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeightStart), v))
	})
}

// WeightStartGTE applies the GTE predicate on the "weightStart" field.
func WeightStartGTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeightStart), v))
	})
}

// WeightStartLT applies the LT predicate on the "weightStart" field.
func WeightStartLT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeightStart), v))
	})
}

// WeightStartLTE applies the LTE predicate on the "weightStart" field.
func WeightStartLTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeightStart), v))
	})
}

// WeightEndEQ applies the EQ predicate on the "weightEnd" field.
func WeightEndEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeightEnd), v))
	})
}

// WeightEndNEQ applies the NEQ predicate on the "weightEnd" field.
func WeightEndNEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeightEnd), v))
	})
}

// WeightEndIn applies the In predicate on the "weightEnd" field.
func WeightEndIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeightEnd), v...))
	})
}

// WeightEndNotIn applies the NotIn predicate on the "weightEnd" field.
func WeightEndNotIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeightEnd), v...))
	})
}

// WeightEndGT applies the GT predicate on the "weightEnd" field.
func WeightEndGT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeightEnd), v))
	})
}

// WeightEndGTE applies the GTE predicate on the "weightEnd" field.
func WeightEndGTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeightEnd), v))
	})
}

// WeightEndLT applies the LT predicate on the "weightEnd" field.
func WeightEndLT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeightEnd), v))
	})
}

// WeightEndLTE applies the LTE predicate on the "weightEnd" field.
func WeightEndLTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeightEnd), v))
	})
}

// DailyWeightEQ applies the EQ predicate on the "dailyWeight" field.
func DailyWeightEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDailyWeight), v))
	})
}

// DailyWeightNEQ applies the NEQ predicate on the "dailyWeight" field.
func DailyWeightNEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDailyWeight), v))
	})
}

// DailyWeightIn applies the In predicate on the "dailyWeight" field.
func DailyWeightIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDailyWeight), v...))
	})
}

// DailyWeightNotIn applies the NotIn predicate on the "dailyWeight" field.
func DailyWeightNotIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDailyWeight), v...))
	})
}

// DailyWeightGT applies the GT predicate on the "dailyWeight" field.
func DailyWeightGT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDailyWeight), v))
	})
}

// DailyWeightGTE applies the GTE predicate on the "dailyWeight" field.
func DailyWeightGTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDailyWeight), v))
	})
}

// DailyWeightLT applies the LT predicate on the "dailyWeight" field.
func DailyWeightLT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDailyWeight), v))
	})
}

// DailyWeightLTE applies the LTE predicate on the "dailyWeight" field.
func DailyWeightLTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDailyWeight), v))
	})
}

// FeedWeightEQ applies the EQ predicate on the "feedWeight" field.
func FeedWeightEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedWeight), v))
	})
}

// FeedWeightNEQ applies the NEQ predicate on the "feedWeight" field.
func FeedWeightNEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedWeight), v))
	})
}

// FeedWeightIn applies the In predicate on the "feedWeight" field.
func FeedWeightIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedWeight), v...))
	})
}

// FeedWeightNotIn applies the NotIn predicate on the "feedWeight" field.
func FeedWeightNotIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedWeight), v...))
	})
}

// FeedWeightGT applies the GT predicate on the "feedWeight" field.
func FeedWeightGT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedWeight), v))
	})
}

// FeedWeightGTE applies the GTE predicate on the "feedWeight" field.
func FeedWeightGTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedWeight), v))
	})
}

// FeedWeightLT applies the LT predicate on the "feedWeight" field.
func FeedWeightLT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedWeight), v))
	})
}

// FeedWeightLTE applies the LTE predicate on the "feedWeight" field.
func FeedWeightLTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedWeight), v))
	})
}

// DailyFeedWeightEQ applies the EQ predicate on the "dailyFeedWeight" field.
func DailyFeedWeightEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDailyFeedWeight), v))
	})
}

// DailyFeedWeightNEQ applies the NEQ predicate on the "dailyFeedWeight" field.
func DailyFeedWeightNEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDailyFeedWeight), v))
	})
}

// DailyFeedWeightIn applies the In predicate on the "dailyFeedWeight" field.
func DailyFeedWeightIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDailyFeedWeight), v...))
	})
}

// DailyFeedWeightNotIn applies the NotIn predicate on the "dailyFeedWeight" field.
func DailyFeedWeightNotIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDailyFeedWeight), v...))
	})
}

// DailyFeedWeightGT applies the GT predicate on the "dailyFeedWeight" field.
func DailyFeedWeightGT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDailyFeedWeight), v))
	})
}

// DailyFeedWeightGTE applies the GTE predicate on the "dailyFeedWeight" field.
func DailyFeedWeightGTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDailyFeedWeight), v))
	})
}

// DailyFeedWeightLT applies the LT predicate on the "dailyFeedWeight" field.
func DailyFeedWeightLT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDailyFeedWeight), v))
	})
}

// DailyFeedWeightLTE applies the LTE predicate on the "dailyFeedWeight" field.
func DailyFeedWeightLTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDailyFeedWeight), v))
	})
}

// ConversionRateEQ applies the EQ predicate on the "conversionRate" field.
func ConversionRateEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConversionRate), v))
	})
}

// ConversionRateNEQ applies the NEQ predicate on the "conversionRate" field.
func ConversionRateNEQ(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConversionRate), v))
	})
}

// ConversionRateIn applies the In predicate on the "conversionRate" field.
func ConversionRateIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldConversionRate), v...))
	})
}

// ConversionRateNotIn applies the NotIn predicate on the "conversionRate" field.
func ConversionRateNotIn(vs ...float32) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldConversionRate), v...))
	})
}

// ConversionRateGT applies the GT predicate on the "conversionRate" field.
func ConversionRateGT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConversionRate), v))
	})
}

// ConversionRateGTE applies the GTE predicate on the "conversionRate" field.
func ConversionRateGTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConversionRate), v))
	})
}

// ConversionRateLT applies the LT predicate on the "conversionRate" field.
func ConversionRateLT(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConversionRate), v))
	})
}

// ConversionRateLTE applies the LTE predicate on the "conversionRate" field.
func ConversionRateLTE(v float32) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConversionRate), v))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.CattleGrow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CattleGrow) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CattleGrow) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CattleGrow) predicate.CattleGrow {
	return predicate.CattleGrow(func(s *sql.Selector) {
		p(s.Not())
	})
}

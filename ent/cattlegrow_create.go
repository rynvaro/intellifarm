// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrow"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleGrowCreate is the builder for creating a CattleGrow entity.
type CattleGrowCreate struct {
	config
	mutation *CattleGrowMutation
	hooks    []Hook
}

// SetName sets the name field.
func (cgc *CattleGrowCreate) SetName(s string) *CattleGrowCreate {
	cgc.mutation.SetName(s)
	return cgc
}

// SetNillableName sets the name field if the given value is not nil.
func (cgc *CattleGrowCreate) SetNillableName(s *string) *CattleGrowCreate {
	if s != nil {
		cgc.SetName(*s)
	}
	return cgc
}

// SetEarNumber sets the earNumber field.
func (cgc *CattleGrowCreate) SetEarNumber(s string) *CattleGrowCreate {
	cgc.mutation.SetEarNumber(s)
	return cgc
}

// SetStage sets the stage field.
func (cgc *CattleGrowCreate) SetStage(s string) *CattleGrowCreate {
	cgc.mutation.SetStage(s)
	return cgc
}

// SetDateStart sets the dateStart field.
func (cgc *CattleGrowCreate) SetDateStart(i int64) *CattleGrowCreate {
	cgc.mutation.SetDateStart(i)
	return cgc
}

// SetDateEnd sets the dateEnd field.
func (cgc *CattleGrowCreate) SetDateEnd(i int64) *CattleGrowCreate {
	cgc.mutation.SetDateEnd(i)
	return cgc
}

// SetWeightStart sets the weightStart field.
func (cgc *CattleGrowCreate) SetWeightStart(f float32) *CattleGrowCreate {
	cgc.mutation.SetWeightStart(f)
	return cgc
}

// SetWeightEnd sets the weightEnd field.
func (cgc *CattleGrowCreate) SetWeightEnd(f float32) *CattleGrowCreate {
	cgc.mutation.SetWeightEnd(f)
	return cgc
}

// SetDailyWeight sets the dailyWeight field.
func (cgc *CattleGrowCreate) SetDailyWeight(f float32) *CattleGrowCreate {
	cgc.mutation.SetDailyWeight(f)
	return cgc
}

// SetFeedWeight sets the feedWeight field.
func (cgc *CattleGrowCreate) SetFeedWeight(f float32) *CattleGrowCreate {
	cgc.mutation.SetFeedWeight(f)
	return cgc
}

// SetDailyFeedWeight sets the dailyFeedWeight field.
func (cgc *CattleGrowCreate) SetDailyFeedWeight(f float32) *CattleGrowCreate {
	cgc.mutation.SetDailyFeedWeight(f)
	return cgc
}

// SetConversionRate sets the conversionRate field.
func (cgc *CattleGrowCreate) SetConversionRate(f float32) *CattleGrowCreate {
	cgc.mutation.SetConversionRate(f)
	return cgc
}

// SetUserName sets the userName field.
func (cgc *CattleGrowCreate) SetUserName(s string) *CattleGrowCreate {
	cgc.mutation.SetUserName(s)
	return cgc
}

// SetRemarks sets the remarks field.
func (cgc *CattleGrowCreate) SetRemarks(s string) *CattleGrowCreate {
	cgc.mutation.SetRemarks(s)
	return cgc
}

// SetCreatedAt sets the createdAt field.
func (cgc *CattleGrowCreate) SetCreatedAt(i int64) *CattleGrowCreate {
	cgc.mutation.SetCreatedAt(i)
	return cgc
}

// SetUpdatedAt sets the updatedAt field.
func (cgc *CattleGrowCreate) SetUpdatedAt(i int64) *CattleGrowCreate {
	cgc.mutation.SetUpdatedAt(i)
	return cgc
}

// SetDeleted sets the deleted field.
func (cgc *CattleGrowCreate) SetDeleted(i int) *CattleGrowCreate {
	cgc.mutation.SetDeleted(i)
	return cgc
}

// Mutation returns the CattleGrowMutation object of the builder.
func (cgc *CattleGrowCreate) Mutation() *CattleGrowMutation {
	return cgc.mutation
}

// Save creates the CattleGrow in the database.
func (cgc *CattleGrowCreate) Save(ctx context.Context) (*CattleGrow, error) {
	var (
		err  error
		node *CattleGrow
	)
	if len(cgc.hooks) == 0 {
		if err = cgc.check(); err != nil {
			return nil, err
		}
		node, err = cgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cgc.check(); err != nil {
				return nil, err
			}
			cgc.mutation = mutation
			node, err = cgc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cgc.hooks) - 1; i >= 0; i-- {
			mut = cgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cgc *CattleGrowCreate) SaveX(ctx context.Context) *CattleGrow {
	v, err := cgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cgc *CattleGrowCreate) check() error {
	if _, ok := cgc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if v, ok := cgc.mutation.EarNumber(); ok {
		if err := cattlegrow.EarNumberValidator(v); err != nil {
			return &ValidationError{Name: "earNumber", err: fmt.Errorf("ent: validator failed for field \"earNumber\": %w", err)}
		}
	}
	if _, ok := cgc.mutation.Stage(); !ok {
		return &ValidationError{Name: "stage", err: errors.New("ent: missing required field \"stage\"")}
	}
	if v, ok := cgc.mutation.Stage(); ok {
		if err := cattlegrow.StageValidator(v); err != nil {
			return &ValidationError{Name: "stage", err: fmt.Errorf("ent: validator failed for field \"stage\": %w", err)}
		}
	}
	if _, ok := cgc.mutation.DateStart(); !ok {
		return &ValidationError{Name: "dateStart", err: errors.New("ent: missing required field \"dateStart\"")}
	}
	if _, ok := cgc.mutation.DateEnd(); !ok {
		return &ValidationError{Name: "dateEnd", err: errors.New("ent: missing required field \"dateEnd\"")}
	}
	if _, ok := cgc.mutation.WeightStart(); !ok {
		return &ValidationError{Name: "weightStart", err: errors.New("ent: missing required field \"weightStart\"")}
	}
	if _, ok := cgc.mutation.WeightEnd(); !ok {
		return &ValidationError{Name: "weightEnd", err: errors.New("ent: missing required field \"weightEnd\"")}
	}
	if _, ok := cgc.mutation.DailyWeight(); !ok {
		return &ValidationError{Name: "dailyWeight", err: errors.New("ent: missing required field \"dailyWeight\"")}
	}
	if _, ok := cgc.mutation.FeedWeight(); !ok {
		return &ValidationError{Name: "feedWeight", err: errors.New("ent: missing required field \"feedWeight\"")}
	}
	if _, ok := cgc.mutation.DailyFeedWeight(); !ok {
		return &ValidationError{Name: "dailyFeedWeight", err: errors.New("ent: missing required field \"dailyFeedWeight\"")}
	}
	if _, ok := cgc.mutation.ConversionRate(); !ok {
		return &ValidationError{Name: "conversionRate", err: errors.New("ent: missing required field \"conversionRate\"")}
	}
	if _, ok := cgc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := cgc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := cgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := cgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := cgc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (cgc *CattleGrowCreate) sqlSave(ctx context.Context) (*CattleGrow, error) {
	_node, _spec := cgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (cgc *CattleGrowCreate) createSpec() (*CattleGrow, *sqlgraph.CreateSpec) {
	var (
		_node = &CattleGrow{config: cgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cattlegrow.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegrow.FieldID,
			},
		}
	)
	if value, ok := cgc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cgc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := cgc.mutation.Stage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldStage,
		})
		_node.Stage = value
	}
	if value, ok := cgc.mutation.DateStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateStart,
		})
		_node.DateStart = value
	}
	if value, ok := cgc.mutation.DateEnd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateEnd,
		})
		_node.DateEnd = value
	}
	if value, ok := cgc.mutation.WeightStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightStart,
		})
		_node.WeightStart = value
	}
	if value, ok := cgc.mutation.WeightEnd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightEnd,
		})
		_node.WeightEnd = value
	}
	if value, ok := cgc.mutation.DailyWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyWeight,
		})
		_node.DailyWeight = value
	}
	if value, ok := cgc.mutation.FeedWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldFeedWeight,
		})
		_node.FeedWeight = value
	}
	if value, ok := cgc.mutation.DailyFeedWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyFeedWeight,
		})
		_node.DailyFeedWeight = value
	}
	if value, ok := cgc.mutation.ConversionRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldConversionRate,
		})
		_node.ConversionRate = value
	}
	if value, ok := cgc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := cgc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := cgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cgc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrow.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// CattleGrowCreateBulk is the builder for creating a bulk of CattleGrow entities.
type CattleGrowCreateBulk struct {
	config
	builders []*CattleGrowCreate
}

// Save creates the CattleGrow entities in the database.
func (cgcb *CattleGrowCreateBulk) Save(ctx context.Context) ([]*CattleGrow, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cgcb.builders))
	nodes := make([]*CattleGrow, len(cgcb.builders))
	mutators := make([]Mutator, len(cgcb.builders))
	for i := range cgcb.builders {
		func(i int, root context.Context) {
			builder := cgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CattleGrowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (cgcb *CattleGrowCreateBulk) SaveX(ctx context.Context) []*CattleGrow {
	v, err := cgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

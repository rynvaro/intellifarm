// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrow"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleGrowUpdate is the builder for updating CattleGrow entities.
type CattleGrowUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleGrowMutation
	predicates []predicate.CattleGrow
}

// Where adds a new predicate for the builder.
func (cgu *CattleGrowUpdate) Where(ps ...predicate.CattleGrow) *CattleGrowUpdate {
	cgu.predicates = append(cgu.predicates, ps...)
	return cgu
}

// SetName sets the name field.
func (cgu *CattleGrowUpdate) SetName(s string) *CattleGrowUpdate {
	cgu.mutation.SetName(s)
	return cgu
}

// SetNillableName sets the name field if the given value is not nil.
func (cgu *CattleGrowUpdate) SetNillableName(s *string) *CattleGrowUpdate {
	if s != nil {
		cgu.SetName(*s)
	}
	return cgu
}

// ClearName clears the value of name.
func (cgu *CattleGrowUpdate) ClearName() *CattleGrowUpdate {
	cgu.mutation.ClearName()
	return cgu
}

// SetEarNumber sets the earNumber field.
func (cgu *CattleGrowUpdate) SetEarNumber(s string) *CattleGrowUpdate {
	cgu.mutation.SetEarNumber(s)
	return cgu
}

// SetStage sets the stage field.
func (cgu *CattleGrowUpdate) SetStage(s string) *CattleGrowUpdate {
	cgu.mutation.SetStage(s)
	return cgu
}

// SetDateStart sets the dateStart field.
func (cgu *CattleGrowUpdate) SetDateStart(i int64) *CattleGrowUpdate {
	cgu.mutation.ResetDateStart()
	cgu.mutation.SetDateStart(i)
	return cgu
}

// AddDateStart adds i to dateStart.
func (cgu *CattleGrowUpdate) AddDateStart(i int64) *CattleGrowUpdate {
	cgu.mutation.AddDateStart(i)
	return cgu
}

// SetDateEnd sets the dateEnd field.
func (cgu *CattleGrowUpdate) SetDateEnd(i int64) *CattleGrowUpdate {
	cgu.mutation.ResetDateEnd()
	cgu.mutation.SetDateEnd(i)
	return cgu
}

// AddDateEnd adds i to dateEnd.
func (cgu *CattleGrowUpdate) AddDateEnd(i int64) *CattleGrowUpdate {
	cgu.mutation.AddDateEnd(i)
	return cgu
}

// SetWeightStart sets the weightStart field.
func (cgu *CattleGrowUpdate) SetWeightStart(f float32) *CattleGrowUpdate {
	cgu.mutation.ResetWeightStart()
	cgu.mutation.SetWeightStart(f)
	return cgu
}

// AddWeightStart adds f to weightStart.
func (cgu *CattleGrowUpdate) AddWeightStart(f float32) *CattleGrowUpdate {
	cgu.mutation.AddWeightStart(f)
	return cgu
}

// SetWeightEnd sets the weightEnd field.
func (cgu *CattleGrowUpdate) SetWeightEnd(f float32) *CattleGrowUpdate {
	cgu.mutation.ResetWeightEnd()
	cgu.mutation.SetWeightEnd(f)
	return cgu
}

// AddWeightEnd adds f to weightEnd.
func (cgu *CattleGrowUpdate) AddWeightEnd(f float32) *CattleGrowUpdate {
	cgu.mutation.AddWeightEnd(f)
	return cgu
}

// SetDailyWeight sets the dailyWeight field.
func (cgu *CattleGrowUpdate) SetDailyWeight(f float32) *CattleGrowUpdate {
	cgu.mutation.ResetDailyWeight()
	cgu.mutation.SetDailyWeight(f)
	return cgu
}

// AddDailyWeight adds f to dailyWeight.
func (cgu *CattleGrowUpdate) AddDailyWeight(f float32) *CattleGrowUpdate {
	cgu.mutation.AddDailyWeight(f)
	return cgu
}

// SetFeedWeight sets the feedWeight field.
func (cgu *CattleGrowUpdate) SetFeedWeight(f float32) *CattleGrowUpdate {
	cgu.mutation.ResetFeedWeight()
	cgu.mutation.SetFeedWeight(f)
	return cgu
}

// AddFeedWeight adds f to feedWeight.
func (cgu *CattleGrowUpdate) AddFeedWeight(f float32) *CattleGrowUpdate {
	cgu.mutation.AddFeedWeight(f)
	return cgu
}

// SetDailyFeedWeight sets the dailyFeedWeight field.
func (cgu *CattleGrowUpdate) SetDailyFeedWeight(f float32) *CattleGrowUpdate {
	cgu.mutation.ResetDailyFeedWeight()
	cgu.mutation.SetDailyFeedWeight(f)
	return cgu
}

// AddDailyFeedWeight adds f to dailyFeedWeight.
func (cgu *CattleGrowUpdate) AddDailyFeedWeight(f float32) *CattleGrowUpdate {
	cgu.mutation.AddDailyFeedWeight(f)
	return cgu
}

// SetConversionRate sets the conversionRate field.
func (cgu *CattleGrowUpdate) SetConversionRate(f float32) *CattleGrowUpdate {
	cgu.mutation.ResetConversionRate()
	cgu.mutation.SetConversionRate(f)
	return cgu
}

// AddConversionRate adds f to conversionRate.
func (cgu *CattleGrowUpdate) AddConversionRate(f float32) *CattleGrowUpdate {
	cgu.mutation.AddConversionRate(f)
	return cgu
}

// SetUserName sets the userName field.
func (cgu *CattleGrowUpdate) SetUserName(s string) *CattleGrowUpdate {
	cgu.mutation.SetUserName(s)
	return cgu
}

// SetRemarks sets the remarks field.
func (cgu *CattleGrowUpdate) SetRemarks(s string) *CattleGrowUpdate {
	cgu.mutation.SetRemarks(s)
	return cgu
}

// SetCreatedAt sets the createdAt field.
func (cgu *CattleGrowUpdate) SetCreatedAt(i int64) *CattleGrowUpdate {
	cgu.mutation.ResetCreatedAt()
	cgu.mutation.SetCreatedAt(i)
	return cgu
}

// AddCreatedAt adds i to createdAt.
func (cgu *CattleGrowUpdate) AddCreatedAt(i int64) *CattleGrowUpdate {
	cgu.mutation.AddCreatedAt(i)
	return cgu
}

// SetUpdatedAt sets the updatedAt field.
func (cgu *CattleGrowUpdate) SetUpdatedAt(i int64) *CattleGrowUpdate {
	cgu.mutation.ResetUpdatedAt()
	cgu.mutation.SetUpdatedAt(i)
	return cgu
}

// AddUpdatedAt adds i to updatedAt.
func (cgu *CattleGrowUpdate) AddUpdatedAt(i int64) *CattleGrowUpdate {
	cgu.mutation.AddUpdatedAt(i)
	return cgu
}

// SetDeleted sets the deleted field.
func (cgu *CattleGrowUpdate) SetDeleted(i int) *CattleGrowUpdate {
	cgu.mutation.ResetDeleted()
	cgu.mutation.SetDeleted(i)
	return cgu
}

// AddDeleted adds i to deleted.
func (cgu *CattleGrowUpdate) AddDeleted(i int) *CattleGrowUpdate {
	cgu.mutation.AddDeleted(i)
	return cgu
}

// Mutation returns the CattleGrowMutation object of the builder.
func (cgu *CattleGrowUpdate) Mutation() *CattleGrowMutation {
	return cgu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cgu *CattleGrowUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cgu.hooks) == 0 {
		if err = cgu.check(); err != nil {
			return 0, err
		}
		affected, err = cgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cgu.check(); err != nil {
				return 0, err
			}
			cgu.mutation = mutation
			affected, err = cgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cgu.hooks) - 1; i >= 0; i-- {
			mut = cgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cgu *CattleGrowUpdate) SaveX(ctx context.Context) int {
	affected, err := cgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgu *CattleGrowUpdate) Exec(ctx context.Context) error {
	_, err := cgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgu *CattleGrowUpdate) ExecX(ctx context.Context) {
	if err := cgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cgu *CattleGrowUpdate) check() error {
	if v, ok := cgu.mutation.EarNumber(); ok {
		if err := cattlegrow.EarNumberValidator(v); err != nil {
			return &ValidationError{Name: "earNumber", err: fmt.Errorf("ent: validator failed for field \"earNumber\": %w", err)}
		}
	}
	if v, ok := cgu.mutation.Stage(); ok {
		if err := cattlegrow.StageValidator(v); err != nil {
			return &ValidationError{Name: "stage", err: fmt.Errorf("ent: validator failed for field \"stage\": %w", err)}
		}
	}
	return nil
}

func (cgu *CattleGrowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegrow.Table,
			Columns: cattlegrow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegrow.FieldID,
			},
		},
	}
	if ps := cgu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldName,
		})
	}
	if cgu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattlegrow.FieldName,
		})
	}
	if value, ok := cgu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldEarNumber,
		})
	}
	if value, ok := cgu.mutation.Stage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldStage,
		})
	}
	if value, ok := cgu.mutation.DateStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateStart,
		})
	}
	if value, ok := cgu.mutation.AddedDateStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateStart,
		})
	}
	if value, ok := cgu.mutation.DateEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateEnd,
		})
	}
	if value, ok := cgu.mutation.AddedDateEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateEnd,
		})
	}
	if value, ok := cgu.mutation.WeightStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightStart,
		})
	}
	if value, ok := cgu.mutation.AddedWeightStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightStart,
		})
	}
	if value, ok := cgu.mutation.WeightEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightEnd,
		})
	}
	if value, ok := cgu.mutation.AddedWeightEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightEnd,
		})
	}
	if value, ok := cgu.mutation.DailyWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyWeight,
		})
	}
	if value, ok := cgu.mutation.AddedDailyWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyWeight,
		})
	}
	if value, ok := cgu.mutation.FeedWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldFeedWeight,
		})
	}
	if value, ok := cgu.mutation.AddedFeedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldFeedWeight,
		})
	}
	if value, ok := cgu.mutation.DailyFeedWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyFeedWeight,
		})
	}
	if value, ok := cgu.mutation.AddedDailyFeedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyFeedWeight,
		})
	}
	if value, ok := cgu.mutation.ConversionRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldConversionRate,
		})
	}
	if value, ok := cgu.mutation.AddedConversionRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldConversionRate,
		})
	}
	if value, ok := cgu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldUserName,
		})
	}
	if value, ok := cgu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldRemarks,
		})
	}
	if value, ok := cgu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldCreatedAt,
		})
	}
	if value, ok := cgu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldCreatedAt,
		})
	}
	if value, ok := cgu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldUpdatedAt,
		})
	}
	if value, ok := cgu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldUpdatedAt,
		})
	}
	if value, ok := cgu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrow.FieldDeleted,
		})
	}
	if value, ok := cgu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrow.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegrow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleGrowUpdateOne is the builder for updating a single CattleGrow entity.
type CattleGrowUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleGrowMutation
}

// SetName sets the name field.
func (cguo *CattleGrowUpdateOne) SetName(s string) *CattleGrowUpdateOne {
	cguo.mutation.SetName(s)
	return cguo
}

// SetNillableName sets the name field if the given value is not nil.
func (cguo *CattleGrowUpdateOne) SetNillableName(s *string) *CattleGrowUpdateOne {
	if s != nil {
		cguo.SetName(*s)
	}
	return cguo
}

// ClearName clears the value of name.
func (cguo *CattleGrowUpdateOne) ClearName() *CattleGrowUpdateOne {
	cguo.mutation.ClearName()
	return cguo
}

// SetEarNumber sets the earNumber field.
func (cguo *CattleGrowUpdateOne) SetEarNumber(s string) *CattleGrowUpdateOne {
	cguo.mutation.SetEarNumber(s)
	return cguo
}

// SetStage sets the stage field.
func (cguo *CattleGrowUpdateOne) SetStage(s string) *CattleGrowUpdateOne {
	cguo.mutation.SetStage(s)
	return cguo
}

// SetDateStart sets the dateStart field.
func (cguo *CattleGrowUpdateOne) SetDateStart(i int64) *CattleGrowUpdateOne {
	cguo.mutation.ResetDateStart()
	cguo.mutation.SetDateStart(i)
	return cguo
}

// AddDateStart adds i to dateStart.
func (cguo *CattleGrowUpdateOne) AddDateStart(i int64) *CattleGrowUpdateOne {
	cguo.mutation.AddDateStart(i)
	return cguo
}

// SetDateEnd sets the dateEnd field.
func (cguo *CattleGrowUpdateOne) SetDateEnd(i int64) *CattleGrowUpdateOne {
	cguo.mutation.ResetDateEnd()
	cguo.mutation.SetDateEnd(i)
	return cguo
}

// AddDateEnd adds i to dateEnd.
func (cguo *CattleGrowUpdateOne) AddDateEnd(i int64) *CattleGrowUpdateOne {
	cguo.mutation.AddDateEnd(i)
	return cguo
}

// SetWeightStart sets the weightStart field.
func (cguo *CattleGrowUpdateOne) SetWeightStart(f float32) *CattleGrowUpdateOne {
	cguo.mutation.ResetWeightStart()
	cguo.mutation.SetWeightStart(f)
	return cguo
}

// AddWeightStart adds f to weightStart.
func (cguo *CattleGrowUpdateOne) AddWeightStart(f float32) *CattleGrowUpdateOne {
	cguo.mutation.AddWeightStart(f)
	return cguo
}

// SetWeightEnd sets the weightEnd field.
func (cguo *CattleGrowUpdateOne) SetWeightEnd(f float32) *CattleGrowUpdateOne {
	cguo.mutation.ResetWeightEnd()
	cguo.mutation.SetWeightEnd(f)
	return cguo
}

// AddWeightEnd adds f to weightEnd.
func (cguo *CattleGrowUpdateOne) AddWeightEnd(f float32) *CattleGrowUpdateOne {
	cguo.mutation.AddWeightEnd(f)
	return cguo
}

// SetDailyWeight sets the dailyWeight field.
func (cguo *CattleGrowUpdateOne) SetDailyWeight(f float32) *CattleGrowUpdateOne {
	cguo.mutation.ResetDailyWeight()
	cguo.mutation.SetDailyWeight(f)
	return cguo
}

// AddDailyWeight adds f to dailyWeight.
func (cguo *CattleGrowUpdateOne) AddDailyWeight(f float32) *CattleGrowUpdateOne {
	cguo.mutation.AddDailyWeight(f)
	return cguo
}

// SetFeedWeight sets the feedWeight field.
func (cguo *CattleGrowUpdateOne) SetFeedWeight(f float32) *CattleGrowUpdateOne {
	cguo.mutation.ResetFeedWeight()
	cguo.mutation.SetFeedWeight(f)
	return cguo
}

// AddFeedWeight adds f to feedWeight.
func (cguo *CattleGrowUpdateOne) AddFeedWeight(f float32) *CattleGrowUpdateOne {
	cguo.mutation.AddFeedWeight(f)
	return cguo
}

// SetDailyFeedWeight sets the dailyFeedWeight field.
func (cguo *CattleGrowUpdateOne) SetDailyFeedWeight(f float32) *CattleGrowUpdateOne {
	cguo.mutation.ResetDailyFeedWeight()
	cguo.mutation.SetDailyFeedWeight(f)
	return cguo
}

// AddDailyFeedWeight adds f to dailyFeedWeight.
func (cguo *CattleGrowUpdateOne) AddDailyFeedWeight(f float32) *CattleGrowUpdateOne {
	cguo.mutation.AddDailyFeedWeight(f)
	return cguo
}

// SetConversionRate sets the conversionRate field.
func (cguo *CattleGrowUpdateOne) SetConversionRate(f float32) *CattleGrowUpdateOne {
	cguo.mutation.ResetConversionRate()
	cguo.mutation.SetConversionRate(f)
	return cguo
}

// AddConversionRate adds f to conversionRate.
func (cguo *CattleGrowUpdateOne) AddConversionRate(f float32) *CattleGrowUpdateOne {
	cguo.mutation.AddConversionRate(f)
	return cguo
}

// SetUserName sets the userName field.
func (cguo *CattleGrowUpdateOne) SetUserName(s string) *CattleGrowUpdateOne {
	cguo.mutation.SetUserName(s)
	return cguo
}

// SetRemarks sets the remarks field.
func (cguo *CattleGrowUpdateOne) SetRemarks(s string) *CattleGrowUpdateOne {
	cguo.mutation.SetRemarks(s)
	return cguo
}

// SetCreatedAt sets the createdAt field.
func (cguo *CattleGrowUpdateOne) SetCreatedAt(i int64) *CattleGrowUpdateOne {
	cguo.mutation.ResetCreatedAt()
	cguo.mutation.SetCreatedAt(i)
	return cguo
}

// AddCreatedAt adds i to createdAt.
func (cguo *CattleGrowUpdateOne) AddCreatedAt(i int64) *CattleGrowUpdateOne {
	cguo.mutation.AddCreatedAt(i)
	return cguo
}

// SetUpdatedAt sets the updatedAt field.
func (cguo *CattleGrowUpdateOne) SetUpdatedAt(i int64) *CattleGrowUpdateOne {
	cguo.mutation.ResetUpdatedAt()
	cguo.mutation.SetUpdatedAt(i)
	return cguo
}

// AddUpdatedAt adds i to updatedAt.
func (cguo *CattleGrowUpdateOne) AddUpdatedAt(i int64) *CattleGrowUpdateOne {
	cguo.mutation.AddUpdatedAt(i)
	return cguo
}

// SetDeleted sets the deleted field.
func (cguo *CattleGrowUpdateOne) SetDeleted(i int) *CattleGrowUpdateOne {
	cguo.mutation.ResetDeleted()
	cguo.mutation.SetDeleted(i)
	return cguo
}

// AddDeleted adds i to deleted.
func (cguo *CattleGrowUpdateOne) AddDeleted(i int) *CattleGrowUpdateOne {
	cguo.mutation.AddDeleted(i)
	return cguo
}

// Mutation returns the CattleGrowMutation object of the builder.
func (cguo *CattleGrowUpdateOne) Mutation() *CattleGrowMutation {
	return cguo.mutation
}

// Save executes the query and returns the updated entity.
func (cguo *CattleGrowUpdateOne) Save(ctx context.Context) (*CattleGrow, error) {
	var (
		err  error
		node *CattleGrow
	)
	if len(cguo.hooks) == 0 {
		if err = cguo.check(); err != nil {
			return nil, err
		}
		node, err = cguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cguo.check(); err != nil {
				return nil, err
			}
			cguo.mutation = mutation
			node, err = cguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cguo.hooks) - 1; i >= 0; i-- {
			mut = cguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cguo *CattleGrowUpdateOne) SaveX(ctx context.Context) *CattleGrow {
	node, err := cguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cguo *CattleGrowUpdateOne) Exec(ctx context.Context) error {
	_, err := cguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cguo *CattleGrowUpdateOne) ExecX(ctx context.Context) {
	if err := cguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cguo *CattleGrowUpdateOne) check() error {
	if v, ok := cguo.mutation.EarNumber(); ok {
		if err := cattlegrow.EarNumberValidator(v); err != nil {
			return &ValidationError{Name: "earNumber", err: fmt.Errorf("ent: validator failed for field \"earNumber\": %w", err)}
		}
	}
	if v, ok := cguo.mutation.Stage(); ok {
		if err := cattlegrow.StageValidator(v); err != nil {
			return &ValidationError{Name: "stage", err: fmt.Errorf("ent: validator failed for field \"stage\": %w", err)}
		}
	}
	return nil
}

func (cguo *CattleGrowUpdateOne) sqlSave(ctx context.Context) (_node *CattleGrow, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegrow.Table,
			Columns: cattlegrow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegrow.FieldID,
			},
		},
	}
	id, ok := cguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CattleGrow.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cguo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldName,
		})
	}
	if cguo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattlegrow.FieldName,
		})
	}
	if value, ok := cguo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldEarNumber,
		})
	}
	if value, ok := cguo.mutation.Stage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldStage,
		})
	}
	if value, ok := cguo.mutation.DateStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateStart,
		})
	}
	if value, ok := cguo.mutation.AddedDateStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateStart,
		})
	}
	if value, ok := cguo.mutation.DateEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateEnd,
		})
	}
	if value, ok := cguo.mutation.AddedDateEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldDateEnd,
		})
	}
	if value, ok := cguo.mutation.WeightStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightStart,
		})
	}
	if value, ok := cguo.mutation.AddedWeightStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightStart,
		})
	}
	if value, ok := cguo.mutation.WeightEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightEnd,
		})
	}
	if value, ok := cguo.mutation.AddedWeightEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldWeightEnd,
		})
	}
	if value, ok := cguo.mutation.DailyWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyWeight,
		})
	}
	if value, ok := cguo.mutation.AddedDailyWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyWeight,
		})
	}
	if value, ok := cguo.mutation.FeedWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldFeedWeight,
		})
	}
	if value, ok := cguo.mutation.AddedFeedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldFeedWeight,
		})
	}
	if value, ok := cguo.mutation.DailyFeedWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyFeedWeight,
		})
	}
	if value, ok := cguo.mutation.AddedDailyFeedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldDailyFeedWeight,
		})
	}
	if value, ok := cguo.mutation.ConversionRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldConversionRate,
		})
	}
	if value, ok := cguo.mutation.AddedConversionRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlegrow.FieldConversionRate,
		})
	}
	if value, ok := cguo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldUserName,
		})
	}
	if value, ok := cguo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrow.FieldRemarks,
		})
	}
	if value, ok := cguo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldCreatedAt,
		})
	}
	if value, ok := cguo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldCreatedAt,
		})
	}
	if value, ok := cguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldUpdatedAt,
		})
	}
	if value, ok := cguo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrow.FieldUpdatedAt,
		})
	}
	if value, ok := cguo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrow.FieldDeleted,
		})
	}
	if value, ok := cguo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrow.FieldDeleted,
		})
	}
	_node = &CattleGrow{config: cguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegrow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

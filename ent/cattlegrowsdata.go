// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsdata"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleGrowsData is the model entity for the CattleGrowsData schema.
type CattleGrowsData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 牛耳号
	EarNumber string `json:"earNumber,omitempty"`
	// 测量日期
	MeasuredAt int64 `json:"measuredAt,omitempty"`
	// 测量人员
	MeasuredBy string `json:"measuredBy,omitempty"`
	// 体重(kg)
	Weight int `json:"weight,omitempty"`
	// 胸围(cm)
	Bust int `json:"bust,omitempty"`
	// 体高(cm)
	Height int `json:"height,omitempty"`
	// 体况评分
	Score int `json:"score,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleGrowsData) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattlegrowsdata.FieldID, cattlegrowsdata.FieldCattleId, cattlegrowsdata.FieldTenantId, cattlegrowsdata.FieldFarmId, cattlegrowsdata.FieldShedId, cattlegrowsdata.FieldMeasuredAt, cattlegrowsdata.FieldWeight, cattlegrowsdata.FieldBust, cattlegrowsdata.FieldHeight, cattlegrowsdata.FieldScore, cattlegrowsdata.FieldCreatedAt, cattlegrowsdata.FieldUpdatedAt, cattlegrowsdata.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattlegrowsdata.FieldTenantName, cattlegrowsdata.FieldFarmName, cattlegrowsdata.FieldShedName, cattlegrowsdata.FieldName, cattlegrowsdata.FieldEarNumber, cattlegrowsdata.FieldMeasuredBy, cattlegrowsdata.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleGrowsData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleGrowsData fields.
func (cgd *CattleGrowsData) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattlegrowsdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cgd.ID = int(value.Int64)
		case cattlegrowsdata.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				cgd.CattleId = value.Int64
			}
		case cattlegrowsdata.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cgd.TenantId = value.Int64
			}
		case cattlegrowsdata.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				cgd.TenantName = value.String
			}
		case cattlegrowsdata.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				cgd.FarmId = value.Int64
			}
		case cattlegrowsdata.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				cgd.FarmName = value.String
			}
		case cattlegrowsdata.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				cgd.ShedId = value.Int64
			}
		case cattlegrowsdata.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				cgd.ShedName = value.String
			}
		case cattlegrowsdata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cgd.Name = value.String
			}
		case cattlegrowsdata.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				cgd.EarNumber = value.String
			}
		case cattlegrowsdata.FieldMeasuredAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field measuredAt", values[i])
			} else if value.Valid {
				cgd.MeasuredAt = value.Int64
			}
		case cattlegrowsdata.FieldMeasuredBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field measuredBy", values[i])
			} else if value.Valid {
				cgd.MeasuredBy = value.String
			}
		case cattlegrowsdata.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				cgd.Weight = int(value.Int64)
			}
		case cattlegrowsdata.FieldBust:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bust", values[i])
			} else if value.Valid {
				cgd.Bust = int(value.Int64)
			}
		case cattlegrowsdata.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				cgd.Height = int(value.Int64)
			}
		case cattlegrowsdata.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				cgd.Score = int(value.Int64)
			}
		case cattlegrowsdata.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				cgd.Remarks = value.String
			}
		case cattlegrowsdata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cgd.CreatedAt = value.Int64
			}
		case cattlegrowsdata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cgd.UpdatedAt = value.Int64
			}
		case cattlegrowsdata.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cgd.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleGrowsData.
// Note that you need to call CattleGrowsData.Unwrap() before calling this method if this CattleGrowsData
// was returned from a transaction, and the transaction was committed or rolled back.
func (cgd *CattleGrowsData) Update() *CattleGrowsDataUpdateOne {
	return (&CattleGrowsDataClient{config: cgd.config}).UpdateOne(cgd)
}

// Unwrap unwraps the CattleGrowsData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cgd *CattleGrowsData) Unwrap() *CattleGrowsData {
	_tx, ok := cgd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleGrowsData is not a transactional entity")
	}
	cgd.config.driver = _tx.drv
	return cgd
}

// String implements the fmt.Stringer.
func (cgd *CattleGrowsData) String() string {
	var builder strings.Builder
	builder.WriteString("CattleGrowsData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cgd.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", cgd.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cgd.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(cgd.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", cgd.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(cgd.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", cgd.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(cgd.ShedName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cgd.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(cgd.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("measuredAt=")
	builder.WriteString(fmt.Sprintf("%v", cgd.MeasuredAt))
	builder.WriteString(", ")
	builder.WriteString("measuredBy=")
	builder.WriteString(cgd.MeasuredBy)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", cgd.Weight))
	builder.WriteString(", ")
	builder.WriteString("bust=")
	builder.WriteString(fmt.Sprintf("%v", cgd.Bust))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", cgd.Height))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", cgd.Score))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(cgd.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cgd.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cgd.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cgd.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleGrowsDataSlice is a parsable slice of CattleGrowsData.
type CattleGrowsDataSlice []*CattleGrowsData

func (cgd CattleGrowsDataSlice) config(cfg config) {
	for _i := range cgd {
		cgd[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsdata"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// CattleGrowsData is the model entity for the CattleGrowsData schema.
type CattleGrowsData struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// MeasuredAt holds the value of the "measuredAt" field.
	MeasuredAt int64 `json:"measuredAt,omitempty"`
	// MeasuredBy holds the value of the "measuredBy" field.
	MeasuredBy string `json:"measuredBy,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int `json:"weight,omitempty"`
	// Bust holds the value of the "bust" field.
	Bust int `json:"bust,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleGrowsData) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // earNumber
		&sql.NullString{}, // shedName
		&sql.NullInt64{},  // measuredAt
		&sql.NullString{}, // measuredBy
		&sql.NullInt64{},  // weight
		&sql.NullInt64{},  // bust
		&sql.NullInt64{},  // height
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleGrowsData fields.
func (cgd *CattleGrowsData) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cattlegrowsdata.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cgd.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		cgd.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[1])
	} else if value.Valid {
		cgd.EarNumber = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[2])
	} else if value.Valid {
		cgd.ShedName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field measuredAt", values[3])
	} else if value.Valid {
		cgd.MeasuredAt = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field measuredBy", values[4])
	} else if value.Valid {
		cgd.MeasuredBy = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field weight", values[5])
	} else if value.Valid {
		cgd.Weight = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field bust", values[6])
	} else if value.Valid {
		cgd.Bust = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field height", values[7])
	} else if value.Valid {
		cgd.Height = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[8])
	} else if value.Valid {
		cgd.Remarks = value.String
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[9])
	} else if value.Valid {
		cgd.CreatedAt = value.Int64
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[10])
	} else if value.Valid {
		cgd.UpdatedAt = value.Int64
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[11])
	} else if value.Valid {
		cgd.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this CattleGrowsData.
// Note that, you need to call CattleGrowsData.Unwrap() before calling this method, if this CattleGrowsData
// was returned from a transaction, and the transaction was committed or rolled back.
func (cgd *CattleGrowsData) Update() *CattleGrowsDataUpdateOne {
	return (&CattleGrowsDataClient{config: cgd.config}).UpdateOne(cgd)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cgd *CattleGrowsData) Unwrap() *CattleGrowsData {
	tx, ok := cgd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleGrowsData is not a transactional entity")
	}
	cgd.config.driver = tx.drv
	return cgd
}

// String implements the fmt.Stringer.
func (cgd *CattleGrowsData) String() string {
	var builder strings.Builder
	builder.WriteString("CattleGrowsData(")
	builder.WriteString(fmt.Sprintf("id=%v", cgd.ID))
	builder.WriteString(", name=")
	builder.WriteString(cgd.Name)
	builder.WriteString(", earNumber=")
	builder.WriteString(cgd.EarNumber)
	builder.WriteString(", shedName=")
	builder.WriteString(cgd.ShedName)
	builder.WriteString(", measuredAt=")
	builder.WriteString(fmt.Sprintf("%v", cgd.MeasuredAt))
	builder.WriteString(", measuredBy=")
	builder.WriteString(cgd.MeasuredBy)
	builder.WriteString(", weight=")
	builder.WriteString(fmt.Sprintf("%v", cgd.Weight))
	builder.WriteString(", bust=")
	builder.WriteString(fmt.Sprintf("%v", cgd.Bust))
	builder.WriteString(", height=")
	builder.WriteString(fmt.Sprintf("%v", cgd.Height))
	builder.WriteString(", remarks=")
	builder.WriteString(cgd.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cgd.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cgd.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", cgd.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleGrowsDataSlice is a parsable slice of CattleGrowsData.
type CattleGrowsDataSlice []*CattleGrowsData

func (cgd CattleGrowsDataSlice) config(cfg config) {
	for _i := range cgd {
		cgd[_i].config = cfg
	}
}

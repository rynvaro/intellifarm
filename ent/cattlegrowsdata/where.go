// Code generated by ent, DO NOT EDIT.

package cattlegrowsdata

import (
	"cattleai/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CattleId applies equality check predicate on the "cattleId" field. It's identical to CattleIdEQ.
func CattleId(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCattleId), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// FarmId applies equality check predicate on the "farmId" field. It's identical to FarmIdEQ.
func FarmId(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmName applies equality check predicate on the "farmName" field. It's identical to FarmNameEQ.
func FarmName(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// ShedId applies equality check predicate on the "shedId" field. It's identical to ShedIdEQ.
func ShedId(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedId), v))
	})
}

// ShedName applies equality check predicate on the "shedName" field. It's identical to ShedNameEQ.
func ShedName(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// EarNumber applies equality check predicate on the "earNumber" field. It's identical to EarNumberEQ.
func EarNumber(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// MeasuredAt applies equality check predicate on the "measuredAt" field. It's identical to MeasuredAtEQ.
func MeasuredAt(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeasuredAt), v))
	})
}

// MeasuredBy applies equality check predicate on the "measuredBy" field. It's identical to MeasuredByEQ.
func MeasuredBy(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeasuredBy), v))
	})
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// Bust applies equality check predicate on the "bust" field. It's identical to BustEQ.
func Bust(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBust), v))
	})
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// CattleIdEQ applies the EQ predicate on the "cattleId" field.
func CattleIdEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCattleId), v))
	})
}

// CattleIdNEQ applies the NEQ predicate on the "cattleId" field.
func CattleIdNEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCattleId), v))
	})
}

// CattleIdIn applies the In predicate on the "cattleId" field.
func CattleIdIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCattleId), v...))
	})
}

// CattleIdNotIn applies the NotIn predicate on the "cattleId" field.
func CattleIdNotIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCattleId), v...))
	})
}

// CattleIdGT applies the GT predicate on the "cattleId" field.
func CattleIdGT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCattleId), v))
	})
}

// CattleIdGTE applies the GTE predicate on the "cattleId" field.
func CattleIdGTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCattleId), v))
	})
}

// CattleIdLT applies the LT predicate on the "cattleId" field.
func CattleIdLT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCattleId), v))
	})
}

// CattleIdLTE applies the LTE predicate on the "cattleId" field.
func CattleIdLTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCattleId), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// FarmIdEQ applies the EQ predicate on the "farmId" field.
func FarmIdEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmIdNEQ applies the NEQ predicate on the "farmId" field.
func FarmIdNEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmId), v))
	})
}

// FarmIdIn applies the In predicate on the "farmId" field.
func FarmIdIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFarmId), v...))
	})
}

// FarmIdNotIn applies the NotIn predicate on the "farmId" field.
func FarmIdNotIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFarmId), v...))
	})
}

// FarmIdGT applies the GT predicate on the "farmId" field.
func FarmIdGT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmId), v))
	})
}

// FarmIdGTE applies the GTE predicate on the "farmId" field.
func FarmIdGTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmId), v))
	})
}

// FarmIdLT applies the LT predicate on the "farmId" field.
func FarmIdLT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmId), v))
	})
}

// FarmIdLTE applies the LTE predicate on the "farmId" field.
func FarmIdLTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmId), v))
	})
}

// FarmNameEQ applies the EQ predicate on the "farmName" field.
func FarmNameEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// FarmNameNEQ applies the NEQ predicate on the "farmName" field.
func FarmNameNEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmName), v))
	})
}

// FarmNameIn applies the In predicate on the "farmName" field.
func FarmNameIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFarmName), v...))
	})
}

// FarmNameNotIn applies the NotIn predicate on the "farmName" field.
func FarmNameNotIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFarmName), v...))
	})
}

// FarmNameGT applies the GT predicate on the "farmName" field.
func FarmNameGT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmName), v))
	})
}

// FarmNameGTE applies the GTE predicate on the "farmName" field.
func FarmNameGTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmName), v))
	})
}

// FarmNameLT applies the LT predicate on the "farmName" field.
func FarmNameLT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmName), v))
	})
}

// FarmNameLTE applies the LTE predicate on the "farmName" field.
func FarmNameLTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmName), v))
	})
}

// FarmNameContains applies the Contains predicate on the "farmName" field.
func FarmNameContains(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFarmName), v))
	})
}

// FarmNameHasPrefix applies the HasPrefix predicate on the "farmName" field.
func FarmNameHasPrefix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFarmName), v))
	})
}

// FarmNameHasSuffix applies the HasSuffix predicate on the "farmName" field.
func FarmNameHasSuffix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFarmName), v))
	})
}

// FarmNameEqualFold applies the EqualFold predicate on the "farmName" field.
func FarmNameEqualFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFarmName), v))
	})
}

// FarmNameContainsFold applies the ContainsFold predicate on the "farmName" field.
func FarmNameContainsFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFarmName), v))
	})
}

// ShedIdEQ applies the EQ predicate on the "shedId" field.
func ShedIdEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedId), v))
	})
}

// ShedIdNEQ applies the NEQ predicate on the "shedId" field.
func ShedIdNEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedId), v))
	})
}

// ShedIdIn applies the In predicate on the "shedId" field.
func ShedIdIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedId), v...))
	})
}

// ShedIdNotIn applies the NotIn predicate on the "shedId" field.
func ShedIdNotIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedId), v...))
	})
}

// ShedIdGT applies the GT predicate on the "shedId" field.
func ShedIdGT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedId), v))
	})
}

// ShedIdGTE applies the GTE predicate on the "shedId" field.
func ShedIdGTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedId), v))
	})
}

// ShedIdLT applies the LT predicate on the "shedId" field.
func ShedIdLT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedId), v))
	})
}

// ShedIdLTE applies the LTE predicate on the "shedId" field.
func ShedIdLTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedId), v))
	})
}

// ShedNameEQ applies the EQ predicate on the "shedName" field.
func ShedNameEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// ShedNameNEQ applies the NEQ predicate on the "shedName" field.
func ShedNameNEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedName), v))
	})
}

// ShedNameIn applies the In predicate on the "shedName" field.
func ShedNameIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedName), v...))
	})
}

// ShedNameNotIn applies the NotIn predicate on the "shedName" field.
func ShedNameNotIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedName), v...))
	})
}

// ShedNameGT applies the GT predicate on the "shedName" field.
func ShedNameGT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedName), v))
	})
}

// ShedNameGTE applies the GTE predicate on the "shedName" field.
func ShedNameGTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedName), v))
	})
}

// ShedNameLT applies the LT predicate on the "shedName" field.
func ShedNameLT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedName), v))
	})
}

// ShedNameLTE applies the LTE predicate on the "shedName" field.
func ShedNameLTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedName), v))
	})
}

// ShedNameContains applies the Contains predicate on the "shedName" field.
func ShedNameContains(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedName), v))
	})
}

// ShedNameHasPrefix applies the HasPrefix predicate on the "shedName" field.
func ShedNameHasPrefix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedName), v))
	})
}

// ShedNameHasSuffix applies the HasSuffix predicate on the "shedName" field.
func ShedNameHasSuffix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedName), v))
	})
}

// ShedNameEqualFold applies the EqualFold predicate on the "shedName" field.
func ShedNameEqualFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedName), v))
	})
}

// ShedNameContainsFold applies the ContainsFold predicate on the "shedName" field.
func ShedNameContainsFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedName), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EarNumberEQ applies the EQ predicate on the "earNumber" field.
func EarNumberEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberNEQ applies the NEQ predicate on the "earNumber" field.
func EarNumberNEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberIn applies the In predicate on the "earNumber" field.
func EarNumberIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEarNumber), v...))
	})
}

// EarNumberNotIn applies the NotIn predicate on the "earNumber" field.
func EarNumberNotIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEarNumber), v...))
	})
}

// EarNumberGT applies the GT predicate on the "earNumber" field.
func EarNumberGT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEarNumber), v))
	})
}

// EarNumberGTE applies the GTE predicate on the "earNumber" field.
func EarNumberGTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberLT applies the LT predicate on the "earNumber" field.
func EarNumberLT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEarNumber), v))
	})
}

// EarNumberLTE applies the LTE predicate on the "earNumber" field.
func EarNumberLTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberContains applies the Contains predicate on the "earNumber" field.
func EarNumberContains(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasPrefix applies the HasPrefix predicate on the "earNumber" field.
func EarNumberHasPrefix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasSuffix applies the HasSuffix predicate on the "earNumber" field.
func EarNumberHasSuffix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEarNumber), v))
	})
}

// EarNumberEqualFold applies the EqualFold predicate on the "earNumber" field.
func EarNumberEqualFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEarNumber), v))
	})
}

// EarNumberContainsFold applies the ContainsFold predicate on the "earNumber" field.
func EarNumberContainsFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEarNumber), v))
	})
}

// MeasuredAtEQ applies the EQ predicate on the "measuredAt" field.
func MeasuredAtEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeasuredAt), v))
	})
}

// MeasuredAtNEQ applies the NEQ predicate on the "measuredAt" field.
func MeasuredAtNEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMeasuredAt), v))
	})
}

// MeasuredAtIn applies the In predicate on the "measuredAt" field.
func MeasuredAtIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMeasuredAt), v...))
	})
}

// MeasuredAtNotIn applies the NotIn predicate on the "measuredAt" field.
func MeasuredAtNotIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMeasuredAt), v...))
	})
}

// MeasuredAtGT applies the GT predicate on the "measuredAt" field.
func MeasuredAtGT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMeasuredAt), v))
	})
}

// MeasuredAtGTE applies the GTE predicate on the "measuredAt" field.
func MeasuredAtGTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMeasuredAt), v))
	})
}

// MeasuredAtLT applies the LT predicate on the "measuredAt" field.
func MeasuredAtLT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMeasuredAt), v))
	})
}

// MeasuredAtLTE applies the LTE predicate on the "measuredAt" field.
func MeasuredAtLTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMeasuredAt), v))
	})
}

// MeasuredByEQ applies the EQ predicate on the "measuredBy" field.
func MeasuredByEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByNEQ applies the NEQ predicate on the "measuredBy" field.
func MeasuredByNEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByIn applies the In predicate on the "measuredBy" field.
func MeasuredByIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMeasuredBy), v...))
	})
}

// MeasuredByNotIn applies the NotIn predicate on the "measuredBy" field.
func MeasuredByNotIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMeasuredBy), v...))
	})
}

// MeasuredByGT applies the GT predicate on the "measuredBy" field.
func MeasuredByGT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByGTE applies the GTE predicate on the "measuredBy" field.
func MeasuredByGTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByLT applies the LT predicate on the "measuredBy" field.
func MeasuredByLT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByLTE applies the LTE predicate on the "measuredBy" field.
func MeasuredByLTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByContains applies the Contains predicate on the "measuredBy" field.
func MeasuredByContains(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByHasPrefix applies the HasPrefix predicate on the "measuredBy" field.
func MeasuredByHasPrefix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByHasSuffix applies the HasSuffix predicate on the "measuredBy" field.
func MeasuredByHasSuffix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByEqualFold applies the EqualFold predicate on the "measuredBy" field.
func MeasuredByEqualFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMeasuredBy), v))
	})
}

// MeasuredByContainsFold applies the ContainsFold predicate on the "measuredBy" field.
func MeasuredByContainsFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMeasuredBy), v))
	})
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeight), v))
	})
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeight), v...))
	})
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeight), v...))
	})
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeight), v))
	})
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeight), v))
	})
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeight), v))
	})
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeight), v))
	})
}

// BustEQ applies the EQ predicate on the "bust" field.
func BustEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBust), v))
	})
}

// BustNEQ applies the NEQ predicate on the "bust" field.
func BustNEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBust), v))
	})
}

// BustIn applies the In predicate on the "bust" field.
func BustIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBust), v...))
	})
}

// BustNotIn applies the NotIn predicate on the "bust" field.
func BustNotIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBust), v...))
	})
}

// BustGT applies the GT predicate on the "bust" field.
func BustGT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBust), v))
	})
}

// BustGTE applies the GTE predicate on the "bust" field.
func BustGTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBust), v))
	})
}

// BustLT applies the LT predicate on the "bust" field.
func BustLT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBust), v))
	})
}

// BustLTE applies the LTE predicate on the "bust" field.
func BustLTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBust), v))
	})
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeight), v))
	})
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeight), v...))
	})
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeight), v...))
	})
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeight), v))
	})
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeight), v))
	})
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeight), v))
	})
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeight), v))
	})
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScore), v))
	})
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldScore), v...))
	})
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldScore), v...))
	})
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScore), v))
	})
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScore), v))
	})
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScore), v))
	})
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScore), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.CattleGrowsData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CattleGrowsData) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CattleGrowsData) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CattleGrowsData) predicate.CattleGrowsData {
	return predicate.CattleGrowsData(func(s *sql.Selector) {
		p(s.Not())
	})
}

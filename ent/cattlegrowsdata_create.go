// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsdata"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleGrowsDataCreate is the builder for creating a CattleGrowsData entity.
type CattleGrowsDataCreate struct {
	config
	mutation *CattleGrowsDataMutation
	hooks    []Hook
}

// SetName sets the name field.
func (cgdc *CattleGrowsDataCreate) SetName(s string) *CattleGrowsDataCreate {
	cgdc.mutation.SetName(s)
	return cgdc
}

// SetNillableName sets the name field if the given value is not nil.
func (cgdc *CattleGrowsDataCreate) SetNillableName(s *string) *CattleGrowsDataCreate {
	if s != nil {
		cgdc.SetName(*s)
	}
	return cgdc
}

// SetEarNumber sets the earNumber field.
func (cgdc *CattleGrowsDataCreate) SetEarNumber(s string) *CattleGrowsDataCreate {
	cgdc.mutation.SetEarNumber(s)
	return cgdc
}

// SetShedName sets the shedName field.
func (cgdc *CattleGrowsDataCreate) SetShedName(s string) *CattleGrowsDataCreate {
	cgdc.mutation.SetShedName(s)
	return cgdc
}

// SetMeasuredAt sets the measuredAt field.
func (cgdc *CattleGrowsDataCreate) SetMeasuredAt(i int64) *CattleGrowsDataCreate {
	cgdc.mutation.SetMeasuredAt(i)
	return cgdc
}

// SetMeasuredBy sets the measuredBy field.
func (cgdc *CattleGrowsDataCreate) SetMeasuredBy(s string) *CattleGrowsDataCreate {
	cgdc.mutation.SetMeasuredBy(s)
	return cgdc
}

// SetWeight sets the weight field.
func (cgdc *CattleGrowsDataCreate) SetWeight(i int) *CattleGrowsDataCreate {
	cgdc.mutation.SetWeight(i)
	return cgdc
}

// SetBust sets the bust field.
func (cgdc *CattleGrowsDataCreate) SetBust(i int) *CattleGrowsDataCreate {
	cgdc.mutation.SetBust(i)
	return cgdc
}

// SetHeight sets the height field.
func (cgdc *CattleGrowsDataCreate) SetHeight(i int) *CattleGrowsDataCreate {
	cgdc.mutation.SetHeight(i)
	return cgdc
}

// SetTenantId sets the tenantId field.
func (cgdc *CattleGrowsDataCreate) SetTenantId(i int64) *CattleGrowsDataCreate {
	cgdc.mutation.SetTenantId(i)
	return cgdc
}

// SetTenantName sets the tenantName field.
func (cgdc *CattleGrowsDataCreate) SetTenantName(s string) *CattleGrowsDataCreate {
	cgdc.mutation.SetTenantName(s)
	return cgdc
}

// SetRemarks sets the remarks field.
func (cgdc *CattleGrowsDataCreate) SetRemarks(s string) *CattleGrowsDataCreate {
	cgdc.mutation.SetRemarks(s)
	return cgdc
}

// SetCreatedAt sets the createdAt field.
func (cgdc *CattleGrowsDataCreate) SetCreatedAt(i int64) *CattleGrowsDataCreate {
	cgdc.mutation.SetCreatedAt(i)
	return cgdc
}

// SetUpdatedAt sets the updatedAt field.
func (cgdc *CattleGrowsDataCreate) SetUpdatedAt(i int64) *CattleGrowsDataCreate {
	cgdc.mutation.SetUpdatedAt(i)
	return cgdc
}

// SetDeleted sets the deleted field.
func (cgdc *CattleGrowsDataCreate) SetDeleted(i int) *CattleGrowsDataCreate {
	cgdc.mutation.SetDeleted(i)
	return cgdc
}

// Mutation returns the CattleGrowsDataMutation object of the builder.
func (cgdc *CattleGrowsDataCreate) Mutation() *CattleGrowsDataMutation {
	return cgdc.mutation
}

// Save creates the CattleGrowsData in the database.
func (cgdc *CattleGrowsDataCreate) Save(ctx context.Context) (*CattleGrowsData, error) {
	var (
		err  error
		node *CattleGrowsData
	)
	if len(cgdc.hooks) == 0 {
		if err = cgdc.check(); err != nil {
			return nil, err
		}
		node, err = cgdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowsDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cgdc.check(); err != nil {
				return nil, err
			}
			cgdc.mutation = mutation
			node, err = cgdc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cgdc.hooks) - 1; i >= 0; i-- {
			mut = cgdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cgdc *CattleGrowsDataCreate) SaveX(ctx context.Context) *CattleGrowsData {
	v, err := cgdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cgdc *CattleGrowsDataCreate) check() error {
	if _, ok := cgdc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if _, ok := cgdc.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New("ent: missing required field \"shedName\"")}
	}
	if _, ok := cgdc.mutation.MeasuredAt(); !ok {
		return &ValidationError{Name: "measuredAt", err: errors.New("ent: missing required field \"measuredAt\"")}
	}
	if _, ok := cgdc.mutation.MeasuredBy(); !ok {
		return &ValidationError{Name: "measuredBy", err: errors.New("ent: missing required field \"measuredBy\"")}
	}
	if _, ok := cgdc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New("ent: missing required field \"weight\"")}
	}
	if _, ok := cgdc.mutation.Bust(); !ok {
		return &ValidationError{Name: "bust", err: errors.New("ent: missing required field \"bust\"")}
	}
	if _, ok := cgdc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New("ent: missing required field \"height\"")}
	}
	if _, ok := cgdc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := cgdc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := cgdc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := cgdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := cgdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := cgdc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (cgdc *CattleGrowsDataCreate) sqlSave(ctx context.Context) (*CattleGrowsData, error) {
	_node, _spec := cgdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgdc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (cgdc *CattleGrowsDataCreate) createSpec() (*CattleGrowsData, *sqlgraph.CreateSpec) {
	var (
		_node = &CattleGrowsData{config: cgdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cattlegrowsdata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegrowsdata.FieldID,
			},
		}
	)
	if value, ok := cgdc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cgdc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := cgdc.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := cgdc.mutation.MeasuredAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredAt,
		})
		_node.MeasuredAt = value
	}
	if value, ok := cgdc.mutation.MeasuredBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredBy,
		})
		_node.MeasuredBy = value
	}
	if value, ok := cgdc.mutation.Weight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldWeight,
		})
		_node.Weight = value
	}
	if value, ok := cgdc.mutation.Bust(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldBust,
		})
		_node.Bust = value
	}
	if value, ok := cgdc.mutation.Height(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldHeight,
		})
		_node.Height = value
	}
	if value, ok := cgdc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := cgdc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := cgdc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := cgdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cgdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cgdc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// CattleGrowsDataCreateBulk is the builder for creating a bulk of CattleGrowsData entities.
type CattleGrowsDataCreateBulk struct {
	config
	builders []*CattleGrowsDataCreate
}

// Save creates the CattleGrowsData entities in the database.
func (cgdcb *CattleGrowsDataCreateBulk) Save(ctx context.Context) ([]*CattleGrowsData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cgdcb.builders))
	nodes := make([]*CattleGrowsData, len(cgdcb.builders))
	mutators := make([]Mutator, len(cgdcb.builders))
	for i := range cgdcb.builders {
		func(i int, root context.Context) {
			builder := cgdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CattleGrowsDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgdcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgdcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (cgdcb *CattleGrowsDataCreateBulk) SaveX(ctx context.Context) []*CattleGrowsData {
	v, err := cgdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsdata"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleGrowsDataQuery is the builder for querying CattleGrowsData entities.
type CattleGrowsDataQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.CattleGrowsData
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (cgdq *CattleGrowsDataQuery) Where(ps ...predicate.CattleGrowsData) *CattleGrowsDataQuery {
	cgdq.predicates = append(cgdq.predicates, ps...)
	return cgdq
}

// Limit adds a limit step to the query.
func (cgdq *CattleGrowsDataQuery) Limit(limit int) *CattleGrowsDataQuery {
	cgdq.limit = &limit
	return cgdq
}

// Offset adds an offset step to the query.
func (cgdq *CattleGrowsDataQuery) Offset(offset int) *CattleGrowsDataQuery {
	cgdq.offset = &offset
	return cgdq
}

// Order adds an order step to the query.
func (cgdq *CattleGrowsDataQuery) Order(o ...OrderFunc) *CattleGrowsDataQuery {
	cgdq.order = append(cgdq.order, o...)
	return cgdq
}

// First returns the first CattleGrowsData entity in the query. Returns *NotFoundError when no cattlegrowsdata was found.
func (cgdq *CattleGrowsDataQuery) First(ctx context.Context) (*CattleGrowsData, error) {
	nodes, err := cgdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cattlegrowsdata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cgdq *CattleGrowsDataQuery) FirstX(ctx context.Context) *CattleGrowsData {
	node, err := cgdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CattleGrowsData id in the query. Returns *NotFoundError when no id was found.
func (cgdq *CattleGrowsDataQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cgdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cattlegrowsdata.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (cgdq *CattleGrowsDataQuery) FirstXID(ctx context.Context) int64 {
	id, err := cgdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only CattleGrowsData entity in the query, returns an error if not exactly one entity was returned.
func (cgdq *CattleGrowsDataQuery) Only(ctx context.Context) (*CattleGrowsData, error) {
	nodes, err := cgdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cattlegrowsdata.Label}
	default:
		return nil, &NotSingularError{cattlegrowsdata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cgdq *CattleGrowsDataQuery) OnlyX(ctx context.Context) *CattleGrowsData {
	node, err := cgdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only CattleGrowsData id in the query, returns an error if not exactly one id was returned.
func (cgdq *CattleGrowsDataQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cgdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cattlegrowsdata.Label}
	default:
		err = &NotSingularError{cattlegrowsdata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cgdq *CattleGrowsDataQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := cgdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CattleGrowsDataSlice.
func (cgdq *CattleGrowsDataQuery) All(ctx context.Context) ([]*CattleGrowsData, error) {
	if err := cgdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cgdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cgdq *CattleGrowsDataQuery) AllX(ctx context.Context) []*CattleGrowsData {
	nodes, err := cgdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CattleGrowsData ids.
func (cgdq *CattleGrowsDataQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := cgdq.Select(cattlegrowsdata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cgdq *CattleGrowsDataQuery) IDsX(ctx context.Context) []int64 {
	ids, err := cgdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cgdq *CattleGrowsDataQuery) Count(ctx context.Context) (int, error) {
	if err := cgdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cgdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cgdq *CattleGrowsDataQuery) CountX(ctx context.Context) int {
	count, err := cgdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cgdq *CattleGrowsDataQuery) Exist(ctx context.Context) (bool, error) {
	if err := cgdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cgdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cgdq *CattleGrowsDataQuery) ExistX(ctx context.Context) bool {
	exist, err := cgdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cgdq *CattleGrowsDataQuery) Clone() *CattleGrowsDataQuery {
	return &CattleGrowsDataQuery{
		config:     cgdq.config,
		limit:      cgdq.limit,
		offset:     cgdq.offset,
		order:      append([]OrderFunc{}, cgdq.order...),
		unique:     append([]string{}, cgdq.unique...),
		predicates: append([]predicate.CattleGrowsData{}, cgdq.predicates...),
		// clone intermediate query.
		sql:  cgdq.sql.Clone(),
		path: cgdq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CattleGrowsData.Query().
//		GroupBy(cattlegrowsdata.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cgdq *CattleGrowsDataQuery) GroupBy(field string, fields ...string) *CattleGrowsDataGroupBy {
	group := &CattleGrowsDataGroupBy{config: cgdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cgdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cgdq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.CattleGrowsData.Query().
//		Select(cattlegrowsdata.FieldName).
//		Scan(ctx, &v)
//
func (cgdq *CattleGrowsDataQuery) Select(field string, fields ...string) *CattleGrowsDataSelect {
	selector := &CattleGrowsDataSelect{config: cgdq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cgdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cgdq.sqlQuery(), nil
	}
	return selector
}

func (cgdq *CattleGrowsDataQuery) prepareQuery(ctx context.Context) error {
	if cgdq.path != nil {
		prev, err := cgdq.path(ctx)
		if err != nil {
			return err
		}
		cgdq.sql = prev
	}
	return nil
}

func (cgdq *CattleGrowsDataQuery) sqlAll(ctx context.Context) ([]*CattleGrowsData, error) {
	var (
		nodes = []*CattleGrowsData{}
		_spec = cgdq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &CattleGrowsData{config: cgdq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, cgdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (cgdq *CattleGrowsDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cgdq.querySpec()
	return sqlgraph.CountNodes(ctx, cgdq.driver, _spec)
}

func (cgdq *CattleGrowsDataQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cgdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (cgdq *CattleGrowsDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegrowsdata.Table,
			Columns: cattlegrowsdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegrowsdata.FieldID,
			},
		},
		From:   cgdq.sql,
		Unique: true,
	}
	if ps := cgdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cgdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cgdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cgdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, cattlegrowsdata.ValidColumn)
			}
		}
	}
	return _spec
}

func (cgdq *CattleGrowsDataQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(cgdq.driver.Dialect())
	t1 := builder.Table(cattlegrowsdata.Table)
	selector := builder.Select(t1.Columns(cattlegrowsdata.Columns...)...).From(t1)
	if cgdq.sql != nil {
		selector = cgdq.sql
		selector.Select(selector.Columns(cattlegrowsdata.Columns...)...)
	}
	for _, p := range cgdq.predicates {
		p(selector)
	}
	for _, p := range cgdq.order {
		p(selector, cattlegrowsdata.ValidColumn)
	}
	if offset := cgdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cgdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CattleGrowsDataGroupBy is the builder for group-by CattleGrowsData entities.
type CattleGrowsDataGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgdgb *CattleGrowsDataGroupBy) Aggregate(fns ...AggregateFunc) *CattleGrowsDataGroupBy {
	cgdgb.fns = append(cgdgb.fns, fns...)
	return cgdgb
}

// Scan applies the group-by query and scan the result into the given value.
func (cgdgb *CattleGrowsDataGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cgdgb.path(ctx)
	if err != nil {
		return err
	}
	cgdgb.sql = query
	return cgdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cgdgb *CattleGrowsDataGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cgdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (cgdgb *CattleGrowsDataGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cgdgb.fields) > 1 {
		return nil, errors.New("ent: CattleGrowsDataGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cgdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cgdgb *CattleGrowsDataGroupBy) StringsX(ctx context.Context) []string {
	v, err := cgdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (cgdgb *CattleGrowsDataGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cgdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattlegrowsdata.Label}
	default:
		err = fmt.Errorf("ent: CattleGrowsDataGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cgdgb *CattleGrowsDataGroupBy) StringX(ctx context.Context) string {
	v, err := cgdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (cgdgb *CattleGrowsDataGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cgdgb.fields) > 1 {
		return nil, errors.New("ent: CattleGrowsDataGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cgdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cgdgb *CattleGrowsDataGroupBy) IntsX(ctx context.Context) []int {
	v, err := cgdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (cgdgb *CattleGrowsDataGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cgdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattlegrowsdata.Label}
	default:
		err = fmt.Errorf("ent: CattleGrowsDataGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cgdgb *CattleGrowsDataGroupBy) IntX(ctx context.Context) int {
	v, err := cgdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (cgdgb *CattleGrowsDataGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cgdgb.fields) > 1 {
		return nil, errors.New("ent: CattleGrowsDataGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cgdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cgdgb *CattleGrowsDataGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cgdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (cgdgb *CattleGrowsDataGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cgdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattlegrowsdata.Label}
	default:
		err = fmt.Errorf("ent: CattleGrowsDataGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cgdgb *CattleGrowsDataGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cgdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (cgdgb *CattleGrowsDataGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cgdgb.fields) > 1 {
		return nil, errors.New("ent: CattleGrowsDataGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cgdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cgdgb *CattleGrowsDataGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cgdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (cgdgb *CattleGrowsDataGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cgdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattlegrowsdata.Label}
	default:
		err = fmt.Errorf("ent: CattleGrowsDataGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cgdgb *CattleGrowsDataGroupBy) BoolX(ctx context.Context) bool {
	v, err := cgdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cgdgb *CattleGrowsDataGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cgdgb.fields {
		if !cattlegrowsdata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cgdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cgdgb *CattleGrowsDataGroupBy) sqlQuery() *sql.Selector {
	selector := cgdgb.sql
	columns := make([]string, 0, len(cgdgb.fields)+len(cgdgb.fns))
	columns = append(columns, cgdgb.fields...)
	for _, fn := range cgdgb.fns {
		columns = append(columns, fn(selector, cattlegrowsdata.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(cgdgb.fields...)
}

// CattleGrowsDataSelect is the builder for select fields of CattleGrowsData entities.
type CattleGrowsDataSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (cgds *CattleGrowsDataSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := cgds.path(ctx)
	if err != nil {
		return err
	}
	cgds.sql = query
	return cgds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cgds *CattleGrowsDataSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cgds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (cgds *CattleGrowsDataSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cgds.fields) > 1 {
		return nil, errors.New("ent: CattleGrowsDataSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cgds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cgds *CattleGrowsDataSelect) StringsX(ctx context.Context) []string {
	v, err := cgds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (cgds *CattleGrowsDataSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cgds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattlegrowsdata.Label}
	default:
		err = fmt.Errorf("ent: CattleGrowsDataSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cgds *CattleGrowsDataSelect) StringX(ctx context.Context) string {
	v, err := cgds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (cgds *CattleGrowsDataSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cgds.fields) > 1 {
		return nil, errors.New("ent: CattleGrowsDataSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cgds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cgds *CattleGrowsDataSelect) IntsX(ctx context.Context) []int {
	v, err := cgds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (cgds *CattleGrowsDataSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cgds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattlegrowsdata.Label}
	default:
		err = fmt.Errorf("ent: CattleGrowsDataSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cgds *CattleGrowsDataSelect) IntX(ctx context.Context) int {
	v, err := cgds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (cgds *CattleGrowsDataSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cgds.fields) > 1 {
		return nil, errors.New("ent: CattleGrowsDataSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cgds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cgds *CattleGrowsDataSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cgds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (cgds *CattleGrowsDataSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cgds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattlegrowsdata.Label}
	default:
		err = fmt.Errorf("ent: CattleGrowsDataSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cgds *CattleGrowsDataSelect) Float64X(ctx context.Context) float64 {
	v, err := cgds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (cgds *CattleGrowsDataSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cgds.fields) > 1 {
		return nil, errors.New("ent: CattleGrowsDataSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cgds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cgds *CattleGrowsDataSelect) BoolsX(ctx context.Context) []bool {
	v, err := cgds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (cgds *CattleGrowsDataSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cgds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattlegrowsdata.Label}
	default:
		err = fmt.Errorf("ent: CattleGrowsDataSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cgds *CattleGrowsDataSelect) BoolX(ctx context.Context) bool {
	v, err := cgds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cgds *CattleGrowsDataSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cgds.fields {
		if !cattlegrowsdata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := cgds.sqlQuery().Query()
	if err := cgds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cgds *CattleGrowsDataSelect) sqlQuery() sql.Querier {
	selector := cgds.sql
	selector.Select(selector.Columns(cgds.fields...)...)
	return selector
}

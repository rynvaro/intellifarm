// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsdata"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CattleGrowsDataUpdate is the builder for updating CattleGrowsData entities.
type CattleGrowsDataUpdate struct {
	config
	hooks    []Hook
	mutation *CattleGrowsDataMutation
}

// Where appends a list predicates to the CattleGrowsDataUpdate builder.
func (cgdu *CattleGrowsDataUpdate) Where(ps ...predicate.CattleGrowsData) *CattleGrowsDataUpdate {
	cgdu.mutation.Where(ps...)
	return cgdu
}

// SetCattleId sets the "cattleId" field.
func (cgdu *CattleGrowsDataUpdate) SetCattleId(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetCattleId()
	cgdu.mutation.SetCattleId(i)
	return cgdu
}

// AddCattleId adds i to the "cattleId" field.
func (cgdu *CattleGrowsDataUpdate) AddCattleId(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddCattleId(i)
	return cgdu
}

// SetTenantId sets the "tenantId" field.
func (cgdu *CattleGrowsDataUpdate) SetTenantId(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetTenantId()
	cgdu.mutation.SetTenantId(i)
	return cgdu
}

// AddTenantId adds i to the "tenantId" field.
func (cgdu *CattleGrowsDataUpdate) AddTenantId(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddTenantId(i)
	return cgdu
}

// SetTenantName sets the "tenantName" field.
func (cgdu *CattleGrowsDataUpdate) SetTenantName(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetTenantName(s)
	return cgdu
}

// SetFarmId sets the "farmId" field.
func (cgdu *CattleGrowsDataUpdate) SetFarmId(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetFarmId()
	cgdu.mutation.SetFarmId(i)
	return cgdu
}

// AddFarmId adds i to the "farmId" field.
func (cgdu *CattleGrowsDataUpdate) AddFarmId(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddFarmId(i)
	return cgdu
}

// SetFarmName sets the "farmName" field.
func (cgdu *CattleGrowsDataUpdate) SetFarmName(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetFarmName(s)
	return cgdu
}

// SetShedId sets the "shedId" field.
func (cgdu *CattleGrowsDataUpdate) SetShedId(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetShedId()
	cgdu.mutation.SetShedId(i)
	return cgdu
}

// AddShedId adds i to the "shedId" field.
func (cgdu *CattleGrowsDataUpdate) AddShedId(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddShedId(i)
	return cgdu
}

// SetShedName sets the "shedName" field.
func (cgdu *CattleGrowsDataUpdate) SetShedName(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetShedName(s)
	return cgdu
}

// SetName sets the "name" field.
func (cgdu *CattleGrowsDataUpdate) SetName(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetName(s)
	return cgdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cgdu *CattleGrowsDataUpdate) SetNillableName(s *string) *CattleGrowsDataUpdate {
	if s != nil {
		cgdu.SetName(*s)
	}
	return cgdu
}

// ClearName clears the value of the "name" field.
func (cgdu *CattleGrowsDataUpdate) ClearName() *CattleGrowsDataUpdate {
	cgdu.mutation.ClearName()
	return cgdu
}

// SetEarNumber sets the "earNumber" field.
func (cgdu *CattleGrowsDataUpdate) SetEarNumber(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetEarNumber(s)
	return cgdu
}

// SetMeasuredAt sets the "measuredAt" field.
func (cgdu *CattleGrowsDataUpdate) SetMeasuredAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetMeasuredAt()
	cgdu.mutation.SetMeasuredAt(i)
	return cgdu
}

// AddMeasuredAt adds i to the "measuredAt" field.
func (cgdu *CattleGrowsDataUpdate) AddMeasuredAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddMeasuredAt(i)
	return cgdu
}

// SetMeasuredBy sets the "measuredBy" field.
func (cgdu *CattleGrowsDataUpdate) SetMeasuredBy(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetMeasuredBy(s)
	return cgdu
}

// SetWeight sets the "weight" field.
func (cgdu *CattleGrowsDataUpdate) SetWeight(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetWeight()
	cgdu.mutation.SetWeight(i)
	return cgdu
}

// AddWeight adds i to the "weight" field.
func (cgdu *CattleGrowsDataUpdate) AddWeight(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.AddWeight(i)
	return cgdu
}

// SetBust sets the "bust" field.
func (cgdu *CattleGrowsDataUpdate) SetBust(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetBust()
	cgdu.mutation.SetBust(i)
	return cgdu
}

// AddBust adds i to the "bust" field.
func (cgdu *CattleGrowsDataUpdate) AddBust(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.AddBust(i)
	return cgdu
}

// SetHeight sets the "height" field.
func (cgdu *CattleGrowsDataUpdate) SetHeight(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetHeight()
	cgdu.mutation.SetHeight(i)
	return cgdu
}

// AddHeight adds i to the "height" field.
func (cgdu *CattleGrowsDataUpdate) AddHeight(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.AddHeight(i)
	return cgdu
}

// SetScore sets the "score" field.
func (cgdu *CattleGrowsDataUpdate) SetScore(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetScore()
	cgdu.mutation.SetScore(i)
	return cgdu
}

// AddScore adds i to the "score" field.
func (cgdu *CattleGrowsDataUpdate) AddScore(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.AddScore(i)
	return cgdu
}

// SetRemarks sets the "remarks" field.
func (cgdu *CattleGrowsDataUpdate) SetRemarks(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetRemarks(s)
	return cgdu
}

// SetCreatedAt sets the "createdAt" field.
func (cgdu *CattleGrowsDataUpdate) SetCreatedAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetCreatedAt()
	cgdu.mutation.SetCreatedAt(i)
	return cgdu
}

// AddCreatedAt adds i to the "createdAt" field.
func (cgdu *CattleGrowsDataUpdate) AddCreatedAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddCreatedAt(i)
	return cgdu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cgdu *CattleGrowsDataUpdate) SetUpdatedAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetUpdatedAt()
	cgdu.mutation.SetUpdatedAt(i)
	return cgdu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cgdu *CattleGrowsDataUpdate) AddUpdatedAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddUpdatedAt(i)
	return cgdu
}

// SetDeleted sets the "deleted" field.
func (cgdu *CattleGrowsDataUpdate) SetDeleted(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetDeleted()
	cgdu.mutation.SetDeleted(i)
	return cgdu
}

// AddDeleted adds i to the "deleted" field.
func (cgdu *CattleGrowsDataUpdate) AddDeleted(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.AddDeleted(i)
	return cgdu
}

// Mutation returns the CattleGrowsDataMutation object of the builder.
func (cgdu *CattleGrowsDataUpdate) Mutation() *CattleGrowsDataMutation {
	return cgdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cgdu *CattleGrowsDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cgdu.hooks) == 0 {
		affected, err = cgdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowsDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cgdu.mutation = mutation
			affected, err = cgdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cgdu.hooks) - 1; i >= 0; i-- {
			if cgdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cgdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cgdu *CattleGrowsDataUpdate) SaveX(ctx context.Context) int {
	affected, err := cgdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgdu *CattleGrowsDataUpdate) Exec(ctx context.Context) error {
	_, err := cgdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgdu *CattleGrowsDataUpdate) ExecX(ctx context.Context) {
	if err := cgdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cgdu *CattleGrowsDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegrowsdata.Table,
			Columns: cattlegrowsdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlegrowsdata.FieldID,
			},
		},
	}
	if ps := cgdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgdu.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCattleId,
		})
	}
	if value, ok := cgdu.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCattleId,
		})
	}
	if value, ok := cgdu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldTenantId,
		})
	}
	if value, ok := cgdu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldTenantId,
		})
	}
	if value, ok := cgdu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldTenantName,
		})
	}
	if value, ok := cgdu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldFarmId,
		})
	}
	if value, ok := cgdu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldFarmId,
		})
	}
	if value, ok := cgdu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldFarmName,
		})
	}
	if value, ok := cgdu.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldShedId,
		})
	}
	if value, ok := cgdu.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldShedId,
		})
	}
	if value, ok := cgdu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldShedName,
		})
	}
	if value, ok := cgdu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldName,
		})
	}
	if cgdu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattlegrowsdata.FieldName,
		})
	}
	if value, ok := cgdu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldEarNumber,
		})
	}
	if value, ok := cgdu.mutation.MeasuredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredAt,
		})
	}
	if value, ok := cgdu.mutation.AddedMeasuredAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredAt,
		})
	}
	if value, ok := cgdu.mutation.MeasuredBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredBy,
		})
	}
	if value, ok := cgdu.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldWeight,
		})
	}
	if value, ok := cgdu.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldWeight,
		})
	}
	if value, ok := cgdu.mutation.Bust(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldBust,
		})
	}
	if value, ok := cgdu.mutation.AddedBust(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldBust,
		})
	}
	if value, ok := cgdu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldHeight,
		})
	}
	if value, ok := cgdu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldHeight,
		})
	}
	if value, ok := cgdu.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldScore,
		})
	}
	if value, ok := cgdu.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldScore,
		})
	}
	if value, ok := cgdu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldRemarks,
		})
	}
	if value, ok := cgdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCreatedAt,
		})
	}
	if value, ok := cgdu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCreatedAt,
		})
	}
	if value, ok := cgdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldUpdatedAt,
		})
	}
	if value, ok := cgdu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldUpdatedAt,
		})
	}
	if value, ok := cgdu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldDeleted,
		})
	}
	if value, ok := cgdu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegrowsdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CattleGrowsDataUpdateOne is the builder for updating a single CattleGrowsData entity.
type CattleGrowsDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CattleGrowsDataMutation
}

// SetCattleId sets the "cattleId" field.
func (cgduo *CattleGrowsDataUpdateOne) SetCattleId(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetCattleId()
	cgduo.mutation.SetCattleId(i)
	return cgduo
}

// AddCattleId adds i to the "cattleId" field.
func (cgduo *CattleGrowsDataUpdateOne) AddCattleId(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddCattleId(i)
	return cgduo
}

// SetTenantId sets the "tenantId" field.
func (cgduo *CattleGrowsDataUpdateOne) SetTenantId(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetTenantId()
	cgduo.mutation.SetTenantId(i)
	return cgduo
}

// AddTenantId adds i to the "tenantId" field.
func (cgduo *CattleGrowsDataUpdateOne) AddTenantId(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddTenantId(i)
	return cgduo
}

// SetTenantName sets the "tenantName" field.
func (cgduo *CattleGrowsDataUpdateOne) SetTenantName(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetTenantName(s)
	return cgduo
}

// SetFarmId sets the "farmId" field.
func (cgduo *CattleGrowsDataUpdateOne) SetFarmId(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetFarmId()
	cgduo.mutation.SetFarmId(i)
	return cgduo
}

// AddFarmId adds i to the "farmId" field.
func (cgduo *CattleGrowsDataUpdateOne) AddFarmId(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddFarmId(i)
	return cgduo
}

// SetFarmName sets the "farmName" field.
func (cgduo *CattleGrowsDataUpdateOne) SetFarmName(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetFarmName(s)
	return cgduo
}

// SetShedId sets the "shedId" field.
func (cgduo *CattleGrowsDataUpdateOne) SetShedId(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetShedId()
	cgduo.mutation.SetShedId(i)
	return cgduo
}

// AddShedId adds i to the "shedId" field.
func (cgduo *CattleGrowsDataUpdateOne) AddShedId(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddShedId(i)
	return cgduo
}

// SetShedName sets the "shedName" field.
func (cgduo *CattleGrowsDataUpdateOne) SetShedName(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetShedName(s)
	return cgduo
}

// SetName sets the "name" field.
func (cgduo *CattleGrowsDataUpdateOne) SetName(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetName(s)
	return cgduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cgduo *CattleGrowsDataUpdateOne) SetNillableName(s *string) *CattleGrowsDataUpdateOne {
	if s != nil {
		cgduo.SetName(*s)
	}
	return cgduo
}

// ClearName clears the value of the "name" field.
func (cgduo *CattleGrowsDataUpdateOne) ClearName() *CattleGrowsDataUpdateOne {
	cgduo.mutation.ClearName()
	return cgduo
}

// SetEarNumber sets the "earNumber" field.
func (cgduo *CattleGrowsDataUpdateOne) SetEarNumber(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetEarNumber(s)
	return cgduo
}

// SetMeasuredAt sets the "measuredAt" field.
func (cgduo *CattleGrowsDataUpdateOne) SetMeasuredAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetMeasuredAt()
	cgduo.mutation.SetMeasuredAt(i)
	return cgduo
}

// AddMeasuredAt adds i to the "measuredAt" field.
func (cgduo *CattleGrowsDataUpdateOne) AddMeasuredAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddMeasuredAt(i)
	return cgduo
}

// SetMeasuredBy sets the "measuredBy" field.
func (cgduo *CattleGrowsDataUpdateOne) SetMeasuredBy(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetMeasuredBy(s)
	return cgduo
}

// SetWeight sets the "weight" field.
func (cgduo *CattleGrowsDataUpdateOne) SetWeight(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetWeight()
	cgduo.mutation.SetWeight(i)
	return cgduo
}

// AddWeight adds i to the "weight" field.
func (cgduo *CattleGrowsDataUpdateOne) AddWeight(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddWeight(i)
	return cgduo
}

// SetBust sets the "bust" field.
func (cgduo *CattleGrowsDataUpdateOne) SetBust(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetBust()
	cgduo.mutation.SetBust(i)
	return cgduo
}

// AddBust adds i to the "bust" field.
func (cgduo *CattleGrowsDataUpdateOne) AddBust(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddBust(i)
	return cgduo
}

// SetHeight sets the "height" field.
func (cgduo *CattleGrowsDataUpdateOne) SetHeight(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetHeight()
	cgduo.mutation.SetHeight(i)
	return cgduo
}

// AddHeight adds i to the "height" field.
func (cgduo *CattleGrowsDataUpdateOne) AddHeight(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddHeight(i)
	return cgduo
}

// SetScore sets the "score" field.
func (cgduo *CattleGrowsDataUpdateOne) SetScore(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetScore()
	cgduo.mutation.SetScore(i)
	return cgduo
}

// AddScore adds i to the "score" field.
func (cgduo *CattleGrowsDataUpdateOne) AddScore(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddScore(i)
	return cgduo
}

// SetRemarks sets the "remarks" field.
func (cgduo *CattleGrowsDataUpdateOne) SetRemarks(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetRemarks(s)
	return cgduo
}

// SetCreatedAt sets the "createdAt" field.
func (cgduo *CattleGrowsDataUpdateOne) SetCreatedAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetCreatedAt()
	cgduo.mutation.SetCreatedAt(i)
	return cgduo
}

// AddCreatedAt adds i to the "createdAt" field.
func (cgduo *CattleGrowsDataUpdateOne) AddCreatedAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddCreatedAt(i)
	return cgduo
}

// SetUpdatedAt sets the "updatedAt" field.
func (cgduo *CattleGrowsDataUpdateOne) SetUpdatedAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetUpdatedAt()
	cgduo.mutation.SetUpdatedAt(i)
	return cgduo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cgduo *CattleGrowsDataUpdateOne) AddUpdatedAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddUpdatedAt(i)
	return cgduo
}

// SetDeleted sets the "deleted" field.
func (cgduo *CattleGrowsDataUpdateOne) SetDeleted(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetDeleted()
	cgduo.mutation.SetDeleted(i)
	return cgduo
}

// AddDeleted adds i to the "deleted" field.
func (cgduo *CattleGrowsDataUpdateOne) AddDeleted(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddDeleted(i)
	return cgduo
}

// Mutation returns the CattleGrowsDataMutation object of the builder.
func (cgduo *CattleGrowsDataUpdateOne) Mutation() *CattleGrowsDataMutation {
	return cgduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cgduo *CattleGrowsDataUpdateOne) Select(field string, fields ...string) *CattleGrowsDataUpdateOne {
	cgduo.fields = append([]string{field}, fields...)
	return cgduo
}

// Save executes the query and returns the updated CattleGrowsData entity.
func (cgduo *CattleGrowsDataUpdateOne) Save(ctx context.Context) (*CattleGrowsData, error) {
	var (
		err  error
		node *CattleGrowsData
	)
	if len(cgduo.hooks) == 0 {
		node, err = cgduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowsDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cgduo.mutation = mutation
			node, err = cgduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cgduo.hooks) - 1; i >= 0; i-- {
			if cgduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cgduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cgduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CattleGrowsData)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CattleGrowsDataMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cgduo *CattleGrowsDataUpdateOne) SaveX(ctx context.Context) *CattleGrowsData {
	node, err := cgduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cgduo *CattleGrowsDataUpdateOne) Exec(ctx context.Context) error {
	_, err := cgduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgduo *CattleGrowsDataUpdateOne) ExecX(ctx context.Context) {
	if err := cgduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cgduo *CattleGrowsDataUpdateOne) sqlSave(ctx context.Context) (_node *CattleGrowsData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegrowsdata.Table,
			Columns: cattlegrowsdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlegrowsdata.FieldID,
			},
		},
	}
	id, ok := cgduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CattleGrowsData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cgduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cattlegrowsdata.FieldID)
		for _, f := range fields {
			if !cattlegrowsdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cattlegrowsdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cgduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgduo.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCattleId,
		})
	}
	if value, ok := cgduo.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCattleId,
		})
	}
	if value, ok := cgduo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldTenantId,
		})
	}
	if value, ok := cgduo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldTenantId,
		})
	}
	if value, ok := cgduo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldTenantName,
		})
	}
	if value, ok := cgduo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldFarmId,
		})
	}
	if value, ok := cgduo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldFarmId,
		})
	}
	if value, ok := cgduo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldFarmName,
		})
	}
	if value, ok := cgduo.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldShedId,
		})
	}
	if value, ok := cgduo.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldShedId,
		})
	}
	if value, ok := cgduo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldShedName,
		})
	}
	if value, ok := cgduo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldName,
		})
	}
	if cgduo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattlegrowsdata.FieldName,
		})
	}
	if value, ok := cgduo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldEarNumber,
		})
	}
	if value, ok := cgduo.mutation.MeasuredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredAt,
		})
	}
	if value, ok := cgduo.mutation.AddedMeasuredAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredAt,
		})
	}
	if value, ok := cgduo.mutation.MeasuredBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredBy,
		})
	}
	if value, ok := cgduo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldWeight,
		})
	}
	if value, ok := cgduo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldWeight,
		})
	}
	if value, ok := cgduo.mutation.Bust(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldBust,
		})
	}
	if value, ok := cgduo.mutation.AddedBust(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldBust,
		})
	}
	if value, ok := cgduo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldHeight,
		})
	}
	if value, ok := cgduo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldHeight,
		})
	}
	if value, ok := cgduo.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldScore,
		})
	}
	if value, ok := cgduo.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldScore,
		})
	}
	if value, ok := cgduo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldRemarks,
		})
	}
	if value, ok := cgduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCreatedAt,
		})
	}
	if value, ok := cgduo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCreatedAt,
		})
	}
	if value, ok := cgduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldUpdatedAt,
		})
	}
	if value, ok := cgduo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldUpdatedAt,
		})
	}
	if value, ok := cgduo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldDeleted,
		})
	}
	if value, ok := cgduo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldDeleted,
		})
	}
	_node = &CattleGrowsData{config: cgduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cgduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegrowsdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

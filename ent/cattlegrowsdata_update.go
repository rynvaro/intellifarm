// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsdata"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleGrowsDataUpdate is the builder for updating CattleGrowsData entities.
type CattleGrowsDataUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleGrowsDataMutation
	predicates []predicate.CattleGrowsData
}

// Where adds a new predicate for the builder.
func (cgdu *CattleGrowsDataUpdate) Where(ps ...predicate.CattleGrowsData) *CattleGrowsDataUpdate {
	cgdu.predicates = append(cgdu.predicates, ps...)
	return cgdu
}

// SetName sets the name field.
func (cgdu *CattleGrowsDataUpdate) SetName(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetName(s)
	return cgdu
}

// SetNillableName sets the name field if the given value is not nil.
func (cgdu *CattleGrowsDataUpdate) SetNillableName(s *string) *CattleGrowsDataUpdate {
	if s != nil {
		cgdu.SetName(*s)
	}
	return cgdu
}

// ClearName clears the value of name.
func (cgdu *CattleGrowsDataUpdate) ClearName() *CattleGrowsDataUpdate {
	cgdu.mutation.ClearName()
	return cgdu
}

// SetEarNumber sets the earNumber field.
func (cgdu *CattleGrowsDataUpdate) SetEarNumber(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetEarNumber(s)
	return cgdu
}

// SetShedName sets the shedName field.
func (cgdu *CattleGrowsDataUpdate) SetShedName(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetShedName(s)
	return cgdu
}

// SetMeasuredAt sets the measuredAt field.
func (cgdu *CattleGrowsDataUpdate) SetMeasuredAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetMeasuredAt()
	cgdu.mutation.SetMeasuredAt(i)
	return cgdu
}

// AddMeasuredAt adds i to measuredAt.
func (cgdu *CattleGrowsDataUpdate) AddMeasuredAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddMeasuredAt(i)
	return cgdu
}

// SetMeasuredBy sets the measuredBy field.
func (cgdu *CattleGrowsDataUpdate) SetMeasuredBy(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetMeasuredBy(s)
	return cgdu
}

// SetWeight sets the weight field.
func (cgdu *CattleGrowsDataUpdate) SetWeight(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetWeight()
	cgdu.mutation.SetWeight(i)
	return cgdu
}

// AddWeight adds i to weight.
func (cgdu *CattleGrowsDataUpdate) AddWeight(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.AddWeight(i)
	return cgdu
}

// SetBust sets the bust field.
func (cgdu *CattleGrowsDataUpdate) SetBust(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetBust()
	cgdu.mutation.SetBust(i)
	return cgdu
}

// AddBust adds i to bust.
func (cgdu *CattleGrowsDataUpdate) AddBust(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.AddBust(i)
	return cgdu
}

// SetHeight sets the height field.
func (cgdu *CattleGrowsDataUpdate) SetHeight(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetHeight()
	cgdu.mutation.SetHeight(i)
	return cgdu
}

// AddHeight adds i to height.
func (cgdu *CattleGrowsDataUpdate) AddHeight(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.AddHeight(i)
	return cgdu
}

// SetRemarks sets the remarks field.
func (cgdu *CattleGrowsDataUpdate) SetRemarks(s string) *CattleGrowsDataUpdate {
	cgdu.mutation.SetRemarks(s)
	return cgdu
}

// SetCreatedAt sets the createdAt field.
func (cgdu *CattleGrowsDataUpdate) SetCreatedAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetCreatedAt()
	cgdu.mutation.SetCreatedAt(i)
	return cgdu
}

// AddCreatedAt adds i to createdAt.
func (cgdu *CattleGrowsDataUpdate) AddCreatedAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddCreatedAt(i)
	return cgdu
}

// SetUpdatedAt sets the updatedAt field.
func (cgdu *CattleGrowsDataUpdate) SetUpdatedAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetUpdatedAt()
	cgdu.mutation.SetUpdatedAt(i)
	return cgdu
}

// AddUpdatedAt adds i to updatedAt.
func (cgdu *CattleGrowsDataUpdate) AddUpdatedAt(i int64) *CattleGrowsDataUpdate {
	cgdu.mutation.AddUpdatedAt(i)
	return cgdu
}

// SetDeleted sets the deleted field.
func (cgdu *CattleGrowsDataUpdate) SetDeleted(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.ResetDeleted()
	cgdu.mutation.SetDeleted(i)
	return cgdu
}

// AddDeleted adds i to deleted.
func (cgdu *CattleGrowsDataUpdate) AddDeleted(i int) *CattleGrowsDataUpdate {
	cgdu.mutation.AddDeleted(i)
	return cgdu
}

// Mutation returns the CattleGrowsDataMutation object of the builder.
func (cgdu *CattleGrowsDataUpdate) Mutation() *CattleGrowsDataMutation {
	return cgdu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cgdu *CattleGrowsDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cgdu.hooks) == 0 {
		affected, err = cgdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowsDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cgdu.mutation = mutation
			affected, err = cgdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cgdu.hooks) - 1; i >= 0; i-- {
			mut = cgdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cgdu *CattleGrowsDataUpdate) SaveX(ctx context.Context) int {
	affected, err := cgdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgdu *CattleGrowsDataUpdate) Exec(ctx context.Context) error {
	_, err := cgdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgdu *CattleGrowsDataUpdate) ExecX(ctx context.Context) {
	if err := cgdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cgdu *CattleGrowsDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegrowsdata.Table,
			Columns: cattlegrowsdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegrowsdata.FieldID,
			},
		},
	}
	if ps := cgdu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgdu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldName,
		})
	}
	if cgdu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattlegrowsdata.FieldName,
		})
	}
	if value, ok := cgdu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldEarNumber,
		})
	}
	if value, ok := cgdu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldShedName,
		})
	}
	if value, ok := cgdu.mutation.MeasuredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredAt,
		})
	}
	if value, ok := cgdu.mutation.AddedMeasuredAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredAt,
		})
	}
	if value, ok := cgdu.mutation.MeasuredBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredBy,
		})
	}
	if value, ok := cgdu.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldWeight,
		})
	}
	if value, ok := cgdu.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldWeight,
		})
	}
	if value, ok := cgdu.mutation.Bust(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldBust,
		})
	}
	if value, ok := cgdu.mutation.AddedBust(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldBust,
		})
	}
	if value, ok := cgdu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldHeight,
		})
	}
	if value, ok := cgdu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldHeight,
		})
	}
	if value, ok := cgdu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldRemarks,
		})
	}
	if value, ok := cgdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCreatedAt,
		})
	}
	if value, ok := cgdu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCreatedAt,
		})
	}
	if value, ok := cgdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldUpdatedAt,
		})
	}
	if value, ok := cgdu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldUpdatedAt,
		})
	}
	if value, ok := cgdu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldDeleted,
		})
	}
	if value, ok := cgdu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegrowsdata.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleGrowsDataUpdateOne is the builder for updating a single CattleGrowsData entity.
type CattleGrowsDataUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleGrowsDataMutation
}

// SetName sets the name field.
func (cgduo *CattleGrowsDataUpdateOne) SetName(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetName(s)
	return cgduo
}

// SetNillableName sets the name field if the given value is not nil.
func (cgduo *CattleGrowsDataUpdateOne) SetNillableName(s *string) *CattleGrowsDataUpdateOne {
	if s != nil {
		cgduo.SetName(*s)
	}
	return cgduo
}

// ClearName clears the value of name.
func (cgduo *CattleGrowsDataUpdateOne) ClearName() *CattleGrowsDataUpdateOne {
	cgduo.mutation.ClearName()
	return cgduo
}

// SetEarNumber sets the earNumber field.
func (cgduo *CattleGrowsDataUpdateOne) SetEarNumber(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetEarNumber(s)
	return cgduo
}

// SetShedName sets the shedName field.
func (cgduo *CattleGrowsDataUpdateOne) SetShedName(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetShedName(s)
	return cgduo
}

// SetMeasuredAt sets the measuredAt field.
func (cgduo *CattleGrowsDataUpdateOne) SetMeasuredAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetMeasuredAt()
	cgduo.mutation.SetMeasuredAt(i)
	return cgduo
}

// AddMeasuredAt adds i to measuredAt.
func (cgduo *CattleGrowsDataUpdateOne) AddMeasuredAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddMeasuredAt(i)
	return cgduo
}

// SetMeasuredBy sets the measuredBy field.
func (cgduo *CattleGrowsDataUpdateOne) SetMeasuredBy(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetMeasuredBy(s)
	return cgduo
}

// SetWeight sets the weight field.
func (cgduo *CattleGrowsDataUpdateOne) SetWeight(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetWeight()
	cgduo.mutation.SetWeight(i)
	return cgduo
}

// AddWeight adds i to weight.
func (cgduo *CattleGrowsDataUpdateOne) AddWeight(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddWeight(i)
	return cgduo
}

// SetBust sets the bust field.
func (cgduo *CattleGrowsDataUpdateOne) SetBust(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetBust()
	cgduo.mutation.SetBust(i)
	return cgduo
}

// AddBust adds i to bust.
func (cgduo *CattleGrowsDataUpdateOne) AddBust(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddBust(i)
	return cgduo
}

// SetHeight sets the height field.
func (cgduo *CattleGrowsDataUpdateOne) SetHeight(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetHeight()
	cgduo.mutation.SetHeight(i)
	return cgduo
}

// AddHeight adds i to height.
func (cgduo *CattleGrowsDataUpdateOne) AddHeight(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddHeight(i)
	return cgduo
}

// SetRemarks sets the remarks field.
func (cgduo *CattleGrowsDataUpdateOne) SetRemarks(s string) *CattleGrowsDataUpdateOne {
	cgduo.mutation.SetRemarks(s)
	return cgduo
}

// SetCreatedAt sets the createdAt field.
func (cgduo *CattleGrowsDataUpdateOne) SetCreatedAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetCreatedAt()
	cgduo.mutation.SetCreatedAt(i)
	return cgduo
}

// AddCreatedAt adds i to createdAt.
func (cgduo *CattleGrowsDataUpdateOne) AddCreatedAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddCreatedAt(i)
	return cgduo
}

// SetUpdatedAt sets the updatedAt field.
func (cgduo *CattleGrowsDataUpdateOne) SetUpdatedAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetUpdatedAt()
	cgduo.mutation.SetUpdatedAt(i)
	return cgduo
}

// AddUpdatedAt adds i to updatedAt.
func (cgduo *CattleGrowsDataUpdateOne) AddUpdatedAt(i int64) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddUpdatedAt(i)
	return cgduo
}

// SetDeleted sets the deleted field.
func (cgduo *CattleGrowsDataUpdateOne) SetDeleted(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.ResetDeleted()
	cgduo.mutation.SetDeleted(i)
	return cgduo
}

// AddDeleted adds i to deleted.
func (cgduo *CattleGrowsDataUpdateOne) AddDeleted(i int) *CattleGrowsDataUpdateOne {
	cgduo.mutation.AddDeleted(i)
	return cgduo
}

// Mutation returns the CattleGrowsDataMutation object of the builder.
func (cgduo *CattleGrowsDataUpdateOne) Mutation() *CattleGrowsDataMutation {
	return cgduo.mutation
}

// Save executes the query and returns the updated entity.
func (cgduo *CattleGrowsDataUpdateOne) Save(ctx context.Context) (*CattleGrowsData, error) {
	var (
		err  error
		node *CattleGrowsData
	)
	if len(cgduo.hooks) == 0 {
		node, err = cgduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowsDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cgduo.mutation = mutation
			node, err = cgduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cgduo.hooks) - 1; i >= 0; i-- {
			mut = cgduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cgduo *CattleGrowsDataUpdateOne) SaveX(ctx context.Context) *CattleGrowsData {
	node, err := cgduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cgduo *CattleGrowsDataUpdateOne) Exec(ctx context.Context) error {
	_, err := cgduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgduo *CattleGrowsDataUpdateOne) ExecX(ctx context.Context) {
	if err := cgduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cgduo *CattleGrowsDataUpdateOne) sqlSave(ctx context.Context) (_node *CattleGrowsData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegrowsdata.Table,
			Columns: cattlegrowsdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegrowsdata.FieldID,
			},
		},
	}
	id, ok := cgduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CattleGrowsData.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cgduo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldName,
		})
	}
	if cgduo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattlegrowsdata.FieldName,
		})
	}
	if value, ok := cgduo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldEarNumber,
		})
	}
	if value, ok := cgduo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldShedName,
		})
	}
	if value, ok := cgduo.mutation.MeasuredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredAt,
		})
	}
	if value, ok := cgduo.mutation.AddedMeasuredAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredAt,
		})
	}
	if value, ok := cgduo.mutation.MeasuredBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldMeasuredBy,
		})
	}
	if value, ok := cgduo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldWeight,
		})
	}
	if value, ok := cgduo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldWeight,
		})
	}
	if value, ok := cgduo.mutation.Bust(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldBust,
		})
	}
	if value, ok := cgduo.mutation.AddedBust(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldBust,
		})
	}
	if value, ok := cgduo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldHeight,
		})
	}
	if value, ok := cgduo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldHeight,
		})
	}
	if value, ok := cgduo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsdata.FieldRemarks,
		})
	}
	if value, ok := cgduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCreatedAt,
		})
	}
	if value, ok := cgduo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldCreatedAt,
		})
	}
	if value, ok := cgduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldUpdatedAt,
		})
	}
	if value, ok := cgduo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsdata.FieldUpdatedAt,
		})
	}
	if value, ok := cgduo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldDeleted,
		})
	}
	if value, ok := cgduo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsdata.FieldDeleted,
		})
	}
	_node = &CattleGrowsData{config: cgduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cgduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegrowsdata.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

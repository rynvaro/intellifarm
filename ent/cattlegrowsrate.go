// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsrate"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleGrowsRate is the model entity for the CattleGrowsRate schema.
type CattleGrowsRate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 牛耳号
	EarNumber string `json:"earNumber,omitempty"`
	// 所在牛舍
	ShedName string `json:"shedName,omitempty"`
	// 评定日期
	RatedAt int64 `json:"ratedAt,omitempty"`
	// 评定人员
	RatedBy string `json:"ratedBy,omitempty"`
	// 评分
	Rate int `json:"rate,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleGrowsRate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattlegrowsrate.FieldID, cattlegrowsrate.FieldRatedAt, cattlegrowsrate.FieldRate, cattlegrowsrate.FieldTenantId, cattlegrowsrate.FieldCreatedAt, cattlegrowsrate.FieldUpdatedAt, cattlegrowsrate.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattlegrowsrate.FieldName, cattlegrowsrate.FieldEarNumber, cattlegrowsrate.FieldShedName, cattlegrowsrate.FieldRatedBy, cattlegrowsrate.FieldTenantName, cattlegrowsrate.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleGrowsRate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleGrowsRate fields.
func (cgr *CattleGrowsRate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattlegrowsrate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cgr.ID = int(value.Int64)
		case cattlegrowsrate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cgr.Name = value.String
			}
		case cattlegrowsrate.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				cgr.EarNumber = value.String
			}
		case cattlegrowsrate.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				cgr.ShedName = value.String
			}
		case cattlegrowsrate.FieldRatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ratedAt", values[i])
			} else if value.Valid {
				cgr.RatedAt = value.Int64
			}
		case cattlegrowsrate.FieldRatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ratedBy", values[i])
			} else if value.Valid {
				cgr.RatedBy = value.String
			}
		case cattlegrowsrate.FieldRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				cgr.Rate = int(value.Int64)
			}
		case cattlegrowsrate.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cgr.TenantId = value.Int64
			}
		case cattlegrowsrate.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				cgr.TenantName = value.String
			}
		case cattlegrowsrate.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				cgr.Remarks = value.String
			}
		case cattlegrowsrate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cgr.CreatedAt = value.Int64
			}
		case cattlegrowsrate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cgr.UpdatedAt = value.Int64
			}
		case cattlegrowsrate.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cgr.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleGrowsRate.
// Note that you need to call CattleGrowsRate.Unwrap() before calling this method if this CattleGrowsRate
// was returned from a transaction, and the transaction was committed or rolled back.
func (cgr *CattleGrowsRate) Update() *CattleGrowsRateUpdateOne {
	return (&CattleGrowsRateClient{config: cgr.config}).UpdateOne(cgr)
}

// Unwrap unwraps the CattleGrowsRate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cgr *CattleGrowsRate) Unwrap() *CattleGrowsRate {
	_tx, ok := cgr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleGrowsRate is not a transactional entity")
	}
	cgr.config.driver = _tx.drv
	return cgr
}

// String implements the fmt.Stringer.
func (cgr *CattleGrowsRate) String() string {
	var builder strings.Builder
	builder.WriteString("CattleGrowsRate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cgr.ID))
	builder.WriteString("name=")
	builder.WriteString(cgr.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(cgr.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(cgr.ShedName)
	builder.WriteString(", ")
	builder.WriteString("ratedAt=")
	builder.WriteString(fmt.Sprintf("%v", cgr.RatedAt))
	builder.WriteString(", ")
	builder.WriteString("ratedBy=")
	builder.WriteString(cgr.RatedBy)
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", cgr.Rate))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cgr.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(cgr.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(cgr.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cgr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cgr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cgr.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleGrowsRates is a parsable slice of CattleGrowsRate.
type CattleGrowsRates []*CattleGrowsRate

func (cgr CattleGrowsRates) config(cfg config) {
	for _i := range cgr {
		cgr[_i].config = cfg
	}
}

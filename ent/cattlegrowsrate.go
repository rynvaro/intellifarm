// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsrate"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// CattleGrowsRate is the model entity for the CattleGrowsRate schema.
type CattleGrowsRate struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// RatedAt holds the value of the "ratedAt" field.
	RatedAt int64 `json:"ratedAt,omitempty"`
	// RatedBy holds the value of the "ratedBy" field.
	RatedBy string `json:"ratedBy,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate int `json:"rate,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleGrowsRate) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // earNumber
		&sql.NullString{}, // shedName
		&sql.NullInt64{},  // ratedAt
		&sql.NullString{}, // ratedBy
		&sql.NullInt64{},  // rate
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleGrowsRate fields.
func (cgr *CattleGrowsRate) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cattlegrowsrate.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cgr.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		cgr.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[1])
	} else if value.Valid {
		cgr.EarNumber = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[2])
	} else if value.Valid {
		cgr.ShedName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field ratedAt", values[3])
	} else if value.Valid {
		cgr.RatedAt = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ratedBy", values[4])
	} else if value.Valid {
		cgr.RatedBy = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field rate", values[5])
	} else if value.Valid {
		cgr.Rate = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[6])
	} else if value.Valid {
		cgr.Remarks = value.String
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[7])
	} else if value.Valid {
		cgr.CreatedAt = value.Int64
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[8])
	} else if value.Valid {
		cgr.UpdatedAt = value.Int64
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[9])
	} else if value.Valid {
		cgr.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this CattleGrowsRate.
// Note that, you need to call CattleGrowsRate.Unwrap() before calling this method, if this CattleGrowsRate
// was returned from a transaction, and the transaction was committed or rolled back.
func (cgr *CattleGrowsRate) Update() *CattleGrowsRateUpdateOne {
	return (&CattleGrowsRateClient{config: cgr.config}).UpdateOne(cgr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cgr *CattleGrowsRate) Unwrap() *CattleGrowsRate {
	tx, ok := cgr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleGrowsRate is not a transactional entity")
	}
	cgr.config.driver = tx.drv
	return cgr
}

// String implements the fmt.Stringer.
func (cgr *CattleGrowsRate) String() string {
	var builder strings.Builder
	builder.WriteString("CattleGrowsRate(")
	builder.WriteString(fmt.Sprintf("id=%v", cgr.ID))
	builder.WriteString(", name=")
	builder.WriteString(cgr.Name)
	builder.WriteString(", earNumber=")
	builder.WriteString(cgr.EarNumber)
	builder.WriteString(", shedName=")
	builder.WriteString(cgr.ShedName)
	builder.WriteString(", ratedAt=")
	builder.WriteString(fmt.Sprintf("%v", cgr.RatedAt))
	builder.WriteString(", ratedBy=")
	builder.WriteString(cgr.RatedBy)
	builder.WriteString(", rate=")
	builder.WriteString(fmt.Sprintf("%v", cgr.Rate))
	builder.WriteString(", remarks=")
	builder.WriteString(cgr.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cgr.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cgr.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", cgr.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleGrowsRates is a parsable slice of CattleGrowsRate.
type CattleGrowsRates []*CattleGrowsRate

func (cgr CattleGrowsRates) config(cfg config) {
	for _i := range cgr {
		cgr[_i].config = cfg
	}
}

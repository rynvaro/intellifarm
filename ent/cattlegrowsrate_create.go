// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsrate"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleGrowsRateCreate is the builder for creating a CattleGrowsRate entity.
type CattleGrowsRateCreate struct {
	config
	mutation *CattleGrowsRateMutation
	hooks    []Hook
}

// SetName sets the name field.
func (cgrc *CattleGrowsRateCreate) SetName(s string) *CattleGrowsRateCreate {
	cgrc.mutation.SetName(s)
	return cgrc
}

// SetNillableName sets the name field if the given value is not nil.
func (cgrc *CattleGrowsRateCreate) SetNillableName(s *string) *CattleGrowsRateCreate {
	if s != nil {
		cgrc.SetName(*s)
	}
	return cgrc
}

// SetEarNumber sets the earNumber field.
func (cgrc *CattleGrowsRateCreate) SetEarNumber(s string) *CattleGrowsRateCreate {
	cgrc.mutation.SetEarNumber(s)
	return cgrc
}

// SetShedName sets the shedName field.
func (cgrc *CattleGrowsRateCreate) SetShedName(s string) *CattleGrowsRateCreate {
	cgrc.mutation.SetShedName(s)
	return cgrc
}

// SetRatedAt sets the ratedAt field.
func (cgrc *CattleGrowsRateCreate) SetRatedAt(i int64) *CattleGrowsRateCreate {
	cgrc.mutation.SetRatedAt(i)
	return cgrc
}

// SetRatedBy sets the ratedBy field.
func (cgrc *CattleGrowsRateCreate) SetRatedBy(s string) *CattleGrowsRateCreate {
	cgrc.mutation.SetRatedBy(s)
	return cgrc
}

// SetRate sets the rate field.
func (cgrc *CattleGrowsRateCreate) SetRate(i int) *CattleGrowsRateCreate {
	cgrc.mutation.SetRate(i)
	return cgrc
}

// SetRemarks sets the remarks field.
func (cgrc *CattleGrowsRateCreate) SetRemarks(s string) *CattleGrowsRateCreate {
	cgrc.mutation.SetRemarks(s)
	return cgrc
}

// SetCreatedAt sets the createdAt field.
func (cgrc *CattleGrowsRateCreate) SetCreatedAt(i int64) *CattleGrowsRateCreate {
	cgrc.mutation.SetCreatedAt(i)
	return cgrc
}

// SetUpdatedAt sets the updatedAt field.
func (cgrc *CattleGrowsRateCreate) SetUpdatedAt(i int64) *CattleGrowsRateCreate {
	cgrc.mutation.SetUpdatedAt(i)
	return cgrc
}

// SetDeleted sets the deleted field.
func (cgrc *CattleGrowsRateCreate) SetDeleted(i int) *CattleGrowsRateCreate {
	cgrc.mutation.SetDeleted(i)
	return cgrc
}

// Mutation returns the CattleGrowsRateMutation object of the builder.
func (cgrc *CattleGrowsRateCreate) Mutation() *CattleGrowsRateMutation {
	return cgrc.mutation
}

// Save creates the CattleGrowsRate in the database.
func (cgrc *CattleGrowsRateCreate) Save(ctx context.Context) (*CattleGrowsRate, error) {
	var (
		err  error
		node *CattleGrowsRate
	)
	if len(cgrc.hooks) == 0 {
		if err = cgrc.check(); err != nil {
			return nil, err
		}
		node, err = cgrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowsRateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cgrc.check(); err != nil {
				return nil, err
			}
			cgrc.mutation = mutation
			node, err = cgrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cgrc.hooks) - 1; i >= 0; i-- {
			mut = cgrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cgrc *CattleGrowsRateCreate) SaveX(ctx context.Context) *CattleGrowsRate {
	v, err := cgrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cgrc *CattleGrowsRateCreate) check() error {
	if _, ok := cgrc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if _, ok := cgrc.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New("ent: missing required field \"shedName\"")}
	}
	if _, ok := cgrc.mutation.RatedAt(); !ok {
		return &ValidationError{Name: "ratedAt", err: errors.New("ent: missing required field \"ratedAt\"")}
	}
	if _, ok := cgrc.mutation.RatedBy(); !ok {
		return &ValidationError{Name: "ratedBy", err: errors.New("ent: missing required field \"ratedBy\"")}
	}
	if _, ok := cgrc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New("ent: missing required field \"rate\"")}
	}
	if _, ok := cgrc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := cgrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := cgrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := cgrc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (cgrc *CattleGrowsRateCreate) sqlSave(ctx context.Context) (*CattleGrowsRate, error) {
	_node, _spec := cgrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (cgrc *CattleGrowsRateCreate) createSpec() (*CattleGrowsRate, *sqlgraph.CreateSpec) {
	var (
		_node = &CattleGrowsRate{config: cgrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cattlegrowsrate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlegrowsrate.FieldID,
			},
		}
	)
	if value, ok := cgrc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cgrc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := cgrc.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := cgrc.mutation.RatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldRatedAt,
		})
		_node.RatedAt = value
	}
	if value, ok := cgrc.mutation.RatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldRatedBy,
		})
		_node.RatedBy = value
	}
	if value, ok := cgrc.mutation.Rate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldRate,
		})
		_node.Rate = value
	}
	if value, ok := cgrc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := cgrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cgrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cgrc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// CattleGrowsRateCreateBulk is the builder for creating a bulk of CattleGrowsRate entities.
type CattleGrowsRateCreateBulk struct {
	config
	builders []*CattleGrowsRateCreate
}

// Save creates the CattleGrowsRate entities in the database.
func (cgrcb *CattleGrowsRateCreateBulk) Save(ctx context.Context) ([]*CattleGrowsRate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cgrcb.builders))
	nodes := make([]*CattleGrowsRate, len(cgrcb.builders))
	mutators := make([]Mutator, len(cgrcb.builders))
	for i := range cgrcb.builders {
		func(i int, root context.Context) {
			builder := cgrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CattleGrowsRateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (cgrcb *CattleGrowsRateCreateBulk) SaveX(ctx context.Context) []*CattleGrowsRate {
	v, err := cgrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlegrowsrate"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CattleGrowsRateUpdate is the builder for updating CattleGrowsRate entities.
type CattleGrowsRateUpdate struct {
	config
	hooks    []Hook
	mutation *CattleGrowsRateMutation
}

// Where appends a list predicates to the CattleGrowsRateUpdate builder.
func (cgru *CattleGrowsRateUpdate) Where(ps ...predicate.CattleGrowsRate) *CattleGrowsRateUpdate {
	cgru.mutation.Where(ps...)
	return cgru
}

// SetName sets the "name" field.
func (cgru *CattleGrowsRateUpdate) SetName(s string) *CattleGrowsRateUpdate {
	cgru.mutation.SetName(s)
	return cgru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cgru *CattleGrowsRateUpdate) SetNillableName(s *string) *CattleGrowsRateUpdate {
	if s != nil {
		cgru.SetName(*s)
	}
	return cgru
}

// ClearName clears the value of the "name" field.
func (cgru *CattleGrowsRateUpdate) ClearName() *CattleGrowsRateUpdate {
	cgru.mutation.ClearName()
	return cgru
}

// SetEarNumber sets the "earNumber" field.
func (cgru *CattleGrowsRateUpdate) SetEarNumber(s string) *CattleGrowsRateUpdate {
	cgru.mutation.SetEarNumber(s)
	return cgru
}

// SetShedName sets the "shedName" field.
func (cgru *CattleGrowsRateUpdate) SetShedName(s string) *CattleGrowsRateUpdate {
	cgru.mutation.SetShedName(s)
	return cgru
}

// SetRatedAt sets the "ratedAt" field.
func (cgru *CattleGrowsRateUpdate) SetRatedAt(i int64) *CattleGrowsRateUpdate {
	cgru.mutation.ResetRatedAt()
	cgru.mutation.SetRatedAt(i)
	return cgru
}

// AddRatedAt adds i to the "ratedAt" field.
func (cgru *CattleGrowsRateUpdate) AddRatedAt(i int64) *CattleGrowsRateUpdate {
	cgru.mutation.AddRatedAt(i)
	return cgru
}

// SetRatedBy sets the "ratedBy" field.
func (cgru *CattleGrowsRateUpdate) SetRatedBy(s string) *CattleGrowsRateUpdate {
	cgru.mutation.SetRatedBy(s)
	return cgru
}

// SetRate sets the "rate" field.
func (cgru *CattleGrowsRateUpdate) SetRate(i int) *CattleGrowsRateUpdate {
	cgru.mutation.ResetRate()
	cgru.mutation.SetRate(i)
	return cgru
}

// AddRate adds i to the "rate" field.
func (cgru *CattleGrowsRateUpdate) AddRate(i int) *CattleGrowsRateUpdate {
	cgru.mutation.AddRate(i)
	return cgru
}

// SetTenantId sets the "tenantId" field.
func (cgru *CattleGrowsRateUpdate) SetTenantId(i int64) *CattleGrowsRateUpdate {
	cgru.mutation.ResetTenantId()
	cgru.mutation.SetTenantId(i)
	return cgru
}

// AddTenantId adds i to the "tenantId" field.
func (cgru *CattleGrowsRateUpdate) AddTenantId(i int64) *CattleGrowsRateUpdate {
	cgru.mutation.AddTenantId(i)
	return cgru
}

// SetTenantName sets the "tenantName" field.
func (cgru *CattleGrowsRateUpdate) SetTenantName(s string) *CattleGrowsRateUpdate {
	cgru.mutation.SetTenantName(s)
	return cgru
}

// SetRemarks sets the "remarks" field.
func (cgru *CattleGrowsRateUpdate) SetRemarks(s string) *CattleGrowsRateUpdate {
	cgru.mutation.SetRemarks(s)
	return cgru
}

// SetCreatedAt sets the "createdAt" field.
func (cgru *CattleGrowsRateUpdate) SetCreatedAt(i int64) *CattleGrowsRateUpdate {
	cgru.mutation.ResetCreatedAt()
	cgru.mutation.SetCreatedAt(i)
	return cgru
}

// AddCreatedAt adds i to the "createdAt" field.
func (cgru *CattleGrowsRateUpdate) AddCreatedAt(i int64) *CattleGrowsRateUpdate {
	cgru.mutation.AddCreatedAt(i)
	return cgru
}

// SetUpdatedAt sets the "updatedAt" field.
func (cgru *CattleGrowsRateUpdate) SetUpdatedAt(i int64) *CattleGrowsRateUpdate {
	cgru.mutation.ResetUpdatedAt()
	cgru.mutation.SetUpdatedAt(i)
	return cgru
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cgru *CattleGrowsRateUpdate) AddUpdatedAt(i int64) *CattleGrowsRateUpdate {
	cgru.mutation.AddUpdatedAt(i)
	return cgru
}

// SetDeleted sets the "deleted" field.
func (cgru *CattleGrowsRateUpdate) SetDeleted(i int) *CattleGrowsRateUpdate {
	cgru.mutation.ResetDeleted()
	cgru.mutation.SetDeleted(i)
	return cgru
}

// AddDeleted adds i to the "deleted" field.
func (cgru *CattleGrowsRateUpdate) AddDeleted(i int) *CattleGrowsRateUpdate {
	cgru.mutation.AddDeleted(i)
	return cgru
}

// Mutation returns the CattleGrowsRateMutation object of the builder.
func (cgru *CattleGrowsRateUpdate) Mutation() *CattleGrowsRateMutation {
	return cgru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cgru *CattleGrowsRateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cgru.hooks) == 0 {
		affected, err = cgru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowsRateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cgru.mutation = mutation
			affected, err = cgru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cgru.hooks) - 1; i >= 0; i-- {
			if cgru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cgru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cgru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cgru *CattleGrowsRateUpdate) SaveX(ctx context.Context) int {
	affected, err := cgru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgru *CattleGrowsRateUpdate) Exec(ctx context.Context) error {
	_, err := cgru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgru *CattleGrowsRateUpdate) ExecX(ctx context.Context) {
	if err := cgru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cgru *CattleGrowsRateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegrowsrate.Table,
			Columns: cattlegrowsrate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlegrowsrate.FieldID,
			},
		},
	}
	if ps := cgru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldName,
		})
	}
	if cgru.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattlegrowsrate.FieldName,
		})
	}
	if value, ok := cgru.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldEarNumber,
		})
	}
	if value, ok := cgru.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldShedName,
		})
	}
	if value, ok := cgru.mutation.RatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldRatedAt,
		})
	}
	if value, ok := cgru.mutation.AddedRatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldRatedAt,
		})
	}
	if value, ok := cgru.mutation.RatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldRatedBy,
		})
	}
	if value, ok := cgru.mutation.Rate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldRate,
		})
	}
	if value, ok := cgru.mutation.AddedRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldRate,
		})
	}
	if value, ok := cgru.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldTenantId,
		})
	}
	if value, ok := cgru.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldTenantId,
		})
	}
	if value, ok := cgru.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldTenantName,
		})
	}
	if value, ok := cgru.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldRemarks,
		})
	}
	if value, ok := cgru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldCreatedAt,
		})
	}
	if value, ok := cgru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldCreatedAt,
		})
	}
	if value, ok := cgru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldUpdatedAt,
		})
	}
	if value, ok := cgru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldUpdatedAt,
		})
	}
	if value, ok := cgru.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldDeleted,
		})
	}
	if value, ok := cgru.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegrowsrate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CattleGrowsRateUpdateOne is the builder for updating a single CattleGrowsRate entity.
type CattleGrowsRateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CattleGrowsRateMutation
}

// SetName sets the "name" field.
func (cgruo *CattleGrowsRateUpdateOne) SetName(s string) *CattleGrowsRateUpdateOne {
	cgruo.mutation.SetName(s)
	return cgruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cgruo *CattleGrowsRateUpdateOne) SetNillableName(s *string) *CattleGrowsRateUpdateOne {
	if s != nil {
		cgruo.SetName(*s)
	}
	return cgruo
}

// ClearName clears the value of the "name" field.
func (cgruo *CattleGrowsRateUpdateOne) ClearName() *CattleGrowsRateUpdateOne {
	cgruo.mutation.ClearName()
	return cgruo
}

// SetEarNumber sets the "earNumber" field.
func (cgruo *CattleGrowsRateUpdateOne) SetEarNumber(s string) *CattleGrowsRateUpdateOne {
	cgruo.mutation.SetEarNumber(s)
	return cgruo
}

// SetShedName sets the "shedName" field.
func (cgruo *CattleGrowsRateUpdateOne) SetShedName(s string) *CattleGrowsRateUpdateOne {
	cgruo.mutation.SetShedName(s)
	return cgruo
}

// SetRatedAt sets the "ratedAt" field.
func (cgruo *CattleGrowsRateUpdateOne) SetRatedAt(i int64) *CattleGrowsRateUpdateOne {
	cgruo.mutation.ResetRatedAt()
	cgruo.mutation.SetRatedAt(i)
	return cgruo
}

// AddRatedAt adds i to the "ratedAt" field.
func (cgruo *CattleGrowsRateUpdateOne) AddRatedAt(i int64) *CattleGrowsRateUpdateOne {
	cgruo.mutation.AddRatedAt(i)
	return cgruo
}

// SetRatedBy sets the "ratedBy" field.
func (cgruo *CattleGrowsRateUpdateOne) SetRatedBy(s string) *CattleGrowsRateUpdateOne {
	cgruo.mutation.SetRatedBy(s)
	return cgruo
}

// SetRate sets the "rate" field.
func (cgruo *CattleGrowsRateUpdateOne) SetRate(i int) *CattleGrowsRateUpdateOne {
	cgruo.mutation.ResetRate()
	cgruo.mutation.SetRate(i)
	return cgruo
}

// AddRate adds i to the "rate" field.
func (cgruo *CattleGrowsRateUpdateOne) AddRate(i int) *CattleGrowsRateUpdateOne {
	cgruo.mutation.AddRate(i)
	return cgruo
}

// SetTenantId sets the "tenantId" field.
func (cgruo *CattleGrowsRateUpdateOne) SetTenantId(i int64) *CattleGrowsRateUpdateOne {
	cgruo.mutation.ResetTenantId()
	cgruo.mutation.SetTenantId(i)
	return cgruo
}

// AddTenantId adds i to the "tenantId" field.
func (cgruo *CattleGrowsRateUpdateOne) AddTenantId(i int64) *CattleGrowsRateUpdateOne {
	cgruo.mutation.AddTenantId(i)
	return cgruo
}

// SetTenantName sets the "tenantName" field.
func (cgruo *CattleGrowsRateUpdateOne) SetTenantName(s string) *CattleGrowsRateUpdateOne {
	cgruo.mutation.SetTenantName(s)
	return cgruo
}

// SetRemarks sets the "remarks" field.
func (cgruo *CattleGrowsRateUpdateOne) SetRemarks(s string) *CattleGrowsRateUpdateOne {
	cgruo.mutation.SetRemarks(s)
	return cgruo
}

// SetCreatedAt sets the "createdAt" field.
func (cgruo *CattleGrowsRateUpdateOne) SetCreatedAt(i int64) *CattleGrowsRateUpdateOne {
	cgruo.mutation.ResetCreatedAt()
	cgruo.mutation.SetCreatedAt(i)
	return cgruo
}

// AddCreatedAt adds i to the "createdAt" field.
func (cgruo *CattleGrowsRateUpdateOne) AddCreatedAt(i int64) *CattleGrowsRateUpdateOne {
	cgruo.mutation.AddCreatedAt(i)
	return cgruo
}

// SetUpdatedAt sets the "updatedAt" field.
func (cgruo *CattleGrowsRateUpdateOne) SetUpdatedAt(i int64) *CattleGrowsRateUpdateOne {
	cgruo.mutation.ResetUpdatedAt()
	cgruo.mutation.SetUpdatedAt(i)
	return cgruo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cgruo *CattleGrowsRateUpdateOne) AddUpdatedAt(i int64) *CattleGrowsRateUpdateOne {
	cgruo.mutation.AddUpdatedAt(i)
	return cgruo
}

// SetDeleted sets the "deleted" field.
func (cgruo *CattleGrowsRateUpdateOne) SetDeleted(i int) *CattleGrowsRateUpdateOne {
	cgruo.mutation.ResetDeleted()
	cgruo.mutation.SetDeleted(i)
	return cgruo
}

// AddDeleted adds i to the "deleted" field.
func (cgruo *CattleGrowsRateUpdateOne) AddDeleted(i int) *CattleGrowsRateUpdateOne {
	cgruo.mutation.AddDeleted(i)
	return cgruo
}

// Mutation returns the CattleGrowsRateMutation object of the builder.
func (cgruo *CattleGrowsRateUpdateOne) Mutation() *CattleGrowsRateMutation {
	return cgruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cgruo *CattleGrowsRateUpdateOne) Select(field string, fields ...string) *CattleGrowsRateUpdateOne {
	cgruo.fields = append([]string{field}, fields...)
	return cgruo
}

// Save executes the query and returns the updated CattleGrowsRate entity.
func (cgruo *CattleGrowsRateUpdateOne) Save(ctx context.Context) (*CattleGrowsRate, error) {
	var (
		err  error
		node *CattleGrowsRate
	)
	if len(cgruo.hooks) == 0 {
		node, err = cgruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleGrowsRateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cgruo.mutation = mutation
			node, err = cgruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cgruo.hooks) - 1; i >= 0; i-- {
			if cgruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cgruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cgruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CattleGrowsRate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CattleGrowsRateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cgruo *CattleGrowsRateUpdateOne) SaveX(ctx context.Context) *CattleGrowsRate {
	node, err := cgruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cgruo *CattleGrowsRateUpdateOne) Exec(ctx context.Context) error {
	_, err := cgruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgruo *CattleGrowsRateUpdateOne) ExecX(ctx context.Context) {
	if err := cgruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cgruo *CattleGrowsRateUpdateOne) sqlSave(ctx context.Context) (_node *CattleGrowsRate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlegrowsrate.Table,
			Columns: cattlegrowsrate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlegrowsrate.FieldID,
			},
		},
	}
	id, ok := cgruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CattleGrowsRate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cgruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cattlegrowsrate.FieldID)
		for _, f := range fields {
			if !cattlegrowsrate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cattlegrowsrate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cgruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldName,
		})
	}
	if cgruo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cattlegrowsrate.FieldName,
		})
	}
	if value, ok := cgruo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldEarNumber,
		})
	}
	if value, ok := cgruo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldShedName,
		})
	}
	if value, ok := cgruo.mutation.RatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldRatedAt,
		})
	}
	if value, ok := cgruo.mutation.AddedRatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldRatedAt,
		})
	}
	if value, ok := cgruo.mutation.RatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldRatedBy,
		})
	}
	if value, ok := cgruo.mutation.Rate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldRate,
		})
	}
	if value, ok := cgruo.mutation.AddedRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldRate,
		})
	}
	if value, ok := cgruo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldTenantId,
		})
	}
	if value, ok := cgruo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldTenantId,
		})
	}
	if value, ok := cgruo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldTenantName,
		})
	}
	if value, ok := cgruo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlegrowsrate.FieldRemarks,
		})
	}
	if value, ok := cgruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldCreatedAt,
		})
	}
	if value, ok := cgruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldCreatedAt,
		})
	}
	if value, ok := cgruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldUpdatedAt,
		})
	}
	if value, ok := cgruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlegrowsrate.FieldUpdatedAt,
		})
	}
	if value, ok := cgruo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldDeleted,
		})
	}
	if value, ok := cgruo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlegrowsrate.FieldDeleted,
		})
	}
	_node = &CattleGrowsRate{config: cgruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cgruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlegrowsrate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

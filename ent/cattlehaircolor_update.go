// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlehaircolor"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleHairColorUpdate is the builder for updating CattleHairColor entities.
type CattleHairColorUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleHairColorMutation
	predicates []predicate.CattleHairColor
}

// Where adds a new predicate for the builder.
func (chcu *CattleHairColorUpdate) Where(ps ...predicate.CattleHairColor) *CattleHairColorUpdate {
	chcu.predicates = append(chcu.predicates, ps...)
	return chcu
}

// SetName sets the name field.
func (chcu *CattleHairColorUpdate) SetName(s string) *CattleHairColorUpdate {
	chcu.mutation.SetName(s)
	return chcu
}

// SetCode sets the code field.
func (chcu *CattleHairColorUpdate) SetCode(s string) *CattleHairColorUpdate {
	chcu.mutation.SetCode(s)
	return chcu
}

// SetTenantId sets the tenantId field.
func (chcu *CattleHairColorUpdate) SetTenantId(i int64) *CattleHairColorUpdate {
	chcu.mutation.ResetTenantId()
	chcu.mutation.SetTenantId(i)
	return chcu
}

// AddTenantId adds i to tenantId.
func (chcu *CattleHairColorUpdate) AddTenantId(i int64) *CattleHairColorUpdate {
	chcu.mutation.AddTenantId(i)
	return chcu
}

// SetTenantName sets the tenantName field.
func (chcu *CattleHairColorUpdate) SetTenantName(s string) *CattleHairColorUpdate {
	chcu.mutation.SetTenantName(s)
	return chcu
}

// SetOrder sets the order field.
func (chcu *CattleHairColorUpdate) SetOrder(i int) *CattleHairColorUpdate {
	chcu.mutation.ResetOrder()
	chcu.mutation.SetOrder(i)
	return chcu
}

// AddOrder adds i to order.
func (chcu *CattleHairColorUpdate) AddOrder(i int) *CattleHairColorUpdate {
	chcu.mutation.AddOrder(i)
	return chcu
}

// SetRemarks sets the remarks field.
func (chcu *CattleHairColorUpdate) SetRemarks(s string) *CattleHairColorUpdate {
	chcu.mutation.SetRemarks(s)
	return chcu
}

// SetCreatedAt sets the createdAt field.
func (chcu *CattleHairColorUpdate) SetCreatedAt(i int64) *CattleHairColorUpdate {
	chcu.mutation.ResetCreatedAt()
	chcu.mutation.SetCreatedAt(i)
	return chcu
}

// AddCreatedAt adds i to createdAt.
func (chcu *CattleHairColorUpdate) AddCreatedAt(i int64) *CattleHairColorUpdate {
	chcu.mutation.AddCreatedAt(i)
	return chcu
}

// SetUpdatedAt sets the updatedAt field.
func (chcu *CattleHairColorUpdate) SetUpdatedAt(i int64) *CattleHairColorUpdate {
	chcu.mutation.ResetUpdatedAt()
	chcu.mutation.SetUpdatedAt(i)
	return chcu
}

// AddUpdatedAt adds i to updatedAt.
func (chcu *CattleHairColorUpdate) AddUpdatedAt(i int64) *CattleHairColorUpdate {
	chcu.mutation.AddUpdatedAt(i)
	return chcu
}

// SetDeleted sets the deleted field.
func (chcu *CattleHairColorUpdate) SetDeleted(i int) *CattleHairColorUpdate {
	chcu.mutation.ResetDeleted()
	chcu.mutation.SetDeleted(i)
	return chcu
}

// AddDeleted adds i to deleted.
func (chcu *CattleHairColorUpdate) AddDeleted(i int) *CattleHairColorUpdate {
	chcu.mutation.AddDeleted(i)
	return chcu
}

// Mutation returns the CattleHairColorMutation object of the builder.
func (chcu *CattleHairColorUpdate) Mutation() *CattleHairColorMutation {
	return chcu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (chcu *CattleHairColorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(chcu.hooks) == 0 {
		if err = chcu.check(); err != nil {
			return 0, err
		}
		affected, err = chcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleHairColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = chcu.check(); err != nil {
				return 0, err
			}
			chcu.mutation = mutation
			affected, err = chcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(chcu.hooks) - 1; i >= 0; i-- {
			mut = chcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, chcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (chcu *CattleHairColorUpdate) SaveX(ctx context.Context) int {
	affected, err := chcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chcu *CattleHairColorUpdate) Exec(ctx context.Context) error {
	_, err := chcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcu *CattleHairColorUpdate) ExecX(ctx context.Context) {
	if err := chcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chcu *CattleHairColorUpdate) check() error {
	if v, ok := chcu.mutation.Name(); ok {
		if err := cattlehaircolor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (chcu *CattleHairColorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlehaircolor.Table,
			Columns: cattlehaircolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlehaircolor.FieldID,
			},
		},
	}
	if ps := chcu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlehaircolor.FieldName,
		})
	}
	if value, ok := chcu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlehaircolor.FieldCode,
		})
	}
	if value, ok := chcu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldTenantId,
		})
	}
	if value, ok := chcu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldTenantId,
		})
	}
	if value, ok := chcu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlehaircolor.FieldTenantName,
		})
	}
	if value, ok := chcu.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlehaircolor.FieldOrder,
		})
	}
	if value, ok := chcu.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlehaircolor.FieldOrder,
		})
	}
	if value, ok := chcu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlehaircolor.FieldRemarks,
		})
	}
	if value, ok := chcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldCreatedAt,
		})
	}
	if value, ok := chcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldCreatedAt,
		})
	}
	if value, ok := chcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldUpdatedAt,
		})
	}
	if value, ok := chcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldUpdatedAt,
		})
	}
	if value, ok := chcu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlehaircolor.FieldDeleted,
		})
	}
	if value, ok := chcu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlehaircolor.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, chcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlehaircolor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleHairColorUpdateOne is the builder for updating a single CattleHairColor entity.
type CattleHairColorUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleHairColorMutation
}

// SetName sets the name field.
func (chcuo *CattleHairColorUpdateOne) SetName(s string) *CattleHairColorUpdateOne {
	chcuo.mutation.SetName(s)
	return chcuo
}

// SetCode sets the code field.
func (chcuo *CattleHairColorUpdateOne) SetCode(s string) *CattleHairColorUpdateOne {
	chcuo.mutation.SetCode(s)
	return chcuo
}

// SetTenantId sets the tenantId field.
func (chcuo *CattleHairColorUpdateOne) SetTenantId(i int64) *CattleHairColorUpdateOne {
	chcuo.mutation.ResetTenantId()
	chcuo.mutation.SetTenantId(i)
	return chcuo
}

// AddTenantId adds i to tenantId.
func (chcuo *CattleHairColorUpdateOne) AddTenantId(i int64) *CattleHairColorUpdateOne {
	chcuo.mutation.AddTenantId(i)
	return chcuo
}

// SetTenantName sets the tenantName field.
func (chcuo *CattleHairColorUpdateOne) SetTenantName(s string) *CattleHairColorUpdateOne {
	chcuo.mutation.SetTenantName(s)
	return chcuo
}

// SetOrder sets the order field.
func (chcuo *CattleHairColorUpdateOne) SetOrder(i int) *CattleHairColorUpdateOne {
	chcuo.mutation.ResetOrder()
	chcuo.mutation.SetOrder(i)
	return chcuo
}

// AddOrder adds i to order.
func (chcuo *CattleHairColorUpdateOne) AddOrder(i int) *CattleHairColorUpdateOne {
	chcuo.mutation.AddOrder(i)
	return chcuo
}

// SetRemarks sets the remarks field.
func (chcuo *CattleHairColorUpdateOne) SetRemarks(s string) *CattleHairColorUpdateOne {
	chcuo.mutation.SetRemarks(s)
	return chcuo
}

// SetCreatedAt sets the createdAt field.
func (chcuo *CattleHairColorUpdateOne) SetCreatedAt(i int64) *CattleHairColorUpdateOne {
	chcuo.mutation.ResetCreatedAt()
	chcuo.mutation.SetCreatedAt(i)
	return chcuo
}

// AddCreatedAt adds i to createdAt.
func (chcuo *CattleHairColorUpdateOne) AddCreatedAt(i int64) *CattleHairColorUpdateOne {
	chcuo.mutation.AddCreatedAt(i)
	return chcuo
}

// SetUpdatedAt sets the updatedAt field.
func (chcuo *CattleHairColorUpdateOne) SetUpdatedAt(i int64) *CattleHairColorUpdateOne {
	chcuo.mutation.ResetUpdatedAt()
	chcuo.mutation.SetUpdatedAt(i)
	return chcuo
}

// AddUpdatedAt adds i to updatedAt.
func (chcuo *CattleHairColorUpdateOne) AddUpdatedAt(i int64) *CattleHairColorUpdateOne {
	chcuo.mutation.AddUpdatedAt(i)
	return chcuo
}

// SetDeleted sets the deleted field.
func (chcuo *CattleHairColorUpdateOne) SetDeleted(i int) *CattleHairColorUpdateOne {
	chcuo.mutation.ResetDeleted()
	chcuo.mutation.SetDeleted(i)
	return chcuo
}

// AddDeleted adds i to deleted.
func (chcuo *CattleHairColorUpdateOne) AddDeleted(i int) *CattleHairColorUpdateOne {
	chcuo.mutation.AddDeleted(i)
	return chcuo
}

// Mutation returns the CattleHairColorMutation object of the builder.
func (chcuo *CattleHairColorUpdateOne) Mutation() *CattleHairColorMutation {
	return chcuo.mutation
}

// Save executes the query and returns the updated entity.
func (chcuo *CattleHairColorUpdateOne) Save(ctx context.Context) (*CattleHairColor, error) {
	var (
		err  error
		node *CattleHairColor
	)
	if len(chcuo.hooks) == 0 {
		if err = chcuo.check(); err != nil {
			return nil, err
		}
		node, err = chcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleHairColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = chcuo.check(); err != nil {
				return nil, err
			}
			chcuo.mutation = mutation
			node, err = chcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(chcuo.hooks) - 1; i >= 0; i-- {
			mut = chcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, chcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (chcuo *CattleHairColorUpdateOne) SaveX(ctx context.Context) *CattleHairColor {
	node, err := chcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chcuo *CattleHairColorUpdateOne) Exec(ctx context.Context) error {
	_, err := chcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcuo *CattleHairColorUpdateOne) ExecX(ctx context.Context) {
	if err := chcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chcuo *CattleHairColorUpdateOne) check() error {
	if v, ok := chcuo.mutation.Name(); ok {
		if err := cattlehaircolor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (chcuo *CattleHairColorUpdateOne) sqlSave(ctx context.Context) (_node *CattleHairColor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlehaircolor.Table,
			Columns: cattlehaircolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlehaircolor.FieldID,
			},
		},
	}
	id, ok := chcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CattleHairColor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := chcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlehaircolor.FieldName,
		})
	}
	if value, ok := chcuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlehaircolor.FieldCode,
		})
	}
	if value, ok := chcuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldTenantId,
		})
	}
	if value, ok := chcuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldTenantId,
		})
	}
	if value, ok := chcuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlehaircolor.FieldTenantName,
		})
	}
	if value, ok := chcuo.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlehaircolor.FieldOrder,
		})
	}
	if value, ok := chcuo.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlehaircolor.FieldOrder,
		})
	}
	if value, ok := chcuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlehaircolor.FieldRemarks,
		})
	}
	if value, ok := chcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldCreatedAt,
		})
	}
	if value, ok := chcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldCreatedAt,
		})
	}
	if value, ok := chcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldUpdatedAt,
		})
	}
	if value, ok := chcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlehaircolor.FieldUpdatedAt,
		})
	}
	if value, ok := chcuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlehaircolor.FieldDeleted,
		})
	}
	if value, ok := chcuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlehaircolor.FieldDeleted,
		})
	}
	_node = &CattleHairColor{config: chcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, chcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlehaircolor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

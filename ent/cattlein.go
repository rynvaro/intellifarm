// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlein"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleIn is the model entity for the CattleIn schema.
type CattleIn struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 入群类型
	JoinType int64 `json:"joinType,omitempty"`
	// 日期
	Date int64 `json:"date,omitempty"`
	// 来源
	From string `json:"from,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int64 `json:"weight,omitempty"`
	// 购入金额
	Cost int64 `json:"cost,omitempty"`
	// 运输费用
	ShippingFee int64 `json:"shippingFee,omitempty"`
	// 运输证号
	ShippingCode string `json:"shippingCode,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 检疫证号
	CheckCode string `json:"checkCode,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleIn) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattlein.FieldID, cattlein.FieldJoinType, cattlein.FieldDate, cattlein.FieldWeight, cattlein.FieldCost, cattlein.FieldShippingFee, cattlein.FieldTenantId, cattlein.FieldCreatedAt, cattlein.FieldUpdatedAt, cattlein.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattlein.FieldFrom, cattlein.FieldShippingCode, cattlein.FieldUserName, cattlein.FieldCheckCode, cattlein.FieldTenantName, cattlein.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleIn", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleIn fields.
func (ci *CattleIn) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattlein.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int(value.Int64)
		case cattlein.FieldJoinType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field joinType", values[i])
			} else if value.Valid {
				ci.JoinType = value.Int64
			}
		case cattlein.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ci.Date = value.Int64
			}
		case cattlein.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				ci.From = value.String
			}
		case cattlein.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				ci.Weight = value.Int64
			}
		case cattlein.FieldCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				ci.Cost = value.Int64
			}
		case cattlein.FieldShippingFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shippingFee", values[i])
			} else if value.Valid {
				ci.ShippingFee = value.Int64
			}
		case cattlein.FieldShippingCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shippingCode", values[i])
			} else if value.Valid {
				ci.ShippingCode = value.String
			}
		case cattlein.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				ci.UserName = value.String
			}
		case cattlein.FieldCheckCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field checkCode", values[i])
			} else if value.Valid {
				ci.CheckCode = value.String
			}
		case cattlein.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				ci.TenantId = value.Int64
			}
		case cattlein.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				ci.TenantName = value.String
			}
		case cattlein.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				ci.Remarks = value.String
			}
		case cattlein.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Int64
			}
		case cattlein.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ci.UpdatedAt = value.Int64
			}
		case cattlein.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				ci.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleIn.
// Note that you need to call CattleIn.Unwrap() before calling this method if this CattleIn
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CattleIn) Update() *CattleInUpdateOne {
	return (&CattleInClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the CattleIn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CattleIn) Unwrap() *CattleIn {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleIn is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CattleIn) String() string {
	var builder strings.Builder
	builder.WriteString("CattleIn(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("joinType=")
	builder.WriteString(fmt.Sprintf("%v", ci.JoinType))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", ci.Date))
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(ci.From)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", ci.Weight))
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", ci.Cost))
	builder.WriteString(", ")
	builder.WriteString("shippingFee=")
	builder.WriteString(fmt.Sprintf("%v", ci.ShippingFee))
	builder.WriteString(", ")
	builder.WriteString("shippingCode=")
	builder.WriteString(ci.ShippingCode)
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(ci.UserName)
	builder.WriteString(", ")
	builder.WriteString("checkCode=")
	builder.WriteString(ci.CheckCode)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", ci.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(ci.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(ci.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", ci.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", ci.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", ci.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleIns is a parsable slice of CattleIn.
type CattleIns []*CattleIn

func (ci CattleIns) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}

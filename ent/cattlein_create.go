// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlein"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleInCreate is the builder for creating a CattleIn entity.
type CattleInCreate struct {
	config
	mutation *CattleInMutation
	hooks    []Hook
}

// SetName sets the name field.
func (cic *CattleInCreate) SetName(s string) *CattleInCreate {
	cic.mutation.SetName(s)
	return cic
}

// SetType sets the type field.
func (cic *CattleInCreate) SetType(i int) *CattleInCreate {
	cic.mutation.SetType(i)
	return cic
}

// SetDate sets the date field.
func (cic *CattleInCreate) SetDate(i int64) *CattleInCreate {
	cic.mutation.SetDate(i)
	return cic
}

// SetFrom sets the from field.
func (cic *CattleInCreate) SetFrom(s string) *CattleInCreate {
	cic.mutation.SetFrom(s)
	return cic
}

// SetWeight sets the weight field.
func (cic *CattleInCreate) SetWeight(f float32) *CattleInCreate {
	cic.mutation.SetWeight(f)
	return cic
}

// SetCost sets the cost field.
func (cic *CattleInCreate) SetCost(f float32) *CattleInCreate {
	cic.mutation.SetCost(f)
	return cic
}

// SetShippingFee sets the shippingFee field.
func (cic *CattleInCreate) SetShippingFee(f float32) *CattleInCreate {
	cic.mutation.SetShippingFee(f)
	return cic
}

// SetTransportCertificateNumber sets the transportCertificateNumber field.
func (cic *CattleInCreate) SetTransportCertificateNumber(s string) *CattleInCreate {
	cic.mutation.SetTransportCertificateNumber(s)
	return cic
}

// SetUserName sets the userName field.
func (cic *CattleInCreate) SetUserName(s string) *CattleInCreate {
	cic.mutation.SetUserName(s)
	return cic
}

// SetTestCertificateNumber sets the testCertificateNumber field.
func (cic *CattleInCreate) SetTestCertificateNumber(s string) *CattleInCreate {
	cic.mutation.SetTestCertificateNumber(s)
	return cic
}

// SetRemarks sets the remarks field.
func (cic *CattleInCreate) SetRemarks(s string) *CattleInCreate {
	cic.mutation.SetRemarks(s)
	return cic
}

// SetCreatedAt sets the createdAt field.
func (cic *CattleInCreate) SetCreatedAt(i int64) *CattleInCreate {
	cic.mutation.SetCreatedAt(i)
	return cic
}

// SetUpdatedAt sets the updatedAt field.
func (cic *CattleInCreate) SetUpdatedAt(i int64) *CattleInCreate {
	cic.mutation.SetUpdatedAt(i)
	return cic
}

// SetDeleted sets the deleted field.
func (cic *CattleInCreate) SetDeleted(i int) *CattleInCreate {
	cic.mutation.SetDeleted(i)
	return cic
}

// Mutation returns the CattleInMutation object of the builder.
func (cic *CattleInCreate) Mutation() *CattleInMutation {
	return cic.mutation
}

// Save creates the CattleIn in the database.
func (cic *CattleInCreate) Save(ctx context.Context) (*CattleIn, error) {
	var (
		err  error
		node *CattleIn
	)
	if len(cic.hooks) == 0 {
		if err = cic.check(); err != nil {
			return nil, err
		}
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleInMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cic.check(); err != nil {
				return nil, err
			}
			cic.mutation = mutation
			node, err = cic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			mut = cic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CattleInCreate) SaveX(ctx context.Context) *CattleIn {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cic *CattleInCreate) check() error {
	if _, ok := cic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := cic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := cic.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := cic.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New("ent: missing required field \"from\"")}
	}
	if _, ok := cic.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New("ent: missing required field \"weight\"")}
	}
	if _, ok := cic.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New("ent: missing required field \"cost\"")}
	}
	if _, ok := cic.mutation.ShippingFee(); !ok {
		return &ValidationError{Name: "shippingFee", err: errors.New("ent: missing required field \"shippingFee\"")}
	}
	if _, ok := cic.mutation.TransportCertificateNumber(); !ok {
		return &ValidationError{Name: "transportCertificateNumber", err: errors.New("ent: missing required field \"transportCertificateNumber\"")}
	}
	if _, ok := cic.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := cic.mutation.TestCertificateNumber(); !ok {
		return &ValidationError{Name: "testCertificateNumber", err: errors.New("ent: missing required field \"testCertificateNumber\"")}
	}
	if _, ok := cic.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := cic.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (cic *CattleInCreate) sqlSave(ctx context.Context) (*CattleIn, error) {
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (cic *CattleInCreate) createSpec() (*CattleIn, *sqlgraph.CreateSpec) {
	var (
		_node = &CattleIn{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cattlein.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlein.FieldID,
			},
		}
	)
	if value, ok := cic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlein.FieldType,
		})
		_node.Type = value
	}
	if value, ok := cic.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := cic.mutation.From(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldFrom,
		})
		_node.From = value
	}
	if value, ok := cic.mutation.Weight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlein.FieldWeight,
		})
		_node.Weight = value
	}
	if value, ok := cic.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlein.FieldCost,
		})
		_node.Cost = value
	}
	if value, ok := cic.mutation.ShippingFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattlein.FieldShippingFee,
		})
		_node.ShippingFee = value
	}
	if value, ok := cic.mutation.TransportCertificateNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldTransportCertificateNumber,
		})
		_node.TransportCertificateNumber = value
	}
	if value, ok := cic.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := cic.mutation.TestCertificateNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldTestCertificateNumber,
		})
		_node.TestCertificateNumber = value
	}
	if value, ok := cic.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cic.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlein.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// CattleInCreateBulk is the builder for creating a bulk of CattleIn entities.
type CattleInCreateBulk struct {
	config
	builders []*CattleInCreate
}

// Save creates the CattleIn entities in the database.
func (cicb *CattleInCreateBulk) Save(ctx context.Context) ([]*CattleIn, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CattleIn, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CattleInMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (cicb *CattleInCreateBulk) SaveX(ctx context.Context) []*CattleIn {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

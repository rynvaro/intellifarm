// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlein"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleInUpdate is the builder for updating CattleIn entities.
type CattleInUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleInMutation
	predicates []predicate.CattleIn
}

// Where adds a new predicate for the builder.
func (ciu *CattleInUpdate) Where(ps ...predicate.CattleIn) *CattleInUpdate {
	ciu.predicates = append(ciu.predicates, ps...)
	return ciu
}

// SetJoinType sets the joinType field.
func (ciu *CattleInUpdate) SetJoinType(i int64) *CattleInUpdate {
	ciu.mutation.ResetJoinType()
	ciu.mutation.SetJoinType(i)
	return ciu
}

// AddJoinType adds i to joinType.
func (ciu *CattleInUpdate) AddJoinType(i int64) *CattleInUpdate {
	ciu.mutation.AddJoinType(i)
	return ciu
}

// SetDate sets the date field.
func (ciu *CattleInUpdate) SetDate(i int64) *CattleInUpdate {
	ciu.mutation.ResetDate()
	ciu.mutation.SetDate(i)
	return ciu
}

// AddDate adds i to date.
func (ciu *CattleInUpdate) AddDate(i int64) *CattleInUpdate {
	ciu.mutation.AddDate(i)
	return ciu
}

// SetFrom sets the from field.
func (ciu *CattleInUpdate) SetFrom(s string) *CattleInUpdate {
	ciu.mutation.SetFrom(s)
	return ciu
}

// SetWeight sets the weight field.
func (ciu *CattleInUpdate) SetWeight(i int64) *CattleInUpdate {
	ciu.mutation.ResetWeight()
	ciu.mutation.SetWeight(i)
	return ciu
}

// AddWeight adds i to weight.
func (ciu *CattleInUpdate) AddWeight(i int64) *CattleInUpdate {
	ciu.mutation.AddWeight(i)
	return ciu
}

// SetCost sets the cost field.
func (ciu *CattleInUpdate) SetCost(i int64) *CattleInUpdate {
	ciu.mutation.ResetCost()
	ciu.mutation.SetCost(i)
	return ciu
}

// AddCost adds i to cost.
func (ciu *CattleInUpdate) AddCost(i int64) *CattleInUpdate {
	ciu.mutation.AddCost(i)
	return ciu
}

// SetShippingFee sets the shippingFee field.
func (ciu *CattleInUpdate) SetShippingFee(i int64) *CattleInUpdate {
	ciu.mutation.ResetShippingFee()
	ciu.mutation.SetShippingFee(i)
	return ciu
}

// AddShippingFee adds i to shippingFee.
func (ciu *CattleInUpdate) AddShippingFee(i int64) *CattleInUpdate {
	ciu.mutation.AddShippingFee(i)
	return ciu
}

// SetShippingCode sets the shippingCode field.
func (ciu *CattleInUpdate) SetShippingCode(s string) *CattleInUpdate {
	ciu.mutation.SetShippingCode(s)
	return ciu
}

// SetUserName sets the userName field.
func (ciu *CattleInUpdate) SetUserName(s string) *CattleInUpdate {
	ciu.mutation.SetUserName(s)
	return ciu
}

// SetCheckCode sets the checkCode field.
func (ciu *CattleInUpdate) SetCheckCode(s string) *CattleInUpdate {
	ciu.mutation.SetCheckCode(s)
	return ciu
}

// SetTenantId sets the tenantId field.
func (ciu *CattleInUpdate) SetTenantId(i int64) *CattleInUpdate {
	ciu.mutation.ResetTenantId()
	ciu.mutation.SetTenantId(i)
	return ciu
}

// AddTenantId adds i to tenantId.
func (ciu *CattleInUpdate) AddTenantId(i int64) *CattleInUpdate {
	ciu.mutation.AddTenantId(i)
	return ciu
}

// SetTenantName sets the tenantName field.
func (ciu *CattleInUpdate) SetTenantName(s string) *CattleInUpdate {
	ciu.mutation.SetTenantName(s)
	return ciu
}

// SetRemarks sets the remarks field.
func (ciu *CattleInUpdate) SetRemarks(s string) *CattleInUpdate {
	ciu.mutation.SetRemarks(s)
	return ciu
}

// SetCreatedAt sets the createdAt field.
func (ciu *CattleInUpdate) SetCreatedAt(i int64) *CattleInUpdate {
	ciu.mutation.ResetCreatedAt()
	ciu.mutation.SetCreatedAt(i)
	return ciu
}

// AddCreatedAt adds i to createdAt.
func (ciu *CattleInUpdate) AddCreatedAt(i int64) *CattleInUpdate {
	ciu.mutation.AddCreatedAt(i)
	return ciu
}

// SetUpdatedAt sets the updatedAt field.
func (ciu *CattleInUpdate) SetUpdatedAt(i int64) *CattleInUpdate {
	ciu.mutation.ResetUpdatedAt()
	ciu.mutation.SetUpdatedAt(i)
	return ciu
}

// AddUpdatedAt adds i to updatedAt.
func (ciu *CattleInUpdate) AddUpdatedAt(i int64) *CattleInUpdate {
	ciu.mutation.AddUpdatedAt(i)
	return ciu
}

// SetDeleted sets the deleted field.
func (ciu *CattleInUpdate) SetDeleted(i int) *CattleInUpdate {
	ciu.mutation.ResetDeleted()
	ciu.mutation.SetDeleted(i)
	return ciu
}

// AddDeleted adds i to deleted.
func (ciu *CattleInUpdate) AddDeleted(i int) *CattleInUpdate {
	ciu.mutation.AddDeleted(i)
	return ciu
}

// Mutation returns the CattleInMutation object of the builder.
func (ciu *CattleInUpdate) Mutation() *CattleInMutation {
	return ciu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ciu *CattleInUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ciu.hooks) == 0 {
		affected, err = ciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleInMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciu.mutation = mutation
			affected, err = ciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ciu.hooks) - 1; i >= 0; i-- {
			mut = ciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CattleInUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CattleInUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CattleInUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciu *CattleInUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlein.Table,
			Columns: cattlein.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlein.FieldID,
			},
		},
	}
	if ps := ciu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.JoinType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldJoinType,
		})
	}
	if value, ok := ciu.mutation.AddedJoinType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldJoinType,
		})
	}
	if value, ok := ciu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldDate,
		})
	}
	if value, ok := ciu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldDate,
		})
	}
	if value, ok := ciu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldFrom,
		})
	}
	if value, ok := ciu.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldWeight,
		})
	}
	if value, ok := ciu.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldWeight,
		})
	}
	if value, ok := ciu.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldCost,
		})
	}
	if value, ok := ciu.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldCost,
		})
	}
	if value, ok := ciu.mutation.ShippingFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldShippingFee,
		})
	}
	if value, ok := ciu.mutation.AddedShippingFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldShippingFee,
		})
	}
	if value, ok := ciu.mutation.ShippingCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldShippingCode,
		})
	}
	if value, ok := ciu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldUserName,
		})
	}
	if value, ok := ciu.mutation.CheckCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldCheckCode,
		})
	}
	if value, ok := ciu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldTenantId,
		})
	}
	if value, ok := ciu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldTenantId,
		})
	}
	if value, ok := ciu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldTenantName,
		})
	}
	if value, ok := ciu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldRemarks,
		})
	}
	if value, ok := ciu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldCreatedAt,
		})
	}
	if value, ok := ciu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldCreatedAt,
		})
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldUpdatedAt,
		})
	}
	if value, ok := ciu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldUpdatedAt,
		})
	}
	if value, ok := ciu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlein.FieldDeleted,
		})
	}
	if value, ok := ciu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlein.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlein.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleInUpdateOne is the builder for updating a single CattleIn entity.
type CattleInUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleInMutation
}

// SetJoinType sets the joinType field.
func (ciuo *CattleInUpdateOne) SetJoinType(i int64) *CattleInUpdateOne {
	ciuo.mutation.ResetJoinType()
	ciuo.mutation.SetJoinType(i)
	return ciuo
}

// AddJoinType adds i to joinType.
func (ciuo *CattleInUpdateOne) AddJoinType(i int64) *CattleInUpdateOne {
	ciuo.mutation.AddJoinType(i)
	return ciuo
}

// SetDate sets the date field.
func (ciuo *CattleInUpdateOne) SetDate(i int64) *CattleInUpdateOne {
	ciuo.mutation.ResetDate()
	ciuo.mutation.SetDate(i)
	return ciuo
}

// AddDate adds i to date.
func (ciuo *CattleInUpdateOne) AddDate(i int64) *CattleInUpdateOne {
	ciuo.mutation.AddDate(i)
	return ciuo
}

// SetFrom sets the from field.
func (ciuo *CattleInUpdateOne) SetFrom(s string) *CattleInUpdateOne {
	ciuo.mutation.SetFrom(s)
	return ciuo
}

// SetWeight sets the weight field.
func (ciuo *CattleInUpdateOne) SetWeight(i int64) *CattleInUpdateOne {
	ciuo.mutation.ResetWeight()
	ciuo.mutation.SetWeight(i)
	return ciuo
}

// AddWeight adds i to weight.
func (ciuo *CattleInUpdateOne) AddWeight(i int64) *CattleInUpdateOne {
	ciuo.mutation.AddWeight(i)
	return ciuo
}

// SetCost sets the cost field.
func (ciuo *CattleInUpdateOne) SetCost(i int64) *CattleInUpdateOne {
	ciuo.mutation.ResetCost()
	ciuo.mutation.SetCost(i)
	return ciuo
}

// AddCost adds i to cost.
func (ciuo *CattleInUpdateOne) AddCost(i int64) *CattleInUpdateOne {
	ciuo.mutation.AddCost(i)
	return ciuo
}

// SetShippingFee sets the shippingFee field.
func (ciuo *CattleInUpdateOne) SetShippingFee(i int64) *CattleInUpdateOne {
	ciuo.mutation.ResetShippingFee()
	ciuo.mutation.SetShippingFee(i)
	return ciuo
}

// AddShippingFee adds i to shippingFee.
func (ciuo *CattleInUpdateOne) AddShippingFee(i int64) *CattleInUpdateOne {
	ciuo.mutation.AddShippingFee(i)
	return ciuo
}

// SetShippingCode sets the shippingCode field.
func (ciuo *CattleInUpdateOne) SetShippingCode(s string) *CattleInUpdateOne {
	ciuo.mutation.SetShippingCode(s)
	return ciuo
}

// SetUserName sets the userName field.
func (ciuo *CattleInUpdateOne) SetUserName(s string) *CattleInUpdateOne {
	ciuo.mutation.SetUserName(s)
	return ciuo
}

// SetCheckCode sets the checkCode field.
func (ciuo *CattleInUpdateOne) SetCheckCode(s string) *CattleInUpdateOne {
	ciuo.mutation.SetCheckCode(s)
	return ciuo
}

// SetTenantId sets the tenantId field.
func (ciuo *CattleInUpdateOne) SetTenantId(i int64) *CattleInUpdateOne {
	ciuo.mutation.ResetTenantId()
	ciuo.mutation.SetTenantId(i)
	return ciuo
}

// AddTenantId adds i to tenantId.
func (ciuo *CattleInUpdateOne) AddTenantId(i int64) *CattleInUpdateOne {
	ciuo.mutation.AddTenantId(i)
	return ciuo
}

// SetTenantName sets the tenantName field.
func (ciuo *CattleInUpdateOne) SetTenantName(s string) *CattleInUpdateOne {
	ciuo.mutation.SetTenantName(s)
	return ciuo
}

// SetRemarks sets the remarks field.
func (ciuo *CattleInUpdateOne) SetRemarks(s string) *CattleInUpdateOne {
	ciuo.mutation.SetRemarks(s)
	return ciuo
}

// SetCreatedAt sets the createdAt field.
func (ciuo *CattleInUpdateOne) SetCreatedAt(i int64) *CattleInUpdateOne {
	ciuo.mutation.ResetCreatedAt()
	ciuo.mutation.SetCreatedAt(i)
	return ciuo
}

// AddCreatedAt adds i to createdAt.
func (ciuo *CattleInUpdateOne) AddCreatedAt(i int64) *CattleInUpdateOne {
	ciuo.mutation.AddCreatedAt(i)
	return ciuo
}

// SetUpdatedAt sets the updatedAt field.
func (ciuo *CattleInUpdateOne) SetUpdatedAt(i int64) *CattleInUpdateOne {
	ciuo.mutation.ResetUpdatedAt()
	ciuo.mutation.SetUpdatedAt(i)
	return ciuo
}

// AddUpdatedAt adds i to updatedAt.
func (ciuo *CattleInUpdateOne) AddUpdatedAt(i int64) *CattleInUpdateOne {
	ciuo.mutation.AddUpdatedAt(i)
	return ciuo
}

// SetDeleted sets the deleted field.
func (ciuo *CattleInUpdateOne) SetDeleted(i int) *CattleInUpdateOne {
	ciuo.mutation.ResetDeleted()
	ciuo.mutation.SetDeleted(i)
	return ciuo
}

// AddDeleted adds i to deleted.
func (ciuo *CattleInUpdateOne) AddDeleted(i int) *CattleInUpdateOne {
	ciuo.mutation.AddDeleted(i)
	return ciuo
}

// Mutation returns the CattleInMutation object of the builder.
func (ciuo *CattleInUpdateOne) Mutation() *CattleInMutation {
	return ciuo.mutation
}

// Save executes the query and returns the updated entity.
func (ciuo *CattleInUpdateOne) Save(ctx context.Context) (*CattleIn, error) {
	var (
		err  error
		node *CattleIn
	)
	if len(ciuo.hooks) == 0 {
		node, err = ciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleInMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciuo.mutation = mutation
			node, err = ciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ciuo.hooks) - 1; i >= 0; i-- {
			mut = ciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CattleInUpdateOne) SaveX(ctx context.Context) *CattleIn {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CattleInUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CattleInUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciuo *CattleInUpdateOne) sqlSave(ctx context.Context) (_node *CattleIn, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlein.Table,
			Columns: cattlein.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlein.FieldID,
			},
		},
	}
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CattleIn.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ciuo.mutation.JoinType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldJoinType,
		})
	}
	if value, ok := ciuo.mutation.AddedJoinType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldJoinType,
		})
	}
	if value, ok := ciuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldDate,
		})
	}
	if value, ok := ciuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldDate,
		})
	}
	if value, ok := ciuo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldFrom,
		})
	}
	if value, ok := ciuo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldWeight,
		})
	}
	if value, ok := ciuo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldWeight,
		})
	}
	if value, ok := ciuo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldCost,
		})
	}
	if value, ok := ciuo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldCost,
		})
	}
	if value, ok := ciuo.mutation.ShippingFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldShippingFee,
		})
	}
	if value, ok := ciuo.mutation.AddedShippingFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldShippingFee,
		})
	}
	if value, ok := ciuo.mutation.ShippingCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldShippingCode,
		})
	}
	if value, ok := ciuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldUserName,
		})
	}
	if value, ok := ciuo.mutation.CheckCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldCheckCode,
		})
	}
	if value, ok := ciuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldTenantId,
		})
	}
	if value, ok := ciuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldTenantId,
		})
	}
	if value, ok := ciuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldTenantName,
		})
	}
	if value, ok := ciuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlein.FieldRemarks,
		})
	}
	if value, ok := ciuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldCreatedAt,
		})
	}
	if value, ok := ciuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldCreatedAt,
		})
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldUpdatedAt,
		})
	}
	if value, ok := ciuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlein.FieldUpdatedAt,
		})
	}
	if value, ok := ciuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlein.FieldDeleted,
		})
	}
	if value, ok := ciuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlein.FieldDeleted,
		})
	}
	_node = &CattleIn{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlein.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

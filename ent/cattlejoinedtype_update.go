// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlejoinedtype"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CattleJoinedTypeUpdate is the builder for updating CattleJoinedType entities.
type CattleJoinedTypeUpdate struct {
	config
	hooks    []Hook
	mutation *CattleJoinedTypeMutation
}

// Where appends a list predicates to the CattleJoinedTypeUpdate builder.
func (cjtu *CattleJoinedTypeUpdate) Where(ps ...predicate.CattleJoinedType) *CattleJoinedTypeUpdate {
	cjtu.mutation.Where(ps...)
	return cjtu
}

// SetName sets the "name" field.
func (cjtu *CattleJoinedTypeUpdate) SetName(s string) *CattleJoinedTypeUpdate {
	cjtu.mutation.SetName(s)
	return cjtu
}

// Mutation returns the CattleJoinedTypeMutation object of the builder.
func (cjtu *CattleJoinedTypeUpdate) Mutation() *CattleJoinedTypeMutation {
	return cjtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cjtu *CattleJoinedTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cjtu.hooks) == 0 {
		if err = cjtu.check(); err != nil {
			return 0, err
		}
		affected, err = cjtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleJoinedTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cjtu.check(); err != nil {
				return 0, err
			}
			cjtu.mutation = mutation
			affected, err = cjtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cjtu.hooks) - 1; i >= 0; i-- {
			if cjtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cjtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cjtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cjtu *CattleJoinedTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := cjtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cjtu *CattleJoinedTypeUpdate) Exec(ctx context.Context) error {
	_, err := cjtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjtu *CattleJoinedTypeUpdate) ExecX(ctx context.Context) {
	if err := cjtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cjtu *CattleJoinedTypeUpdate) check() error {
	if v, ok := cjtu.mutation.Name(); ok {
		if err := cattlejoinedtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CattleJoinedType.name": %w`, err)}
		}
	}
	return nil
}

func (cjtu *CattleJoinedTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlejoinedtype.Table,
			Columns: cattlejoinedtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlejoinedtype.FieldID,
			},
		},
	}
	if ps := cjtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cjtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlejoinedtype.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cjtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlejoinedtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CattleJoinedTypeUpdateOne is the builder for updating a single CattleJoinedType entity.
type CattleJoinedTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CattleJoinedTypeMutation
}

// SetName sets the "name" field.
func (cjtuo *CattleJoinedTypeUpdateOne) SetName(s string) *CattleJoinedTypeUpdateOne {
	cjtuo.mutation.SetName(s)
	return cjtuo
}

// Mutation returns the CattleJoinedTypeMutation object of the builder.
func (cjtuo *CattleJoinedTypeUpdateOne) Mutation() *CattleJoinedTypeMutation {
	return cjtuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cjtuo *CattleJoinedTypeUpdateOne) Select(field string, fields ...string) *CattleJoinedTypeUpdateOne {
	cjtuo.fields = append([]string{field}, fields...)
	return cjtuo
}

// Save executes the query and returns the updated CattleJoinedType entity.
func (cjtuo *CattleJoinedTypeUpdateOne) Save(ctx context.Context) (*CattleJoinedType, error) {
	var (
		err  error
		node *CattleJoinedType
	)
	if len(cjtuo.hooks) == 0 {
		if err = cjtuo.check(); err != nil {
			return nil, err
		}
		node, err = cjtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleJoinedTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cjtuo.check(); err != nil {
				return nil, err
			}
			cjtuo.mutation = mutation
			node, err = cjtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cjtuo.hooks) - 1; i >= 0; i-- {
			if cjtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cjtuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cjtuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CattleJoinedType)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CattleJoinedTypeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cjtuo *CattleJoinedTypeUpdateOne) SaveX(ctx context.Context) *CattleJoinedType {
	node, err := cjtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cjtuo *CattleJoinedTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := cjtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjtuo *CattleJoinedTypeUpdateOne) ExecX(ctx context.Context) {
	if err := cjtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cjtuo *CattleJoinedTypeUpdateOne) check() error {
	if v, ok := cjtuo.mutation.Name(); ok {
		if err := cattlejoinedtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CattleJoinedType.name": %w`, err)}
		}
	}
	return nil
}

func (cjtuo *CattleJoinedTypeUpdateOne) sqlSave(ctx context.Context) (_node *CattleJoinedType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlejoinedtype.Table,
			Columns: cattlejoinedtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlejoinedtype.FieldID,
			},
		},
	}
	id, ok := cjtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CattleJoinedType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cjtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cattlejoinedtype.FieldID)
		for _, f := range fields {
			if !cattlejoinedtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cattlejoinedtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cjtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cjtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlejoinedtype.FieldName,
		})
	}
	_node = &CattleJoinedType{config: cjtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cjtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlejoinedtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

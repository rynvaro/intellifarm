// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlemove"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleMove is the model entity for the CattleMove schema.
type CattleMove struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 日期
	Date int64 `json:"date,omitempty"`
	// 转出的牛舍ID
	FromShedId int64 `json:"fromShedId,omitempty"`
	// 转出的栋舍
	FromShed string `json:"fromShed,omitempty"`
	// 转到的牛舍ID
	ToShedId int64 `json:"toShedId,omitempty"`
	// 转到的栋舍
	ToShed string `json:"toShed,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// ReasonId holds the value of the "reasonId" field.
	ReasonId int64 `json:"reasonId,omitempty"`
	// ReasonName holds the value of the "reasonName" field.
	ReasonName string `json:"reasonName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleMove) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattlemove.FieldID, cattlemove.FieldCattleId, cattlemove.FieldTenantId, cattlemove.FieldFarmId, cattlemove.FieldShedId, cattlemove.FieldDate, cattlemove.FieldFromShedId, cattlemove.FieldToShedId, cattlemove.FieldReasonId, cattlemove.FieldCreatedAt, cattlemove.FieldUpdatedAt, cattlemove.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattlemove.FieldTenantName, cattlemove.FieldFarmName, cattlemove.FieldShedName, cattlemove.FieldEarNumber, cattlemove.FieldFromShed, cattlemove.FieldToShed, cattlemove.FieldUserName, cattlemove.FieldReasonName, cattlemove.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleMove", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleMove fields.
func (cm *CattleMove) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattlemove.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case cattlemove.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				cm.CattleId = value.Int64
			}
		case cattlemove.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cm.TenantId = value.Int64
			}
		case cattlemove.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				cm.TenantName = value.String
			}
		case cattlemove.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				cm.FarmId = value.Int64
			}
		case cattlemove.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				cm.FarmName = value.String
			}
		case cattlemove.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				cm.ShedId = value.Int64
			}
		case cattlemove.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				cm.ShedName = value.String
			}
		case cattlemove.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				cm.EarNumber = value.String
			}
		case cattlemove.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				cm.Date = value.Int64
			}
		case cattlemove.FieldFromShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fromShedId", values[i])
			} else if value.Valid {
				cm.FromShedId = value.Int64
			}
		case cattlemove.FieldFromShed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fromShed", values[i])
			} else if value.Valid {
				cm.FromShed = value.String
			}
		case cattlemove.FieldToShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field toShedId", values[i])
			} else if value.Valid {
				cm.ToShedId = value.Int64
			}
		case cattlemove.FieldToShed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field toShed", values[i])
			} else if value.Valid {
				cm.ToShed = value.String
			}
		case cattlemove.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				cm.UserName = value.String
			}
		case cattlemove.FieldReasonId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reasonId", values[i])
			} else if value.Valid {
				cm.ReasonId = value.Int64
			}
		case cattlemove.FieldReasonName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reasonName", values[i])
			} else if value.Valid {
				cm.ReasonName = value.String
			}
		case cattlemove.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				cm.Remarks = value.String
			}
		case cattlemove.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Int64
			}
		case cattlemove.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cm.UpdatedAt = value.Int64
			}
		case cattlemove.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cm.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleMove.
// Note that you need to call CattleMove.Unwrap() before calling this method if this CattleMove
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *CattleMove) Update() *CattleMoveUpdateOne {
	return (&CattleMoveClient{config: cm.config}).UpdateOne(cm)
}

// Unwrap unwraps the CattleMove entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *CattleMove) Unwrap() *CattleMove {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleMove is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *CattleMove) String() string {
	var builder strings.Builder
	builder.WriteString("CattleMove(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", cm.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cm.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(cm.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", cm.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(cm.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", cm.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(cm.ShedName)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(cm.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", cm.Date))
	builder.WriteString(", ")
	builder.WriteString("fromShedId=")
	builder.WriteString(fmt.Sprintf("%v", cm.FromShedId))
	builder.WriteString(", ")
	builder.WriteString("fromShed=")
	builder.WriteString(cm.FromShed)
	builder.WriteString(", ")
	builder.WriteString("toShedId=")
	builder.WriteString(fmt.Sprintf("%v", cm.ToShedId))
	builder.WriteString(", ")
	builder.WriteString("toShed=")
	builder.WriteString(cm.ToShed)
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(cm.UserName)
	builder.WriteString(", ")
	builder.WriteString("reasonId=")
	builder.WriteString(fmt.Sprintf("%v", cm.ReasonId))
	builder.WriteString(", ")
	builder.WriteString("reasonName=")
	builder.WriteString(cm.ReasonName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(cm.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cm.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cm.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cm.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleMoves is a parsable slice of CattleMove.
type CattleMoves []*CattleMove

func (cm CattleMoves) config(cfg config) {
	for _i := range cm {
		cm[_i].config = cfg
	}
}

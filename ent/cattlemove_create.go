// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlemove"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleMoveCreate is the builder for creating a CattleMove entity.
type CattleMoveCreate struct {
	config
	mutation *CattleMoveMutation
	hooks    []Hook
}

// SetEarNumber sets the earNumber field.
func (cmc *CattleMoveCreate) SetEarNumber(s string) *CattleMoveCreate {
	cmc.mutation.SetEarNumber(s)
	return cmc
}

// SetDate sets the date field.
func (cmc *CattleMoveCreate) SetDate(i int64) *CattleMoveCreate {
	cmc.mutation.SetDate(i)
	return cmc
}

// SetToShed sets the toShed field.
func (cmc *CattleMoveCreate) SetToShed(s string) *CattleMoveCreate {
	cmc.mutation.SetToShed(s)
	return cmc
}

// SetUserName sets the userName field.
func (cmc *CattleMoveCreate) SetUserName(s string) *CattleMoveCreate {
	cmc.mutation.SetUserName(s)
	return cmc
}

// SetReason sets the reason field.
func (cmc *CattleMoveCreate) SetReason(i int64) *CattleMoveCreate {
	cmc.mutation.SetReason(i)
	return cmc
}

// SetTenantId sets the tenantId field.
func (cmc *CattleMoveCreate) SetTenantId(i int64) *CattleMoveCreate {
	cmc.mutation.SetTenantId(i)
	return cmc
}

// SetTenantName sets the tenantName field.
func (cmc *CattleMoveCreate) SetTenantName(s string) *CattleMoveCreate {
	cmc.mutation.SetTenantName(s)
	return cmc
}

// SetRemarks sets the remarks field.
func (cmc *CattleMoveCreate) SetRemarks(s string) *CattleMoveCreate {
	cmc.mutation.SetRemarks(s)
	return cmc
}

// SetCreatedAt sets the createdAt field.
func (cmc *CattleMoveCreate) SetCreatedAt(i int64) *CattleMoveCreate {
	cmc.mutation.SetCreatedAt(i)
	return cmc
}

// SetUpdatedAt sets the updatedAt field.
func (cmc *CattleMoveCreate) SetUpdatedAt(i int64) *CattleMoveCreate {
	cmc.mutation.SetUpdatedAt(i)
	return cmc
}

// SetDeleted sets the deleted field.
func (cmc *CattleMoveCreate) SetDeleted(i int) *CattleMoveCreate {
	cmc.mutation.SetDeleted(i)
	return cmc
}

// Mutation returns the CattleMoveMutation object of the builder.
func (cmc *CattleMoveCreate) Mutation() *CattleMoveMutation {
	return cmc.mutation
}

// Save creates the CattleMove in the database.
func (cmc *CattleMoveCreate) Save(ctx context.Context) (*CattleMove, error) {
	var (
		err  error
		node *CattleMove
	)
	if len(cmc.hooks) == 0 {
		if err = cmc.check(); err != nil {
			return nil, err
		}
		node, err = cmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMoveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmc.check(); err != nil {
				return nil, err
			}
			cmc.mutation = mutation
			node, err = cmc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmc.hooks) - 1; i >= 0; i-- {
			mut = cmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CattleMoveCreate) SaveX(ctx context.Context) *CattleMove {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CattleMoveCreate) check() error {
	if _, ok := cmc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if _, ok := cmc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := cmc.mutation.ToShed(); !ok {
		return &ValidationError{Name: "toShed", err: errors.New("ent: missing required field \"toShed\"")}
	}
	if _, ok := cmc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := cmc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New("ent: missing required field \"reason\"")}
	}
	if _, ok := cmc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := cmc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := cmc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := cmc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (cmc *CattleMoveCreate) sqlSave(ctx context.Context) (*CattleMove, error) {
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (cmc *CattleMoveCreate) createSpec() (*CattleMove, *sqlgraph.CreateSpec) {
	var (
		_node = &CattleMove{config: cmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cattlemove.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlemove.FieldID,
			},
		}
	)
	if value, ok := cmc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := cmc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := cmc.mutation.ToShed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldToShed,
		})
		_node.ToShed = value
	}
	if value, ok := cmc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := cmc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := cmc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := cmc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := cmc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cmc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemove.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// CattleMoveCreateBulk is the builder for creating a bulk of CattleMove entities.
type CattleMoveCreateBulk struct {
	config
	builders []*CattleMoveCreate
}

// Save creates the CattleMove entities in the database.
func (cmcb *CattleMoveCreateBulk) Save(ctx context.Context) ([]*CattleMove, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CattleMove, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CattleMoveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (cmcb *CattleMoveCreateBulk) SaveX(ctx context.Context) []*CattleMove {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

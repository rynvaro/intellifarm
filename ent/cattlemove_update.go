// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlemove"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CattleMoveUpdate is the builder for updating CattleMove entities.
type CattleMoveUpdate struct {
	config
	hooks    []Hook
	mutation *CattleMoveMutation
}

// Where appends a list predicates to the CattleMoveUpdate builder.
func (cmu *CattleMoveUpdate) Where(ps ...predicate.CattleMove) *CattleMoveUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetCattleId sets the "cattleId" field.
func (cmu *CattleMoveUpdate) SetCattleId(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetCattleId()
	cmu.mutation.SetCattleId(i)
	return cmu
}

// AddCattleId adds i to the "cattleId" field.
func (cmu *CattleMoveUpdate) AddCattleId(i int64) *CattleMoveUpdate {
	cmu.mutation.AddCattleId(i)
	return cmu
}

// SetTenantId sets the "tenantId" field.
func (cmu *CattleMoveUpdate) SetTenantId(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetTenantId()
	cmu.mutation.SetTenantId(i)
	return cmu
}

// AddTenantId adds i to the "tenantId" field.
func (cmu *CattleMoveUpdate) AddTenantId(i int64) *CattleMoveUpdate {
	cmu.mutation.AddTenantId(i)
	return cmu
}

// SetTenantName sets the "tenantName" field.
func (cmu *CattleMoveUpdate) SetTenantName(s string) *CattleMoveUpdate {
	cmu.mutation.SetTenantName(s)
	return cmu
}

// SetFarmId sets the "farmId" field.
func (cmu *CattleMoveUpdate) SetFarmId(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetFarmId()
	cmu.mutation.SetFarmId(i)
	return cmu
}

// AddFarmId adds i to the "farmId" field.
func (cmu *CattleMoveUpdate) AddFarmId(i int64) *CattleMoveUpdate {
	cmu.mutation.AddFarmId(i)
	return cmu
}

// SetFarmName sets the "farmName" field.
func (cmu *CattleMoveUpdate) SetFarmName(s string) *CattleMoveUpdate {
	cmu.mutation.SetFarmName(s)
	return cmu
}

// SetShedId sets the "shedId" field.
func (cmu *CattleMoveUpdate) SetShedId(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetShedId()
	cmu.mutation.SetShedId(i)
	return cmu
}

// AddShedId adds i to the "shedId" field.
func (cmu *CattleMoveUpdate) AddShedId(i int64) *CattleMoveUpdate {
	cmu.mutation.AddShedId(i)
	return cmu
}

// SetShedName sets the "shedName" field.
func (cmu *CattleMoveUpdate) SetShedName(s string) *CattleMoveUpdate {
	cmu.mutation.SetShedName(s)
	return cmu
}

// SetEarNumber sets the "earNumber" field.
func (cmu *CattleMoveUpdate) SetEarNumber(s string) *CattleMoveUpdate {
	cmu.mutation.SetEarNumber(s)
	return cmu
}

// SetDate sets the "date" field.
func (cmu *CattleMoveUpdate) SetDate(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetDate()
	cmu.mutation.SetDate(i)
	return cmu
}

// AddDate adds i to the "date" field.
func (cmu *CattleMoveUpdate) AddDate(i int64) *CattleMoveUpdate {
	cmu.mutation.AddDate(i)
	return cmu
}

// SetFromShedId sets the "fromShedId" field.
func (cmu *CattleMoveUpdate) SetFromShedId(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetFromShedId()
	cmu.mutation.SetFromShedId(i)
	return cmu
}

// AddFromShedId adds i to the "fromShedId" field.
func (cmu *CattleMoveUpdate) AddFromShedId(i int64) *CattleMoveUpdate {
	cmu.mutation.AddFromShedId(i)
	return cmu
}

// SetFromShed sets the "fromShed" field.
func (cmu *CattleMoveUpdate) SetFromShed(s string) *CattleMoveUpdate {
	cmu.mutation.SetFromShed(s)
	return cmu
}

// SetToShedId sets the "toShedId" field.
func (cmu *CattleMoveUpdate) SetToShedId(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetToShedId()
	cmu.mutation.SetToShedId(i)
	return cmu
}

// AddToShedId adds i to the "toShedId" field.
func (cmu *CattleMoveUpdate) AddToShedId(i int64) *CattleMoveUpdate {
	cmu.mutation.AddToShedId(i)
	return cmu
}

// SetToShed sets the "toShed" field.
func (cmu *CattleMoveUpdate) SetToShed(s string) *CattleMoveUpdate {
	cmu.mutation.SetToShed(s)
	return cmu
}

// SetUserName sets the "userName" field.
func (cmu *CattleMoveUpdate) SetUserName(s string) *CattleMoveUpdate {
	cmu.mutation.SetUserName(s)
	return cmu
}

// SetReasonId sets the "reasonId" field.
func (cmu *CattleMoveUpdate) SetReasonId(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetReasonId()
	cmu.mutation.SetReasonId(i)
	return cmu
}

// AddReasonId adds i to the "reasonId" field.
func (cmu *CattleMoveUpdate) AddReasonId(i int64) *CattleMoveUpdate {
	cmu.mutation.AddReasonId(i)
	return cmu
}

// SetReasonName sets the "reasonName" field.
func (cmu *CattleMoveUpdate) SetReasonName(s string) *CattleMoveUpdate {
	cmu.mutation.SetReasonName(s)
	return cmu
}

// SetRemarks sets the "remarks" field.
func (cmu *CattleMoveUpdate) SetRemarks(s string) *CattleMoveUpdate {
	cmu.mutation.SetRemarks(s)
	return cmu
}

// SetCreatedAt sets the "createdAt" field.
func (cmu *CattleMoveUpdate) SetCreatedAt(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetCreatedAt()
	cmu.mutation.SetCreatedAt(i)
	return cmu
}

// AddCreatedAt adds i to the "createdAt" field.
func (cmu *CattleMoveUpdate) AddCreatedAt(i int64) *CattleMoveUpdate {
	cmu.mutation.AddCreatedAt(i)
	return cmu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cmu *CattleMoveUpdate) SetUpdatedAt(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetUpdatedAt()
	cmu.mutation.SetUpdatedAt(i)
	return cmu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cmu *CattleMoveUpdate) AddUpdatedAt(i int64) *CattleMoveUpdate {
	cmu.mutation.AddUpdatedAt(i)
	return cmu
}

// SetDeleted sets the "deleted" field.
func (cmu *CattleMoveUpdate) SetDeleted(i int) *CattleMoveUpdate {
	cmu.mutation.ResetDeleted()
	cmu.mutation.SetDeleted(i)
	return cmu
}

// AddDeleted adds i to the "deleted" field.
func (cmu *CattleMoveUpdate) AddDeleted(i int) *CattleMoveUpdate {
	cmu.mutation.AddDeleted(i)
	return cmu
}

// Mutation returns the CattleMoveMutation object of the builder.
func (cmu *CattleMoveUpdate) Mutation() *CattleMoveMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CattleMoveUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cmu.hooks) == 0 {
		affected, err = cmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMoveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmu.mutation = mutation
			affected, err = cmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmu.hooks) - 1; i >= 0; i-- {
			if cmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CattleMoveUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CattleMoveUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CattleMoveUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmu *CattleMoveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlemove.Table,
			Columns: cattlemove.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlemove.FieldID,
			},
		},
	}
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCattleId,
		})
	}
	if value, ok := cmu.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCattleId,
		})
	}
	if value, ok := cmu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldTenantId,
		})
	}
	if value, ok := cmu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldTenantId,
		})
	}
	if value, ok := cmu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldTenantName,
		})
	}
	if value, ok := cmu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldFarmId,
		})
	}
	if value, ok := cmu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldFarmId,
		})
	}
	if value, ok := cmu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldFarmName,
		})
	}
	if value, ok := cmu.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldShedId,
		})
	}
	if value, ok := cmu.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldShedId,
		})
	}
	if value, ok := cmu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldShedName,
		})
	}
	if value, ok := cmu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldEarNumber,
		})
	}
	if value, ok := cmu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldDate,
		})
	}
	if value, ok := cmu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldDate,
		})
	}
	if value, ok := cmu.mutation.FromShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldFromShedId,
		})
	}
	if value, ok := cmu.mutation.AddedFromShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldFromShedId,
		})
	}
	if value, ok := cmu.mutation.FromShed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldFromShed,
		})
	}
	if value, ok := cmu.mutation.ToShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldToShedId,
		})
	}
	if value, ok := cmu.mutation.AddedToShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldToShedId,
		})
	}
	if value, ok := cmu.mutation.ToShed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldToShed,
		})
	}
	if value, ok := cmu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldUserName,
		})
	}
	if value, ok := cmu.mutation.ReasonId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldReasonId,
		})
	}
	if value, ok := cmu.mutation.AddedReasonId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldReasonId,
		})
	}
	if value, ok := cmu.mutation.ReasonName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldReasonName,
		})
	}
	if value, ok := cmu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldRemarks,
		})
	}
	if value, ok := cmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCreatedAt,
		})
	}
	if value, ok := cmu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCreatedAt,
		})
	}
	if value, ok := cmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldUpdatedAt,
		})
	}
	if value, ok := cmu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldUpdatedAt,
		})
	}
	if value, ok := cmu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemove.FieldDeleted,
		})
	}
	if value, ok := cmu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemove.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlemove.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CattleMoveUpdateOne is the builder for updating a single CattleMove entity.
type CattleMoveUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CattleMoveMutation
}

// SetCattleId sets the "cattleId" field.
func (cmuo *CattleMoveUpdateOne) SetCattleId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetCattleId()
	cmuo.mutation.SetCattleId(i)
	return cmuo
}

// AddCattleId adds i to the "cattleId" field.
func (cmuo *CattleMoveUpdateOne) AddCattleId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddCattleId(i)
	return cmuo
}

// SetTenantId sets the "tenantId" field.
func (cmuo *CattleMoveUpdateOne) SetTenantId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetTenantId()
	cmuo.mutation.SetTenantId(i)
	return cmuo
}

// AddTenantId adds i to the "tenantId" field.
func (cmuo *CattleMoveUpdateOne) AddTenantId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddTenantId(i)
	return cmuo
}

// SetTenantName sets the "tenantName" field.
func (cmuo *CattleMoveUpdateOne) SetTenantName(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetTenantName(s)
	return cmuo
}

// SetFarmId sets the "farmId" field.
func (cmuo *CattleMoveUpdateOne) SetFarmId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetFarmId()
	cmuo.mutation.SetFarmId(i)
	return cmuo
}

// AddFarmId adds i to the "farmId" field.
func (cmuo *CattleMoveUpdateOne) AddFarmId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddFarmId(i)
	return cmuo
}

// SetFarmName sets the "farmName" field.
func (cmuo *CattleMoveUpdateOne) SetFarmName(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetFarmName(s)
	return cmuo
}

// SetShedId sets the "shedId" field.
func (cmuo *CattleMoveUpdateOne) SetShedId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetShedId()
	cmuo.mutation.SetShedId(i)
	return cmuo
}

// AddShedId adds i to the "shedId" field.
func (cmuo *CattleMoveUpdateOne) AddShedId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddShedId(i)
	return cmuo
}

// SetShedName sets the "shedName" field.
func (cmuo *CattleMoveUpdateOne) SetShedName(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetShedName(s)
	return cmuo
}

// SetEarNumber sets the "earNumber" field.
func (cmuo *CattleMoveUpdateOne) SetEarNumber(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetEarNumber(s)
	return cmuo
}

// SetDate sets the "date" field.
func (cmuo *CattleMoveUpdateOne) SetDate(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetDate()
	cmuo.mutation.SetDate(i)
	return cmuo
}

// AddDate adds i to the "date" field.
func (cmuo *CattleMoveUpdateOne) AddDate(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddDate(i)
	return cmuo
}

// SetFromShedId sets the "fromShedId" field.
func (cmuo *CattleMoveUpdateOne) SetFromShedId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetFromShedId()
	cmuo.mutation.SetFromShedId(i)
	return cmuo
}

// AddFromShedId adds i to the "fromShedId" field.
func (cmuo *CattleMoveUpdateOne) AddFromShedId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddFromShedId(i)
	return cmuo
}

// SetFromShed sets the "fromShed" field.
func (cmuo *CattleMoveUpdateOne) SetFromShed(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetFromShed(s)
	return cmuo
}

// SetToShedId sets the "toShedId" field.
func (cmuo *CattleMoveUpdateOne) SetToShedId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetToShedId()
	cmuo.mutation.SetToShedId(i)
	return cmuo
}

// AddToShedId adds i to the "toShedId" field.
func (cmuo *CattleMoveUpdateOne) AddToShedId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddToShedId(i)
	return cmuo
}

// SetToShed sets the "toShed" field.
func (cmuo *CattleMoveUpdateOne) SetToShed(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetToShed(s)
	return cmuo
}

// SetUserName sets the "userName" field.
func (cmuo *CattleMoveUpdateOne) SetUserName(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetUserName(s)
	return cmuo
}

// SetReasonId sets the "reasonId" field.
func (cmuo *CattleMoveUpdateOne) SetReasonId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetReasonId()
	cmuo.mutation.SetReasonId(i)
	return cmuo
}

// AddReasonId adds i to the "reasonId" field.
func (cmuo *CattleMoveUpdateOne) AddReasonId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddReasonId(i)
	return cmuo
}

// SetReasonName sets the "reasonName" field.
func (cmuo *CattleMoveUpdateOne) SetReasonName(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetReasonName(s)
	return cmuo
}

// SetRemarks sets the "remarks" field.
func (cmuo *CattleMoveUpdateOne) SetRemarks(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetRemarks(s)
	return cmuo
}

// SetCreatedAt sets the "createdAt" field.
func (cmuo *CattleMoveUpdateOne) SetCreatedAt(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetCreatedAt()
	cmuo.mutation.SetCreatedAt(i)
	return cmuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (cmuo *CattleMoveUpdateOne) AddCreatedAt(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddCreatedAt(i)
	return cmuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (cmuo *CattleMoveUpdateOne) SetUpdatedAt(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetUpdatedAt()
	cmuo.mutation.SetUpdatedAt(i)
	return cmuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cmuo *CattleMoveUpdateOne) AddUpdatedAt(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddUpdatedAt(i)
	return cmuo
}

// SetDeleted sets the "deleted" field.
func (cmuo *CattleMoveUpdateOne) SetDeleted(i int) *CattleMoveUpdateOne {
	cmuo.mutation.ResetDeleted()
	cmuo.mutation.SetDeleted(i)
	return cmuo
}

// AddDeleted adds i to the "deleted" field.
func (cmuo *CattleMoveUpdateOne) AddDeleted(i int) *CattleMoveUpdateOne {
	cmuo.mutation.AddDeleted(i)
	return cmuo
}

// Mutation returns the CattleMoveMutation object of the builder.
func (cmuo *CattleMoveUpdateOne) Mutation() *CattleMoveMutation {
	return cmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CattleMoveUpdateOne) Select(field string, fields ...string) *CattleMoveUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CattleMove entity.
func (cmuo *CattleMoveUpdateOne) Save(ctx context.Context) (*CattleMove, error) {
	var (
		err  error
		node *CattleMove
	)
	if len(cmuo.hooks) == 0 {
		node, err = cmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMoveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmuo.mutation = mutation
			node, err = cmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmuo.hooks) - 1; i >= 0; i-- {
			if cmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CattleMove)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CattleMoveMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CattleMoveUpdateOne) SaveX(ctx context.Context) *CattleMove {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CattleMoveUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CattleMoveUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmuo *CattleMoveUpdateOne) sqlSave(ctx context.Context) (_node *CattleMove, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlemove.Table,
			Columns: cattlemove.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattlemove.FieldID,
			},
		},
	}
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CattleMove.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cattlemove.FieldID)
		for _, f := range fields {
			if !cattlemove.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cattlemove.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCattleId,
		})
	}
	if value, ok := cmuo.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCattleId,
		})
	}
	if value, ok := cmuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldTenantId,
		})
	}
	if value, ok := cmuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldTenantId,
		})
	}
	if value, ok := cmuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldTenantName,
		})
	}
	if value, ok := cmuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldFarmId,
		})
	}
	if value, ok := cmuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldFarmId,
		})
	}
	if value, ok := cmuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldFarmName,
		})
	}
	if value, ok := cmuo.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldShedId,
		})
	}
	if value, ok := cmuo.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldShedId,
		})
	}
	if value, ok := cmuo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldShedName,
		})
	}
	if value, ok := cmuo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldEarNumber,
		})
	}
	if value, ok := cmuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldDate,
		})
	}
	if value, ok := cmuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldDate,
		})
	}
	if value, ok := cmuo.mutation.FromShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldFromShedId,
		})
	}
	if value, ok := cmuo.mutation.AddedFromShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldFromShedId,
		})
	}
	if value, ok := cmuo.mutation.FromShed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldFromShed,
		})
	}
	if value, ok := cmuo.mutation.ToShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldToShedId,
		})
	}
	if value, ok := cmuo.mutation.AddedToShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldToShedId,
		})
	}
	if value, ok := cmuo.mutation.ToShed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldToShed,
		})
	}
	if value, ok := cmuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldUserName,
		})
	}
	if value, ok := cmuo.mutation.ReasonId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldReasonId,
		})
	}
	if value, ok := cmuo.mutation.AddedReasonId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldReasonId,
		})
	}
	if value, ok := cmuo.mutation.ReasonName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldReasonName,
		})
	}
	if value, ok := cmuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldRemarks,
		})
	}
	if value, ok := cmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCreatedAt,
		})
	}
	if value, ok := cmuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCreatedAt,
		})
	}
	if value, ok := cmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldUpdatedAt,
		})
	}
	if value, ok := cmuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldUpdatedAt,
		})
	}
	if value, ok := cmuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemove.FieldDeleted,
		})
	}
	if value, ok := cmuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemove.FieldDeleted,
		})
	}
	_node = &CattleMove{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlemove.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlemove"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleMoveUpdate is the builder for updating CattleMove entities.
type CattleMoveUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleMoveMutation
	predicates []predicate.CattleMove
}

// Where adds a new predicate for the builder.
func (cmu *CattleMoveUpdate) Where(ps ...predicate.CattleMove) *CattleMoveUpdate {
	cmu.predicates = append(cmu.predicates, ps...)
	return cmu
}

// SetEarNumber sets the earNumber field.
func (cmu *CattleMoveUpdate) SetEarNumber(s string) *CattleMoveUpdate {
	cmu.mutation.SetEarNumber(s)
	return cmu
}

// SetDate sets the date field.
func (cmu *CattleMoveUpdate) SetDate(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetDate()
	cmu.mutation.SetDate(i)
	return cmu
}

// AddDate adds i to date.
func (cmu *CattleMoveUpdate) AddDate(i int64) *CattleMoveUpdate {
	cmu.mutation.AddDate(i)
	return cmu
}

// SetToShed sets the toShed field.
func (cmu *CattleMoveUpdate) SetToShed(s string) *CattleMoveUpdate {
	cmu.mutation.SetToShed(s)
	return cmu
}

// SetUserName sets the userName field.
func (cmu *CattleMoveUpdate) SetUserName(s string) *CattleMoveUpdate {
	cmu.mutation.SetUserName(s)
	return cmu
}

// SetReason sets the reason field.
func (cmu *CattleMoveUpdate) SetReason(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetReason()
	cmu.mutation.SetReason(i)
	return cmu
}

// AddReason adds i to reason.
func (cmu *CattleMoveUpdate) AddReason(i int64) *CattleMoveUpdate {
	cmu.mutation.AddReason(i)
	return cmu
}

// SetTenantId sets the tenantId field.
func (cmu *CattleMoveUpdate) SetTenantId(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetTenantId()
	cmu.mutation.SetTenantId(i)
	return cmu
}

// AddTenantId adds i to tenantId.
func (cmu *CattleMoveUpdate) AddTenantId(i int64) *CattleMoveUpdate {
	cmu.mutation.AddTenantId(i)
	return cmu
}

// SetTenantName sets the tenantName field.
func (cmu *CattleMoveUpdate) SetTenantName(s string) *CattleMoveUpdate {
	cmu.mutation.SetTenantName(s)
	return cmu
}

// SetRemarks sets the remarks field.
func (cmu *CattleMoveUpdate) SetRemarks(s string) *CattleMoveUpdate {
	cmu.mutation.SetRemarks(s)
	return cmu
}

// SetCreatedAt sets the createdAt field.
func (cmu *CattleMoveUpdate) SetCreatedAt(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetCreatedAt()
	cmu.mutation.SetCreatedAt(i)
	return cmu
}

// AddCreatedAt adds i to createdAt.
func (cmu *CattleMoveUpdate) AddCreatedAt(i int64) *CattleMoveUpdate {
	cmu.mutation.AddCreatedAt(i)
	return cmu
}

// SetUpdatedAt sets the updatedAt field.
func (cmu *CattleMoveUpdate) SetUpdatedAt(i int64) *CattleMoveUpdate {
	cmu.mutation.ResetUpdatedAt()
	cmu.mutation.SetUpdatedAt(i)
	return cmu
}

// AddUpdatedAt adds i to updatedAt.
func (cmu *CattleMoveUpdate) AddUpdatedAt(i int64) *CattleMoveUpdate {
	cmu.mutation.AddUpdatedAt(i)
	return cmu
}

// SetDeleted sets the deleted field.
func (cmu *CattleMoveUpdate) SetDeleted(i int) *CattleMoveUpdate {
	cmu.mutation.ResetDeleted()
	cmu.mutation.SetDeleted(i)
	return cmu
}

// AddDeleted adds i to deleted.
func (cmu *CattleMoveUpdate) AddDeleted(i int) *CattleMoveUpdate {
	cmu.mutation.AddDeleted(i)
	return cmu
}

// Mutation returns the CattleMoveMutation object of the builder.
func (cmu *CattleMoveUpdate) Mutation() *CattleMoveMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cmu *CattleMoveUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cmu.hooks) == 0 {
		affected, err = cmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMoveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmu.mutation = mutation
			affected, err = cmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmu.hooks) - 1; i >= 0; i-- {
			mut = cmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CattleMoveUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CattleMoveUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CattleMoveUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmu *CattleMoveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlemove.Table,
			Columns: cattlemove.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlemove.FieldID,
			},
		},
	}
	if ps := cmu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldEarNumber,
		})
	}
	if value, ok := cmu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldDate,
		})
	}
	if value, ok := cmu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldDate,
		})
	}
	if value, ok := cmu.mutation.ToShed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldToShed,
		})
	}
	if value, ok := cmu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldUserName,
		})
	}
	if value, ok := cmu.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldReason,
		})
	}
	if value, ok := cmu.mutation.AddedReason(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldReason,
		})
	}
	if value, ok := cmu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldTenantId,
		})
	}
	if value, ok := cmu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldTenantId,
		})
	}
	if value, ok := cmu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldTenantName,
		})
	}
	if value, ok := cmu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldRemarks,
		})
	}
	if value, ok := cmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCreatedAt,
		})
	}
	if value, ok := cmu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCreatedAt,
		})
	}
	if value, ok := cmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldUpdatedAt,
		})
	}
	if value, ok := cmu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldUpdatedAt,
		})
	}
	if value, ok := cmu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemove.FieldDeleted,
		})
	}
	if value, ok := cmu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemove.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlemove.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleMoveUpdateOne is the builder for updating a single CattleMove entity.
type CattleMoveUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleMoveMutation
}

// SetEarNumber sets the earNumber field.
func (cmuo *CattleMoveUpdateOne) SetEarNumber(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetEarNumber(s)
	return cmuo
}

// SetDate sets the date field.
func (cmuo *CattleMoveUpdateOne) SetDate(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetDate()
	cmuo.mutation.SetDate(i)
	return cmuo
}

// AddDate adds i to date.
func (cmuo *CattleMoveUpdateOne) AddDate(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddDate(i)
	return cmuo
}

// SetToShed sets the toShed field.
func (cmuo *CattleMoveUpdateOne) SetToShed(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetToShed(s)
	return cmuo
}

// SetUserName sets the userName field.
func (cmuo *CattleMoveUpdateOne) SetUserName(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetUserName(s)
	return cmuo
}

// SetReason sets the reason field.
func (cmuo *CattleMoveUpdateOne) SetReason(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetReason()
	cmuo.mutation.SetReason(i)
	return cmuo
}

// AddReason adds i to reason.
func (cmuo *CattleMoveUpdateOne) AddReason(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddReason(i)
	return cmuo
}

// SetTenantId sets the tenantId field.
func (cmuo *CattleMoveUpdateOne) SetTenantId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetTenantId()
	cmuo.mutation.SetTenantId(i)
	return cmuo
}

// AddTenantId adds i to tenantId.
func (cmuo *CattleMoveUpdateOne) AddTenantId(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddTenantId(i)
	return cmuo
}

// SetTenantName sets the tenantName field.
func (cmuo *CattleMoveUpdateOne) SetTenantName(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetTenantName(s)
	return cmuo
}

// SetRemarks sets the remarks field.
func (cmuo *CattleMoveUpdateOne) SetRemarks(s string) *CattleMoveUpdateOne {
	cmuo.mutation.SetRemarks(s)
	return cmuo
}

// SetCreatedAt sets the createdAt field.
func (cmuo *CattleMoveUpdateOne) SetCreatedAt(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetCreatedAt()
	cmuo.mutation.SetCreatedAt(i)
	return cmuo
}

// AddCreatedAt adds i to createdAt.
func (cmuo *CattleMoveUpdateOne) AddCreatedAt(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddCreatedAt(i)
	return cmuo
}

// SetUpdatedAt sets the updatedAt field.
func (cmuo *CattleMoveUpdateOne) SetUpdatedAt(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.ResetUpdatedAt()
	cmuo.mutation.SetUpdatedAt(i)
	return cmuo
}

// AddUpdatedAt adds i to updatedAt.
func (cmuo *CattleMoveUpdateOne) AddUpdatedAt(i int64) *CattleMoveUpdateOne {
	cmuo.mutation.AddUpdatedAt(i)
	return cmuo
}

// SetDeleted sets the deleted field.
func (cmuo *CattleMoveUpdateOne) SetDeleted(i int) *CattleMoveUpdateOne {
	cmuo.mutation.ResetDeleted()
	cmuo.mutation.SetDeleted(i)
	return cmuo
}

// AddDeleted adds i to deleted.
func (cmuo *CattleMoveUpdateOne) AddDeleted(i int) *CattleMoveUpdateOne {
	cmuo.mutation.AddDeleted(i)
	return cmuo
}

// Mutation returns the CattleMoveMutation object of the builder.
func (cmuo *CattleMoveUpdateOne) Mutation() *CattleMoveMutation {
	return cmuo.mutation
}

// Save executes the query and returns the updated entity.
func (cmuo *CattleMoveUpdateOne) Save(ctx context.Context) (*CattleMove, error) {
	var (
		err  error
		node *CattleMove
	)
	if len(cmuo.hooks) == 0 {
		node, err = cmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMoveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmuo.mutation = mutation
			node, err = cmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmuo.hooks) - 1; i >= 0; i-- {
			mut = cmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CattleMoveUpdateOne) SaveX(ctx context.Context) *CattleMove {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CattleMoveUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CattleMoveUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmuo *CattleMoveUpdateOne) sqlSave(ctx context.Context) (_node *CattleMove, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlemove.Table,
			Columns: cattlemove.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlemove.FieldID,
			},
		},
	}
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CattleMove.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cmuo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldEarNumber,
		})
	}
	if value, ok := cmuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldDate,
		})
	}
	if value, ok := cmuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldDate,
		})
	}
	if value, ok := cmuo.mutation.ToShed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldToShed,
		})
	}
	if value, ok := cmuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldUserName,
		})
	}
	if value, ok := cmuo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldReason,
		})
	}
	if value, ok := cmuo.mutation.AddedReason(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldReason,
		})
	}
	if value, ok := cmuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldTenantId,
		})
	}
	if value, ok := cmuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldTenantId,
		})
	}
	if value, ok := cmuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldTenantName,
		})
	}
	if value, ok := cmuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemove.FieldRemarks,
		})
	}
	if value, ok := cmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCreatedAt,
		})
	}
	if value, ok := cmuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldCreatedAt,
		})
	}
	if value, ok := cmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldUpdatedAt,
		})
	}
	if value, ok := cmuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemove.FieldUpdatedAt,
		})
	}
	if value, ok := cmuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemove.FieldDeleted,
		})
	}
	if value, ok := cmuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemove.FieldDeleted,
		})
	}
	_node = &CattleMove{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlemove.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

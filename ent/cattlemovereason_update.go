// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattlemovereason"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleMoveReasonUpdate is the builder for updating CattleMoveReason entities.
type CattleMoveReasonUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleMoveReasonMutation
	predicates []predicate.CattleMoveReason
}

// Where adds a new predicate for the builder.
func (cmru *CattleMoveReasonUpdate) Where(ps ...predicate.CattleMoveReason) *CattleMoveReasonUpdate {
	cmru.predicates = append(cmru.predicates, ps...)
	return cmru
}

// SetName sets the name field.
func (cmru *CattleMoveReasonUpdate) SetName(s string) *CattleMoveReasonUpdate {
	cmru.mutation.SetName(s)
	return cmru
}

// SetCode sets the code field.
func (cmru *CattleMoveReasonUpdate) SetCode(s string) *CattleMoveReasonUpdate {
	cmru.mutation.SetCode(s)
	return cmru
}

// SetTenantId sets the tenantId field.
func (cmru *CattleMoveReasonUpdate) SetTenantId(i int64) *CattleMoveReasonUpdate {
	cmru.mutation.ResetTenantId()
	cmru.mutation.SetTenantId(i)
	return cmru
}

// AddTenantId adds i to tenantId.
func (cmru *CattleMoveReasonUpdate) AddTenantId(i int64) *CattleMoveReasonUpdate {
	cmru.mutation.AddTenantId(i)
	return cmru
}

// SetTenantName sets the tenantName field.
func (cmru *CattleMoveReasonUpdate) SetTenantName(s string) *CattleMoveReasonUpdate {
	cmru.mutation.SetTenantName(s)
	return cmru
}

// SetOrder sets the order field.
func (cmru *CattleMoveReasonUpdate) SetOrder(i int) *CattleMoveReasonUpdate {
	cmru.mutation.ResetOrder()
	cmru.mutation.SetOrder(i)
	return cmru
}

// AddOrder adds i to order.
func (cmru *CattleMoveReasonUpdate) AddOrder(i int) *CattleMoveReasonUpdate {
	cmru.mutation.AddOrder(i)
	return cmru
}

// SetRemarks sets the remarks field.
func (cmru *CattleMoveReasonUpdate) SetRemarks(s string) *CattleMoveReasonUpdate {
	cmru.mutation.SetRemarks(s)
	return cmru
}

// SetCreatedAt sets the createdAt field.
func (cmru *CattleMoveReasonUpdate) SetCreatedAt(i int64) *CattleMoveReasonUpdate {
	cmru.mutation.ResetCreatedAt()
	cmru.mutation.SetCreatedAt(i)
	return cmru
}

// AddCreatedAt adds i to createdAt.
func (cmru *CattleMoveReasonUpdate) AddCreatedAt(i int64) *CattleMoveReasonUpdate {
	cmru.mutation.AddCreatedAt(i)
	return cmru
}

// SetUpdatedAt sets the updatedAt field.
func (cmru *CattleMoveReasonUpdate) SetUpdatedAt(i int64) *CattleMoveReasonUpdate {
	cmru.mutation.ResetUpdatedAt()
	cmru.mutation.SetUpdatedAt(i)
	return cmru
}

// AddUpdatedAt adds i to updatedAt.
func (cmru *CattleMoveReasonUpdate) AddUpdatedAt(i int64) *CattleMoveReasonUpdate {
	cmru.mutation.AddUpdatedAt(i)
	return cmru
}

// SetDeleted sets the deleted field.
func (cmru *CattleMoveReasonUpdate) SetDeleted(i int) *CattleMoveReasonUpdate {
	cmru.mutation.ResetDeleted()
	cmru.mutation.SetDeleted(i)
	return cmru
}

// AddDeleted adds i to deleted.
func (cmru *CattleMoveReasonUpdate) AddDeleted(i int) *CattleMoveReasonUpdate {
	cmru.mutation.AddDeleted(i)
	return cmru
}

// Mutation returns the CattleMoveReasonMutation object of the builder.
func (cmru *CattleMoveReasonUpdate) Mutation() *CattleMoveReasonMutation {
	return cmru.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cmru *CattleMoveReasonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cmru.hooks) == 0 {
		if err = cmru.check(); err != nil {
			return 0, err
		}
		affected, err = cmru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMoveReasonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmru.check(); err != nil {
				return 0, err
			}
			cmru.mutation = mutation
			affected, err = cmru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmru.hooks) - 1; i >= 0; i-- {
			mut = cmru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmru *CattleMoveReasonUpdate) SaveX(ctx context.Context) int {
	affected, err := cmru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmru *CattleMoveReasonUpdate) Exec(ctx context.Context) error {
	_, err := cmru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmru *CattleMoveReasonUpdate) ExecX(ctx context.Context) {
	if err := cmru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmru *CattleMoveReasonUpdate) check() error {
	if v, ok := cmru.mutation.Name(); ok {
		if err := cattlemovereason.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cmru *CattleMoveReasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlemovereason.Table,
			Columns: cattlemovereason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlemovereason.FieldID,
			},
		},
	}
	if ps := cmru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemovereason.FieldName,
		})
	}
	if value, ok := cmru.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemovereason.FieldCode,
		})
	}
	if value, ok := cmru.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldTenantId,
		})
	}
	if value, ok := cmru.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldTenantId,
		})
	}
	if value, ok := cmru.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemovereason.FieldTenantName,
		})
	}
	if value, ok := cmru.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemovereason.FieldOrder,
		})
	}
	if value, ok := cmru.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemovereason.FieldOrder,
		})
	}
	if value, ok := cmru.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemovereason.FieldRemarks,
		})
	}
	if value, ok := cmru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldCreatedAt,
		})
	}
	if value, ok := cmru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldCreatedAt,
		})
	}
	if value, ok := cmru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldUpdatedAt,
		})
	}
	if value, ok := cmru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldUpdatedAt,
		})
	}
	if value, ok := cmru.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemovereason.FieldDeleted,
		})
	}
	if value, ok := cmru.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemovereason.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlemovereason.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleMoveReasonUpdateOne is the builder for updating a single CattleMoveReason entity.
type CattleMoveReasonUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleMoveReasonMutation
}

// SetName sets the name field.
func (cmruo *CattleMoveReasonUpdateOne) SetName(s string) *CattleMoveReasonUpdateOne {
	cmruo.mutation.SetName(s)
	return cmruo
}

// SetCode sets the code field.
func (cmruo *CattleMoveReasonUpdateOne) SetCode(s string) *CattleMoveReasonUpdateOne {
	cmruo.mutation.SetCode(s)
	return cmruo
}

// SetTenantId sets the tenantId field.
func (cmruo *CattleMoveReasonUpdateOne) SetTenantId(i int64) *CattleMoveReasonUpdateOne {
	cmruo.mutation.ResetTenantId()
	cmruo.mutation.SetTenantId(i)
	return cmruo
}

// AddTenantId adds i to tenantId.
func (cmruo *CattleMoveReasonUpdateOne) AddTenantId(i int64) *CattleMoveReasonUpdateOne {
	cmruo.mutation.AddTenantId(i)
	return cmruo
}

// SetTenantName sets the tenantName field.
func (cmruo *CattleMoveReasonUpdateOne) SetTenantName(s string) *CattleMoveReasonUpdateOne {
	cmruo.mutation.SetTenantName(s)
	return cmruo
}

// SetOrder sets the order field.
func (cmruo *CattleMoveReasonUpdateOne) SetOrder(i int) *CattleMoveReasonUpdateOne {
	cmruo.mutation.ResetOrder()
	cmruo.mutation.SetOrder(i)
	return cmruo
}

// AddOrder adds i to order.
func (cmruo *CattleMoveReasonUpdateOne) AddOrder(i int) *CattleMoveReasonUpdateOne {
	cmruo.mutation.AddOrder(i)
	return cmruo
}

// SetRemarks sets the remarks field.
func (cmruo *CattleMoveReasonUpdateOne) SetRemarks(s string) *CattleMoveReasonUpdateOne {
	cmruo.mutation.SetRemarks(s)
	return cmruo
}

// SetCreatedAt sets the createdAt field.
func (cmruo *CattleMoveReasonUpdateOne) SetCreatedAt(i int64) *CattleMoveReasonUpdateOne {
	cmruo.mutation.ResetCreatedAt()
	cmruo.mutation.SetCreatedAt(i)
	return cmruo
}

// AddCreatedAt adds i to createdAt.
func (cmruo *CattleMoveReasonUpdateOne) AddCreatedAt(i int64) *CattleMoveReasonUpdateOne {
	cmruo.mutation.AddCreatedAt(i)
	return cmruo
}

// SetUpdatedAt sets the updatedAt field.
func (cmruo *CattleMoveReasonUpdateOne) SetUpdatedAt(i int64) *CattleMoveReasonUpdateOne {
	cmruo.mutation.ResetUpdatedAt()
	cmruo.mutation.SetUpdatedAt(i)
	return cmruo
}

// AddUpdatedAt adds i to updatedAt.
func (cmruo *CattleMoveReasonUpdateOne) AddUpdatedAt(i int64) *CattleMoveReasonUpdateOne {
	cmruo.mutation.AddUpdatedAt(i)
	return cmruo
}

// SetDeleted sets the deleted field.
func (cmruo *CattleMoveReasonUpdateOne) SetDeleted(i int) *CattleMoveReasonUpdateOne {
	cmruo.mutation.ResetDeleted()
	cmruo.mutation.SetDeleted(i)
	return cmruo
}

// AddDeleted adds i to deleted.
func (cmruo *CattleMoveReasonUpdateOne) AddDeleted(i int) *CattleMoveReasonUpdateOne {
	cmruo.mutation.AddDeleted(i)
	return cmruo
}

// Mutation returns the CattleMoveReasonMutation object of the builder.
func (cmruo *CattleMoveReasonUpdateOne) Mutation() *CattleMoveReasonMutation {
	return cmruo.mutation
}

// Save executes the query and returns the updated entity.
func (cmruo *CattleMoveReasonUpdateOne) Save(ctx context.Context) (*CattleMoveReason, error) {
	var (
		err  error
		node *CattleMoveReason
	)
	if len(cmruo.hooks) == 0 {
		if err = cmruo.check(); err != nil {
			return nil, err
		}
		node, err = cmruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleMoveReasonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmruo.check(); err != nil {
				return nil, err
			}
			cmruo.mutation = mutation
			node, err = cmruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmruo.hooks) - 1; i >= 0; i-- {
			mut = cmruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmruo *CattleMoveReasonUpdateOne) SaveX(ctx context.Context) *CattleMoveReason {
	node, err := cmruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmruo *CattleMoveReasonUpdateOne) Exec(ctx context.Context) error {
	_, err := cmruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmruo *CattleMoveReasonUpdateOne) ExecX(ctx context.Context) {
	if err := cmruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmruo *CattleMoveReasonUpdateOne) check() error {
	if v, ok := cmruo.mutation.Name(); ok {
		if err := cattlemovereason.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cmruo *CattleMoveReasonUpdateOne) sqlSave(ctx context.Context) (_node *CattleMoveReason, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattlemovereason.Table,
			Columns: cattlemovereason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattlemovereason.FieldID,
			},
		},
	}
	id, ok := cmruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CattleMoveReason.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cmruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemovereason.FieldName,
		})
	}
	if value, ok := cmruo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemovereason.FieldCode,
		})
	}
	if value, ok := cmruo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldTenantId,
		})
	}
	if value, ok := cmruo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldTenantId,
		})
	}
	if value, ok := cmruo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemovereason.FieldTenantName,
		})
	}
	if value, ok := cmruo.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemovereason.FieldOrder,
		})
	}
	if value, ok := cmruo.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemovereason.FieldOrder,
		})
	}
	if value, ok := cmruo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattlemovereason.FieldRemarks,
		})
	}
	if value, ok := cmruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldCreatedAt,
		})
	}
	if value, ok := cmruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldCreatedAt,
		})
	}
	if value, ok := cmruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldUpdatedAt,
		})
	}
	if value, ok := cmruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattlemovereason.FieldUpdatedAt,
		})
	}
	if value, ok := cmruo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemovereason.FieldDeleted,
		})
	}
	if value, ok := cmruo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattlemovereason.FieldDeleted,
		})
	}
	_node = &CattleMoveReason{config: cmruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cmruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattlemovereason.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

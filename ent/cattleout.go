// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattleout"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CattleOut is the model entity for the CattleOut schema.
type CattleOut struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 出栏类型
	OutType int64 `json:"outType,omitempty"`
	// 日期
	Date int64 `json:"date,omitempty"`
	// 去向
	To string `json:"to,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int64 `json:"weight,omitempty"`
	// 转出金额
	Cost int64 `json:"cost,omitempty"`
	// 运输费用
	ShippingFee int64 `json:"shippingFee,omitempty"`
	// 运输证号
	ShippingCode string `json:"shippingCode,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 检疫证号
	CheckCode string `json:"checkCode,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleOut) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cattleout.FieldID, cattleout.FieldOutType, cattleout.FieldDate, cattleout.FieldWeight, cattleout.FieldCost, cattleout.FieldShippingFee, cattleout.FieldTenantId, cattleout.FieldCreatedAt, cattleout.FieldUpdatedAt, cattleout.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case cattleout.FieldTo, cattleout.FieldShippingCode, cattleout.FieldUserName, cattleout.FieldCheckCode, cattleout.FieldTenantName, cattleout.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CattleOut", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleOut fields.
func (co *CattleOut) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cattleout.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			co.ID = int(value.Int64)
		case cattleout.FieldOutType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field outType", values[i])
			} else if value.Valid {
				co.OutType = value.Int64
			}
		case cattleout.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				co.Date = value.Int64
			}
		case cattleout.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				co.To = value.String
			}
		case cattleout.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				co.Weight = value.Int64
			}
		case cattleout.FieldCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				co.Cost = value.Int64
			}
		case cattleout.FieldShippingFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shippingFee", values[i])
			} else if value.Valid {
				co.ShippingFee = value.Int64
			}
		case cattleout.FieldShippingCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shippingCode", values[i])
			} else if value.Valid {
				co.ShippingCode = value.String
			}
		case cattleout.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				co.UserName = value.String
			}
		case cattleout.FieldCheckCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field checkCode", values[i])
			} else if value.Valid {
				co.CheckCode = value.String
			}
		case cattleout.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				co.TenantId = value.Int64
			}
		case cattleout.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				co.TenantName = value.String
			}
		case cattleout.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				co.Remarks = value.String
			}
		case cattleout.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				co.CreatedAt = value.Int64
			}
		case cattleout.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				co.UpdatedAt = value.Int64
			}
		case cattleout.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				co.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CattleOut.
// Note that you need to call CattleOut.Unwrap() before calling this method if this CattleOut
// was returned from a transaction, and the transaction was committed or rolled back.
func (co *CattleOut) Update() *CattleOutUpdateOne {
	return (&CattleOutClient{config: co.config}).UpdateOne(co)
}

// Unwrap unwraps the CattleOut entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (co *CattleOut) Unwrap() *CattleOut {
	_tx, ok := co.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleOut is not a transactional entity")
	}
	co.config.driver = _tx.drv
	return co
}

// String implements the fmt.Stringer.
func (co *CattleOut) String() string {
	var builder strings.Builder
	builder.WriteString("CattleOut(")
	builder.WriteString(fmt.Sprintf("id=%v, ", co.ID))
	builder.WriteString("outType=")
	builder.WriteString(fmt.Sprintf("%v", co.OutType))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", co.Date))
	builder.WriteString(", ")
	builder.WriteString("to=")
	builder.WriteString(co.To)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", co.Weight))
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", co.Cost))
	builder.WriteString(", ")
	builder.WriteString("shippingFee=")
	builder.WriteString(fmt.Sprintf("%v", co.ShippingFee))
	builder.WriteString(", ")
	builder.WriteString("shippingCode=")
	builder.WriteString(co.ShippingCode)
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(co.UserName)
	builder.WriteString(", ")
	builder.WriteString("checkCode=")
	builder.WriteString(co.CheckCode)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", co.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(co.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(co.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", co.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", co.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", co.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleOuts is a parsable slice of CattleOut.
type CattleOuts []*CattleOut

func (co CattleOuts) config(cfg config) {
	for _i := range co {
		co[_i].config = cfg
	}
}

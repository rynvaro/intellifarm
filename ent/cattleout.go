// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattleout"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// CattleOut is the model entity for the CattleOut schema.
type CattleOut struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Date holds the value of the "date" field.
	Date int64 `json:"date,omitempty"`
	// To holds the value of the "to" field.
	To string `json:"to,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float32 `json:"weight,omitempty"`
	// Cost holds the value of the "cost" field.
	Cost float32 `json:"cost,omitempty"`
	// ShippingFee holds the value of the "shippingFee" field.
	ShippingFee float32 `json:"shippingFee,omitempty"`
	// TransportCertificateNumber holds the value of the "transportCertificateNumber" field.
	TransportCertificateNumber string `json:"transportCertificateNumber,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// TestCertificateNumber holds the value of the "testCertificateNumber" field.
	TestCertificateNumber string `json:"testCertificateNumber,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleOut) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // name
		&sql.NullInt64{},   // type
		&sql.NullInt64{},   // date
		&sql.NullString{},  // to
		&sql.NullFloat64{}, // weight
		&sql.NullFloat64{}, // cost
		&sql.NullFloat64{}, // shippingFee
		&sql.NullString{},  // transportCertificateNumber
		&sql.NullString{},  // userName
		&sql.NullString{},  // testCertificateNumber
		&sql.NullString{},  // remarks
		&sql.NullInt64{},   // createdAt
		&sql.NullInt64{},   // updatedAt
		&sql.NullInt64{},   // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleOut fields.
func (co *CattleOut) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cattleout.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	co.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		co.Name = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[1])
	} else if value.Valid {
		co.Type = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[2])
	} else if value.Valid {
		co.Date = value.Int64
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field to", values[3])
	} else if value.Valid {
		co.To = value.String
	}
	if value, ok := values[4].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field weight", values[4])
	} else if value.Valid {
		co.Weight = float32(value.Float64)
	}
	if value, ok := values[5].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field cost", values[5])
	} else if value.Valid {
		co.Cost = float32(value.Float64)
	}
	if value, ok := values[6].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field shippingFee", values[6])
	} else if value.Valid {
		co.ShippingFee = float32(value.Float64)
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field transportCertificateNumber", values[7])
	} else if value.Valid {
		co.TransportCertificateNumber = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[8])
	} else if value.Valid {
		co.UserName = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field testCertificateNumber", values[9])
	} else if value.Valid {
		co.TestCertificateNumber = value.String
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[10])
	} else if value.Valid {
		co.Remarks = value.String
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[11])
	} else if value.Valid {
		co.CreatedAt = value.Int64
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[12])
	} else if value.Valid {
		co.UpdatedAt = value.Int64
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[13])
	} else if value.Valid {
		co.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this CattleOut.
// Note that, you need to call CattleOut.Unwrap() before calling this method, if this CattleOut
// was returned from a transaction, and the transaction was committed or rolled back.
func (co *CattleOut) Update() *CattleOutUpdateOne {
	return (&CattleOutClient{config: co.config}).UpdateOne(co)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (co *CattleOut) Unwrap() *CattleOut {
	tx, ok := co.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleOut is not a transactional entity")
	}
	co.config.driver = tx.drv
	return co
}

// String implements the fmt.Stringer.
func (co *CattleOut) String() string {
	var builder strings.Builder
	builder.WriteString("CattleOut(")
	builder.WriteString(fmt.Sprintf("id=%v", co.ID))
	builder.WriteString(", name=")
	builder.WriteString(co.Name)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", co.Type))
	builder.WriteString(", date=")
	builder.WriteString(fmt.Sprintf("%v", co.Date))
	builder.WriteString(", to=")
	builder.WriteString(co.To)
	builder.WriteString(", weight=")
	builder.WriteString(fmt.Sprintf("%v", co.Weight))
	builder.WriteString(", cost=")
	builder.WriteString(fmt.Sprintf("%v", co.Cost))
	builder.WriteString(", shippingFee=")
	builder.WriteString(fmt.Sprintf("%v", co.ShippingFee))
	builder.WriteString(", transportCertificateNumber=")
	builder.WriteString(co.TransportCertificateNumber)
	builder.WriteString(", userName=")
	builder.WriteString(co.UserName)
	builder.WriteString(", testCertificateNumber=")
	builder.WriteString(co.TestCertificateNumber)
	builder.WriteString(", remarks=")
	builder.WriteString(co.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", co.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", co.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", co.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// CattleOuts is a parsable slice of CattleOut.
type CattleOuts []*CattleOut

func (co CattleOuts) config(cfg config) {
	for _i := range co {
		co[_i].config = cfg
	}
}

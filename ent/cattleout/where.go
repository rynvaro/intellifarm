// Code generated by entc, DO NOT EDIT.

package cattleout

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OutType applies equality check predicate on the "outType" field. It's identical to OutTypeEQ.
func OutType(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutType), v))
	})
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTo), v))
	})
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// ShippingFee applies equality check predicate on the "shippingFee" field. It's identical to ShippingFeeEQ.
func ShippingFee(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingFee), v))
	})
}

// ShippingCode applies equality check predicate on the "shippingCode" field. It's identical to ShippingCodeEQ.
func ShippingCode(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCode), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// CheckCode applies equality check predicate on the "checkCode" field. It's identical to CheckCodeEQ.
func CheckCode(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckCode), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// OutTypeEQ applies the EQ predicate on the "outType" field.
func OutTypeEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutType), v))
	})
}

// OutTypeNEQ applies the NEQ predicate on the "outType" field.
func OutTypeNEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutType), v))
	})
}

// OutTypeIn applies the In predicate on the "outType" field.
func OutTypeIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOutType), v...))
	})
}

// OutTypeNotIn applies the NotIn predicate on the "outType" field.
func OutTypeNotIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOutType), v...))
	})
}

// OutTypeGT applies the GT predicate on the "outType" field.
func OutTypeGT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutType), v))
	})
}

// OutTypeGTE applies the GTE predicate on the "outType" field.
func OutTypeGTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutType), v))
	})
}

// OutTypeLT applies the LT predicate on the "outType" field.
func OutTypeLT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutType), v))
	})
}

// OutTypeLTE applies the LTE predicate on the "outType" field.
func OutTypeLTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutType), v))
	})
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTo), v))
	})
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTo), v))
	})
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTo), v...))
	})
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTo), v...))
	})
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTo), v))
	})
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTo), v))
	})
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTo), v))
	})
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTo), v))
	})
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTo), v))
	})
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTo), v))
	})
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTo), v))
	})
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTo), v))
	})
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTo), v))
	})
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeight), v))
	})
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWeight), v...))
	})
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWeight), v...))
	})
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeight), v))
	})
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeight), v))
	})
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeight), v))
	})
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeight), v))
	})
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCost), v))
	})
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCost), v...))
	})
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCost), v...))
	})
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCost), v))
	})
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCost), v))
	})
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCost), v))
	})
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCost), v))
	})
}

// ShippingFeeEQ applies the EQ predicate on the "shippingFee" field.
func ShippingFeeEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingFee), v))
	})
}

// ShippingFeeNEQ applies the NEQ predicate on the "shippingFee" field.
func ShippingFeeNEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingFee), v))
	})
}

// ShippingFeeIn applies the In predicate on the "shippingFee" field.
func ShippingFeeIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShippingFee), v...))
	})
}

// ShippingFeeNotIn applies the NotIn predicate on the "shippingFee" field.
func ShippingFeeNotIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShippingFee), v...))
	})
}

// ShippingFeeGT applies the GT predicate on the "shippingFee" field.
func ShippingFeeGT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingFee), v))
	})
}

// ShippingFeeGTE applies the GTE predicate on the "shippingFee" field.
func ShippingFeeGTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingFee), v))
	})
}

// ShippingFeeLT applies the LT predicate on the "shippingFee" field.
func ShippingFeeLT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingFee), v))
	})
}

// ShippingFeeLTE applies the LTE predicate on the "shippingFee" field.
func ShippingFeeLTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingFee), v))
	})
}

// ShippingCodeEQ applies the EQ predicate on the "shippingCode" field.
func ShippingCodeEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeNEQ applies the NEQ predicate on the "shippingCode" field.
func ShippingCodeNEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeIn applies the In predicate on the "shippingCode" field.
func ShippingCodeIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShippingCode), v...))
	})
}

// ShippingCodeNotIn applies the NotIn predicate on the "shippingCode" field.
func ShippingCodeNotIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShippingCode), v...))
	})
}

// ShippingCodeGT applies the GT predicate on the "shippingCode" field.
func ShippingCodeGT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeGTE applies the GTE predicate on the "shippingCode" field.
func ShippingCodeGTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeLT applies the LT predicate on the "shippingCode" field.
func ShippingCodeLT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeLTE applies the LTE predicate on the "shippingCode" field.
func ShippingCodeLTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeContains applies the Contains predicate on the "shippingCode" field.
func ShippingCodeContains(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeHasPrefix applies the HasPrefix predicate on the "shippingCode" field.
func ShippingCodeHasPrefix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeHasSuffix applies the HasSuffix predicate on the "shippingCode" field.
func ShippingCodeHasSuffix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeEqualFold applies the EqualFold predicate on the "shippingCode" field.
func ShippingCodeEqualFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingCode), v))
	})
}

// ShippingCodeContainsFold applies the ContainsFold predicate on the "shippingCode" field.
func ShippingCodeContainsFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingCode), v))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// CheckCodeEQ applies the EQ predicate on the "checkCode" field.
func CheckCodeEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckCode), v))
	})
}

// CheckCodeNEQ applies the NEQ predicate on the "checkCode" field.
func CheckCodeNEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckCode), v))
	})
}

// CheckCodeIn applies the In predicate on the "checkCode" field.
func CheckCodeIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckCode), v...))
	})
}

// CheckCodeNotIn applies the NotIn predicate on the "checkCode" field.
func CheckCodeNotIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckCode), v...))
	})
}

// CheckCodeGT applies the GT predicate on the "checkCode" field.
func CheckCodeGT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckCode), v))
	})
}

// CheckCodeGTE applies the GTE predicate on the "checkCode" field.
func CheckCodeGTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckCode), v))
	})
}

// CheckCodeLT applies the LT predicate on the "checkCode" field.
func CheckCodeLT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckCode), v))
	})
}

// CheckCodeLTE applies the LTE predicate on the "checkCode" field.
func CheckCodeLTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckCode), v))
	})
}

// CheckCodeContains applies the Contains predicate on the "checkCode" field.
func CheckCodeContains(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCheckCode), v))
	})
}

// CheckCodeHasPrefix applies the HasPrefix predicate on the "checkCode" field.
func CheckCodeHasPrefix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCheckCode), v))
	})
}

// CheckCodeHasSuffix applies the HasSuffix predicate on the "checkCode" field.
func CheckCodeHasSuffix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCheckCode), v))
	})
}

// CheckCodeEqualFold applies the EqualFold predicate on the "checkCode" field.
func CheckCodeEqualFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCheckCode), v))
	})
}

// CheckCodeContainsFold applies the ContainsFold predicate on the "checkCode" field.
func CheckCodeContainsFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCheckCode), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.CattleOut {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CattleOut(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.CattleOut) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.CattleOut) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CattleOut) predicate.CattleOut {
	return predicate.CattleOut(func(s *sql.Selector) {
		p(s.Not())
	})
}

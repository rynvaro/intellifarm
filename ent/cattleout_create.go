// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattleout"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CattleOutCreate is the builder for creating a CattleOut entity.
type CattleOutCreate struct {
	config
	mutation *CattleOutMutation
	hooks    []Hook
}

// SetOutType sets the "outType" field.
func (coc *CattleOutCreate) SetOutType(i int64) *CattleOutCreate {
	coc.mutation.SetOutType(i)
	return coc
}

// SetDate sets the "date" field.
func (coc *CattleOutCreate) SetDate(i int64) *CattleOutCreate {
	coc.mutation.SetDate(i)
	return coc
}

// SetTo sets the "to" field.
func (coc *CattleOutCreate) SetTo(s string) *CattleOutCreate {
	coc.mutation.SetTo(s)
	return coc
}

// SetWeight sets the "weight" field.
func (coc *CattleOutCreate) SetWeight(i int64) *CattleOutCreate {
	coc.mutation.SetWeight(i)
	return coc
}

// SetCost sets the "cost" field.
func (coc *CattleOutCreate) SetCost(i int64) *CattleOutCreate {
	coc.mutation.SetCost(i)
	return coc
}

// SetShippingFee sets the "shippingFee" field.
func (coc *CattleOutCreate) SetShippingFee(i int64) *CattleOutCreate {
	coc.mutation.SetShippingFee(i)
	return coc
}

// SetShippingCode sets the "shippingCode" field.
func (coc *CattleOutCreate) SetShippingCode(s string) *CattleOutCreate {
	coc.mutation.SetShippingCode(s)
	return coc
}

// SetUserName sets the "userName" field.
func (coc *CattleOutCreate) SetUserName(s string) *CattleOutCreate {
	coc.mutation.SetUserName(s)
	return coc
}

// SetCheckCode sets the "checkCode" field.
func (coc *CattleOutCreate) SetCheckCode(s string) *CattleOutCreate {
	coc.mutation.SetCheckCode(s)
	return coc
}

// SetTenantId sets the "tenantId" field.
func (coc *CattleOutCreate) SetTenantId(i int64) *CattleOutCreate {
	coc.mutation.SetTenantId(i)
	return coc
}

// SetTenantName sets the "tenantName" field.
func (coc *CattleOutCreate) SetTenantName(s string) *CattleOutCreate {
	coc.mutation.SetTenantName(s)
	return coc
}

// SetRemarks sets the "remarks" field.
func (coc *CattleOutCreate) SetRemarks(s string) *CattleOutCreate {
	coc.mutation.SetRemarks(s)
	return coc
}

// SetCreatedAt sets the "createdAt" field.
func (coc *CattleOutCreate) SetCreatedAt(i int64) *CattleOutCreate {
	coc.mutation.SetCreatedAt(i)
	return coc
}

// SetUpdatedAt sets the "updatedAt" field.
func (coc *CattleOutCreate) SetUpdatedAt(i int64) *CattleOutCreate {
	coc.mutation.SetUpdatedAt(i)
	return coc
}

// SetDeleted sets the "deleted" field.
func (coc *CattleOutCreate) SetDeleted(i int) *CattleOutCreate {
	coc.mutation.SetDeleted(i)
	return coc
}

// Mutation returns the CattleOutMutation object of the builder.
func (coc *CattleOutCreate) Mutation() *CattleOutMutation {
	return coc.mutation
}

// Save creates the CattleOut in the database.
func (coc *CattleOutCreate) Save(ctx context.Context) (*CattleOut, error) {
	var (
		err  error
		node *CattleOut
	)
	if len(coc.hooks) == 0 {
		if err = coc.check(); err != nil {
			return nil, err
		}
		node, err = coc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleOutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = coc.check(); err != nil {
				return nil, err
			}
			coc.mutation = mutation
			if node, err = coc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(coc.hooks) - 1; i >= 0; i-- {
			if coc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = coc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, coc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CattleOut)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CattleOutMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (coc *CattleOutCreate) SaveX(ctx context.Context) *CattleOut {
	v, err := coc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coc *CattleOutCreate) Exec(ctx context.Context) error {
	_, err := coc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coc *CattleOutCreate) ExecX(ctx context.Context) {
	if err := coc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (coc *CattleOutCreate) check() error {
	if _, ok := coc.mutation.OutType(); !ok {
		return &ValidationError{Name: "outType", err: errors.New(`ent: missing required field "CattleOut.outType"`)}
	}
	if _, ok := coc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "CattleOut.date"`)}
	}
	if _, ok := coc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "CattleOut.to"`)}
	}
	if _, ok := coc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "CattleOut.weight"`)}
	}
	if _, ok := coc.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New(`ent: missing required field "CattleOut.cost"`)}
	}
	if _, ok := coc.mutation.ShippingFee(); !ok {
		return &ValidationError{Name: "shippingFee", err: errors.New(`ent: missing required field "CattleOut.shippingFee"`)}
	}
	if _, ok := coc.mutation.ShippingCode(); !ok {
		return &ValidationError{Name: "shippingCode", err: errors.New(`ent: missing required field "CattleOut.shippingCode"`)}
	}
	if _, ok := coc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New(`ent: missing required field "CattleOut.userName"`)}
	}
	if _, ok := coc.mutation.CheckCode(); !ok {
		return &ValidationError{Name: "checkCode", err: errors.New(`ent: missing required field "CattleOut.checkCode"`)}
	}
	if _, ok := coc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "CattleOut.tenantId"`)}
	}
	if _, ok := coc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "CattleOut.tenantName"`)}
	}
	if _, ok := coc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "CattleOut.remarks"`)}
	}
	if _, ok := coc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "CattleOut.createdAt"`)}
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "CattleOut.updatedAt"`)}
	}
	if _, ok := coc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "CattleOut.deleted"`)}
	}
	return nil
}

func (coc *CattleOutCreate) sqlSave(ctx context.Context) (*CattleOut, error) {
	_node, _spec := coc.createSpec()
	if err := sqlgraph.CreateNode(ctx, coc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (coc *CattleOutCreate) createSpec() (*CattleOut, *sqlgraph.CreateSpec) {
	var (
		_node = &CattleOut{config: coc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cattleout.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cattleout.FieldID,
			},
		}
	)
	if value, ok := coc.mutation.OutType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldOutType,
		})
		_node.OutType = value
	}
	if value, ok := coc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := coc.mutation.To(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTo,
		})
		_node.To = value
	}
	if value, ok := coc.mutation.Weight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldWeight,
		})
		_node.Weight = value
	}
	if value, ok := coc.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldCost,
		})
		_node.Cost = value
	}
	if value, ok := coc.mutation.ShippingFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldShippingFee,
		})
		_node.ShippingFee = value
	}
	if value, ok := coc.mutation.ShippingCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldShippingCode,
		})
		_node.ShippingCode = value
	}
	if value, ok := coc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := coc.mutation.CheckCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldCheckCode,
		})
		_node.CheckCode = value
	}
	if value, ok := coc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := coc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := coc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := coc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := coc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := coc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattleout.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// CattleOutCreateBulk is the builder for creating many CattleOut entities in bulk.
type CattleOutCreateBulk struct {
	config
	builders []*CattleOutCreate
}

// Save creates the CattleOut entities in the database.
func (cocb *CattleOutCreateBulk) Save(ctx context.Context) ([]*CattleOut, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cocb.builders))
	nodes := make([]*CattleOut, len(cocb.builders))
	mutators := make([]Mutator, len(cocb.builders))
	for i := range cocb.builders {
		func(i int, root context.Context) {
			builder := cocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CattleOutMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cocb *CattleOutCreateBulk) SaveX(ctx context.Context) []*CattleOut {
	v, err := cocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocb *CattleOutCreateBulk) Exec(ctx context.Context) error {
	_, err := cocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocb *CattleOutCreateBulk) ExecX(ctx context.Context) {
	if err := cocb.Exec(ctx); err != nil {
		panic(err)
	}
}

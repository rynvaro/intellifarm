// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattleout"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleOutUpdate is the builder for updating CattleOut entities.
type CattleOutUpdate struct {
	config
	hooks      []Hook
	mutation   *CattleOutMutation
	predicates []predicate.CattleOut
}

// Where adds a new predicate for the builder.
func (cou *CattleOutUpdate) Where(ps ...predicate.CattleOut) *CattleOutUpdate {
	cou.predicates = append(cou.predicates, ps...)
	return cou
}

// SetName sets the name field.
func (cou *CattleOutUpdate) SetName(s string) *CattleOutUpdate {
	cou.mutation.SetName(s)
	return cou
}

// SetType sets the type field.
func (cou *CattleOutUpdate) SetType(i int) *CattleOutUpdate {
	cou.mutation.ResetType()
	cou.mutation.SetType(i)
	return cou
}

// AddType adds i to type.
func (cou *CattleOutUpdate) AddType(i int) *CattleOutUpdate {
	cou.mutation.AddType(i)
	return cou
}

// SetDate sets the date field.
func (cou *CattleOutUpdate) SetDate(i int64) *CattleOutUpdate {
	cou.mutation.ResetDate()
	cou.mutation.SetDate(i)
	return cou
}

// AddDate adds i to date.
func (cou *CattleOutUpdate) AddDate(i int64) *CattleOutUpdate {
	cou.mutation.AddDate(i)
	return cou
}

// SetTo sets the to field.
func (cou *CattleOutUpdate) SetTo(s string) *CattleOutUpdate {
	cou.mutation.SetTo(s)
	return cou
}

// SetWeight sets the weight field.
func (cou *CattleOutUpdate) SetWeight(f float32) *CattleOutUpdate {
	cou.mutation.ResetWeight()
	cou.mutation.SetWeight(f)
	return cou
}

// AddWeight adds f to weight.
func (cou *CattleOutUpdate) AddWeight(f float32) *CattleOutUpdate {
	cou.mutation.AddWeight(f)
	return cou
}

// SetCost sets the cost field.
func (cou *CattleOutUpdate) SetCost(f float32) *CattleOutUpdate {
	cou.mutation.ResetCost()
	cou.mutation.SetCost(f)
	return cou
}

// AddCost adds f to cost.
func (cou *CattleOutUpdate) AddCost(f float32) *CattleOutUpdate {
	cou.mutation.AddCost(f)
	return cou
}

// SetShippingFee sets the shippingFee field.
func (cou *CattleOutUpdate) SetShippingFee(f float32) *CattleOutUpdate {
	cou.mutation.ResetShippingFee()
	cou.mutation.SetShippingFee(f)
	return cou
}

// AddShippingFee adds f to shippingFee.
func (cou *CattleOutUpdate) AddShippingFee(f float32) *CattleOutUpdate {
	cou.mutation.AddShippingFee(f)
	return cou
}

// SetTransportCertificateNumber sets the transportCertificateNumber field.
func (cou *CattleOutUpdate) SetTransportCertificateNumber(s string) *CattleOutUpdate {
	cou.mutation.SetTransportCertificateNumber(s)
	return cou
}

// SetUserName sets the userName field.
func (cou *CattleOutUpdate) SetUserName(s string) *CattleOutUpdate {
	cou.mutation.SetUserName(s)
	return cou
}

// SetTestCertificateNumber sets the testCertificateNumber field.
func (cou *CattleOutUpdate) SetTestCertificateNumber(s string) *CattleOutUpdate {
	cou.mutation.SetTestCertificateNumber(s)
	return cou
}

// SetTenantId sets the tenantId field.
func (cou *CattleOutUpdate) SetTenantId(i int64) *CattleOutUpdate {
	cou.mutation.ResetTenantId()
	cou.mutation.SetTenantId(i)
	return cou
}

// AddTenantId adds i to tenantId.
func (cou *CattleOutUpdate) AddTenantId(i int64) *CattleOutUpdate {
	cou.mutation.AddTenantId(i)
	return cou
}

// SetTenantName sets the tenantName field.
func (cou *CattleOutUpdate) SetTenantName(s string) *CattleOutUpdate {
	cou.mutation.SetTenantName(s)
	return cou
}

// SetRemarks sets the remarks field.
func (cou *CattleOutUpdate) SetRemarks(s string) *CattleOutUpdate {
	cou.mutation.SetRemarks(s)
	return cou
}

// SetCreatedAt sets the createdAt field.
func (cou *CattleOutUpdate) SetCreatedAt(i int64) *CattleOutUpdate {
	cou.mutation.ResetCreatedAt()
	cou.mutation.SetCreatedAt(i)
	return cou
}

// AddCreatedAt adds i to createdAt.
func (cou *CattleOutUpdate) AddCreatedAt(i int64) *CattleOutUpdate {
	cou.mutation.AddCreatedAt(i)
	return cou
}

// SetUpdatedAt sets the updatedAt field.
func (cou *CattleOutUpdate) SetUpdatedAt(i int64) *CattleOutUpdate {
	cou.mutation.ResetUpdatedAt()
	cou.mutation.SetUpdatedAt(i)
	return cou
}

// AddUpdatedAt adds i to updatedAt.
func (cou *CattleOutUpdate) AddUpdatedAt(i int64) *CattleOutUpdate {
	cou.mutation.AddUpdatedAt(i)
	return cou
}

// SetDeleted sets the deleted field.
func (cou *CattleOutUpdate) SetDeleted(i int) *CattleOutUpdate {
	cou.mutation.ResetDeleted()
	cou.mutation.SetDeleted(i)
	return cou
}

// AddDeleted adds i to deleted.
func (cou *CattleOutUpdate) AddDeleted(i int) *CattleOutUpdate {
	cou.mutation.AddDeleted(i)
	return cou
}

// Mutation returns the CattleOutMutation object of the builder.
func (cou *CattleOutUpdate) Mutation() *CattleOutMutation {
	return cou.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cou *CattleOutUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cou.hooks) == 0 {
		affected, err = cou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleOutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cou.mutation = mutation
			affected, err = cou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cou.hooks) - 1; i >= 0; i-- {
			mut = cou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cou *CattleOutUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *CattleOutUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *CattleOutUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cou *CattleOutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattleout.Table,
			Columns: cattleout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattleout.FieldID,
			},
		},
	}
	if ps := cou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldName,
		})
	}
	if value, ok := cou.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattleout.FieldType,
		})
	}
	if value, ok := cou.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattleout.FieldType,
		})
	}
	if value, ok := cou.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldDate,
		})
	}
	if value, ok := cou.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldDate,
		})
	}
	if value, ok := cou.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTo,
		})
	}
	if value, ok := cou.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldWeight,
		})
	}
	if value, ok := cou.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldWeight,
		})
	}
	if value, ok := cou.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldCost,
		})
	}
	if value, ok := cou.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldCost,
		})
	}
	if value, ok := cou.mutation.ShippingFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldShippingFee,
		})
	}
	if value, ok := cou.mutation.AddedShippingFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldShippingFee,
		})
	}
	if value, ok := cou.mutation.TransportCertificateNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTransportCertificateNumber,
		})
	}
	if value, ok := cou.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldUserName,
		})
	}
	if value, ok := cou.mutation.TestCertificateNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTestCertificateNumber,
		})
	}
	if value, ok := cou.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldTenantId,
		})
	}
	if value, ok := cou.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldTenantId,
		})
	}
	if value, ok := cou.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTenantName,
		})
	}
	if value, ok := cou.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldRemarks,
		})
	}
	if value, ok := cou.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldCreatedAt,
		})
	}
	if value, ok := cou.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldCreatedAt,
		})
	}
	if value, ok := cou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldUpdatedAt,
		})
	}
	if value, ok := cou.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldUpdatedAt,
		})
	}
	if value, ok := cou.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattleout.FieldDeleted,
		})
	}
	if value, ok := cou.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattleout.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattleout.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CattleOutUpdateOne is the builder for updating a single CattleOut entity.
type CattleOutUpdateOne struct {
	config
	hooks    []Hook
	mutation *CattleOutMutation
}

// SetName sets the name field.
func (couo *CattleOutUpdateOne) SetName(s string) *CattleOutUpdateOne {
	couo.mutation.SetName(s)
	return couo
}

// SetType sets the type field.
func (couo *CattleOutUpdateOne) SetType(i int) *CattleOutUpdateOne {
	couo.mutation.ResetType()
	couo.mutation.SetType(i)
	return couo
}

// AddType adds i to type.
func (couo *CattleOutUpdateOne) AddType(i int) *CattleOutUpdateOne {
	couo.mutation.AddType(i)
	return couo
}

// SetDate sets the date field.
func (couo *CattleOutUpdateOne) SetDate(i int64) *CattleOutUpdateOne {
	couo.mutation.ResetDate()
	couo.mutation.SetDate(i)
	return couo
}

// AddDate adds i to date.
func (couo *CattleOutUpdateOne) AddDate(i int64) *CattleOutUpdateOne {
	couo.mutation.AddDate(i)
	return couo
}

// SetTo sets the to field.
func (couo *CattleOutUpdateOne) SetTo(s string) *CattleOutUpdateOne {
	couo.mutation.SetTo(s)
	return couo
}

// SetWeight sets the weight field.
func (couo *CattleOutUpdateOne) SetWeight(f float32) *CattleOutUpdateOne {
	couo.mutation.ResetWeight()
	couo.mutation.SetWeight(f)
	return couo
}

// AddWeight adds f to weight.
func (couo *CattleOutUpdateOne) AddWeight(f float32) *CattleOutUpdateOne {
	couo.mutation.AddWeight(f)
	return couo
}

// SetCost sets the cost field.
func (couo *CattleOutUpdateOne) SetCost(f float32) *CattleOutUpdateOne {
	couo.mutation.ResetCost()
	couo.mutation.SetCost(f)
	return couo
}

// AddCost adds f to cost.
func (couo *CattleOutUpdateOne) AddCost(f float32) *CattleOutUpdateOne {
	couo.mutation.AddCost(f)
	return couo
}

// SetShippingFee sets the shippingFee field.
func (couo *CattleOutUpdateOne) SetShippingFee(f float32) *CattleOutUpdateOne {
	couo.mutation.ResetShippingFee()
	couo.mutation.SetShippingFee(f)
	return couo
}

// AddShippingFee adds f to shippingFee.
func (couo *CattleOutUpdateOne) AddShippingFee(f float32) *CattleOutUpdateOne {
	couo.mutation.AddShippingFee(f)
	return couo
}

// SetTransportCertificateNumber sets the transportCertificateNumber field.
func (couo *CattleOutUpdateOne) SetTransportCertificateNumber(s string) *CattleOutUpdateOne {
	couo.mutation.SetTransportCertificateNumber(s)
	return couo
}

// SetUserName sets the userName field.
func (couo *CattleOutUpdateOne) SetUserName(s string) *CattleOutUpdateOne {
	couo.mutation.SetUserName(s)
	return couo
}

// SetTestCertificateNumber sets the testCertificateNumber field.
func (couo *CattleOutUpdateOne) SetTestCertificateNumber(s string) *CattleOutUpdateOne {
	couo.mutation.SetTestCertificateNumber(s)
	return couo
}

// SetTenantId sets the tenantId field.
func (couo *CattleOutUpdateOne) SetTenantId(i int64) *CattleOutUpdateOne {
	couo.mutation.ResetTenantId()
	couo.mutation.SetTenantId(i)
	return couo
}

// AddTenantId adds i to tenantId.
func (couo *CattleOutUpdateOne) AddTenantId(i int64) *CattleOutUpdateOne {
	couo.mutation.AddTenantId(i)
	return couo
}

// SetTenantName sets the tenantName field.
func (couo *CattleOutUpdateOne) SetTenantName(s string) *CattleOutUpdateOne {
	couo.mutation.SetTenantName(s)
	return couo
}

// SetRemarks sets the remarks field.
func (couo *CattleOutUpdateOne) SetRemarks(s string) *CattleOutUpdateOne {
	couo.mutation.SetRemarks(s)
	return couo
}

// SetCreatedAt sets the createdAt field.
func (couo *CattleOutUpdateOne) SetCreatedAt(i int64) *CattleOutUpdateOne {
	couo.mutation.ResetCreatedAt()
	couo.mutation.SetCreatedAt(i)
	return couo
}

// AddCreatedAt adds i to createdAt.
func (couo *CattleOutUpdateOne) AddCreatedAt(i int64) *CattleOutUpdateOne {
	couo.mutation.AddCreatedAt(i)
	return couo
}

// SetUpdatedAt sets the updatedAt field.
func (couo *CattleOutUpdateOne) SetUpdatedAt(i int64) *CattleOutUpdateOne {
	couo.mutation.ResetUpdatedAt()
	couo.mutation.SetUpdatedAt(i)
	return couo
}

// AddUpdatedAt adds i to updatedAt.
func (couo *CattleOutUpdateOne) AddUpdatedAt(i int64) *CattleOutUpdateOne {
	couo.mutation.AddUpdatedAt(i)
	return couo
}

// SetDeleted sets the deleted field.
func (couo *CattleOutUpdateOne) SetDeleted(i int) *CattleOutUpdateOne {
	couo.mutation.ResetDeleted()
	couo.mutation.SetDeleted(i)
	return couo
}

// AddDeleted adds i to deleted.
func (couo *CattleOutUpdateOne) AddDeleted(i int) *CattleOutUpdateOne {
	couo.mutation.AddDeleted(i)
	return couo
}

// Mutation returns the CattleOutMutation object of the builder.
func (couo *CattleOutUpdateOne) Mutation() *CattleOutMutation {
	return couo.mutation
}

// Save executes the query and returns the updated entity.
func (couo *CattleOutUpdateOne) Save(ctx context.Context) (*CattleOut, error) {
	var (
		err  error
		node *CattleOut
	)
	if len(couo.hooks) == 0 {
		node, err = couo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CattleOutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			couo.mutation = mutation
			node, err = couo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(couo.hooks) - 1; i >= 0; i-- {
			mut = couo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, couo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (couo *CattleOutUpdateOne) SaveX(ctx context.Context) *CattleOut {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *CattleOutUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *CattleOutUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (couo *CattleOutUpdateOne) sqlSave(ctx context.Context) (_node *CattleOut, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattleout.Table,
			Columns: cattleout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattleout.FieldID,
			},
		},
	}
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CattleOut.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := couo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldName,
		})
	}
	if value, ok := couo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattleout.FieldType,
		})
	}
	if value, ok := couo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattleout.FieldType,
		})
	}
	if value, ok := couo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldDate,
		})
	}
	if value, ok := couo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldDate,
		})
	}
	if value, ok := couo.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTo,
		})
	}
	if value, ok := couo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldWeight,
		})
	}
	if value, ok := couo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldWeight,
		})
	}
	if value, ok := couo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldCost,
		})
	}
	if value, ok := couo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldCost,
		})
	}
	if value, ok := couo.mutation.ShippingFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldShippingFee,
		})
	}
	if value, ok := couo.mutation.AddedShippingFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: cattleout.FieldShippingFee,
		})
	}
	if value, ok := couo.mutation.TransportCertificateNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTransportCertificateNumber,
		})
	}
	if value, ok := couo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldUserName,
		})
	}
	if value, ok := couo.mutation.TestCertificateNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTestCertificateNumber,
		})
	}
	if value, ok := couo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldTenantId,
		})
	}
	if value, ok := couo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldTenantId,
		})
	}
	if value, ok := couo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldTenantName,
		})
	}
	if value, ok := couo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cattleout.FieldRemarks,
		})
	}
	if value, ok := couo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldCreatedAt,
		})
	}
	if value, ok := couo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldCreatedAt,
		})
	}
	if value, ok := couo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldUpdatedAt,
		})
	}
	if value, ok := couo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cattleout.FieldUpdatedAt,
		})
	}
	if value, ok := couo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattleout.FieldDeleted,
		})
	}
	if value, ok := couo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cattleout.FieldDeleted,
		})
	}
	_node = &CattleOut{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cattleout.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

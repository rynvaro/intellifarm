// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattleowner"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// CattleOwner is the model entity for the CattleOwner schema.
type CattleOwner struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CattleOwner) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CattleOwner fields.
func (co *CattleOwner) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cattleowner.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	co.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		co.Name = value.String
	}
	return nil
}

// Update returns a builder for updating this CattleOwner.
// Note that, you need to call CattleOwner.Unwrap() before calling this method, if this CattleOwner
// was returned from a transaction, and the transaction was committed or rolled back.
func (co *CattleOwner) Update() *CattleOwnerUpdateOne {
	return (&CattleOwnerClient{config: co.config}).UpdateOne(co)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (co *CattleOwner) Unwrap() *CattleOwner {
	tx, ok := co.config.driver.(*txDriver)
	if !ok {
		panic("ent: CattleOwner is not a transactional entity")
	}
	co.config.driver = tx.drv
	return co
}

// String implements the fmt.Stringer.
func (co *CattleOwner) String() string {
	var builder strings.Builder
	builder.WriteString("CattleOwner(")
	builder.WriteString(fmt.Sprintf("id=%v", co.ID))
	builder.WriteString(", name=")
	builder.WriteString(co.Name)
	builder.WriteByte(')')
	return builder.String()
}

// CattleOwners is a parsable slice of CattleOwner.
type CattleOwners []*CattleOwner

func (co CattleOwners) config(cfg config) {
	for _i := range co {
		co[_i].config = cfg
	}
}

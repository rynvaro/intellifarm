// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/cattleowner"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CattleOwnerQuery is the builder for querying CattleOwner entities.
type CattleOwnerQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.CattleOwner
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (coq *CattleOwnerQuery) Where(ps ...predicate.CattleOwner) *CattleOwnerQuery {
	coq.predicates = append(coq.predicates, ps...)
	return coq
}

// Limit adds a limit step to the query.
func (coq *CattleOwnerQuery) Limit(limit int) *CattleOwnerQuery {
	coq.limit = &limit
	return coq
}

// Offset adds an offset step to the query.
func (coq *CattleOwnerQuery) Offset(offset int) *CattleOwnerQuery {
	coq.offset = &offset
	return coq
}

// Order adds an order step to the query.
func (coq *CattleOwnerQuery) Order(o ...OrderFunc) *CattleOwnerQuery {
	coq.order = append(coq.order, o...)
	return coq
}

// First returns the first CattleOwner entity in the query. Returns *NotFoundError when no cattleowner was found.
func (coq *CattleOwnerQuery) First(ctx context.Context) (*CattleOwner, error) {
	nodes, err := coq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cattleowner.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (coq *CattleOwnerQuery) FirstX(ctx context.Context) *CattleOwner {
	node, err := coq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CattleOwner id in the query. Returns *NotFoundError when no id was found.
func (coq *CattleOwnerQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = coq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cattleowner.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (coq *CattleOwnerQuery) FirstXID(ctx context.Context) int64 {
	id, err := coq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only CattleOwner entity in the query, returns an error if not exactly one entity was returned.
func (coq *CattleOwnerQuery) Only(ctx context.Context) (*CattleOwner, error) {
	nodes, err := coq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cattleowner.Label}
	default:
		return nil, &NotSingularError{cattleowner.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (coq *CattleOwnerQuery) OnlyX(ctx context.Context) *CattleOwner {
	node, err := coq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only CattleOwner id in the query, returns an error if not exactly one id was returned.
func (coq *CattleOwnerQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = coq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cattleowner.Label}
	default:
		err = &NotSingularError{cattleowner.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (coq *CattleOwnerQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := coq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CattleOwners.
func (coq *CattleOwnerQuery) All(ctx context.Context) ([]*CattleOwner, error) {
	if err := coq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return coq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (coq *CattleOwnerQuery) AllX(ctx context.Context) []*CattleOwner {
	nodes, err := coq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CattleOwner ids.
func (coq *CattleOwnerQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := coq.Select(cattleowner.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (coq *CattleOwnerQuery) IDsX(ctx context.Context) []int64 {
	ids, err := coq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (coq *CattleOwnerQuery) Count(ctx context.Context) (int, error) {
	if err := coq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return coq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (coq *CattleOwnerQuery) CountX(ctx context.Context) int {
	count, err := coq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (coq *CattleOwnerQuery) Exist(ctx context.Context) (bool, error) {
	if err := coq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return coq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (coq *CattleOwnerQuery) ExistX(ctx context.Context) bool {
	exist, err := coq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (coq *CattleOwnerQuery) Clone() *CattleOwnerQuery {
	return &CattleOwnerQuery{
		config:     coq.config,
		limit:      coq.limit,
		offset:     coq.offset,
		order:      append([]OrderFunc{}, coq.order...),
		unique:     append([]string{}, coq.unique...),
		predicates: append([]predicate.CattleOwner{}, coq.predicates...),
		// clone intermediate query.
		sql:  coq.sql.Clone(),
		path: coq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CattleOwner.Query().
//		GroupBy(cattleowner.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (coq *CattleOwnerQuery) GroupBy(field string, fields ...string) *CattleOwnerGroupBy {
	group := &CattleOwnerGroupBy{config: coq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return coq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.CattleOwner.Query().
//		Select(cattleowner.FieldName).
//		Scan(ctx, &v)
//
func (coq *CattleOwnerQuery) Select(field string, fields ...string) *CattleOwnerSelect {
	selector := &CattleOwnerSelect{config: coq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return coq.sqlQuery(), nil
	}
	return selector
}

func (coq *CattleOwnerQuery) prepareQuery(ctx context.Context) error {
	if coq.path != nil {
		prev, err := coq.path(ctx)
		if err != nil {
			return err
		}
		coq.sql = prev
	}
	return nil
}

func (coq *CattleOwnerQuery) sqlAll(ctx context.Context) ([]*CattleOwner, error) {
	var (
		nodes = []*CattleOwner{}
		_spec = coq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &CattleOwner{config: coq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, coq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (coq *CattleOwnerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := coq.querySpec()
	return sqlgraph.CountNodes(ctx, coq.driver, _spec)
}

func (coq *CattleOwnerQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := coq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (coq *CattleOwnerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cattleowner.Table,
			Columns: cattleowner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cattleowner.FieldID,
			},
		},
		From:   coq.sql,
		Unique: true,
	}
	if ps := coq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := coq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := coq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := coq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, cattleowner.ValidColumn)
			}
		}
	}
	return _spec
}

func (coq *CattleOwnerQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(coq.driver.Dialect())
	t1 := builder.Table(cattleowner.Table)
	selector := builder.Select(t1.Columns(cattleowner.Columns...)...).From(t1)
	if coq.sql != nil {
		selector = coq.sql
		selector.Select(selector.Columns(cattleowner.Columns...)...)
	}
	for _, p := range coq.predicates {
		p(selector)
	}
	for _, p := range coq.order {
		p(selector, cattleowner.ValidColumn)
	}
	if offset := coq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := coq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CattleOwnerGroupBy is the builder for group-by CattleOwner entities.
type CattleOwnerGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cogb *CattleOwnerGroupBy) Aggregate(fns ...AggregateFunc) *CattleOwnerGroupBy {
	cogb.fns = append(cogb.fns, fns...)
	return cogb
}

// Scan applies the group-by query and scan the result into the given value.
func (cogb *CattleOwnerGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cogb.path(ctx)
	if err != nil {
		return err
	}
	cogb.sql = query
	return cogb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cogb *CattleOwnerGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cogb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (cogb *CattleOwnerGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cogb.fields) > 1 {
		return nil, errors.New("ent: CattleOwnerGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cogb *CattleOwnerGroupBy) StringsX(ctx context.Context) []string {
	v, err := cogb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (cogb *CattleOwnerGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cogb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattleowner.Label}
	default:
		err = fmt.Errorf("ent: CattleOwnerGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cogb *CattleOwnerGroupBy) StringX(ctx context.Context) string {
	v, err := cogb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (cogb *CattleOwnerGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cogb.fields) > 1 {
		return nil, errors.New("ent: CattleOwnerGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cogb *CattleOwnerGroupBy) IntsX(ctx context.Context) []int {
	v, err := cogb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (cogb *CattleOwnerGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cogb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattleowner.Label}
	default:
		err = fmt.Errorf("ent: CattleOwnerGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cogb *CattleOwnerGroupBy) IntX(ctx context.Context) int {
	v, err := cogb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (cogb *CattleOwnerGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cogb.fields) > 1 {
		return nil, errors.New("ent: CattleOwnerGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cogb *CattleOwnerGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cogb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (cogb *CattleOwnerGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cogb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattleowner.Label}
	default:
		err = fmt.Errorf("ent: CattleOwnerGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cogb *CattleOwnerGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cogb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (cogb *CattleOwnerGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cogb.fields) > 1 {
		return nil, errors.New("ent: CattleOwnerGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cogb *CattleOwnerGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cogb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (cogb *CattleOwnerGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cogb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattleowner.Label}
	default:
		err = fmt.Errorf("ent: CattleOwnerGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cogb *CattleOwnerGroupBy) BoolX(ctx context.Context) bool {
	v, err := cogb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cogb *CattleOwnerGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cogb.fields {
		if !cattleowner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cogb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cogb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cogb *CattleOwnerGroupBy) sqlQuery() *sql.Selector {
	selector := cogb.sql
	columns := make([]string, 0, len(cogb.fields)+len(cogb.fns))
	columns = append(columns, cogb.fields...)
	for _, fn := range cogb.fns {
		columns = append(columns, fn(selector, cattleowner.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(cogb.fields...)
}

// CattleOwnerSelect is the builder for select fields of CattleOwner entities.
type CattleOwnerSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (cos *CattleOwnerSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := cos.path(ctx)
	if err != nil {
		return err
	}
	cos.sql = query
	return cos.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cos *CattleOwnerSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cos.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (cos *CattleOwnerSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cos.fields) > 1 {
		return nil, errors.New("ent: CattleOwnerSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cos *CattleOwnerSelect) StringsX(ctx context.Context) []string {
	v, err := cos.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (cos *CattleOwnerSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cos.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattleowner.Label}
	default:
		err = fmt.Errorf("ent: CattleOwnerSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cos *CattleOwnerSelect) StringX(ctx context.Context) string {
	v, err := cos.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (cos *CattleOwnerSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cos.fields) > 1 {
		return nil, errors.New("ent: CattleOwnerSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cos *CattleOwnerSelect) IntsX(ctx context.Context) []int {
	v, err := cos.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (cos *CattleOwnerSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cos.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattleowner.Label}
	default:
		err = fmt.Errorf("ent: CattleOwnerSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cos *CattleOwnerSelect) IntX(ctx context.Context) int {
	v, err := cos.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (cos *CattleOwnerSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cos.fields) > 1 {
		return nil, errors.New("ent: CattleOwnerSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cos *CattleOwnerSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cos.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (cos *CattleOwnerSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cos.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattleowner.Label}
	default:
		err = fmt.Errorf("ent: CattleOwnerSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cos *CattleOwnerSelect) Float64X(ctx context.Context) float64 {
	v, err := cos.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (cos *CattleOwnerSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cos.fields) > 1 {
		return nil, errors.New("ent: CattleOwnerSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cos *CattleOwnerSelect) BoolsX(ctx context.Context) []bool {
	v, err := cos.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (cos *CattleOwnerSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cos.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{cattleowner.Label}
	default:
		err = fmt.Errorf("ent: CattleOwnerSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cos *CattleOwnerSelect) BoolX(ctx context.Context) bool {
	v, err := cos.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cos *CattleOwnerSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cos.fields {
		if !cattleowner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := cos.sqlQuery().Query()
	if err := cos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cos *CattleOwnerSelect) sqlQuery() sql.Querier {
	selector := cos.sql
	selector.Select(selector.Columns(cos.fields...)...)
	return selector
}

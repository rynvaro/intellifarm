// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"cattleai/ent/migrate"

	"cattleai/ent/abortion"
	"cattleai/ent/abortionreason"
	"cattleai/ent/abortiontype"
	"cattleai/ent/api"
	"cattleai/ent/birthsurrounding"
	"cattleai/ent/breathrate"
	"cattleai/ent/breeding"
	"cattleai/ent/breedingtype"
	"cattleai/ent/calve"
	"cattleai/ent/calvecount"
	"cattleai/ent/calvetype"
	"cattleai/ent/category"
	"cattleai/ent/cattle"
	"cattleai/ent/cattlebreed"
	"cattleai/ent/cattlecate"
	"cattleai/ent/cattledie"
	"cattleai/ent/cattlegender"
	"cattleai/ent/cattlegroup"
	"cattleai/ent/cattlegrow"
	"cattleai/ent/cattlegrowsdata"
	"cattleai/ent/cattlegrowsrate"
	"cattleai/ent/cattlehaircolor"
	"cattleai/ent/cattlein"
	"cattleai/ent/cattlejoinedtype"
	"cattleai/ent/cattlemove"
	"cattleai/ent/cattlemovereason"
	"cattleai/ent/cattleout"
	"cattleai/ent/cattleowner"
	"cattleai/ent/cattletype"
	"cattleai/ent/change"
	"cattleai/ent/concentrate"
	"cattleai/ent/concentrateformula"
	"cattleai/ent/concentrateprocess"
	"cattleai/ent/conf"
	"cattleai/ent/customer"
	"cattleai/ent/diseaseinfo"
	"cattleai/ent/disinfect"
	"cattleai/ent/dispence"
	"cattleai/ent/duty"
	"cattleai/ent/epidemic"
	"cattleai/ent/epidemictype"
	"cattleai/ent/estrus"
	"cattleai/ent/estrustype"
	"cattleai/ent/event"
	"cattleai/ent/farm"
	"cattleai/ent/feedgroup"
	"cattleai/ent/feedinfo"
	"cattleai/ent/feedrecord"
	"cattleai/ent/frozensemeninfo"
	"cattleai/ent/hairstate"
	"cattleai/ent/healthcare"
	"cattleai/ent/immunity"
	"cattleai/ent/inspection"
	"cattleai/ent/inventoryflow"
	"cattleai/ent/material"
	"cattleai/ent/materialtest"
	"cattleai/ent/medicine"
	"cattleai/ent/operation"
	"cattleai/ent/position"
	"cattleai/ent/positionapi"
	"cattleai/ent/pregnancytest"
	"cattleai/ent/pregnancytestmethod"
	"cattleai/ent/pregnancytestresult"
	"cattleai/ent/pregnancytesttype"
	"cattleai/ent/ration"
	"cattleai/ent/rationformula"
	"cattleai/ent/rationprocess"
	"cattleai/ent/reproductionparameters"
	"cattleai/ent/reproductivestate"
	"cattleai/ent/semenfrozentype"
	"cattleai/ent/shed"
	"cattleai/ent/shedcategory"
	"cattleai/ent/shedsetting"
	"cattleai/ent/shedtrans"
	"cattleai/ent/shedtype"
	"cattleai/ent/tenant"
	"cattleai/ent/treatmentresult"
	"cattleai/ent/treatmentstate"
	"cattleai/ent/user"
	"cattleai/ent/veterinarydrugsinfo"
	"cattleai/ent/warehousesetting"
	"cattleai/ent/whereabouts"
	"cattleai/ent/winddirection"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// API is the client for interacting with the API builders.
	API *APIClient
	// Abortion is the client for interacting with the Abortion builders.
	Abortion *AbortionClient
	// AbortionReason is the client for interacting with the AbortionReason builders.
	AbortionReason *AbortionReasonClient
	// AbortionType is the client for interacting with the AbortionType builders.
	AbortionType *AbortionTypeClient
	// BirthSurrounding is the client for interacting with the BirthSurrounding builders.
	BirthSurrounding *BirthSurroundingClient
	// BreathRate is the client for interacting with the BreathRate builders.
	BreathRate *BreathRateClient
	// Breeding is the client for interacting with the Breeding builders.
	Breeding *BreedingClient
	// BreedingType is the client for interacting with the BreedingType builders.
	BreedingType *BreedingTypeClient
	// Calve is the client for interacting with the Calve builders.
	Calve *CalveClient
	// CalveCount is the client for interacting with the CalveCount builders.
	CalveCount *CalveCountClient
	// CalveType is the client for interacting with the CalveType builders.
	CalveType *CalveTypeClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Cattle is the client for interacting with the Cattle builders.
	Cattle *CattleClient
	// CattleBreed is the client for interacting with the CattleBreed builders.
	CattleBreed *CattleBreedClient
	// CattleCate is the client for interacting with the CattleCate builders.
	CattleCate *CattleCateClient
	// CattleDie is the client for interacting with the CattleDie builders.
	CattleDie *CattleDieClient
	// CattleGender is the client for interacting with the CattleGender builders.
	CattleGender *CattleGenderClient
	// CattleGroup is the client for interacting with the CattleGroup builders.
	CattleGroup *CattleGroupClient
	// CattleGrow is the client for interacting with the CattleGrow builders.
	CattleGrow *CattleGrowClient
	// CattleGrowsData is the client for interacting with the CattleGrowsData builders.
	CattleGrowsData *CattleGrowsDataClient
	// CattleGrowsRate is the client for interacting with the CattleGrowsRate builders.
	CattleGrowsRate *CattleGrowsRateClient
	// CattleHairColor is the client for interacting with the CattleHairColor builders.
	CattleHairColor *CattleHairColorClient
	// CattleIn is the client for interacting with the CattleIn builders.
	CattleIn *CattleInClient
	// CattleJoinedType is the client for interacting with the CattleJoinedType builders.
	CattleJoinedType *CattleJoinedTypeClient
	// CattleMove is the client for interacting with the CattleMove builders.
	CattleMove *CattleMoveClient
	// CattleMoveReason is the client for interacting with the CattleMoveReason builders.
	CattleMoveReason *CattleMoveReasonClient
	// CattleOut is the client for interacting with the CattleOut builders.
	CattleOut *CattleOutClient
	// CattleOwner is the client for interacting with the CattleOwner builders.
	CattleOwner *CattleOwnerClient
	// CattleType is the client for interacting with the CattleType builders.
	CattleType *CattleTypeClient
	// Change is the client for interacting with the Change builders.
	Change *ChangeClient
	// Concentrate is the client for interacting with the Concentrate builders.
	Concentrate *ConcentrateClient
	// ConcentrateFormula is the client for interacting with the ConcentrateFormula builders.
	ConcentrateFormula *ConcentrateFormulaClient
	// ConcentrateProcess is the client for interacting with the ConcentrateProcess builders.
	ConcentrateProcess *ConcentrateProcessClient
	// Conf is the client for interacting with the Conf builders.
	Conf *ConfClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// DiseaseInfo is the client for interacting with the DiseaseInfo builders.
	DiseaseInfo *DiseaseInfoClient
	// Disinfect is the client for interacting with the Disinfect builders.
	Disinfect *DisinfectClient
	// Dispence is the client for interacting with the Dispence builders.
	Dispence *DispenceClient
	// Duty is the client for interacting with the Duty builders.
	Duty *DutyClient
	// Epidemic is the client for interacting with the Epidemic builders.
	Epidemic *EpidemicClient
	// EpidemicType is the client for interacting with the EpidemicType builders.
	EpidemicType *EpidemicTypeClient
	// Estrus is the client for interacting with the Estrus builders.
	Estrus *EstrusClient
	// EstrusType is the client for interacting with the EstrusType builders.
	EstrusType *EstrusTypeClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// Farm is the client for interacting with the Farm builders.
	Farm *FarmClient
	// FeedGroup is the client for interacting with the FeedGroup builders.
	FeedGroup *FeedGroupClient
	// FeedInfo is the client for interacting with the FeedInfo builders.
	FeedInfo *FeedInfoClient
	// FeedRecord is the client for interacting with the FeedRecord builders.
	FeedRecord *FeedRecordClient
	// FrozenSemenInfo is the client for interacting with the FrozenSemenInfo builders.
	FrozenSemenInfo *FrozenSemenInfoClient
	// HairState is the client for interacting with the HairState builders.
	HairState *HairStateClient
	// HealthCare is the client for interacting with the HealthCare builders.
	HealthCare *HealthCareClient
	// Immunity is the client for interacting with the Immunity builders.
	Immunity *ImmunityClient
	// Inspection is the client for interacting with the Inspection builders.
	Inspection *InspectionClient
	// InventoryFlow is the client for interacting with the InventoryFlow builders.
	InventoryFlow *InventoryFlowClient
	// Material is the client for interacting with the Material builders.
	Material *MaterialClient
	// MaterialTest is the client for interacting with the MaterialTest builders.
	MaterialTest *MaterialTestClient
	// Medicine is the client for interacting with the Medicine builders.
	Medicine *MedicineClient
	// Operation is the client for interacting with the Operation builders.
	Operation *OperationClient
	// Position is the client for interacting with the Position builders.
	Position *PositionClient
	// PositionApi is the client for interacting with the PositionApi builders.
	PositionApi *PositionApiClient
	// PregnancyTest is the client for interacting with the PregnancyTest builders.
	PregnancyTest *PregnancyTestClient
	// PregnancyTestMethod is the client for interacting with the PregnancyTestMethod builders.
	PregnancyTestMethod *PregnancyTestMethodClient
	// PregnancyTestResult is the client for interacting with the PregnancyTestResult builders.
	PregnancyTestResult *PregnancyTestResultClient
	// PregnancyTestType is the client for interacting with the PregnancyTestType builders.
	PregnancyTestType *PregnancyTestTypeClient
	// Ration is the client for interacting with the Ration builders.
	Ration *RationClient
	// RationFormula is the client for interacting with the RationFormula builders.
	RationFormula *RationFormulaClient
	// RationProcess is the client for interacting with the RationProcess builders.
	RationProcess *RationProcessClient
	// ReproductionParameters is the client for interacting with the ReproductionParameters builders.
	ReproductionParameters *ReproductionParametersClient
	// ReproductiveState is the client for interacting with the ReproductiveState builders.
	ReproductiveState *ReproductiveStateClient
	// SemenFrozenType is the client for interacting with the SemenFrozenType builders.
	SemenFrozenType *SemenFrozenTypeClient
	// Shed is the client for interacting with the Shed builders.
	Shed *ShedClient
	// ShedCategory is the client for interacting with the ShedCategory builders.
	ShedCategory *ShedCategoryClient
	// ShedSetting is the client for interacting with the ShedSetting builders.
	ShedSetting *ShedSettingClient
	// ShedTrans is the client for interacting with the ShedTrans builders.
	ShedTrans *ShedTransClient
	// ShedType is the client for interacting with the ShedType builders.
	ShedType *ShedTypeClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// TreatmentResult is the client for interacting with the TreatmentResult builders.
	TreatmentResult *TreatmentResultClient
	// TreatmentState is the client for interacting with the TreatmentState builders.
	TreatmentState *TreatmentStateClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// VeterinaryDrugsInfo is the client for interacting with the VeterinaryDrugsInfo builders.
	VeterinaryDrugsInfo *VeterinaryDrugsInfoClient
	// WarehouseSetting is the client for interacting with the WarehouseSetting builders.
	WarehouseSetting *WarehouseSettingClient
	// Whereabouts is the client for interacting with the Whereabouts builders.
	Whereabouts *WhereaboutsClient
	// WindDirection is the client for interacting with the WindDirection builders.
	WindDirection *WindDirectionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.API = NewAPIClient(c.config)
	c.Abortion = NewAbortionClient(c.config)
	c.AbortionReason = NewAbortionReasonClient(c.config)
	c.AbortionType = NewAbortionTypeClient(c.config)
	c.BirthSurrounding = NewBirthSurroundingClient(c.config)
	c.BreathRate = NewBreathRateClient(c.config)
	c.Breeding = NewBreedingClient(c.config)
	c.BreedingType = NewBreedingTypeClient(c.config)
	c.Calve = NewCalveClient(c.config)
	c.CalveCount = NewCalveCountClient(c.config)
	c.CalveType = NewCalveTypeClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Cattle = NewCattleClient(c.config)
	c.CattleBreed = NewCattleBreedClient(c.config)
	c.CattleCate = NewCattleCateClient(c.config)
	c.CattleDie = NewCattleDieClient(c.config)
	c.CattleGender = NewCattleGenderClient(c.config)
	c.CattleGroup = NewCattleGroupClient(c.config)
	c.CattleGrow = NewCattleGrowClient(c.config)
	c.CattleGrowsData = NewCattleGrowsDataClient(c.config)
	c.CattleGrowsRate = NewCattleGrowsRateClient(c.config)
	c.CattleHairColor = NewCattleHairColorClient(c.config)
	c.CattleIn = NewCattleInClient(c.config)
	c.CattleJoinedType = NewCattleJoinedTypeClient(c.config)
	c.CattleMove = NewCattleMoveClient(c.config)
	c.CattleMoveReason = NewCattleMoveReasonClient(c.config)
	c.CattleOut = NewCattleOutClient(c.config)
	c.CattleOwner = NewCattleOwnerClient(c.config)
	c.CattleType = NewCattleTypeClient(c.config)
	c.Change = NewChangeClient(c.config)
	c.Concentrate = NewConcentrateClient(c.config)
	c.ConcentrateFormula = NewConcentrateFormulaClient(c.config)
	c.ConcentrateProcess = NewConcentrateProcessClient(c.config)
	c.Conf = NewConfClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.DiseaseInfo = NewDiseaseInfoClient(c.config)
	c.Disinfect = NewDisinfectClient(c.config)
	c.Dispence = NewDispenceClient(c.config)
	c.Duty = NewDutyClient(c.config)
	c.Epidemic = NewEpidemicClient(c.config)
	c.EpidemicType = NewEpidemicTypeClient(c.config)
	c.Estrus = NewEstrusClient(c.config)
	c.EstrusType = NewEstrusTypeClient(c.config)
	c.Event = NewEventClient(c.config)
	c.Farm = NewFarmClient(c.config)
	c.FeedGroup = NewFeedGroupClient(c.config)
	c.FeedInfo = NewFeedInfoClient(c.config)
	c.FeedRecord = NewFeedRecordClient(c.config)
	c.FrozenSemenInfo = NewFrozenSemenInfoClient(c.config)
	c.HairState = NewHairStateClient(c.config)
	c.HealthCare = NewHealthCareClient(c.config)
	c.Immunity = NewImmunityClient(c.config)
	c.Inspection = NewInspectionClient(c.config)
	c.InventoryFlow = NewInventoryFlowClient(c.config)
	c.Material = NewMaterialClient(c.config)
	c.MaterialTest = NewMaterialTestClient(c.config)
	c.Medicine = NewMedicineClient(c.config)
	c.Operation = NewOperationClient(c.config)
	c.Position = NewPositionClient(c.config)
	c.PositionApi = NewPositionApiClient(c.config)
	c.PregnancyTest = NewPregnancyTestClient(c.config)
	c.PregnancyTestMethod = NewPregnancyTestMethodClient(c.config)
	c.PregnancyTestResult = NewPregnancyTestResultClient(c.config)
	c.PregnancyTestType = NewPregnancyTestTypeClient(c.config)
	c.Ration = NewRationClient(c.config)
	c.RationFormula = NewRationFormulaClient(c.config)
	c.RationProcess = NewRationProcessClient(c.config)
	c.ReproductionParameters = NewReproductionParametersClient(c.config)
	c.ReproductiveState = NewReproductiveStateClient(c.config)
	c.SemenFrozenType = NewSemenFrozenTypeClient(c.config)
	c.Shed = NewShedClient(c.config)
	c.ShedCategory = NewShedCategoryClient(c.config)
	c.ShedSetting = NewShedSettingClient(c.config)
	c.ShedTrans = NewShedTransClient(c.config)
	c.ShedType = NewShedTypeClient(c.config)
	c.Tenant = NewTenantClient(c.config)
	c.TreatmentResult = NewTreatmentResultClient(c.config)
	c.TreatmentState = NewTreatmentStateClient(c.config)
	c.User = NewUserClient(c.config)
	c.VeterinaryDrugsInfo = NewVeterinaryDrugsInfoClient(c.config)
	c.WarehouseSetting = NewWarehouseSettingClient(c.config)
	c.Whereabouts = NewWhereaboutsClient(c.config)
	c.WindDirection = NewWindDirectionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		API:                    NewAPIClient(cfg),
		Abortion:               NewAbortionClient(cfg),
		AbortionReason:         NewAbortionReasonClient(cfg),
		AbortionType:           NewAbortionTypeClient(cfg),
		BirthSurrounding:       NewBirthSurroundingClient(cfg),
		BreathRate:             NewBreathRateClient(cfg),
		Breeding:               NewBreedingClient(cfg),
		BreedingType:           NewBreedingTypeClient(cfg),
		Calve:                  NewCalveClient(cfg),
		CalveCount:             NewCalveCountClient(cfg),
		CalveType:              NewCalveTypeClient(cfg),
		Category:               NewCategoryClient(cfg),
		Cattle:                 NewCattleClient(cfg),
		CattleBreed:            NewCattleBreedClient(cfg),
		CattleCate:             NewCattleCateClient(cfg),
		CattleDie:              NewCattleDieClient(cfg),
		CattleGender:           NewCattleGenderClient(cfg),
		CattleGroup:            NewCattleGroupClient(cfg),
		CattleGrow:             NewCattleGrowClient(cfg),
		CattleGrowsData:        NewCattleGrowsDataClient(cfg),
		CattleGrowsRate:        NewCattleGrowsRateClient(cfg),
		CattleHairColor:        NewCattleHairColorClient(cfg),
		CattleIn:               NewCattleInClient(cfg),
		CattleJoinedType:       NewCattleJoinedTypeClient(cfg),
		CattleMove:             NewCattleMoveClient(cfg),
		CattleMoveReason:       NewCattleMoveReasonClient(cfg),
		CattleOut:              NewCattleOutClient(cfg),
		CattleOwner:            NewCattleOwnerClient(cfg),
		CattleType:             NewCattleTypeClient(cfg),
		Change:                 NewChangeClient(cfg),
		Concentrate:            NewConcentrateClient(cfg),
		ConcentrateFormula:     NewConcentrateFormulaClient(cfg),
		ConcentrateProcess:     NewConcentrateProcessClient(cfg),
		Conf:                   NewConfClient(cfg),
		Customer:               NewCustomerClient(cfg),
		DiseaseInfo:            NewDiseaseInfoClient(cfg),
		Disinfect:              NewDisinfectClient(cfg),
		Dispence:               NewDispenceClient(cfg),
		Duty:                   NewDutyClient(cfg),
		Epidemic:               NewEpidemicClient(cfg),
		EpidemicType:           NewEpidemicTypeClient(cfg),
		Estrus:                 NewEstrusClient(cfg),
		EstrusType:             NewEstrusTypeClient(cfg),
		Event:                  NewEventClient(cfg),
		Farm:                   NewFarmClient(cfg),
		FeedGroup:              NewFeedGroupClient(cfg),
		FeedInfo:               NewFeedInfoClient(cfg),
		FeedRecord:             NewFeedRecordClient(cfg),
		FrozenSemenInfo:        NewFrozenSemenInfoClient(cfg),
		HairState:              NewHairStateClient(cfg),
		HealthCare:             NewHealthCareClient(cfg),
		Immunity:               NewImmunityClient(cfg),
		Inspection:             NewInspectionClient(cfg),
		InventoryFlow:          NewInventoryFlowClient(cfg),
		Material:               NewMaterialClient(cfg),
		MaterialTest:           NewMaterialTestClient(cfg),
		Medicine:               NewMedicineClient(cfg),
		Operation:              NewOperationClient(cfg),
		Position:               NewPositionClient(cfg),
		PositionApi:            NewPositionApiClient(cfg),
		PregnancyTest:          NewPregnancyTestClient(cfg),
		PregnancyTestMethod:    NewPregnancyTestMethodClient(cfg),
		PregnancyTestResult:    NewPregnancyTestResultClient(cfg),
		PregnancyTestType:      NewPregnancyTestTypeClient(cfg),
		Ration:                 NewRationClient(cfg),
		RationFormula:          NewRationFormulaClient(cfg),
		RationProcess:          NewRationProcessClient(cfg),
		ReproductionParameters: NewReproductionParametersClient(cfg),
		ReproductiveState:      NewReproductiveStateClient(cfg),
		SemenFrozenType:        NewSemenFrozenTypeClient(cfg),
		Shed:                   NewShedClient(cfg),
		ShedCategory:           NewShedCategoryClient(cfg),
		ShedSetting:            NewShedSettingClient(cfg),
		ShedTrans:              NewShedTransClient(cfg),
		ShedType:               NewShedTypeClient(cfg),
		Tenant:                 NewTenantClient(cfg),
		TreatmentResult:        NewTreatmentResultClient(cfg),
		TreatmentState:         NewTreatmentStateClient(cfg),
		User:                   NewUserClient(cfg),
		VeterinaryDrugsInfo:    NewVeterinaryDrugsInfoClient(cfg),
		WarehouseSetting:       NewWarehouseSettingClient(cfg),
		Whereabouts:            NewWhereaboutsClient(cfg),
		WindDirection:          NewWindDirectionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:                 cfg,
		API:                    NewAPIClient(cfg),
		Abortion:               NewAbortionClient(cfg),
		AbortionReason:         NewAbortionReasonClient(cfg),
		AbortionType:           NewAbortionTypeClient(cfg),
		BirthSurrounding:       NewBirthSurroundingClient(cfg),
		BreathRate:             NewBreathRateClient(cfg),
		Breeding:               NewBreedingClient(cfg),
		BreedingType:           NewBreedingTypeClient(cfg),
		Calve:                  NewCalveClient(cfg),
		CalveCount:             NewCalveCountClient(cfg),
		CalveType:              NewCalveTypeClient(cfg),
		Category:               NewCategoryClient(cfg),
		Cattle:                 NewCattleClient(cfg),
		CattleBreed:            NewCattleBreedClient(cfg),
		CattleCate:             NewCattleCateClient(cfg),
		CattleDie:              NewCattleDieClient(cfg),
		CattleGender:           NewCattleGenderClient(cfg),
		CattleGroup:            NewCattleGroupClient(cfg),
		CattleGrow:             NewCattleGrowClient(cfg),
		CattleGrowsData:        NewCattleGrowsDataClient(cfg),
		CattleGrowsRate:        NewCattleGrowsRateClient(cfg),
		CattleHairColor:        NewCattleHairColorClient(cfg),
		CattleIn:               NewCattleInClient(cfg),
		CattleJoinedType:       NewCattleJoinedTypeClient(cfg),
		CattleMove:             NewCattleMoveClient(cfg),
		CattleMoveReason:       NewCattleMoveReasonClient(cfg),
		CattleOut:              NewCattleOutClient(cfg),
		CattleOwner:            NewCattleOwnerClient(cfg),
		CattleType:             NewCattleTypeClient(cfg),
		Change:                 NewChangeClient(cfg),
		Concentrate:            NewConcentrateClient(cfg),
		ConcentrateFormula:     NewConcentrateFormulaClient(cfg),
		ConcentrateProcess:     NewConcentrateProcessClient(cfg),
		Conf:                   NewConfClient(cfg),
		Customer:               NewCustomerClient(cfg),
		DiseaseInfo:            NewDiseaseInfoClient(cfg),
		Disinfect:              NewDisinfectClient(cfg),
		Dispence:               NewDispenceClient(cfg),
		Duty:                   NewDutyClient(cfg),
		Epidemic:               NewEpidemicClient(cfg),
		EpidemicType:           NewEpidemicTypeClient(cfg),
		Estrus:                 NewEstrusClient(cfg),
		EstrusType:             NewEstrusTypeClient(cfg),
		Event:                  NewEventClient(cfg),
		Farm:                   NewFarmClient(cfg),
		FeedGroup:              NewFeedGroupClient(cfg),
		FeedInfo:               NewFeedInfoClient(cfg),
		FeedRecord:             NewFeedRecordClient(cfg),
		FrozenSemenInfo:        NewFrozenSemenInfoClient(cfg),
		HairState:              NewHairStateClient(cfg),
		HealthCare:             NewHealthCareClient(cfg),
		Immunity:               NewImmunityClient(cfg),
		Inspection:             NewInspectionClient(cfg),
		InventoryFlow:          NewInventoryFlowClient(cfg),
		Material:               NewMaterialClient(cfg),
		MaterialTest:           NewMaterialTestClient(cfg),
		Medicine:               NewMedicineClient(cfg),
		Operation:              NewOperationClient(cfg),
		Position:               NewPositionClient(cfg),
		PositionApi:            NewPositionApiClient(cfg),
		PregnancyTest:          NewPregnancyTestClient(cfg),
		PregnancyTestMethod:    NewPregnancyTestMethodClient(cfg),
		PregnancyTestResult:    NewPregnancyTestResultClient(cfg),
		PregnancyTestType:      NewPregnancyTestTypeClient(cfg),
		Ration:                 NewRationClient(cfg),
		RationFormula:          NewRationFormulaClient(cfg),
		RationProcess:          NewRationProcessClient(cfg),
		ReproductionParameters: NewReproductionParametersClient(cfg),
		ReproductiveState:      NewReproductiveStateClient(cfg),
		SemenFrozenType:        NewSemenFrozenTypeClient(cfg),
		Shed:                   NewShedClient(cfg),
		ShedCategory:           NewShedCategoryClient(cfg),
		ShedSetting:            NewShedSettingClient(cfg),
		ShedTrans:              NewShedTransClient(cfg),
		ShedType:               NewShedTypeClient(cfg),
		Tenant:                 NewTenantClient(cfg),
		TreatmentResult:        NewTreatmentResultClient(cfg),
		TreatmentState:         NewTreatmentStateClient(cfg),
		User:                   NewUserClient(cfg),
		VeterinaryDrugsInfo:    NewVeterinaryDrugsInfoClient(cfg),
		WarehouseSetting:       NewWarehouseSettingClient(cfg),
		Whereabouts:            NewWhereaboutsClient(cfg),
		WindDirection:          NewWindDirectionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		API.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.API.Use(hooks...)
	c.Abortion.Use(hooks...)
	c.AbortionReason.Use(hooks...)
	c.AbortionType.Use(hooks...)
	c.BirthSurrounding.Use(hooks...)
	c.BreathRate.Use(hooks...)
	c.Breeding.Use(hooks...)
	c.BreedingType.Use(hooks...)
	c.Calve.Use(hooks...)
	c.CalveCount.Use(hooks...)
	c.CalveType.Use(hooks...)
	c.Category.Use(hooks...)
	c.Cattle.Use(hooks...)
	c.CattleBreed.Use(hooks...)
	c.CattleCate.Use(hooks...)
	c.CattleDie.Use(hooks...)
	c.CattleGender.Use(hooks...)
	c.CattleGroup.Use(hooks...)
	c.CattleGrow.Use(hooks...)
	c.CattleGrowsData.Use(hooks...)
	c.CattleGrowsRate.Use(hooks...)
	c.CattleHairColor.Use(hooks...)
	c.CattleIn.Use(hooks...)
	c.CattleJoinedType.Use(hooks...)
	c.CattleMove.Use(hooks...)
	c.CattleMoveReason.Use(hooks...)
	c.CattleOut.Use(hooks...)
	c.CattleOwner.Use(hooks...)
	c.CattleType.Use(hooks...)
	c.Change.Use(hooks...)
	c.Concentrate.Use(hooks...)
	c.ConcentrateFormula.Use(hooks...)
	c.ConcentrateProcess.Use(hooks...)
	c.Conf.Use(hooks...)
	c.Customer.Use(hooks...)
	c.DiseaseInfo.Use(hooks...)
	c.Disinfect.Use(hooks...)
	c.Dispence.Use(hooks...)
	c.Duty.Use(hooks...)
	c.Epidemic.Use(hooks...)
	c.EpidemicType.Use(hooks...)
	c.Estrus.Use(hooks...)
	c.EstrusType.Use(hooks...)
	c.Event.Use(hooks...)
	c.Farm.Use(hooks...)
	c.FeedGroup.Use(hooks...)
	c.FeedInfo.Use(hooks...)
	c.FeedRecord.Use(hooks...)
	c.FrozenSemenInfo.Use(hooks...)
	c.HairState.Use(hooks...)
	c.HealthCare.Use(hooks...)
	c.Immunity.Use(hooks...)
	c.Inspection.Use(hooks...)
	c.InventoryFlow.Use(hooks...)
	c.Material.Use(hooks...)
	c.MaterialTest.Use(hooks...)
	c.Medicine.Use(hooks...)
	c.Operation.Use(hooks...)
	c.Position.Use(hooks...)
	c.PositionApi.Use(hooks...)
	c.PregnancyTest.Use(hooks...)
	c.PregnancyTestMethod.Use(hooks...)
	c.PregnancyTestResult.Use(hooks...)
	c.PregnancyTestType.Use(hooks...)
	c.Ration.Use(hooks...)
	c.RationFormula.Use(hooks...)
	c.RationProcess.Use(hooks...)
	c.ReproductionParameters.Use(hooks...)
	c.ReproductiveState.Use(hooks...)
	c.SemenFrozenType.Use(hooks...)
	c.Shed.Use(hooks...)
	c.ShedCategory.Use(hooks...)
	c.ShedSetting.Use(hooks...)
	c.ShedTrans.Use(hooks...)
	c.ShedType.Use(hooks...)
	c.Tenant.Use(hooks...)
	c.TreatmentResult.Use(hooks...)
	c.TreatmentState.Use(hooks...)
	c.User.Use(hooks...)
	c.VeterinaryDrugsInfo.Use(hooks...)
	c.WarehouseSetting.Use(hooks...)
	c.Whereabouts.Use(hooks...)
	c.WindDirection.Use(hooks...)
}

// APIClient is a client for the API schema.
type APIClient struct {
	config
}

// NewAPIClient returns a client for the API from the given config.
func NewAPIClient(c config) *APIClient {
	return &APIClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `api.Hooks(f(g(h())))`.
func (c *APIClient) Use(hooks ...Hook) {
	c.hooks.API = append(c.hooks.API, hooks...)
}

// Create returns a create builder for API.
func (c *APIClient) Create() *APICreate {
	mutation := newAPIMutation(c.config, OpCreate)
	return &APICreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of API entities.
func (c *APIClient) CreateBulk(builders ...*APICreate) *APICreateBulk {
	return &APICreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for API.
func (c *APIClient) Update() *APIUpdate {
	mutation := newAPIMutation(c.config, OpUpdate)
	return &APIUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *APIClient) UpdateOne(a *API) *APIUpdateOne {
	mutation := newAPIMutation(c.config, OpUpdateOne, withAPI(a))
	return &APIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *APIClient) UpdateOneID(id int64) *APIUpdateOne {
	mutation := newAPIMutation(c.config, OpUpdateOne, withAPIID(id))
	return &APIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for API.
func (c *APIClient) Delete() *APIDelete {
	mutation := newAPIMutation(c.config, OpDelete)
	return &APIDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *APIClient) DeleteOne(a *API) *APIDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *APIClient) DeleteOneID(id int64) *APIDeleteOne {
	builder := c.Delete().Where(api.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &APIDeleteOne{builder}
}

// Query returns a query builder for API.
func (c *APIClient) Query() *APIQuery {
	return &APIQuery{config: c.config}
}

// Get returns a API entity by its id.
func (c *APIClient) Get(ctx context.Context, id int64) (*API, error) {
	return c.Query().Where(api.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *APIClient) GetX(ctx context.Context, id int64) *API {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *APIClient) Hooks() []Hook {
	return c.hooks.API
}

// AbortionClient is a client for the Abortion schema.
type AbortionClient struct {
	config
}

// NewAbortionClient returns a client for the Abortion from the given config.
func NewAbortionClient(c config) *AbortionClient {
	return &AbortionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abortion.Hooks(f(g(h())))`.
func (c *AbortionClient) Use(hooks ...Hook) {
	c.hooks.Abortion = append(c.hooks.Abortion, hooks...)
}

// Create returns a create builder for Abortion.
func (c *AbortionClient) Create() *AbortionCreate {
	mutation := newAbortionMutation(c.config, OpCreate)
	return &AbortionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Abortion entities.
func (c *AbortionClient) CreateBulk(builders ...*AbortionCreate) *AbortionCreateBulk {
	return &AbortionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Abortion.
func (c *AbortionClient) Update() *AbortionUpdate {
	mutation := newAbortionMutation(c.config, OpUpdate)
	return &AbortionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbortionClient) UpdateOne(a *Abortion) *AbortionUpdateOne {
	mutation := newAbortionMutation(c.config, OpUpdateOne, withAbortion(a))
	return &AbortionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbortionClient) UpdateOneID(id int64) *AbortionUpdateOne {
	mutation := newAbortionMutation(c.config, OpUpdateOne, withAbortionID(id))
	return &AbortionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Abortion.
func (c *AbortionClient) Delete() *AbortionDelete {
	mutation := newAbortionMutation(c.config, OpDelete)
	return &AbortionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AbortionClient) DeleteOne(a *Abortion) *AbortionDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AbortionClient) DeleteOneID(id int64) *AbortionDeleteOne {
	builder := c.Delete().Where(abortion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbortionDeleteOne{builder}
}

// Query returns a query builder for Abortion.
func (c *AbortionClient) Query() *AbortionQuery {
	return &AbortionQuery{config: c.config}
}

// Get returns a Abortion entity by its id.
func (c *AbortionClient) Get(ctx context.Context, id int64) (*Abortion, error) {
	return c.Query().Where(abortion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbortionClient) GetX(ctx context.Context, id int64) *Abortion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AbortionClient) Hooks() []Hook {
	return c.hooks.Abortion
}

// AbortionReasonClient is a client for the AbortionReason schema.
type AbortionReasonClient struct {
	config
}

// NewAbortionReasonClient returns a client for the AbortionReason from the given config.
func NewAbortionReasonClient(c config) *AbortionReasonClient {
	return &AbortionReasonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abortionreason.Hooks(f(g(h())))`.
func (c *AbortionReasonClient) Use(hooks ...Hook) {
	c.hooks.AbortionReason = append(c.hooks.AbortionReason, hooks...)
}

// Create returns a create builder for AbortionReason.
func (c *AbortionReasonClient) Create() *AbortionReasonCreate {
	mutation := newAbortionReasonMutation(c.config, OpCreate)
	return &AbortionReasonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of AbortionReason entities.
func (c *AbortionReasonClient) CreateBulk(builders ...*AbortionReasonCreate) *AbortionReasonCreateBulk {
	return &AbortionReasonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbortionReason.
func (c *AbortionReasonClient) Update() *AbortionReasonUpdate {
	mutation := newAbortionReasonMutation(c.config, OpUpdate)
	return &AbortionReasonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbortionReasonClient) UpdateOne(ar *AbortionReason) *AbortionReasonUpdateOne {
	mutation := newAbortionReasonMutation(c.config, OpUpdateOne, withAbortionReason(ar))
	return &AbortionReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbortionReasonClient) UpdateOneID(id int64) *AbortionReasonUpdateOne {
	mutation := newAbortionReasonMutation(c.config, OpUpdateOne, withAbortionReasonID(id))
	return &AbortionReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbortionReason.
func (c *AbortionReasonClient) Delete() *AbortionReasonDelete {
	mutation := newAbortionReasonMutation(c.config, OpDelete)
	return &AbortionReasonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AbortionReasonClient) DeleteOne(ar *AbortionReason) *AbortionReasonDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AbortionReasonClient) DeleteOneID(id int64) *AbortionReasonDeleteOne {
	builder := c.Delete().Where(abortionreason.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbortionReasonDeleteOne{builder}
}

// Query returns a query builder for AbortionReason.
func (c *AbortionReasonClient) Query() *AbortionReasonQuery {
	return &AbortionReasonQuery{config: c.config}
}

// Get returns a AbortionReason entity by its id.
func (c *AbortionReasonClient) Get(ctx context.Context, id int64) (*AbortionReason, error) {
	return c.Query().Where(abortionreason.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbortionReasonClient) GetX(ctx context.Context, id int64) *AbortionReason {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AbortionReasonClient) Hooks() []Hook {
	return c.hooks.AbortionReason
}

// AbortionTypeClient is a client for the AbortionType schema.
type AbortionTypeClient struct {
	config
}

// NewAbortionTypeClient returns a client for the AbortionType from the given config.
func NewAbortionTypeClient(c config) *AbortionTypeClient {
	return &AbortionTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abortiontype.Hooks(f(g(h())))`.
func (c *AbortionTypeClient) Use(hooks ...Hook) {
	c.hooks.AbortionType = append(c.hooks.AbortionType, hooks...)
}

// Create returns a create builder for AbortionType.
func (c *AbortionTypeClient) Create() *AbortionTypeCreate {
	mutation := newAbortionTypeMutation(c.config, OpCreate)
	return &AbortionTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of AbortionType entities.
func (c *AbortionTypeClient) CreateBulk(builders ...*AbortionTypeCreate) *AbortionTypeCreateBulk {
	return &AbortionTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbortionType.
func (c *AbortionTypeClient) Update() *AbortionTypeUpdate {
	mutation := newAbortionTypeMutation(c.config, OpUpdate)
	return &AbortionTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbortionTypeClient) UpdateOne(at *AbortionType) *AbortionTypeUpdateOne {
	mutation := newAbortionTypeMutation(c.config, OpUpdateOne, withAbortionType(at))
	return &AbortionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbortionTypeClient) UpdateOneID(id int64) *AbortionTypeUpdateOne {
	mutation := newAbortionTypeMutation(c.config, OpUpdateOne, withAbortionTypeID(id))
	return &AbortionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbortionType.
func (c *AbortionTypeClient) Delete() *AbortionTypeDelete {
	mutation := newAbortionTypeMutation(c.config, OpDelete)
	return &AbortionTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AbortionTypeClient) DeleteOne(at *AbortionType) *AbortionTypeDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AbortionTypeClient) DeleteOneID(id int64) *AbortionTypeDeleteOne {
	builder := c.Delete().Where(abortiontype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbortionTypeDeleteOne{builder}
}

// Query returns a query builder for AbortionType.
func (c *AbortionTypeClient) Query() *AbortionTypeQuery {
	return &AbortionTypeQuery{config: c.config}
}

// Get returns a AbortionType entity by its id.
func (c *AbortionTypeClient) Get(ctx context.Context, id int64) (*AbortionType, error) {
	return c.Query().Where(abortiontype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbortionTypeClient) GetX(ctx context.Context, id int64) *AbortionType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AbortionTypeClient) Hooks() []Hook {
	return c.hooks.AbortionType
}

// BirthSurroundingClient is a client for the BirthSurrounding schema.
type BirthSurroundingClient struct {
	config
}

// NewBirthSurroundingClient returns a client for the BirthSurrounding from the given config.
func NewBirthSurroundingClient(c config) *BirthSurroundingClient {
	return &BirthSurroundingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `birthsurrounding.Hooks(f(g(h())))`.
func (c *BirthSurroundingClient) Use(hooks ...Hook) {
	c.hooks.BirthSurrounding = append(c.hooks.BirthSurrounding, hooks...)
}

// Create returns a create builder for BirthSurrounding.
func (c *BirthSurroundingClient) Create() *BirthSurroundingCreate {
	mutation := newBirthSurroundingMutation(c.config, OpCreate)
	return &BirthSurroundingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of BirthSurrounding entities.
func (c *BirthSurroundingClient) CreateBulk(builders ...*BirthSurroundingCreate) *BirthSurroundingCreateBulk {
	return &BirthSurroundingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BirthSurrounding.
func (c *BirthSurroundingClient) Update() *BirthSurroundingUpdate {
	mutation := newBirthSurroundingMutation(c.config, OpUpdate)
	return &BirthSurroundingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BirthSurroundingClient) UpdateOne(bs *BirthSurrounding) *BirthSurroundingUpdateOne {
	mutation := newBirthSurroundingMutation(c.config, OpUpdateOne, withBirthSurrounding(bs))
	return &BirthSurroundingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BirthSurroundingClient) UpdateOneID(id int64) *BirthSurroundingUpdateOne {
	mutation := newBirthSurroundingMutation(c.config, OpUpdateOne, withBirthSurroundingID(id))
	return &BirthSurroundingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BirthSurrounding.
func (c *BirthSurroundingClient) Delete() *BirthSurroundingDelete {
	mutation := newBirthSurroundingMutation(c.config, OpDelete)
	return &BirthSurroundingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BirthSurroundingClient) DeleteOne(bs *BirthSurrounding) *BirthSurroundingDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BirthSurroundingClient) DeleteOneID(id int64) *BirthSurroundingDeleteOne {
	builder := c.Delete().Where(birthsurrounding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BirthSurroundingDeleteOne{builder}
}

// Query returns a query builder for BirthSurrounding.
func (c *BirthSurroundingClient) Query() *BirthSurroundingQuery {
	return &BirthSurroundingQuery{config: c.config}
}

// Get returns a BirthSurrounding entity by its id.
func (c *BirthSurroundingClient) Get(ctx context.Context, id int64) (*BirthSurrounding, error) {
	return c.Query().Where(birthsurrounding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BirthSurroundingClient) GetX(ctx context.Context, id int64) *BirthSurrounding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BirthSurroundingClient) Hooks() []Hook {
	return c.hooks.BirthSurrounding
}

// BreathRateClient is a client for the BreathRate schema.
type BreathRateClient struct {
	config
}

// NewBreathRateClient returns a client for the BreathRate from the given config.
func NewBreathRateClient(c config) *BreathRateClient {
	return &BreathRateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `breathrate.Hooks(f(g(h())))`.
func (c *BreathRateClient) Use(hooks ...Hook) {
	c.hooks.BreathRate = append(c.hooks.BreathRate, hooks...)
}

// Create returns a create builder for BreathRate.
func (c *BreathRateClient) Create() *BreathRateCreate {
	mutation := newBreathRateMutation(c.config, OpCreate)
	return &BreathRateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of BreathRate entities.
func (c *BreathRateClient) CreateBulk(builders ...*BreathRateCreate) *BreathRateCreateBulk {
	return &BreathRateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BreathRate.
func (c *BreathRateClient) Update() *BreathRateUpdate {
	mutation := newBreathRateMutation(c.config, OpUpdate)
	return &BreathRateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BreathRateClient) UpdateOne(br *BreathRate) *BreathRateUpdateOne {
	mutation := newBreathRateMutation(c.config, OpUpdateOne, withBreathRate(br))
	return &BreathRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BreathRateClient) UpdateOneID(id int64) *BreathRateUpdateOne {
	mutation := newBreathRateMutation(c.config, OpUpdateOne, withBreathRateID(id))
	return &BreathRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BreathRate.
func (c *BreathRateClient) Delete() *BreathRateDelete {
	mutation := newBreathRateMutation(c.config, OpDelete)
	return &BreathRateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BreathRateClient) DeleteOne(br *BreathRate) *BreathRateDeleteOne {
	return c.DeleteOneID(br.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BreathRateClient) DeleteOneID(id int64) *BreathRateDeleteOne {
	builder := c.Delete().Where(breathrate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BreathRateDeleteOne{builder}
}

// Query returns a query builder for BreathRate.
func (c *BreathRateClient) Query() *BreathRateQuery {
	return &BreathRateQuery{config: c.config}
}

// Get returns a BreathRate entity by its id.
func (c *BreathRateClient) Get(ctx context.Context, id int64) (*BreathRate, error) {
	return c.Query().Where(breathrate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BreathRateClient) GetX(ctx context.Context, id int64) *BreathRate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BreathRateClient) Hooks() []Hook {
	return c.hooks.BreathRate
}

// BreedingClient is a client for the Breeding schema.
type BreedingClient struct {
	config
}

// NewBreedingClient returns a client for the Breeding from the given config.
func NewBreedingClient(c config) *BreedingClient {
	return &BreedingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `breeding.Hooks(f(g(h())))`.
func (c *BreedingClient) Use(hooks ...Hook) {
	c.hooks.Breeding = append(c.hooks.Breeding, hooks...)
}

// Create returns a create builder for Breeding.
func (c *BreedingClient) Create() *BreedingCreate {
	mutation := newBreedingMutation(c.config, OpCreate)
	return &BreedingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Breeding entities.
func (c *BreedingClient) CreateBulk(builders ...*BreedingCreate) *BreedingCreateBulk {
	return &BreedingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Breeding.
func (c *BreedingClient) Update() *BreedingUpdate {
	mutation := newBreedingMutation(c.config, OpUpdate)
	return &BreedingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BreedingClient) UpdateOne(b *Breeding) *BreedingUpdateOne {
	mutation := newBreedingMutation(c.config, OpUpdateOne, withBreeding(b))
	return &BreedingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BreedingClient) UpdateOneID(id int64) *BreedingUpdateOne {
	mutation := newBreedingMutation(c.config, OpUpdateOne, withBreedingID(id))
	return &BreedingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Breeding.
func (c *BreedingClient) Delete() *BreedingDelete {
	mutation := newBreedingMutation(c.config, OpDelete)
	return &BreedingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BreedingClient) DeleteOne(b *Breeding) *BreedingDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BreedingClient) DeleteOneID(id int64) *BreedingDeleteOne {
	builder := c.Delete().Where(breeding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BreedingDeleteOne{builder}
}

// Query returns a query builder for Breeding.
func (c *BreedingClient) Query() *BreedingQuery {
	return &BreedingQuery{config: c.config}
}

// Get returns a Breeding entity by its id.
func (c *BreedingClient) Get(ctx context.Context, id int64) (*Breeding, error) {
	return c.Query().Where(breeding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BreedingClient) GetX(ctx context.Context, id int64) *Breeding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BreedingClient) Hooks() []Hook {
	return c.hooks.Breeding
}

// BreedingTypeClient is a client for the BreedingType schema.
type BreedingTypeClient struct {
	config
}

// NewBreedingTypeClient returns a client for the BreedingType from the given config.
func NewBreedingTypeClient(c config) *BreedingTypeClient {
	return &BreedingTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `breedingtype.Hooks(f(g(h())))`.
func (c *BreedingTypeClient) Use(hooks ...Hook) {
	c.hooks.BreedingType = append(c.hooks.BreedingType, hooks...)
}

// Create returns a create builder for BreedingType.
func (c *BreedingTypeClient) Create() *BreedingTypeCreate {
	mutation := newBreedingTypeMutation(c.config, OpCreate)
	return &BreedingTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of BreedingType entities.
func (c *BreedingTypeClient) CreateBulk(builders ...*BreedingTypeCreate) *BreedingTypeCreateBulk {
	return &BreedingTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BreedingType.
func (c *BreedingTypeClient) Update() *BreedingTypeUpdate {
	mutation := newBreedingTypeMutation(c.config, OpUpdate)
	return &BreedingTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BreedingTypeClient) UpdateOne(bt *BreedingType) *BreedingTypeUpdateOne {
	mutation := newBreedingTypeMutation(c.config, OpUpdateOne, withBreedingType(bt))
	return &BreedingTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BreedingTypeClient) UpdateOneID(id int64) *BreedingTypeUpdateOne {
	mutation := newBreedingTypeMutation(c.config, OpUpdateOne, withBreedingTypeID(id))
	return &BreedingTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BreedingType.
func (c *BreedingTypeClient) Delete() *BreedingTypeDelete {
	mutation := newBreedingTypeMutation(c.config, OpDelete)
	return &BreedingTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BreedingTypeClient) DeleteOne(bt *BreedingType) *BreedingTypeDeleteOne {
	return c.DeleteOneID(bt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BreedingTypeClient) DeleteOneID(id int64) *BreedingTypeDeleteOne {
	builder := c.Delete().Where(breedingtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BreedingTypeDeleteOne{builder}
}

// Query returns a query builder for BreedingType.
func (c *BreedingTypeClient) Query() *BreedingTypeQuery {
	return &BreedingTypeQuery{config: c.config}
}

// Get returns a BreedingType entity by its id.
func (c *BreedingTypeClient) Get(ctx context.Context, id int64) (*BreedingType, error) {
	return c.Query().Where(breedingtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BreedingTypeClient) GetX(ctx context.Context, id int64) *BreedingType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BreedingTypeClient) Hooks() []Hook {
	return c.hooks.BreedingType
}

// CalveClient is a client for the Calve schema.
type CalveClient struct {
	config
}

// NewCalveClient returns a client for the Calve from the given config.
func NewCalveClient(c config) *CalveClient {
	return &CalveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `calve.Hooks(f(g(h())))`.
func (c *CalveClient) Use(hooks ...Hook) {
	c.hooks.Calve = append(c.hooks.Calve, hooks...)
}

// Create returns a create builder for Calve.
func (c *CalveClient) Create() *CalveCreate {
	mutation := newCalveMutation(c.config, OpCreate)
	return &CalveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Calve entities.
func (c *CalveClient) CreateBulk(builders ...*CalveCreate) *CalveCreateBulk {
	return &CalveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Calve.
func (c *CalveClient) Update() *CalveUpdate {
	mutation := newCalveMutation(c.config, OpUpdate)
	return &CalveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CalveClient) UpdateOne(ca *Calve) *CalveUpdateOne {
	mutation := newCalveMutation(c.config, OpUpdateOne, withCalve(ca))
	return &CalveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CalveClient) UpdateOneID(id int64) *CalveUpdateOne {
	mutation := newCalveMutation(c.config, OpUpdateOne, withCalveID(id))
	return &CalveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Calve.
func (c *CalveClient) Delete() *CalveDelete {
	mutation := newCalveMutation(c.config, OpDelete)
	return &CalveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CalveClient) DeleteOne(ca *Calve) *CalveDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CalveClient) DeleteOneID(id int64) *CalveDeleteOne {
	builder := c.Delete().Where(calve.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CalveDeleteOne{builder}
}

// Query returns a query builder for Calve.
func (c *CalveClient) Query() *CalveQuery {
	return &CalveQuery{config: c.config}
}

// Get returns a Calve entity by its id.
func (c *CalveClient) Get(ctx context.Context, id int64) (*Calve, error) {
	return c.Query().Where(calve.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CalveClient) GetX(ctx context.Context, id int64) *Calve {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CalveClient) Hooks() []Hook {
	return c.hooks.Calve
}

// CalveCountClient is a client for the CalveCount schema.
type CalveCountClient struct {
	config
}

// NewCalveCountClient returns a client for the CalveCount from the given config.
func NewCalveCountClient(c config) *CalveCountClient {
	return &CalveCountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `calvecount.Hooks(f(g(h())))`.
func (c *CalveCountClient) Use(hooks ...Hook) {
	c.hooks.CalveCount = append(c.hooks.CalveCount, hooks...)
}

// Create returns a create builder for CalveCount.
func (c *CalveCountClient) Create() *CalveCountCreate {
	mutation := newCalveCountMutation(c.config, OpCreate)
	return &CalveCountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CalveCount entities.
func (c *CalveCountClient) CreateBulk(builders ...*CalveCountCreate) *CalveCountCreateBulk {
	return &CalveCountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CalveCount.
func (c *CalveCountClient) Update() *CalveCountUpdate {
	mutation := newCalveCountMutation(c.config, OpUpdate)
	return &CalveCountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CalveCountClient) UpdateOne(cc *CalveCount) *CalveCountUpdateOne {
	mutation := newCalveCountMutation(c.config, OpUpdateOne, withCalveCount(cc))
	return &CalveCountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CalveCountClient) UpdateOneID(id int64) *CalveCountUpdateOne {
	mutation := newCalveCountMutation(c.config, OpUpdateOne, withCalveCountID(id))
	return &CalveCountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CalveCount.
func (c *CalveCountClient) Delete() *CalveCountDelete {
	mutation := newCalveCountMutation(c.config, OpDelete)
	return &CalveCountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CalveCountClient) DeleteOne(cc *CalveCount) *CalveCountDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CalveCountClient) DeleteOneID(id int64) *CalveCountDeleteOne {
	builder := c.Delete().Where(calvecount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CalveCountDeleteOne{builder}
}

// Query returns a query builder for CalveCount.
func (c *CalveCountClient) Query() *CalveCountQuery {
	return &CalveCountQuery{config: c.config}
}

// Get returns a CalveCount entity by its id.
func (c *CalveCountClient) Get(ctx context.Context, id int64) (*CalveCount, error) {
	return c.Query().Where(calvecount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CalveCountClient) GetX(ctx context.Context, id int64) *CalveCount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CalveCountClient) Hooks() []Hook {
	return c.hooks.CalveCount
}

// CalveTypeClient is a client for the CalveType schema.
type CalveTypeClient struct {
	config
}

// NewCalveTypeClient returns a client for the CalveType from the given config.
func NewCalveTypeClient(c config) *CalveTypeClient {
	return &CalveTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `calvetype.Hooks(f(g(h())))`.
func (c *CalveTypeClient) Use(hooks ...Hook) {
	c.hooks.CalveType = append(c.hooks.CalveType, hooks...)
}

// Create returns a create builder for CalveType.
func (c *CalveTypeClient) Create() *CalveTypeCreate {
	mutation := newCalveTypeMutation(c.config, OpCreate)
	return &CalveTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CalveType entities.
func (c *CalveTypeClient) CreateBulk(builders ...*CalveTypeCreate) *CalveTypeCreateBulk {
	return &CalveTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CalveType.
func (c *CalveTypeClient) Update() *CalveTypeUpdate {
	mutation := newCalveTypeMutation(c.config, OpUpdate)
	return &CalveTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CalveTypeClient) UpdateOne(ct *CalveType) *CalveTypeUpdateOne {
	mutation := newCalveTypeMutation(c.config, OpUpdateOne, withCalveType(ct))
	return &CalveTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CalveTypeClient) UpdateOneID(id int64) *CalveTypeUpdateOne {
	mutation := newCalveTypeMutation(c.config, OpUpdateOne, withCalveTypeID(id))
	return &CalveTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CalveType.
func (c *CalveTypeClient) Delete() *CalveTypeDelete {
	mutation := newCalveTypeMutation(c.config, OpDelete)
	return &CalveTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CalveTypeClient) DeleteOne(ct *CalveType) *CalveTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CalveTypeClient) DeleteOneID(id int64) *CalveTypeDeleteOne {
	builder := c.Delete().Where(calvetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CalveTypeDeleteOne{builder}
}

// Query returns a query builder for CalveType.
func (c *CalveTypeClient) Query() *CalveTypeQuery {
	return &CalveTypeQuery{config: c.config}
}

// Get returns a CalveType entity by its id.
func (c *CalveTypeClient) Get(ctx context.Context, id int64) (*CalveType, error) {
	return c.Query().Where(calvetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CalveTypeClient) GetX(ctx context.Context, id int64) *CalveType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CalveTypeClient) Hooks() []Hook {
	return c.hooks.CalveType
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int64) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int64) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{config: c.config}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int64) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int64) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// CattleClient is a client for the Cattle schema.
type CattleClient struct {
	config
}

// NewCattleClient returns a client for the Cattle from the given config.
func NewCattleClient(c config) *CattleClient {
	return &CattleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattle.Hooks(f(g(h())))`.
func (c *CattleClient) Use(hooks ...Hook) {
	c.hooks.Cattle = append(c.hooks.Cattle, hooks...)
}

// Create returns a create builder for Cattle.
func (c *CattleClient) Create() *CattleCreate {
	mutation := newCattleMutation(c.config, OpCreate)
	return &CattleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Cattle entities.
func (c *CattleClient) CreateBulk(builders ...*CattleCreate) *CattleCreateBulk {
	return &CattleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cattle.
func (c *CattleClient) Update() *CattleUpdate {
	mutation := newCattleMutation(c.config, OpUpdate)
	return &CattleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleClient) UpdateOne(ca *Cattle) *CattleUpdateOne {
	mutation := newCattleMutation(c.config, OpUpdateOne, withCattle(ca))
	return &CattleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleClient) UpdateOneID(id int64) *CattleUpdateOne {
	mutation := newCattleMutation(c.config, OpUpdateOne, withCattleID(id))
	return &CattleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cattle.
func (c *CattleClient) Delete() *CattleDelete {
	mutation := newCattleMutation(c.config, OpDelete)
	return &CattleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleClient) DeleteOne(ca *Cattle) *CattleDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleClient) DeleteOneID(id int64) *CattleDeleteOne {
	builder := c.Delete().Where(cattle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleDeleteOne{builder}
}

// Query returns a query builder for Cattle.
func (c *CattleClient) Query() *CattleQuery {
	return &CattleQuery{config: c.config}
}

// Get returns a Cattle entity by its id.
func (c *CattleClient) Get(ctx context.Context, id int64) (*Cattle, error) {
	return c.Query().Where(cattle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleClient) GetX(ctx context.Context, id int64) *Cattle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleClient) Hooks() []Hook {
	return c.hooks.Cattle
}

// CattleBreedClient is a client for the CattleBreed schema.
type CattleBreedClient struct {
	config
}

// NewCattleBreedClient returns a client for the CattleBreed from the given config.
func NewCattleBreedClient(c config) *CattleBreedClient {
	return &CattleBreedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlebreed.Hooks(f(g(h())))`.
func (c *CattleBreedClient) Use(hooks ...Hook) {
	c.hooks.CattleBreed = append(c.hooks.CattleBreed, hooks...)
}

// Create returns a create builder for CattleBreed.
func (c *CattleBreedClient) Create() *CattleBreedCreate {
	mutation := newCattleBreedMutation(c.config, OpCreate)
	return &CattleBreedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleBreed entities.
func (c *CattleBreedClient) CreateBulk(builders ...*CattleBreedCreate) *CattleBreedCreateBulk {
	return &CattleBreedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleBreed.
func (c *CattleBreedClient) Update() *CattleBreedUpdate {
	mutation := newCattleBreedMutation(c.config, OpUpdate)
	return &CattleBreedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleBreedClient) UpdateOne(cb *CattleBreed) *CattleBreedUpdateOne {
	mutation := newCattleBreedMutation(c.config, OpUpdateOne, withCattleBreed(cb))
	return &CattleBreedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleBreedClient) UpdateOneID(id int64) *CattleBreedUpdateOne {
	mutation := newCattleBreedMutation(c.config, OpUpdateOne, withCattleBreedID(id))
	return &CattleBreedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleBreed.
func (c *CattleBreedClient) Delete() *CattleBreedDelete {
	mutation := newCattleBreedMutation(c.config, OpDelete)
	return &CattleBreedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleBreedClient) DeleteOne(cb *CattleBreed) *CattleBreedDeleteOne {
	return c.DeleteOneID(cb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleBreedClient) DeleteOneID(id int64) *CattleBreedDeleteOne {
	builder := c.Delete().Where(cattlebreed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleBreedDeleteOne{builder}
}

// Query returns a query builder for CattleBreed.
func (c *CattleBreedClient) Query() *CattleBreedQuery {
	return &CattleBreedQuery{config: c.config}
}

// Get returns a CattleBreed entity by its id.
func (c *CattleBreedClient) Get(ctx context.Context, id int64) (*CattleBreed, error) {
	return c.Query().Where(cattlebreed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleBreedClient) GetX(ctx context.Context, id int64) *CattleBreed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleBreedClient) Hooks() []Hook {
	return c.hooks.CattleBreed
}

// CattleCateClient is a client for the CattleCate schema.
type CattleCateClient struct {
	config
}

// NewCattleCateClient returns a client for the CattleCate from the given config.
func NewCattleCateClient(c config) *CattleCateClient {
	return &CattleCateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlecate.Hooks(f(g(h())))`.
func (c *CattleCateClient) Use(hooks ...Hook) {
	c.hooks.CattleCate = append(c.hooks.CattleCate, hooks...)
}

// Create returns a create builder for CattleCate.
func (c *CattleCateClient) Create() *CattleCateCreate {
	mutation := newCattleCateMutation(c.config, OpCreate)
	return &CattleCateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleCate entities.
func (c *CattleCateClient) CreateBulk(builders ...*CattleCateCreate) *CattleCateCreateBulk {
	return &CattleCateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleCate.
func (c *CattleCateClient) Update() *CattleCateUpdate {
	mutation := newCattleCateMutation(c.config, OpUpdate)
	return &CattleCateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleCateClient) UpdateOne(cc *CattleCate) *CattleCateUpdateOne {
	mutation := newCattleCateMutation(c.config, OpUpdateOne, withCattleCate(cc))
	return &CattleCateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleCateClient) UpdateOneID(id int64) *CattleCateUpdateOne {
	mutation := newCattleCateMutation(c.config, OpUpdateOne, withCattleCateID(id))
	return &CattleCateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleCate.
func (c *CattleCateClient) Delete() *CattleCateDelete {
	mutation := newCattleCateMutation(c.config, OpDelete)
	return &CattleCateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleCateClient) DeleteOne(cc *CattleCate) *CattleCateDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleCateClient) DeleteOneID(id int64) *CattleCateDeleteOne {
	builder := c.Delete().Where(cattlecate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleCateDeleteOne{builder}
}

// Query returns a query builder for CattleCate.
func (c *CattleCateClient) Query() *CattleCateQuery {
	return &CattleCateQuery{config: c.config}
}

// Get returns a CattleCate entity by its id.
func (c *CattleCateClient) Get(ctx context.Context, id int64) (*CattleCate, error) {
	return c.Query().Where(cattlecate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleCateClient) GetX(ctx context.Context, id int64) *CattleCate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleCateClient) Hooks() []Hook {
	return c.hooks.CattleCate
}

// CattleDieClient is a client for the CattleDie schema.
type CattleDieClient struct {
	config
}

// NewCattleDieClient returns a client for the CattleDie from the given config.
func NewCattleDieClient(c config) *CattleDieClient {
	return &CattleDieClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattledie.Hooks(f(g(h())))`.
func (c *CattleDieClient) Use(hooks ...Hook) {
	c.hooks.CattleDie = append(c.hooks.CattleDie, hooks...)
}

// Create returns a create builder for CattleDie.
func (c *CattleDieClient) Create() *CattleDieCreate {
	mutation := newCattleDieMutation(c.config, OpCreate)
	return &CattleDieCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleDie entities.
func (c *CattleDieClient) CreateBulk(builders ...*CattleDieCreate) *CattleDieCreateBulk {
	return &CattleDieCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleDie.
func (c *CattleDieClient) Update() *CattleDieUpdate {
	mutation := newCattleDieMutation(c.config, OpUpdate)
	return &CattleDieUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleDieClient) UpdateOne(cd *CattleDie) *CattleDieUpdateOne {
	mutation := newCattleDieMutation(c.config, OpUpdateOne, withCattleDie(cd))
	return &CattleDieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleDieClient) UpdateOneID(id int64) *CattleDieUpdateOne {
	mutation := newCattleDieMutation(c.config, OpUpdateOne, withCattleDieID(id))
	return &CattleDieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleDie.
func (c *CattleDieClient) Delete() *CattleDieDelete {
	mutation := newCattleDieMutation(c.config, OpDelete)
	return &CattleDieDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleDieClient) DeleteOne(cd *CattleDie) *CattleDieDeleteOne {
	return c.DeleteOneID(cd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleDieClient) DeleteOneID(id int64) *CattleDieDeleteOne {
	builder := c.Delete().Where(cattledie.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleDieDeleteOne{builder}
}

// Query returns a query builder for CattleDie.
func (c *CattleDieClient) Query() *CattleDieQuery {
	return &CattleDieQuery{config: c.config}
}

// Get returns a CattleDie entity by its id.
func (c *CattleDieClient) Get(ctx context.Context, id int64) (*CattleDie, error) {
	return c.Query().Where(cattledie.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleDieClient) GetX(ctx context.Context, id int64) *CattleDie {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleDieClient) Hooks() []Hook {
	return c.hooks.CattleDie
}

// CattleGenderClient is a client for the CattleGender schema.
type CattleGenderClient struct {
	config
}

// NewCattleGenderClient returns a client for the CattleGender from the given config.
func NewCattleGenderClient(c config) *CattleGenderClient {
	return &CattleGenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlegender.Hooks(f(g(h())))`.
func (c *CattleGenderClient) Use(hooks ...Hook) {
	c.hooks.CattleGender = append(c.hooks.CattleGender, hooks...)
}

// Create returns a create builder for CattleGender.
func (c *CattleGenderClient) Create() *CattleGenderCreate {
	mutation := newCattleGenderMutation(c.config, OpCreate)
	return &CattleGenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleGender entities.
func (c *CattleGenderClient) CreateBulk(builders ...*CattleGenderCreate) *CattleGenderCreateBulk {
	return &CattleGenderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleGender.
func (c *CattleGenderClient) Update() *CattleGenderUpdate {
	mutation := newCattleGenderMutation(c.config, OpUpdate)
	return &CattleGenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleGenderClient) UpdateOne(cg *CattleGender) *CattleGenderUpdateOne {
	mutation := newCattleGenderMutation(c.config, OpUpdateOne, withCattleGender(cg))
	return &CattleGenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleGenderClient) UpdateOneID(id int64) *CattleGenderUpdateOne {
	mutation := newCattleGenderMutation(c.config, OpUpdateOne, withCattleGenderID(id))
	return &CattleGenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleGender.
func (c *CattleGenderClient) Delete() *CattleGenderDelete {
	mutation := newCattleGenderMutation(c.config, OpDelete)
	return &CattleGenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleGenderClient) DeleteOne(cg *CattleGender) *CattleGenderDeleteOne {
	return c.DeleteOneID(cg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleGenderClient) DeleteOneID(id int64) *CattleGenderDeleteOne {
	builder := c.Delete().Where(cattlegender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleGenderDeleteOne{builder}
}

// Query returns a query builder for CattleGender.
func (c *CattleGenderClient) Query() *CattleGenderQuery {
	return &CattleGenderQuery{config: c.config}
}

// Get returns a CattleGender entity by its id.
func (c *CattleGenderClient) Get(ctx context.Context, id int64) (*CattleGender, error) {
	return c.Query().Where(cattlegender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleGenderClient) GetX(ctx context.Context, id int64) *CattleGender {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleGenderClient) Hooks() []Hook {
	return c.hooks.CattleGender
}

// CattleGroupClient is a client for the CattleGroup schema.
type CattleGroupClient struct {
	config
}

// NewCattleGroupClient returns a client for the CattleGroup from the given config.
func NewCattleGroupClient(c config) *CattleGroupClient {
	return &CattleGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlegroup.Hooks(f(g(h())))`.
func (c *CattleGroupClient) Use(hooks ...Hook) {
	c.hooks.CattleGroup = append(c.hooks.CattleGroup, hooks...)
}

// Create returns a create builder for CattleGroup.
func (c *CattleGroupClient) Create() *CattleGroupCreate {
	mutation := newCattleGroupMutation(c.config, OpCreate)
	return &CattleGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleGroup entities.
func (c *CattleGroupClient) CreateBulk(builders ...*CattleGroupCreate) *CattleGroupCreateBulk {
	return &CattleGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleGroup.
func (c *CattleGroupClient) Update() *CattleGroupUpdate {
	mutation := newCattleGroupMutation(c.config, OpUpdate)
	return &CattleGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleGroupClient) UpdateOne(cg *CattleGroup) *CattleGroupUpdateOne {
	mutation := newCattleGroupMutation(c.config, OpUpdateOne, withCattleGroup(cg))
	return &CattleGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleGroupClient) UpdateOneID(id int64) *CattleGroupUpdateOne {
	mutation := newCattleGroupMutation(c.config, OpUpdateOne, withCattleGroupID(id))
	return &CattleGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleGroup.
func (c *CattleGroupClient) Delete() *CattleGroupDelete {
	mutation := newCattleGroupMutation(c.config, OpDelete)
	return &CattleGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleGroupClient) DeleteOne(cg *CattleGroup) *CattleGroupDeleteOne {
	return c.DeleteOneID(cg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleGroupClient) DeleteOneID(id int64) *CattleGroupDeleteOne {
	builder := c.Delete().Where(cattlegroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleGroupDeleteOne{builder}
}

// Query returns a query builder for CattleGroup.
func (c *CattleGroupClient) Query() *CattleGroupQuery {
	return &CattleGroupQuery{config: c.config}
}

// Get returns a CattleGroup entity by its id.
func (c *CattleGroupClient) Get(ctx context.Context, id int64) (*CattleGroup, error) {
	return c.Query().Where(cattlegroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleGroupClient) GetX(ctx context.Context, id int64) *CattleGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleGroupClient) Hooks() []Hook {
	return c.hooks.CattleGroup
}

// CattleGrowClient is a client for the CattleGrow schema.
type CattleGrowClient struct {
	config
}

// NewCattleGrowClient returns a client for the CattleGrow from the given config.
func NewCattleGrowClient(c config) *CattleGrowClient {
	return &CattleGrowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlegrow.Hooks(f(g(h())))`.
func (c *CattleGrowClient) Use(hooks ...Hook) {
	c.hooks.CattleGrow = append(c.hooks.CattleGrow, hooks...)
}

// Create returns a create builder for CattleGrow.
func (c *CattleGrowClient) Create() *CattleGrowCreate {
	mutation := newCattleGrowMutation(c.config, OpCreate)
	return &CattleGrowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleGrow entities.
func (c *CattleGrowClient) CreateBulk(builders ...*CattleGrowCreate) *CattleGrowCreateBulk {
	return &CattleGrowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleGrow.
func (c *CattleGrowClient) Update() *CattleGrowUpdate {
	mutation := newCattleGrowMutation(c.config, OpUpdate)
	return &CattleGrowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleGrowClient) UpdateOne(cg *CattleGrow) *CattleGrowUpdateOne {
	mutation := newCattleGrowMutation(c.config, OpUpdateOne, withCattleGrow(cg))
	return &CattleGrowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleGrowClient) UpdateOneID(id int64) *CattleGrowUpdateOne {
	mutation := newCattleGrowMutation(c.config, OpUpdateOne, withCattleGrowID(id))
	return &CattleGrowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleGrow.
func (c *CattleGrowClient) Delete() *CattleGrowDelete {
	mutation := newCattleGrowMutation(c.config, OpDelete)
	return &CattleGrowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleGrowClient) DeleteOne(cg *CattleGrow) *CattleGrowDeleteOne {
	return c.DeleteOneID(cg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleGrowClient) DeleteOneID(id int64) *CattleGrowDeleteOne {
	builder := c.Delete().Where(cattlegrow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleGrowDeleteOne{builder}
}

// Query returns a query builder for CattleGrow.
func (c *CattleGrowClient) Query() *CattleGrowQuery {
	return &CattleGrowQuery{config: c.config}
}

// Get returns a CattleGrow entity by its id.
func (c *CattleGrowClient) Get(ctx context.Context, id int64) (*CattleGrow, error) {
	return c.Query().Where(cattlegrow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleGrowClient) GetX(ctx context.Context, id int64) *CattleGrow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleGrowClient) Hooks() []Hook {
	return c.hooks.CattleGrow
}

// CattleGrowsDataClient is a client for the CattleGrowsData schema.
type CattleGrowsDataClient struct {
	config
}

// NewCattleGrowsDataClient returns a client for the CattleGrowsData from the given config.
func NewCattleGrowsDataClient(c config) *CattleGrowsDataClient {
	return &CattleGrowsDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlegrowsdata.Hooks(f(g(h())))`.
func (c *CattleGrowsDataClient) Use(hooks ...Hook) {
	c.hooks.CattleGrowsData = append(c.hooks.CattleGrowsData, hooks...)
}

// Create returns a create builder for CattleGrowsData.
func (c *CattleGrowsDataClient) Create() *CattleGrowsDataCreate {
	mutation := newCattleGrowsDataMutation(c.config, OpCreate)
	return &CattleGrowsDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleGrowsData entities.
func (c *CattleGrowsDataClient) CreateBulk(builders ...*CattleGrowsDataCreate) *CattleGrowsDataCreateBulk {
	return &CattleGrowsDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleGrowsData.
func (c *CattleGrowsDataClient) Update() *CattleGrowsDataUpdate {
	mutation := newCattleGrowsDataMutation(c.config, OpUpdate)
	return &CattleGrowsDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleGrowsDataClient) UpdateOne(cgd *CattleGrowsData) *CattleGrowsDataUpdateOne {
	mutation := newCattleGrowsDataMutation(c.config, OpUpdateOne, withCattleGrowsData(cgd))
	return &CattleGrowsDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleGrowsDataClient) UpdateOneID(id int64) *CattleGrowsDataUpdateOne {
	mutation := newCattleGrowsDataMutation(c.config, OpUpdateOne, withCattleGrowsDataID(id))
	return &CattleGrowsDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleGrowsData.
func (c *CattleGrowsDataClient) Delete() *CattleGrowsDataDelete {
	mutation := newCattleGrowsDataMutation(c.config, OpDelete)
	return &CattleGrowsDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleGrowsDataClient) DeleteOne(cgd *CattleGrowsData) *CattleGrowsDataDeleteOne {
	return c.DeleteOneID(cgd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleGrowsDataClient) DeleteOneID(id int64) *CattleGrowsDataDeleteOne {
	builder := c.Delete().Where(cattlegrowsdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleGrowsDataDeleteOne{builder}
}

// Query returns a query builder for CattleGrowsData.
func (c *CattleGrowsDataClient) Query() *CattleGrowsDataQuery {
	return &CattleGrowsDataQuery{config: c.config}
}

// Get returns a CattleGrowsData entity by its id.
func (c *CattleGrowsDataClient) Get(ctx context.Context, id int64) (*CattleGrowsData, error) {
	return c.Query().Where(cattlegrowsdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleGrowsDataClient) GetX(ctx context.Context, id int64) *CattleGrowsData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleGrowsDataClient) Hooks() []Hook {
	return c.hooks.CattleGrowsData
}

// CattleGrowsRateClient is a client for the CattleGrowsRate schema.
type CattleGrowsRateClient struct {
	config
}

// NewCattleGrowsRateClient returns a client for the CattleGrowsRate from the given config.
func NewCattleGrowsRateClient(c config) *CattleGrowsRateClient {
	return &CattleGrowsRateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlegrowsrate.Hooks(f(g(h())))`.
func (c *CattleGrowsRateClient) Use(hooks ...Hook) {
	c.hooks.CattleGrowsRate = append(c.hooks.CattleGrowsRate, hooks...)
}

// Create returns a create builder for CattleGrowsRate.
func (c *CattleGrowsRateClient) Create() *CattleGrowsRateCreate {
	mutation := newCattleGrowsRateMutation(c.config, OpCreate)
	return &CattleGrowsRateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleGrowsRate entities.
func (c *CattleGrowsRateClient) CreateBulk(builders ...*CattleGrowsRateCreate) *CattleGrowsRateCreateBulk {
	return &CattleGrowsRateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleGrowsRate.
func (c *CattleGrowsRateClient) Update() *CattleGrowsRateUpdate {
	mutation := newCattleGrowsRateMutation(c.config, OpUpdate)
	return &CattleGrowsRateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleGrowsRateClient) UpdateOne(cgr *CattleGrowsRate) *CattleGrowsRateUpdateOne {
	mutation := newCattleGrowsRateMutation(c.config, OpUpdateOne, withCattleGrowsRate(cgr))
	return &CattleGrowsRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleGrowsRateClient) UpdateOneID(id int64) *CattleGrowsRateUpdateOne {
	mutation := newCattleGrowsRateMutation(c.config, OpUpdateOne, withCattleGrowsRateID(id))
	return &CattleGrowsRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleGrowsRate.
func (c *CattleGrowsRateClient) Delete() *CattleGrowsRateDelete {
	mutation := newCattleGrowsRateMutation(c.config, OpDelete)
	return &CattleGrowsRateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleGrowsRateClient) DeleteOne(cgr *CattleGrowsRate) *CattleGrowsRateDeleteOne {
	return c.DeleteOneID(cgr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleGrowsRateClient) DeleteOneID(id int64) *CattleGrowsRateDeleteOne {
	builder := c.Delete().Where(cattlegrowsrate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleGrowsRateDeleteOne{builder}
}

// Query returns a query builder for CattleGrowsRate.
func (c *CattleGrowsRateClient) Query() *CattleGrowsRateQuery {
	return &CattleGrowsRateQuery{config: c.config}
}

// Get returns a CattleGrowsRate entity by its id.
func (c *CattleGrowsRateClient) Get(ctx context.Context, id int64) (*CattleGrowsRate, error) {
	return c.Query().Where(cattlegrowsrate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleGrowsRateClient) GetX(ctx context.Context, id int64) *CattleGrowsRate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleGrowsRateClient) Hooks() []Hook {
	return c.hooks.CattleGrowsRate
}

// CattleHairColorClient is a client for the CattleHairColor schema.
type CattleHairColorClient struct {
	config
}

// NewCattleHairColorClient returns a client for the CattleHairColor from the given config.
func NewCattleHairColorClient(c config) *CattleHairColorClient {
	return &CattleHairColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlehaircolor.Hooks(f(g(h())))`.
func (c *CattleHairColorClient) Use(hooks ...Hook) {
	c.hooks.CattleHairColor = append(c.hooks.CattleHairColor, hooks...)
}

// Create returns a create builder for CattleHairColor.
func (c *CattleHairColorClient) Create() *CattleHairColorCreate {
	mutation := newCattleHairColorMutation(c.config, OpCreate)
	return &CattleHairColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleHairColor entities.
func (c *CattleHairColorClient) CreateBulk(builders ...*CattleHairColorCreate) *CattleHairColorCreateBulk {
	return &CattleHairColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleHairColor.
func (c *CattleHairColorClient) Update() *CattleHairColorUpdate {
	mutation := newCattleHairColorMutation(c.config, OpUpdate)
	return &CattleHairColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleHairColorClient) UpdateOne(chc *CattleHairColor) *CattleHairColorUpdateOne {
	mutation := newCattleHairColorMutation(c.config, OpUpdateOne, withCattleHairColor(chc))
	return &CattleHairColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleHairColorClient) UpdateOneID(id int64) *CattleHairColorUpdateOne {
	mutation := newCattleHairColorMutation(c.config, OpUpdateOne, withCattleHairColorID(id))
	return &CattleHairColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleHairColor.
func (c *CattleHairColorClient) Delete() *CattleHairColorDelete {
	mutation := newCattleHairColorMutation(c.config, OpDelete)
	return &CattleHairColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleHairColorClient) DeleteOne(chc *CattleHairColor) *CattleHairColorDeleteOne {
	return c.DeleteOneID(chc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleHairColorClient) DeleteOneID(id int64) *CattleHairColorDeleteOne {
	builder := c.Delete().Where(cattlehaircolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleHairColorDeleteOne{builder}
}

// Query returns a query builder for CattleHairColor.
func (c *CattleHairColorClient) Query() *CattleHairColorQuery {
	return &CattleHairColorQuery{config: c.config}
}

// Get returns a CattleHairColor entity by its id.
func (c *CattleHairColorClient) Get(ctx context.Context, id int64) (*CattleHairColor, error) {
	return c.Query().Where(cattlehaircolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleHairColorClient) GetX(ctx context.Context, id int64) *CattleHairColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleHairColorClient) Hooks() []Hook {
	return c.hooks.CattleHairColor
}

// CattleInClient is a client for the CattleIn schema.
type CattleInClient struct {
	config
}

// NewCattleInClient returns a client for the CattleIn from the given config.
func NewCattleInClient(c config) *CattleInClient {
	return &CattleInClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlein.Hooks(f(g(h())))`.
func (c *CattleInClient) Use(hooks ...Hook) {
	c.hooks.CattleIn = append(c.hooks.CattleIn, hooks...)
}

// Create returns a create builder for CattleIn.
func (c *CattleInClient) Create() *CattleInCreate {
	mutation := newCattleInMutation(c.config, OpCreate)
	return &CattleInCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleIn entities.
func (c *CattleInClient) CreateBulk(builders ...*CattleInCreate) *CattleInCreateBulk {
	return &CattleInCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleIn.
func (c *CattleInClient) Update() *CattleInUpdate {
	mutation := newCattleInMutation(c.config, OpUpdate)
	return &CattleInUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleInClient) UpdateOne(ci *CattleIn) *CattleInUpdateOne {
	mutation := newCattleInMutation(c.config, OpUpdateOne, withCattleIn(ci))
	return &CattleInUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleInClient) UpdateOneID(id int64) *CattleInUpdateOne {
	mutation := newCattleInMutation(c.config, OpUpdateOne, withCattleInID(id))
	return &CattleInUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleIn.
func (c *CattleInClient) Delete() *CattleInDelete {
	mutation := newCattleInMutation(c.config, OpDelete)
	return &CattleInDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleInClient) DeleteOne(ci *CattleIn) *CattleInDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleInClient) DeleteOneID(id int64) *CattleInDeleteOne {
	builder := c.Delete().Where(cattlein.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleInDeleteOne{builder}
}

// Query returns a query builder for CattleIn.
func (c *CattleInClient) Query() *CattleInQuery {
	return &CattleInQuery{config: c.config}
}

// Get returns a CattleIn entity by its id.
func (c *CattleInClient) Get(ctx context.Context, id int64) (*CattleIn, error) {
	return c.Query().Where(cattlein.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleInClient) GetX(ctx context.Context, id int64) *CattleIn {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleInClient) Hooks() []Hook {
	return c.hooks.CattleIn
}

// CattleJoinedTypeClient is a client for the CattleJoinedType schema.
type CattleJoinedTypeClient struct {
	config
}

// NewCattleJoinedTypeClient returns a client for the CattleJoinedType from the given config.
func NewCattleJoinedTypeClient(c config) *CattleJoinedTypeClient {
	return &CattleJoinedTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlejoinedtype.Hooks(f(g(h())))`.
func (c *CattleJoinedTypeClient) Use(hooks ...Hook) {
	c.hooks.CattleJoinedType = append(c.hooks.CattleJoinedType, hooks...)
}

// Create returns a create builder for CattleJoinedType.
func (c *CattleJoinedTypeClient) Create() *CattleJoinedTypeCreate {
	mutation := newCattleJoinedTypeMutation(c.config, OpCreate)
	return &CattleJoinedTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleJoinedType entities.
func (c *CattleJoinedTypeClient) CreateBulk(builders ...*CattleJoinedTypeCreate) *CattleJoinedTypeCreateBulk {
	return &CattleJoinedTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleJoinedType.
func (c *CattleJoinedTypeClient) Update() *CattleJoinedTypeUpdate {
	mutation := newCattleJoinedTypeMutation(c.config, OpUpdate)
	return &CattleJoinedTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleJoinedTypeClient) UpdateOne(cjt *CattleJoinedType) *CattleJoinedTypeUpdateOne {
	mutation := newCattleJoinedTypeMutation(c.config, OpUpdateOne, withCattleJoinedType(cjt))
	return &CattleJoinedTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleJoinedTypeClient) UpdateOneID(id int64) *CattleJoinedTypeUpdateOne {
	mutation := newCattleJoinedTypeMutation(c.config, OpUpdateOne, withCattleJoinedTypeID(id))
	return &CattleJoinedTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleJoinedType.
func (c *CattleJoinedTypeClient) Delete() *CattleJoinedTypeDelete {
	mutation := newCattleJoinedTypeMutation(c.config, OpDelete)
	return &CattleJoinedTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleJoinedTypeClient) DeleteOne(cjt *CattleJoinedType) *CattleJoinedTypeDeleteOne {
	return c.DeleteOneID(cjt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleJoinedTypeClient) DeleteOneID(id int64) *CattleJoinedTypeDeleteOne {
	builder := c.Delete().Where(cattlejoinedtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleJoinedTypeDeleteOne{builder}
}

// Query returns a query builder for CattleJoinedType.
func (c *CattleJoinedTypeClient) Query() *CattleJoinedTypeQuery {
	return &CattleJoinedTypeQuery{config: c.config}
}

// Get returns a CattleJoinedType entity by its id.
func (c *CattleJoinedTypeClient) Get(ctx context.Context, id int64) (*CattleJoinedType, error) {
	return c.Query().Where(cattlejoinedtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleJoinedTypeClient) GetX(ctx context.Context, id int64) *CattleJoinedType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleJoinedTypeClient) Hooks() []Hook {
	return c.hooks.CattleJoinedType
}

// CattleMoveClient is a client for the CattleMove schema.
type CattleMoveClient struct {
	config
}

// NewCattleMoveClient returns a client for the CattleMove from the given config.
func NewCattleMoveClient(c config) *CattleMoveClient {
	return &CattleMoveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlemove.Hooks(f(g(h())))`.
func (c *CattleMoveClient) Use(hooks ...Hook) {
	c.hooks.CattleMove = append(c.hooks.CattleMove, hooks...)
}

// Create returns a create builder for CattleMove.
func (c *CattleMoveClient) Create() *CattleMoveCreate {
	mutation := newCattleMoveMutation(c.config, OpCreate)
	return &CattleMoveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleMove entities.
func (c *CattleMoveClient) CreateBulk(builders ...*CattleMoveCreate) *CattleMoveCreateBulk {
	return &CattleMoveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleMove.
func (c *CattleMoveClient) Update() *CattleMoveUpdate {
	mutation := newCattleMoveMutation(c.config, OpUpdate)
	return &CattleMoveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleMoveClient) UpdateOne(cm *CattleMove) *CattleMoveUpdateOne {
	mutation := newCattleMoveMutation(c.config, OpUpdateOne, withCattleMove(cm))
	return &CattleMoveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleMoveClient) UpdateOneID(id int64) *CattleMoveUpdateOne {
	mutation := newCattleMoveMutation(c.config, OpUpdateOne, withCattleMoveID(id))
	return &CattleMoveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleMove.
func (c *CattleMoveClient) Delete() *CattleMoveDelete {
	mutation := newCattleMoveMutation(c.config, OpDelete)
	return &CattleMoveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleMoveClient) DeleteOne(cm *CattleMove) *CattleMoveDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleMoveClient) DeleteOneID(id int64) *CattleMoveDeleteOne {
	builder := c.Delete().Where(cattlemove.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleMoveDeleteOne{builder}
}

// Query returns a query builder for CattleMove.
func (c *CattleMoveClient) Query() *CattleMoveQuery {
	return &CattleMoveQuery{config: c.config}
}

// Get returns a CattleMove entity by its id.
func (c *CattleMoveClient) Get(ctx context.Context, id int64) (*CattleMove, error) {
	return c.Query().Where(cattlemove.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleMoveClient) GetX(ctx context.Context, id int64) *CattleMove {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleMoveClient) Hooks() []Hook {
	return c.hooks.CattleMove
}

// CattleMoveReasonClient is a client for the CattleMoveReason schema.
type CattleMoveReasonClient struct {
	config
}

// NewCattleMoveReasonClient returns a client for the CattleMoveReason from the given config.
func NewCattleMoveReasonClient(c config) *CattleMoveReasonClient {
	return &CattleMoveReasonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlemovereason.Hooks(f(g(h())))`.
func (c *CattleMoveReasonClient) Use(hooks ...Hook) {
	c.hooks.CattleMoveReason = append(c.hooks.CattleMoveReason, hooks...)
}

// Create returns a create builder for CattleMoveReason.
func (c *CattleMoveReasonClient) Create() *CattleMoveReasonCreate {
	mutation := newCattleMoveReasonMutation(c.config, OpCreate)
	return &CattleMoveReasonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleMoveReason entities.
func (c *CattleMoveReasonClient) CreateBulk(builders ...*CattleMoveReasonCreate) *CattleMoveReasonCreateBulk {
	return &CattleMoveReasonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleMoveReason.
func (c *CattleMoveReasonClient) Update() *CattleMoveReasonUpdate {
	mutation := newCattleMoveReasonMutation(c.config, OpUpdate)
	return &CattleMoveReasonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleMoveReasonClient) UpdateOne(cmr *CattleMoveReason) *CattleMoveReasonUpdateOne {
	mutation := newCattleMoveReasonMutation(c.config, OpUpdateOne, withCattleMoveReason(cmr))
	return &CattleMoveReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleMoveReasonClient) UpdateOneID(id int64) *CattleMoveReasonUpdateOne {
	mutation := newCattleMoveReasonMutation(c.config, OpUpdateOne, withCattleMoveReasonID(id))
	return &CattleMoveReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleMoveReason.
func (c *CattleMoveReasonClient) Delete() *CattleMoveReasonDelete {
	mutation := newCattleMoveReasonMutation(c.config, OpDelete)
	return &CattleMoveReasonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleMoveReasonClient) DeleteOne(cmr *CattleMoveReason) *CattleMoveReasonDeleteOne {
	return c.DeleteOneID(cmr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleMoveReasonClient) DeleteOneID(id int64) *CattleMoveReasonDeleteOne {
	builder := c.Delete().Where(cattlemovereason.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleMoveReasonDeleteOne{builder}
}

// Query returns a query builder for CattleMoveReason.
func (c *CattleMoveReasonClient) Query() *CattleMoveReasonQuery {
	return &CattleMoveReasonQuery{config: c.config}
}

// Get returns a CattleMoveReason entity by its id.
func (c *CattleMoveReasonClient) Get(ctx context.Context, id int64) (*CattleMoveReason, error) {
	return c.Query().Where(cattlemovereason.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleMoveReasonClient) GetX(ctx context.Context, id int64) *CattleMoveReason {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleMoveReasonClient) Hooks() []Hook {
	return c.hooks.CattleMoveReason
}

// CattleOutClient is a client for the CattleOut schema.
type CattleOutClient struct {
	config
}

// NewCattleOutClient returns a client for the CattleOut from the given config.
func NewCattleOutClient(c config) *CattleOutClient {
	return &CattleOutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattleout.Hooks(f(g(h())))`.
func (c *CattleOutClient) Use(hooks ...Hook) {
	c.hooks.CattleOut = append(c.hooks.CattleOut, hooks...)
}

// Create returns a create builder for CattleOut.
func (c *CattleOutClient) Create() *CattleOutCreate {
	mutation := newCattleOutMutation(c.config, OpCreate)
	return &CattleOutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleOut entities.
func (c *CattleOutClient) CreateBulk(builders ...*CattleOutCreate) *CattleOutCreateBulk {
	return &CattleOutCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleOut.
func (c *CattleOutClient) Update() *CattleOutUpdate {
	mutation := newCattleOutMutation(c.config, OpUpdate)
	return &CattleOutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleOutClient) UpdateOne(co *CattleOut) *CattleOutUpdateOne {
	mutation := newCattleOutMutation(c.config, OpUpdateOne, withCattleOut(co))
	return &CattleOutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleOutClient) UpdateOneID(id int64) *CattleOutUpdateOne {
	mutation := newCattleOutMutation(c.config, OpUpdateOne, withCattleOutID(id))
	return &CattleOutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleOut.
func (c *CattleOutClient) Delete() *CattleOutDelete {
	mutation := newCattleOutMutation(c.config, OpDelete)
	return &CattleOutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleOutClient) DeleteOne(co *CattleOut) *CattleOutDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleOutClient) DeleteOneID(id int64) *CattleOutDeleteOne {
	builder := c.Delete().Where(cattleout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleOutDeleteOne{builder}
}

// Query returns a query builder for CattleOut.
func (c *CattleOutClient) Query() *CattleOutQuery {
	return &CattleOutQuery{config: c.config}
}

// Get returns a CattleOut entity by its id.
func (c *CattleOutClient) Get(ctx context.Context, id int64) (*CattleOut, error) {
	return c.Query().Where(cattleout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleOutClient) GetX(ctx context.Context, id int64) *CattleOut {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleOutClient) Hooks() []Hook {
	return c.hooks.CattleOut
}

// CattleOwnerClient is a client for the CattleOwner schema.
type CattleOwnerClient struct {
	config
}

// NewCattleOwnerClient returns a client for the CattleOwner from the given config.
func NewCattleOwnerClient(c config) *CattleOwnerClient {
	return &CattleOwnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattleowner.Hooks(f(g(h())))`.
func (c *CattleOwnerClient) Use(hooks ...Hook) {
	c.hooks.CattleOwner = append(c.hooks.CattleOwner, hooks...)
}

// Create returns a create builder for CattleOwner.
func (c *CattleOwnerClient) Create() *CattleOwnerCreate {
	mutation := newCattleOwnerMutation(c.config, OpCreate)
	return &CattleOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleOwner entities.
func (c *CattleOwnerClient) CreateBulk(builders ...*CattleOwnerCreate) *CattleOwnerCreateBulk {
	return &CattleOwnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleOwner.
func (c *CattleOwnerClient) Update() *CattleOwnerUpdate {
	mutation := newCattleOwnerMutation(c.config, OpUpdate)
	return &CattleOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleOwnerClient) UpdateOne(co *CattleOwner) *CattleOwnerUpdateOne {
	mutation := newCattleOwnerMutation(c.config, OpUpdateOne, withCattleOwner(co))
	return &CattleOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleOwnerClient) UpdateOneID(id int64) *CattleOwnerUpdateOne {
	mutation := newCattleOwnerMutation(c.config, OpUpdateOne, withCattleOwnerID(id))
	return &CattleOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleOwner.
func (c *CattleOwnerClient) Delete() *CattleOwnerDelete {
	mutation := newCattleOwnerMutation(c.config, OpDelete)
	return &CattleOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleOwnerClient) DeleteOne(co *CattleOwner) *CattleOwnerDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleOwnerClient) DeleteOneID(id int64) *CattleOwnerDeleteOne {
	builder := c.Delete().Where(cattleowner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleOwnerDeleteOne{builder}
}

// Query returns a query builder for CattleOwner.
func (c *CattleOwnerClient) Query() *CattleOwnerQuery {
	return &CattleOwnerQuery{config: c.config}
}

// Get returns a CattleOwner entity by its id.
func (c *CattleOwnerClient) Get(ctx context.Context, id int64) (*CattleOwner, error) {
	return c.Query().Where(cattleowner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleOwnerClient) GetX(ctx context.Context, id int64) *CattleOwner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleOwnerClient) Hooks() []Hook {
	return c.hooks.CattleOwner
}

// CattleTypeClient is a client for the CattleType schema.
type CattleTypeClient struct {
	config
}

// NewCattleTypeClient returns a client for the CattleType from the given config.
func NewCattleTypeClient(c config) *CattleTypeClient {
	return &CattleTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattletype.Hooks(f(g(h())))`.
func (c *CattleTypeClient) Use(hooks ...Hook) {
	c.hooks.CattleType = append(c.hooks.CattleType, hooks...)
}

// Create returns a create builder for CattleType.
func (c *CattleTypeClient) Create() *CattleTypeCreate {
	mutation := newCattleTypeMutation(c.config, OpCreate)
	return &CattleTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleType entities.
func (c *CattleTypeClient) CreateBulk(builders ...*CattleTypeCreate) *CattleTypeCreateBulk {
	return &CattleTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleType.
func (c *CattleTypeClient) Update() *CattleTypeUpdate {
	mutation := newCattleTypeMutation(c.config, OpUpdate)
	return &CattleTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleTypeClient) UpdateOne(ct *CattleType) *CattleTypeUpdateOne {
	mutation := newCattleTypeMutation(c.config, OpUpdateOne, withCattleType(ct))
	return &CattleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleTypeClient) UpdateOneID(id int64) *CattleTypeUpdateOne {
	mutation := newCattleTypeMutation(c.config, OpUpdateOne, withCattleTypeID(id))
	return &CattleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleType.
func (c *CattleTypeClient) Delete() *CattleTypeDelete {
	mutation := newCattleTypeMutation(c.config, OpDelete)
	return &CattleTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleTypeClient) DeleteOne(ct *CattleType) *CattleTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleTypeClient) DeleteOneID(id int64) *CattleTypeDeleteOne {
	builder := c.Delete().Where(cattletype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleTypeDeleteOne{builder}
}

// Query returns a query builder for CattleType.
func (c *CattleTypeClient) Query() *CattleTypeQuery {
	return &CattleTypeQuery{config: c.config}
}

// Get returns a CattleType entity by its id.
func (c *CattleTypeClient) Get(ctx context.Context, id int64) (*CattleType, error) {
	return c.Query().Where(cattletype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleTypeClient) GetX(ctx context.Context, id int64) *CattleType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleTypeClient) Hooks() []Hook {
	return c.hooks.CattleType
}

// ChangeClient is a client for the Change schema.
type ChangeClient struct {
	config
}

// NewChangeClient returns a client for the Change from the given config.
func NewChangeClient(c config) *ChangeClient {
	return &ChangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `change.Hooks(f(g(h())))`.
func (c *ChangeClient) Use(hooks ...Hook) {
	c.hooks.Change = append(c.hooks.Change, hooks...)
}

// Create returns a create builder for Change.
func (c *ChangeClient) Create() *ChangeCreate {
	mutation := newChangeMutation(c.config, OpCreate)
	return &ChangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Change entities.
func (c *ChangeClient) CreateBulk(builders ...*ChangeCreate) *ChangeCreateBulk {
	return &ChangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Change.
func (c *ChangeClient) Update() *ChangeUpdate {
	mutation := newChangeMutation(c.config, OpUpdate)
	return &ChangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChangeClient) UpdateOne(ch *Change) *ChangeUpdateOne {
	mutation := newChangeMutation(c.config, OpUpdateOne, withChange(ch))
	return &ChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChangeClient) UpdateOneID(id int64) *ChangeUpdateOne {
	mutation := newChangeMutation(c.config, OpUpdateOne, withChangeID(id))
	return &ChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Change.
func (c *ChangeClient) Delete() *ChangeDelete {
	mutation := newChangeMutation(c.config, OpDelete)
	return &ChangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChangeClient) DeleteOne(ch *Change) *ChangeDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChangeClient) DeleteOneID(id int64) *ChangeDeleteOne {
	builder := c.Delete().Where(change.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChangeDeleteOne{builder}
}

// Query returns a query builder for Change.
func (c *ChangeClient) Query() *ChangeQuery {
	return &ChangeQuery{config: c.config}
}

// Get returns a Change entity by its id.
func (c *ChangeClient) Get(ctx context.Context, id int64) (*Change, error) {
	return c.Query().Where(change.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChangeClient) GetX(ctx context.Context, id int64) *Change {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChangeClient) Hooks() []Hook {
	return c.hooks.Change
}

// ConcentrateClient is a client for the Concentrate schema.
type ConcentrateClient struct {
	config
}

// NewConcentrateClient returns a client for the Concentrate from the given config.
func NewConcentrateClient(c config) *ConcentrateClient {
	return &ConcentrateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `concentrate.Hooks(f(g(h())))`.
func (c *ConcentrateClient) Use(hooks ...Hook) {
	c.hooks.Concentrate = append(c.hooks.Concentrate, hooks...)
}

// Create returns a create builder for Concentrate.
func (c *ConcentrateClient) Create() *ConcentrateCreate {
	mutation := newConcentrateMutation(c.config, OpCreate)
	return &ConcentrateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Concentrate entities.
func (c *ConcentrateClient) CreateBulk(builders ...*ConcentrateCreate) *ConcentrateCreateBulk {
	return &ConcentrateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Concentrate.
func (c *ConcentrateClient) Update() *ConcentrateUpdate {
	mutation := newConcentrateMutation(c.config, OpUpdate)
	return &ConcentrateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConcentrateClient) UpdateOne(co *Concentrate) *ConcentrateUpdateOne {
	mutation := newConcentrateMutation(c.config, OpUpdateOne, withConcentrate(co))
	return &ConcentrateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConcentrateClient) UpdateOneID(id int64) *ConcentrateUpdateOne {
	mutation := newConcentrateMutation(c.config, OpUpdateOne, withConcentrateID(id))
	return &ConcentrateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Concentrate.
func (c *ConcentrateClient) Delete() *ConcentrateDelete {
	mutation := newConcentrateMutation(c.config, OpDelete)
	return &ConcentrateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConcentrateClient) DeleteOne(co *Concentrate) *ConcentrateDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConcentrateClient) DeleteOneID(id int64) *ConcentrateDeleteOne {
	builder := c.Delete().Where(concentrate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConcentrateDeleteOne{builder}
}

// Query returns a query builder for Concentrate.
func (c *ConcentrateClient) Query() *ConcentrateQuery {
	return &ConcentrateQuery{config: c.config}
}

// Get returns a Concentrate entity by its id.
func (c *ConcentrateClient) Get(ctx context.Context, id int64) (*Concentrate, error) {
	return c.Query().Where(concentrate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConcentrateClient) GetX(ctx context.Context, id int64) *Concentrate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConcentrateClient) Hooks() []Hook {
	return c.hooks.Concentrate
}

// ConcentrateFormulaClient is a client for the ConcentrateFormula schema.
type ConcentrateFormulaClient struct {
	config
}

// NewConcentrateFormulaClient returns a client for the ConcentrateFormula from the given config.
func NewConcentrateFormulaClient(c config) *ConcentrateFormulaClient {
	return &ConcentrateFormulaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `concentrateformula.Hooks(f(g(h())))`.
func (c *ConcentrateFormulaClient) Use(hooks ...Hook) {
	c.hooks.ConcentrateFormula = append(c.hooks.ConcentrateFormula, hooks...)
}

// Create returns a create builder for ConcentrateFormula.
func (c *ConcentrateFormulaClient) Create() *ConcentrateFormulaCreate {
	mutation := newConcentrateFormulaMutation(c.config, OpCreate)
	return &ConcentrateFormulaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ConcentrateFormula entities.
func (c *ConcentrateFormulaClient) CreateBulk(builders ...*ConcentrateFormulaCreate) *ConcentrateFormulaCreateBulk {
	return &ConcentrateFormulaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConcentrateFormula.
func (c *ConcentrateFormulaClient) Update() *ConcentrateFormulaUpdate {
	mutation := newConcentrateFormulaMutation(c.config, OpUpdate)
	return &ConcentrateFormulaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConcentrateFormulaClient) UpdateOne(cf *ConcentrateFormula) *ConcentrateFormulaUpdateOne {
	mutation := newConcentrateFormulaMutation(c.config, OpUpdateOne, withConcentrateFormula(cf))
	return &ConcentrateFormulaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConcentrateFormulaClient) UpdateOneID(id int64) *ConcentrateFormulaUpdateOne {
	mutation := newConcentrateFormulaMutation(c.config, OpUpdateOne, withConcentrateFormulaID(id))
	return &ConcentrateFormulaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConcentrateFormula.
func (c *ConcentrateFormulaClient) Delete() *ConcentrateFormulaDelete {
	mutation := newConcentrateFormulaMutation(c.config, OpDelete)
	return &ConcentrateFormulaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConcentrateFormulaClient) DeleteOne(cf *ConcentrateFormula) *ConcentrateFormulaDeleteOne {
	return c.DeleteOneID(cf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConcentrateFormulaClient) DeleteOneID(id int64) *ConcentrateFormulaDeleteOne {
	builder := c.Delete().Where(concentrateformula.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConcentrateFormulaDeleteOne{builder}
}

// Query returns a query builder for ConcentrateFormula.
func (c *ConcentrateFormulaClient) Query() *ConcentrateFormulaQuery {
	return &ConcentrateFormulaQuery{config: c.config}
}

// Get returns a ConcentrateFormula entity by its id.
func (c *ConcentrateFormulaClient) Get(ctx context.Context, id int64) (*ConcentrateFormula, error) {
	return c.Query().Where(concentrateformula.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConcentrateFormulaClient) GetX(ctx context.Context, id int64) *ConcentrateFormula {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConcentrateFormulaClient) Hooks() []Hook {
	return c.hooks.ConcentrateFormula
}

// ConcentrateProcessClient is a client for the ConcentrateProcess schema.
type ConcentrateProcessClient struct {
	config
}

// NewConcentrateProcessClient returns a client for the ConcentrateProcess from the given config.
func NewConcentrateProcessClient(c config) *ConcentrateProcessClient {
	return &ConcentrateProcessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `concentrateprocess.Hooks(f(g(h())))`.
func (c *ConcentrateProcessClient) Use(hooks ...Hook) {
	c.hooks.ConcentrateProcess = append(c.hooks.ConcentrateProcess, hooks...)
}

// Create returns a create builder for ConcentrateProcess.
func (c *ConcentrateProcessClient) Create() *ConcentrateProcessCreate {
	mutation := newConcentrateProcessMutation(c.config, OpCreate)
	return &ConcentrateProcessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ConcentrateProcess entities.
func (c *ConcentrateProcessClient) CreateBulk(builders ...*ConcentrateProcessCreate) *ConcentrateProcessCreateBulk {
	return &ConcentrateProcessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConcentrateProcess.
func (c *ConcentrateProcessClient) Update() *ConcentrateProcessUpdate {
	mutation := newConcentrateProcessMutation(c.config, OpUpdate)
	return &ConcentrateProcessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConcentrateProcessClient) UpdateOne(cp *ConcentrateProcess) *ConcentrateProcessUpdateOne {
	mutation := newConcentrateProcessMutation(c.config, OpUpdateOne, withConcentrateProcess(cp))
	return &ConcentrateProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConcentrateProcessClient) UpdateOneID(id int64) *ConcentrateProcessUpdateOne {
	mutation := newConcentrateProcessMutation(c.config, OpUpdateOne, withConcentrateProcessID(id))
	return &ConcentrateProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConcentrateProcess.
func (c *ConcentrateProcessClient) Delete() *ConcentrateProcessDelete {
	mutation := newConcentrateProcessMutation(c.config, OpDelete)
	return &ConcentrateProcessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConcentrateProcessClient) DeleteOne(cp *ConcentrateProcess) *ConcentrateProcessDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConcentrateProcessClient) DeleteOneID(id int64) *ConcentrateProcessDeleteOne {
	builder := c.Delete().Where(concentrateprocess.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConcentrateProcessDeleteOne{builder}
}

// Query returns a query builder for ConcentrateProcess.
func (c *ConcentrateProcessClient) Query() *ConcentrateProcessQuery {
	return &ConcentrateProcessQuery{config: c.config}
}

// Get returns a ConcentrateProcess entity by its id.
func (c *ConcentrateProcessClient) Get(ctx context.Context, id int64) (*ConcentrateProcess, error) {
	return c.Query().Where(concentrateprocess.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConcentrateProcessClient) GetX(ctx context.Context, id int64) *ConcentrateProcess {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConcentrateProcessClient) Hooks() []Hook {
	return c.hooks.ConcentrateProcess
}

// ConfClient is a client for the Conf schema.
type ConfClient struct {
	config
}

// NewConfClient returns a client for the Conf from the given config.
func NewConfClient(c config) *ConfClient {
	return &ConfClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `conf.Hooks(f(g(h())))`.
func (c *ConfClient) Use(hooks ...Hook) {
	c.hooks.Conf = append(c.hooks.Conf, hooks...)
}

// Create returns a create builder for Conf.
func (c *ConfClient) Create() *ConfCreate {
	mutation := newConfMutation(c.config, OpCreate)
	return &ConfCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Conf entities.
func (c *ConfClient) CreateBulk(builders ...*ConfCreate) *ConfCreateBulk {
	return &ConfCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Conf.
func (c *ConfClient) Update() *ConfUpdate {
	mutation := newConfMutation(c.config, OpUpdate)
	return &ConfUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfClient) UpdateOne(co *Conf) *ConfUpdateOne {
	mutation := newConfMutation(c.config, OpUpdateOne, withConf(co))
	return &ConfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfClient) UpdateOneID(id int64) *ConfUpdateOne {
	mutation := newConfMutation(c.config, OpUpdateOne, withConfID(id))
	return &ConfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Conf.
func (c *ConfClient) Delete() *ConfDelete {
	mutation := newConfMutation(c.config, OpDelete)
	return &ConfDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConfClient) DeleteOne(co *Conf) *ConfDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConfClient) DeleteOneID(id int64) *ConfDeleteOne {
	builder := c.Delete().Where(conf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfDeleteOne{builder}
}

// Query returns a query builder for Conf.
func (c *ConfClient) Query() *ConfQuery {
	return &ConfQuery{config: c.config}
}

// Get returns a Conf entity by its id.
func (c *ConfClient) Get(ctx context.Context, id int64) (*Conf, error) {
	return c.Query().Where(conf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfClient) GetX(ctx context.Context, id int64) *Conf {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConfClient) Hooks() []Hook {
	return c.hooks.Conf
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a create builder for Customer.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int64) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerClient) DeleteOneID(id int64) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{config: c.config}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int64) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int64) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// DiseaseInfoClient is a client for the DiseaseInfo schema.
type DiseaseInfoClient struct {
	config
}

// NewDiseaseInfoClient returns a client for the DiseaseInfo from the given config.
func NewDiseaseInfoClient(c config) *DiseaseInfoClient {
	return &DiseaseInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `diseaseinfo.Hooks(f(g(h())))`.
func (c *DiseaseInfoClient) Use(hooks ...Hook) {
	c.hooks.DiseaseInfo = append(c.hooks.DiseaseInfo, hooks...)
}

// Create returns a create builder for DiseaseInfo.
func (c *DiseaseInfoClient) Create() *DiseaseInfoCreate {
	mutation := newDiseaseInfoMutation(c.config, OpCreate)
	return &DiseaseInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of DiseaseInfo entities.
func (c *DiseaseInfoClient) CreateBulk(builders ...*DiseaseInfoCreate) *DiseaseInfoCreateBulk {
	return &DiseaseInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DiseaseInfo.
func (c *DiseaseInfoClient) Update() *DiseaseInfoUpdate {
	mutation := newDiseaseInfoMutation(c.config, OpUpdate)
	return &DiseaseInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiseaseInfoClient) UpdateOne(di *DiseaseInfo) *DiseaseInfoUpdateOne {
	mutation := newDiseaseInfoMutation(c.config, OpUpdateOne, withDiseaseInfo(di))
	return &DiseaseInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiseaseInfoClient) UpdateOneID(id int64) *DiseaseInfoUpdateOne {
	mutation := newDiseaseInfoMutation(c.config, OpUpdateOne, withDiseaseInfoID(id))
	return &DiseaseInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DiseaseInfo.
func (c *DiseaseInfoClient) Delete() *DiseaseInfoDelete {
	mutation := newDiseaseInfoMutation(c.config, OpDelete)
	return &DiseaseInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiseaseInfoClient) DeleteOne(di *DiseaseInfo) *DiseaseInfoDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiseaseInfoClient) DeleteOneID(id int64) *DiseaseInfoDeleteOne {
	builder := c.Delete().Where(diseaseinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiseaseInfoDeleteOne{builder}
}

// Query returns a query builder for DiseaseInfo.
func (c *DiseaseInfoClient) Query() *DiseaseInfoQuery {
	return &DiseaseInfoQuery{config: c.config}
}

// Get returns a DiseaseInfo entity by its id.
func (c *DiseaseInfoClient) Get(ctx context.Context, id int64) (*DiseaseInfo, error) {
	return c.Query().Where(diseaseinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiseaseInfoClient) GetX(ctx context.Context, id int64) *DiseaseInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DiseaseInfoClient) Hooks() []Hook {
	return c.hooks.DiseaseInfo
}

// DisinfectClient is a client for the Disinfect schema.
type DisinfectClient struct {
	config
}

// NewDisinfectClient returns a client for the Disinfect from the given config.
func NewDisinfectClient(c config) *DisinfectClient {
	return &DisinfectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `disinfect.Hooks(f(g(h())))`.
func (c *DisinfectClient) Use(hooks ...Hook) {
	c.hooks.Disinfect = append(c.hooks.Disinfect, hooks...)
}

// Create returns a create builder for Disinfect.
func (c *DisinfectClient) Create() *DisinfectCreate {
	mutation := newDisinfectMutation(c.config, OpCreate)
	return &DisinfectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Disinfect entities.
func (c *DisinfectClient) CreateBulk(builders ...*DisinfectCreate) *DisinfectCreateBulk {
	return &DisinfectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Disinfect.
func (c *DisinfectClient) Update() *DisinfectUpdate {
	mutation := newDisinfectMutation(c.config, OpUpdate)
	return &DisinfectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DisinfectClient) UpdateOne(d *Disinfect) *DisinfectUpdateOne {
	mutation := newDisinfectMutation(c.config, OpUpdateOne, withDisinfect(d))
	return &DisinfectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DisinfectClient) UpdateOneID(id int64) *DisinfectUpdateOne {
	mutation := newDisinfectMutation(c.config, OpUpdateOne, withDisinfectID(id))
	return &DisinfectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Disinfect.
func (c *DisinfectClient) Delete() *DisinfectDelete {
	mutation := newDisinfectMutation(c.config, OpDelete)
	return &DisinfectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DisinfectClient) DeleteOne(d *Disinfect) *DisinfectDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DisinfectClient) DeleteOneID(id int64) *DisinfectDeleteOne {
	builder := c.Delete().Where(disinfect.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DisinfectDeleteOne{builder}
}

// Query returns a query builder for Disinfect.
func (c *DisinfectClient) Query() *DisinfectQuery {
	return &DisinfectQuery{config: c.config}
}

// Get returns a Disinfect entity by its id.
func (c *DisinfectClient) Get(ctx context.Context, id int64) (*Disinfect, error) {
	return c.Query().Where(disinfect.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DisinfectClient) GetX(ctx context.Context, id int64) *Disinfect {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DisinfectClient) Hooks() []Hook {
	return c.hooks.Disinfect
}

// DispenceClient is a client for the Dispence schema.
type DispenceClient struct {
	config
}

// NewDispenceClient returns a client for the Dispence from the given config.
func NewDispenceClient(c config) *DispenceClient {
	return &DispenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dispence.Hooks(f(g(h())))`.
func (c *DispenceClient) Use(hooks ...Hook) {
	c.hooks.Dispence = append(c.hooks.Dispence, hooks...)
}

// Create returns a create builder for Dispence.
func (c *DispenceClient) Create() *DispenceCreate {
	mutation := newDispenceMutation(c.config, OpCreate)
	return &DispenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Dispence entities.
func (c *DispenceClient) CreateBulk(builders ...*DispenceCreate) *DispenceCreateBulk {
	return &DispenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dispence.
func (c *DispenceClient) Update() *DispenceUpdate {
	mutation := newDispenceMutation(c.config, OpUpdate)
	return &DispenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DispenceClient) UpdateOne(d *Dispence) *DispenceUpdateOne {
	mutation := newDispenceMutation(c.config, OpUpdateOne, withDispence(d))
	return &DispenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DispenceClient) UpdateOneID(id int64) *DispenceUpdateOne {
	mutation := newDispenceMutation(c.config, OpUpdateOne, withDispenceID(id))
	return &DispenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dispence.
func (c *DispenceClient) Delete() *DispenceDelete {
	mutation := newDispenceMutation(c.config, OpDelete)
	return &DispenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DispenceClient) DeleteOne(d *Dispence) *DispenceDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DispenceClient) DeleteOneID(id int64) *DispenceDeleteOne {
	builder := c.Delete().Where(dispence.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DispenceDeleteOne{builder}
}

// Query returns a query builder for Dispence.
func (c *DispenceClient) Query() *DispenceQuery {
	return &DispenceQuery{config: c.config}
}

// Get returns a Dispence entity by its id.
func (c *DispenceClient) Get(ctx context.Context, id int64) (*Dispence, error) {
	return c.Query().Where(dispence.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DispenceClient) GetX(ctx context.Context, id int64) *Dispence {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DispenceClient) Hooks() []Hook {
	return c.hooks.Dispence
}

// DutyClient is a client for the Duty schema.
type DutyClient struct {
	config
}

// NewDutyClient returns a client for the Duty from the given config.
func NewDutyClient(c config) *DutyClient {
	return &DutyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `duty.Hooks(f(g(h())))`.
func (c *DutyClient) Use(hooks ...Hook) {
	c.hooks.Duty = append(c.hooks.Duty, hooks...)
}

// Create returns a create builder for Duty.
func (c *DutyClient) Create() *DutyCreate {
	mutation := newDutyMutation(c.config, OpCreate)
	return &DutyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Duty entities.
func (c *DutyClient) CreateBulk(builders ...*DutyCreate) *DutyCreateBulk {
	return &DutyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Duty.
func (c *DutyClient) Update() *DutyUpdate {
	mutation := newDutyMutation(c.config, OpUpdate)
	return &DutyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DutyClient) UpdateOne(d *Duty) *DutyUpdateOne {
	mutation := newDutyMutation(c.config, OpUpdateOne, withDuty(d))
	return &DutyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DutyClient) UpdateOneID(id int64) *DutyUpdateOne {
	mutation := newDutyMutation(c.config, OpUpdateOne, withDutyID(id))
	return &DutyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Duty.
func (c *DutyClient) Delete() *DutyDelete {
	mutation := newDutyMutation(c.config, OpDelete)
	return &DutyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DutyClient) DeleteOne(d *Duty) *DutyDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DutyClient) DeleteOneID(id int64) *DutyDeleteOne {
	builder := c.Delete().Where(duty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DutyDeleteOne{builder}
}

// Query returns a query builder for Duty.
func (c *DutyClient) Query() *DutyQuery {
	return &DutyQuery{config: c.config}
}

// Get returns a Duty entity by its id.
func (c *DutyClient) Get(ctx context.Context, id int64) (*Duty, error) {
	return c.Query().Where(duty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DutyClient) GetX(ctx context.Context, id int64) *Duty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DutyClient) Hooks() []Hook {
	return c.hooks.Duty
}

// EpidemicClient is a client for the Epidemic schema.
type EpidemicClient struct {
	config
}

// NewEpidemicClient returns a client for the Epidemic from the given config.
func NewEpidemicClient(c config) *EpidemicClient {
	return &EpidemicClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `epidemic.Hooks(f(g(h())))`.
func (c *EpidemicClient) Use(hooks ...Hook) {
	c.hooks.Epidemic = append(c.hooks.Epidemic, hooks...)
}

// Create returns a create builder for Epidemic.
func (c *EpidemicClient) Create() *EpidemicCreate {
	mutation := newEpidemicMutation(c.config, OpCreate)
	return &EpidemicCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Epidemic entities.
func (c *EpidemicClient) CreateBulk(builders ...*EpidemicCreate) *EpidemicCreateBulk {
	return &EpidemicCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Epidemic.
func (c *EpidemicClient) Update() *EpidemicUpdate {
	mutation := newEpidemicMutation(c.config, OpUpdate)
	return &EpidemicUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EpidemicClient) UpdateOne(e *Epidemic) *EpidemicUpdateOne {
	mutation := newEpidemicMutation(c.config, OpUpdateOne, withEpidemic(e))
	return &EpidemicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EpidemicClient) UpdateOneID(id int64) *EpidemicUpdateOne {
	mutation := newEpidemicMutation(c.config, OpUpdateOne, withEpidemicID(id))
	return &EpidemicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Epidemic.
func (c *EpidemicClient) Delete() *EpidemicDelete {
	mutation := newEpidemicMutation(c.config, OpDelete)
	return &EpidemicDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EpidemicClient) DeleteOne(e *Epidemic) *EpidemicDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EpidemicClient) DeleteOneID(id int64) *EpidemicDeleteOne {
	builder := c.Delete().Where(epidemic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EpidemicDeleteOne{builder}
}

// Query returns a query builder for Epidemic.
func (c *EpidemicClient) Query() *EpidemicQuery {
	return &EpidemicQuery{config: c.config}
}

// Get returns a Epidemic entity by its id.
func (c *EpidemicClient) Get(ctx context.Context, id int64) (*Epidemic, error) {
	return c.Query().Where(epidemic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EpidemicClient) GetX(ctx context.Context, id int64) *Epidemic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EpidemicClient) Hooks() []Hook {
	return c.hooks.Epidemic
}

// EpidemicTypeClient is a client for the EpidemicType schema.
type EpidemicTypeClient struct {
	config
}

// NewEpidemicTypeClient returns a client for the EpidemicType from the given config.
func NewEpidemicTypeClient(c config) *EpidemicTypeClient {
	return &EpidemicTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `epidemictype.Hooks(f(g(h())))`.
func (c *EpidemicTypeClient) Use(hooks ...Hook) {
	c.hooks.EpidemicType = append(c.hooks.EpidemicType, hooks...)
}

// Create returns a create builder for EpidemicType.
func (c *EpidemicTypeClient) Create() *EpidemicTypeCreate {
	mutation := newEpidemicTypeMutation(c.config, OpCreate)
	return &EpidemicTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of EpidemicType entities.
func (c *EpidemicTypeClient) CreateBulk(builders ...*EpidemicTypeCreate) *EpidemicTypeCreateBulk {
	return &EpidemicTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EpidemicType.
func (c *EpidemicTypeClient) Update() *EpidemicTypeUpdate {
	mutation := newEpidemicTypeMutation(c.config, OpUpdate)
	return &EpidemicTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EpidemicTypeClient) UpdateOne(et *EpidemicType) *EpidemicTypeUpdateOne {
	mutation := newEpidemicTypeMutation(c.config, OpUpdateOne, withEpidemicType(et))
	return &EpidemicTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EpidemicTypeClient) UpdateOneID(id int64) *EpidemicTypeUpdateOne {
	mutation := newEpidemicTypeMutation(c.config, OpUpdateOne, withEpidemicTypeID(id))
	return &EpidemicTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EpidemicType.
func (c *EpidemicTypeClient) Delete() *EpidemicTypeDelete {
	mutation := newEpidemicTypeMutation(c.config, OpDelete)
	return &EpidemicTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EpidemicTypeClient) DeleteOne(et *EpidemicType) *EpidemicTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EpidemicTypeClient) DeleteOneID(id int64) *EpidemicTypeDeleteOne {
	builder := c.Delete().Where(epidemictype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EpidemicTypeDeleteOne{builder}
}

// Query returns a query builder for EpidemicType.
func (c *EpidemicTypeClient) Query() *EpidemicTypeQuery {
	return &EpidemicTypeQuery{config: c.config}
}

// Get returns a EpidemicType entity by its id.
func (c *EpidemicTypeClient) Get(ctx context.Context, id int64) (*EpidemicType, error) {
	return c.Query().Where(epidemictype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EpidemicTypeClient) GetX(ctx context.Context, id int64) *EpidemicType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EpidemicTypeClient) Hooks() []Hook {
	return c.hooks.EpidemicType
}

// EstrusClient is a client for the Estrus schema.
type EstrusClient struct {
	config
}

// NewEstrusClient returns a client for the Estrus from the given config.
func NewEstrusClient(c config) *EstrusClient {
	return &EstrusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `estrus.Hooks(f(g(h())))`.
func (c *EstrusClient) Use(hooks ...Hook) {
	c.hooks.Estrus = append(c.hooks.Estrus, hooks...)
}

// Create returns a create builder for Estrus.
func (c *EstrusClient) Create() *EstrusCreate {
	mutation := newEstrusMutation(c.config, OpCreate)
	return &EstrusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Estrus entities.
func (c *EstrusClient) CreateBulk(builders ...*EstrusCreate) *EstrusCreateBulk {
	return &EstrusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Estrus.
func (c *EstrusClient) Update() *EstrusUpdate {
	mutation := newEstrusMutation(c.config, OpUpdate)
	return &EstrusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EstrusClient) UpdateOne(e *Estrus) *EstrusUpdateOne {
	mutation := newEstrusMutation(c.config, OpUpdateOne, withEstrus(e))
	return &EstrusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EstrusClient) UpdateOneID(id int64) *EstrusUpdateOne {
	mutation := newEstrusMutation(c.config, OpUpdateOne, withEstrusID(id))
	return &EstrusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Estrus.
func (c *EstrusClient) Delete() *EstrusDelete {
	mutation := newEstrusMutation(c.config, OpDelete)
	return &EstrusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EstrusClient) DeleteOne(e *Estrus) *EstrusDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EstrusClient) DeleteOneID(id int64) *EstrusDeleteOne {
	builder := c.Delete().Where(estrus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EstrusDeleteOne{builder}
}

// Query returns a query builder for Estrus.
func (c *EstrusClient) Query() *EstrusQuery {
	return &EstrusQuery{config: c.config}
}

// Get returns a Estrus entity by its id.
func (c *EstrusClient) Get(ctx context.Context, id int64) (*Estrus, error) {
	return c.Query().Where(estrus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EstrusClient) GetX(ctx context.Context, id int64) *Estrus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EstrusClient) Hooks() []Hook {
	return c.hooks.Estrus
}

// EstrusTypeClient is a client for the EstrusType schema.
type EstrusTypeClient struct {
	config
}

// NewEstrusTypeClient returns a client for the EstrusType from the given config.
func NewEstrusTypeClient(c config) *EstrusTypeClient {
	return &EstrusTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `estrustype.Hooks(f(g(h())))`.
func (c *EstrusTypeClient) Use(hooks ...Hook) {
	c.hooks.EstrusType = append(c.hooks.EstrusType, hooks...)
}

// Create returns a create builder for EstrusType.
func (c *EstrusTypeClient) Create() *EstrusTypeCreate {
	mutation := newEstrusTypeMutation(c.config, OpCreate)
	return &EstrusTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of EstrusType entities.
func (c *EstrusTypeClient) CreateBulk(builders ...*EstrusTypeCreate) *EstrusTypeCreateBulk {
	return &EstrusTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EstrusType.
func (c *EstrusTypeClient) Update() *EstrusTypeUpdate {
	mutation := newEstrusTypeMutation(c.config, OpUpdate)
	return &EstrusTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EstrusTypeClient) UpdateOne(et *EstrusType) *EstrusTypeUpdateOne {
	mutation := newEstrusTypeMutation(c.config, OpUpdateOne, withEstrusType(et))
	return &EstrusTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EstrusTypeClient) UpdateOneID(id int64) *EstrusTypeUpdateOne {
	mutation := newEstrusTypeMutation(c.config, OpUpdateOne, withEstrusTypeID(id))
	return &EstrusTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EstrusType.
func (c *EstrusTypeClient) Delete() *EstrusTypeDelete {
	mutation := newEstrusTypeMutation(c.config, OpDelete)
	return &EstrusTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EstrusTypeClient) DeleteOne(et *EstrusType) *EstrusTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EstrusTypeClient) DeleteOneID(id int64) *EstrusTypeDeleteOne {
	builder := c.Delete().Where(estrustype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EstrusTypeDeleteOne{builder}
}

// Query returns a query builder for EstrusType.
func (c *EstrusTypeClient) Query() *EstrusTypeQuery {
	return &EstrusTypeQuery{config: c.config}
}

// Get returns a EstrusType entity by its id.
func (c *EstrusTypeClient) Get(ctx context.Context, id int64) (*EstrusType, error) {
	return c.Query().Where(estrustype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EstrusTypeClient) GetX(ctx context.Context, id int64) *EstrusType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EstrusTypeClient) Hooks() []Hook {
	return c.hooks.EstrusType
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Create returns a create builder for Event.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id int64) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventClient) DeleteOneID(id int64) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{config: c.config}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id int64) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id int64) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// FarmClient is a client for the Farm schema.
type FarmClient struct {
	config
}

// NewFarmClient returns a client for the Farm from the given config.
func NewFarmClient(c config) *FarmClient {
	return &FarmClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `farm.Hooks(f(g(h())))`.
func (c *FarmClient) Use(hooks ...Hook) {
	c.hooks.Farm = append(c.hooks.Farm, hooks...)
}

// Create returns a create builder for Farm.
func (c *FarmClient) Create() *FarmCreate {
	mutation := newFarmMutation(c.config, OpCreate)
	return &FarmCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Farm entities.
func (c *FarmClient) CreateBulk(builders ...*FarmCreate) *FarmCreateBulk {
	return &FarmCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Farm.
func (c *FarmClient) Update() *FarmUpdate {
	mutation := newFarmMutation(c.config, OpUpdate)
	return &FarmUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FarmClient) UpdateOne(f *Farm) *FarmUpdateOne {
	mutation := newFarmMutation(c.config, OpUpdateOne, withFarm(f))
	return &FarmUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FarmClient) UpdateOneID(id int64) *FarmUpdateOne {
	mutation := newFarmMutation(c.config, OpUpdateOne, withFarmID(id))
	return &FarmUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Farm.
func (c *FarmClient) Delete() *FarmDelete {
	mutation := newFarmMutation(c.config, OpDelete)
	return &FarmDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FarmClient) DeleteOne(f *Farm) *FarmDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FarmClient) DeleteOneID(id int64) *FarmDeleteOne {
	builder := c.Delete().Where(farm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FarmDeleteOne{builder}
}

// Query returns a query builder for Farm.
func (c *FarmClient) Query() *FarmQuery {
	return &FarmQuery{config: c.config}
}

// Get returns a Farm entity by its id.
func (c *FarmClient) Get(ctx context.Context, id int64) (*Farm, error) {
	return c.Query().Where(farm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FarmClient) GetX(ctx context.Context, id int64) *Farm {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FarmClient) Hooks() []Hook {
	return c.hooks.Farm
}

// FeedGroupClient is a client for the FeedGroup schema.
type FeedGroupClient struct {
	config
}

// NewFeedGroupClient returns a client for the FeedGroup from the given config.
func NewFeedGroupClient(c config) *FeedGroupClient {
	return &FeedGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedgroup.Hooks(f(g(h())))`.
func (c *FeedGroupClient) Use(hooks ...Hook) {
	c.hooks.FeedGroup = append(c.hooks.FeedGroup, hooks...)
}

// Create returns a create builder for FeedGroup.
func (c *FeedGroupClient) Create() *FeedGroupCreate {
	mutation := newFeedGroupMutation(c.config, OpCreate)
	return &FeedGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of FeedGroup entities.
func (c *FeedGroupClient) CreateBulk(builders ...*FeedGroupCreate) *FeedGroupCreateBulk {
	return &FeedGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedGroup.
func (c *FeedGroupClient) Update() *FeedGroupUpdate {
	mutation := newFeedGroupMutation(c.config, OpUpdate)
	return &FeedGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedGroupClient) UpdateOne(fg *FeedGroup) *FeedGroupUpdateOne {
	mutation := newFeedGroupMutation(c.config, OpUpdateOne, withFeedGroup(fg))
	return &FeedGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedGroupClient) UpdateOneID(id int64) *FeedGroupUpdateOne {
	mutation := newFeedGroupMutation(c.config, OpUpdateOne, withFeedGroupID(id))
	return &FeedGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedGroup.
func (c *FeedGroupClient) Delete() *FeedGroupDelete {
	mutation := newFeedGroupMutation(c.config, OpDelete)
	return &FeedGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FeedGroupClient) DeleteOne(fg *FeedGroup) *FeedGroupDeleteOne {
	return c.DeleteOneID(fg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FeedGroupClient) DeleteOneID(id int64) *FeedGroupDeleteOne {
	builder := c.Delete().Where(feedgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedGroupDeleteOne{builder}
}

// Query returns a query builder for FeedGroup.
func (c *FeedGroupClient) Query() *FeedGroupQuery {
	return &FeedGroupQuery{config: c.config}
}

// Get returns a FeedGroup entity by its id.
func (c *FeedGroupClient) Get(ctx context.Context, id int64) (*FeedGroup, error) {
	return c.Query().Where(feedgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedGroupClient) GetX(ctx context.Context, id int64) *FeedGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeedGroupClient) Hooks() []Hook {
	return c.hooks.FeedGroup
}

// FeedInfoClient is a client for the FeedInfo schema.
type FeedInfoClient struct {
	config
}

// NewFeedInfoClient returns a client for the FeedInfo from the given config.
func NewFeedInfoClient(c config) *FeedInfoClient {
	return &FeedInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedinfo.Hooks(f(g(h())))`.
func (c *FeedInfoClient) Use(hooks ...Hook) {
	c.hooks.FeedInfo = append(c.hooks.FeedInfo, hooks...)
}

// Create returns a create builder for FeedInfo.
func (c *FeedInfoClient) Create() *FeedInfoCreate {
	mutation := newFeedInfoMutation(c.config, OpCreate)
	return &FeedInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of FeedInfo entities.
func (c *FeedInfoClient) CreateBulk(builders ...*FeedInfoCreate) *FeedInfoCreateBulk {
	return &FeedInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedInfo.
func (c *FeedInfoClient) Update() *FeedInfoUpdate {
	mutation := newFeedInfoMutation(c.config, OpUpdate)
	return &FeedInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedInfoClient) UpdateOne(fi *FeedInfo) *FeedInfoUpdateOne {
	mutation := newFeedInfoMutation(c.config, OpUpdateOne, withFeedInfo(fi))
	return &FeedInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedInfoClient) UpdateOneID(id int64) *FeedInfoUpdateOne {
	mutation := newFeedInfoMutation(c.config, OpUpdateOne, withFeedInfoID(id))
	return &FeedInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedInfo.
func (c *FeedInfoClient) Delete() *FeedInfoDelete {
	mutation := newFeedInfoMutation(c.config, OpDelete)
	return &FeedInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FeedInfoClient) DeleteOne(fi *FeedInfo) *FeedInfoDeleteOne {
	return c.DeleteOneID(fi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FeedInfoClient) DeleteOneID(id int64) *FeedInfoDeleteOne {
	builder := c.Delete().Where(feedinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedInfoDeleteOne{builder}
}

// Query returns a query builder for FeedInfo.
func (c *FeedInfoClient) Query() *FeedInfoQuery {
	return &FeedInfoQuery{config: c.config}
}

// Get returns a FeedInfo entity by its id.
func (c *FeedInfoClient) Get(ctx context.Context, id int64) (*FeedInfo, error) {
	return c.Query().Where(feedinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedInfoClient) GetX(ctx context.Context, id int64) *FeedInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeedInfoClient) Hooks() []Hook {
	return c.hooks.FeedInfo
}

// FeedRecordClient is a client for the FeedRecord schema.
type FeedRecordClient struct {
	config
}

// NewFeedRecordClient returns a client for the FeedRecord from the given config.
func NewFeedRecordClient(c config) *FeedRecordClient {
	return &FeedRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedrecord.Hooks(f(g(h())))`.
func (c *FeedRecordClient) Use(hooks ...Hook) {
	c.hooks.FeedRecord = append(c.hooks.FeedRecord, hooks...)
}

// Create returns a create builder for FeedRecord.
func (c *FeedRecordClient) Create() *FeedRecordCreate {
	mutation := newFeedRecordMutation(c.config, OpCreate)
	return &FeedRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of FeedRecord entities.
func (c *FeedRecordClient) CreateBulk(builders ...*FeedRecordCreate) *FeedRecordCreateBulk {
	return &FeedRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedRecord.
func (c *FeedRecordClient) Update() *FeedRecordUpdate {
	mutation := newFeedRecordMutation(c.config, OpUpdate)
	return &FeedRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedRecordClient) UpdateOne(fr *FeedRecord) *FeedRecordUpdateOne {
	mutation := newFeedRecordMutation(c.config, OpUpdateOne, withFeedRecord(fr))
	return &FeedRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedRecordClient) UpdateOneID(id int64) *FeedRecordUpdateOne {
	mutation := newFeedRecordMutation(c.config, OpUpdateOne, withFeedRecordID(id))
	return &FeedRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedRecord.
func (c *FeedRecordClient) Delete() *FeedRecordDelete {
	mutation := newFeedRecordMutation(c.config, OpDelete)
	return &FeedRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FeedRecordClient) DeleteOne(fr *FeedRecord) *FeedRecordDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FeedRecordClient) DeleteOneID(id int64) *FeedRecordDeleteOne {
	builder := c.Delete().Where(feedrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedRecordDeleteOne{builder}
}

// Query returns a query builder for FeedRecord.
func (c *FeedRecordClient) Query() *FeedRecordQuery {
	return &FeedRecordQuery{config: c.config}
}

// Get returns a FeedRecord entity by its id.
func (c *FeedRecordClient) Get(ctx context.Context, id int64) (*FeedRecord, error) {
	return c.Query().Where(feedrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedRecordClient) GetX(ctx context.Context, id int64) *FeedRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeedRecordClient) Hooks() []Hook {
	return c.hooks.FeedRecord
}

// FrozenSemenInfoClient is a client for the FrozenSemenInfo schema.
type FrozenSemenInfoClient struct {
	config
}

// NewFrozenSemenInfoClient returns a client for the FrozenSemenInfo from the given config.
func NewFrozenSemenInfoClient(c config) *FrozenSemenInfoClient {
	return &FrozenSemenInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `frozensemeninfo.Hooks(f(g(h())))`.
func (c *FrozenSemenInfoClient) Use(hooks ...Hook) {
	c.hooks.FrozenSemenInfo = append(c.hooks.FrozenSemenInfo, hooks...)
}

// Create returns a create builder for FrozenSemenInfo.
func (c *FrozenSemenInfoClient) Create() *FrozenSemenInfoCreate {
	mutation := newFrozenSemenInfoMutation(c.config, OpCreate)
	return &FrozenSemenInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of FrozenSemenInfo entities.
func (c *FrozenSemenInfoClient) CreateBulk(builders ...*FrozenSemenInfoCreate) *FrozenSemenInfoCreateBulk {
	return &FrozenSemenInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FrozenSemenInfo.
func (c *FrozenSemenInfoClient) Update() *FrozenSemenInfoUpdate {
	mutation := newFrozenSemenInfoMutation(c.config, OpUpdate)
	return &FrozenSemenInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FrozenSemenInfoClient) UpdateOne(fsi *FrozenSemenInfo) *FrozenSemenInfoUpdateOne {
	mutation := newFrozenSemenInfoMutation(c.config, OpUpdateOne, withFrozenSemenInfo(fsi))
	return &FrozenSemenInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FrozenSemenInfoClient) UpdateOneID(id int64) *FrozenSemenInfoUpdateOne {
	mutation := newFrozenSemenInfoMutation(c.config, OpUpdateOne, withFrozenSemenInfoID(id))
	return &FrozenSemenInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FrozenSemenInfo.
func (c *FrozenSemenInfoClient) Delete() *FrozenSemenInfoDelete {
	mutation := newFrozenSemenInfoMutation(c.config, OpDelete)
	return &FrozenSemenInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FrozenSemenInfoClient) DeleteOne(fsi *FrozenSemenInfo) *FrozenSemenInfoDeleteOne {
	return c.DeleteOneID(fsi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FrozenSemenInfoClient) DeleteOneID(id int64) *FrozenSemenInfoDeleteOne {
	builder := c.Delete().Where(frozensemeninfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FrozenSemenInfoDeleteOne{builder}
}

// Query returns a query builder for FrozenSemenInfo.
func (c *FrozenSemenInfoClient) Query() *FrozenSemenInfoQuery {
	return &FrozenSemenInfoQuery{config: c.config}
}

// Get returns a FrozenSemenInfo entity by its id.
func (c *FrozenSemenInfoClient) Get(ctx context.Context, id int64) (*FrozenSemenInfo, error) {
	return c.Query().Where(frozensemeninfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FrozenSemenInfoClient) GetX(ctx context.Context, id int64) *FrozenSemenInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FrozenSemenInfoClient) Hooks() []Hook {
	return c.hooks.FrozenSemenInfo
}

// HairStateClient is a client for the HairState schema.
type HairStateClient struct {
	config
}

// NewHairStateClient returns a client for the HairState from the given config.
func NewHairStateClient(c config) *HairStateClient {
	return &HairStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hairstate.Hooks(f(g(h())))`.
func (c *HairStateClient) Use(hooks ...Hook) {
	c.hooks.HairState = append(c.hooks.HairState, hooks...)
}

// Create returns a create builder for HairState.
func (c *HairStateClient) Create() *HairStateCreate {
	mutation := newHairStateMutation(c.config, OpCreate)
	return &HairStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of HairState entities.
func (c *HairStateClient) CreateBulk(builders ...*HairStateCreate) *HairStateCreateBulk {
	return &HairStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HairState.
func (c *HairStateClient) Update() *HairStateUpdate {
	mutation := newHairStateMutation(c.config, OpUpdate)
	return &HairStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HairStateClient) UpdateOne(hs *HairState) *HairStateUpdateOne {
	mutation := newHairStateMutation(c.config, OpUpdateOne, withHairState(hs))
	return &HairStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HairStateClient) UpdateOneID(id int64) *HairStateUpdateOne {
	mutation := newHairStateMutation(c.config, OpUpdateOne, withHairStateID(id))
	return &HairStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HairState.
func (c *HairStateClient) Delete() *HairStateDelete {
	mutation := newHairStateMutation(c.config, OpDelete)
	return &HairStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HairStateClient) DeleteOne(hs *HairState) *HairStateDeleteOne {
	return c.DeleteOneID(hs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HairStateClient) DeleteOneID(id int64) *HairStateDeleteOne {
	builder := c.Delete().Where(hairstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HairStateDeleteOne{builder}
}

// Query returns a query builder for HairState.
func (c *HairStateClient) Query() *HairStateQuery {
	return &HairStateQuery{config: c.config}
}

// Get returns a HairState entity by its id.
func (c *HairStateClient) Get(ctx context.Context, id int64) (*HairState, error) {
	return c.Query().Where(hairstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HairStateClient) GetX(ctx context.Context, id int64) *HairState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HairStateClient) Hooks() []Hook {
	return c.hooks.HairState
}

// HealthCareClient is a client for the HealthCare schema.
type HealthCareClient struct {
	config
}

// NewHealthCareClient returns a client for the HealthCare from the given config.
func NewHealthCareClient(c config) *HealthCareClient {
	return &HealthCareClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `healthcare.Hooks(f(g(h())))`.
func (c *HealthCareClient) Use(hooks ...Hook) {
	c.hooks.HealthCare = append(c.hooks.HealthCare, hooks...)
}

// Create returns a create builder for HealthCare.
func (c *HealthCareClient) Create() *HealthCareCreate {
	mutation := newHealthCareMutation(c.config, OpCreate)
	return &HealthCareCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of HealthCare entities.
func (c *HealthCareClient) CreateBulk(builders ...*HealthCareCreate) *HealthCareCreateBulk {
	return &HealthCareCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HealthCare.
func (c *HealthCareClient) Update() *HealthCareUpdate {
	mutation := newHealthCareMutation(c.config, OpUpdate)
	return &HealthCareUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HealthCareClient) UpdateOne(hc *HealthCare) *HealthCareUpdateOne {
	mutation := newHealthCareMutation(c.config, OpUpdateOne, withHealthCare(hc))
	return &HealthCareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HealthCareClient) UpdateOneID(id int64) *HealthCareUpdateOne {
	mutation := newHealthCareMutation(c.config, OpUpdateOne, withHealthCareID(id))
	return &HealthCareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HealthCare.
func (c *HealthCareClient) Delete() *HealthCareDelete {
	mutation := newHealthCareMutation(c.config, OpDelete)
	return &HealthCareDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HealthCareClient) DeleteOne(hc *HealthCare) *HealthCareDeleteOne {
	return c.DeleteOneID(hc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HealthCareClient) DeleteOneID(id int64) *HealthCareDeleteOne {
	builder := c.Delete().Where(healthcare.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HealthCareDeleteOne{builder}
}

// Query returns a query builder for HealthCare.
func (c *HealthCareClient) Query() *HealthCareQuery {
	return &HealthCareQuery{config: c.config}
}

// Get returns a HealthCare entity by its id.
func (c *HealthCareClient) Get(ctx context.Context, id int64) (*HealthCare, error) {
	return c.Query().Where(healthcare.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HealthCareClient) GetX(ctx context.Context, id int64) *HealthCare {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HealthCareClient) Hooks() []Hook {
	return c.hooks.HealthCare
}

// ImmunityClient is a client for the Immunity schema.
type ImmunityClient struct {
	config
}

// NewImmunityClient returns a client for the Immunity from the given config.
func NewImmunityClient(c config) *ImmunityClient {
	return &ImmunityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `immunity.Hooks(f(g(h())))`.
func (c *ImmunityClient) Use(hooks ...Hook) {
	c.hooks.Immunity = append(c.hooks.Immunity, hooks...)
}

// Create returns a create builder for Immunity.
func (c *ImmunityClient) Create() *ImmunityCreate {
	mutation := newImmunityMutation(c.config, OpCreate)
	return &ImmunityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Immunity entities.
func (c *ImmunityClient) CreateBulk(builders ...*ImmunityCreate) *ImmunityCreateBulk {
	return &ImmunityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Immunity.
func (c *ImmunityClient) Update() *ImmunityUpdate {
	mutation := newImmunityMutation(c.config, OpUpdate)
	return &ImmunityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImmunityClient) UpdateOne(i *Immunity) *ImmunityUpdateOne {
	mutation := newImmunityMutation(c.config, OpUpdateOne, withImmunity(i))
	return &ImmunityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImmunityClient) UpdateOneID(id int64) *ImmunityUpdateOne {
	mutation := newImmunityMutation(c.config, OpUpdateOne, withImmunityID(id))
	return &ImmunityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Immunity.
func (c *ImmunityClient) Delete() *ImmunityDelete {
	mutation := newImmunityMutation(c.config, OpDelete)
	return &ImmunityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImmunityClient) DeleteOne(i *Immunity) *ImmunityDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImmunityClient) DeleteOneID(id int64) *ImmunityDeleteOne {
	builder := c.Delete().Where(immunity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImmunityDeleteOne{builder}
}

// Query returns a query builder for Immunity.
func (c *ImmunityClient) Query() *ImmunityQuery {
	return &ImmunityQuery{config: c.config}
}

// Get returns a Immunity entity by its id.
func (c *ImmunityClient) Get(ctx context.Context, id int64) (*Immunity, error) {
	return c.Query().Where(immunity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImmunityClient) GetX(ctx context.Context, id int64) *Immunity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ImmunityClient) Hooks() []Hook {
	return c.hooks.Immunity
}

// InspectionClient is a client for the Inspection schema.
type InspectionClient struct {
	config
}

// NewInspectionClient returns a client for the Inspection from the given config.
func NewInspectionClient(c config) *InspectionClient {
	return &InspectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inspection.Hooks(f(g(h())))`.
func (c *InspectionClient) Use(hooks ...Hook) {
	c.hooks.Inspection = append(c.hooks.Inspection, hooks...)
}

// Create returns a create builder for Inspection.
func (c *InspectionClient) Create() *InspectionCreate {
	mutation := newInspectionMutation(c.config, OpCreate)
	return &InspectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Inspection entities.
func (c *InspectionClient) CreateBulk(builders ...*InspectionCreate) *InspectionCreateBulk {
	return &InspectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Inspection.
func (c *InspectionClient) Update() *InspectionUpdate {
	mutation := newInspectionMutation(c.config, OpUpdate)
	return &InspectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InspectionClient) UpdateOne(i *Inspection) *InspectionUpdateOne {
	mutation := newInspectionMutation(c.config, OpUpdateOne, withInspection(i))
	return &InspectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InspectionClient) UpdateOneID(id int64) *InspectionUpdateOne {
	mutation := newInspectionMutation(c.config, OpUpdateOne, withInspectionID(id))
	return &InspectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Inspection.
func (c *InspectionClient) Delete() *InspectionDelete {
	mutation := newInspectionMutation(c.config, OpDelete)
	return &InspectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InspectionClient) DeleteOne(i *Inspection) *InspectionDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InspectionClient) DeleteOneID(id int64) *InspectionDeleteOne {
	builder := c.Delete().Where(inspection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InspectionDeleteOne{builder}
}

// Query returns a query builder for Inspection.
func (c *InspectionClient) Query() *InspectionQuery {
	return &InspectionQuery{config: c.config}
}

// Get returns a Inspection entity by its id.
func (c *InspectionClient) Get(ctx context.Context, id int64) (*Inspection, error) {
	return c.Query().Where(inspection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InspectionClient) GetX(ctx context.Context, id int64) *Inspection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InspectionClient) Hooks() []Hook {
	return c.hooks.Inspection
}

// InventoryFlowClient is a client for the InventoryFlow schema.
type InventoryFlowClient struct {
	config
}

// NewInventoryFlowClient returns a client for the InventoryFlow from the given config.
func NewInventoryFlowClient(c config) *InventoryFlowClient {
	return &InventoryFlowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inventoryflow.Hooks(f(g(h())))`.
func (c *InventoryFlowClient) Use(hooks ...Hook) {
	c.hooks.InventoryFlow = append(c.hooks.InventoryFlow, hooks...)
}

// Create returns a create builder for InventoryFlow.
func (c *InventoryFlowClient) Create() *InventoryFlowCreate {
	mutation := newInventoryFlowMutation(c.config, OpCreate)
	return &InventoryFlowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of InventoryFlow entities.
func (c *InventoryFlowClient) CreateBulk(builders ...*InventoryFlowCreate) *InventoryFlowCreateBulk {
	return &InventoryFlowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InventoryFlow.
func (c *InventoryFlowClient) Update() *InventoryFlowUpdate {
	mutation := newInventoryFlowMutation(c.config, OpUpdate)
	return &InventoryFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InventoryFlowClient) UpdateOne(_if *InventoryFlow) *InventoryFlowUpdateOne {
	mutation := newInventoryFlowMutation(c.config, OpUpdateOne, withInventoryFlow(_if))
	return &InventoryFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InventoryFlowClient) UpdateOneID(id int64) *InventoryFlowUpdateOne {
	mutation := newInventoryFlowMutation(c.config, OpUpdateOne, withInventoryFlowID(id))
	return &InventoryFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InventoryFlow.
func (c *InventoryFlowClient) Delete() *InventoryFlowDelete {
	mutation := newInventoryFlowMutation(c.config, OpDelete)
	return &InventoryFlowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InventoryFlowClient) DeleteOne(_if *InventoryFlow) *InventoryFlowDeleteOne {
	return c.DeleteOneID(_if.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InventoryFlowClient) DeleteOneID(id int64) *InventoryFlowDeleteOne {
	builder := c.Delete().Where(inventoryflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InventoryFlowDeleteOne{builder}
}

// Query returns a query builder for InventoryFlow.
func (c *InventoryFlowClient) Query() *InventoryFlowQuery {
	return &InventoryFlowQuery{config: c.config}
}

// Get returns a InventoryFlow entity by its id.
func (c *InventoryFlowClient) Get(ctx context.Context, id int64) (*InventoryFlow, error) {
	return c.Query().Where(inventoryflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InventoryFlowClient) GetX(ctx context.Context, id int64) *InventoryFlow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InventoryFlowClient) Hooks() []Hook {
	return c.hooks.InventoryFlow
}

// MaterialClient is a client for the Material schema.
type MaterialClient struct {
	config
}

// NewMaterialClient returns a client for the Material from the given config.
func NewMaterialClient(c config) *MaterialClient {
	return &MaterialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `material.Hooks(f(g(h())))`.
func (c *MaterialClient) Use(hooks ...Hook) {
	c.hooks.Material = append(c.hooks.Material, hooks...)
}

// Create returns a create builder for Material.
func (c *MaterialClient) Create() *MaterialCreate {
	mutation := newMaterialMutation(c.config, OpCreate)
	return &MaterialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Material entities.
func (c *MaterialClient) CreateBulk(builders ...*MaterialCreate) *MaterialCreateBulk {
	return &MaterialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Material.
func (c *MaterialClient) Update() *MaterialUpdate {
	mutation := newMaterialMutation(c.config, OpUpdate)
	return &MaterialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MaterialClient) UpdateOne(m *Material) *MaterialUpdateOne {
	mutation := newMaterialMutation(c.config, OpUpdateOne, withMaterial(m))
	return &MaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MaterialClient) UpdateOneID(id int64) *MaterialUpdateOne {
	mutation := newMaterialMutation(c.config, OpUpdateOne, withMaterialID(id))
	return &MaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Material.
func (c *MaterialClient) Delete() *MaterialDelete {
	mutation := newMaterialMutation(c.config, OpDelete)
	return &MaterialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MaterialClient) DeleteOne(m *Material) *MaterialDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MaterialClient) DeleteOneID(id int64) *MaterialDeleteOne {
	builder := c.Delete().Where(material.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MaterialDeleteOne{builder}
}

// Query returns a query builder for Material.
func (c *MaterialClient) Query() *MaterialQuery {
	return &MaterialQuery{config: c.config}
}

// Get returns a Material entity by its id.
func (c *MaterialClient) Get(ctx context.Context, id int64) (*Material, error) {
	return c.Query().Where(material.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MaterialClient) GetX(ctx context.Context, id int64) *Material {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MaterialClient) Hooks() []Hook {
	return c.hooks.Material
}

// MaterialTestClient is a client for the MaterialTest schema.
type MaterialTestClient struct {
	config
}

// NewMaterialTestClient returns a client for the MaterialTest from the given config.
func NewMaterialTestClient(c config) *MaterialTestClient {
	return &MaterialTestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `materialtest.Hooks(f(g(h())))`.
func (c *MaterialTestClient) Use(hooks ...Hook) {
	c.hooks.MaterialTest = append(c.hooks.MaterialTest, hooks...)
}

// Create returns a create builder for MaterialTest.
func (c *MaterialTestClient) Create() *MaterialTestCreate {
	mutation := newMaterialTestMutation(c.config, OpCreate)
	return &MaterialTestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of MaterialTest entities.
func (c *MaterialTestClient) CreateBulk(builders ...*MaterialTestCreate) *MaterialTestCreateBulk {
	return &MaterialTestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MaterialTest.
func (c *MaterialTestClient) Update() *MaterialTestUpdate {
	mutation := newMaterialTestMutation(c.config, OpUpdate)
	return &MaterialTestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MaterialTestClient) UpdateOne(mt *MaterialTest) *MaterialTestUpdateOne {
	mutation := newMaterialTestMutation(c.config, OpUpdateOne, withMaterialTest(mt))
	return &MaterialTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MaterialTestClient) UpdateOneID(id int64) *MaterialTestUpdateOne {
	mutation := newMaterialTestMutation(c.config, OpUpdateOne, withMaterialTestID(id))
	return &MaterialTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MaterialTest.
func (c *MaterialTestClient) Delete() *MaterialTestDelete {
	mutation := newMaterialTestMutation(c.config, OpDelete)
	return &MaterialTestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MaterialTestClient) DeleteOne(mt *MaterialTest) *MaterialTestDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MaterialTestClient) DeleteOneID(id int64) *MaterialTestDeleteOne {
	builder := c.Delete().Where(materialtest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MaterialTestDeleteOne{builder}
}

// Query returns a query builder for MaterialTest.
func (c *MaterialTestClient) Query() *MaterialTestQuery {
	return &MaterialTestQuery{config: c.config}
}

// Get returns a MaterialTest entity by its id.
func (c *MaterialTestClient) Get(ctx context.Context, id int64) (*MaterialTest, error) {
	return c.Query().Where(materialtest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MaterialTestClient) GetX(ctx context.Context, id int64) *MaterialTest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MaterialTestClient) Hooks() []Hook {
	return c.hooks.MaterialTest
}

// MedicineClient is a client for the Medicine schema.
type MedicineClient struct {
	config
}

// NewMedicineClient returns a client for the Medicine from the given config.
func NewMedicineClient(c config) *MedicineClient {
	return &MedicineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicine.Hooks(f(g(h())))`.
func (c *MedicineClient) Use(hooks ...Hook) {
	c.hooks.Medicine = append(c.hooks.Medicine, hooks...)
}

// Create returns a create builder for Medicine.
func (c *MedicineClient) Create() *MedicineCreate {
	mutation := newMedicineMutation(c.config, OpCreate)
	return &MedicineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Medicine entities.
func (c *MedicineClient) CreateBulk(builders ...*MedicineCreate) *MedicineCreateBulk {
	return &MedicineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Medicine.
func (c *MedicineClient) Update() *MedicineUpdate {
	mutation := newMedicineMutation(c.config, OpUpdate)
	return &MedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicineClient) UpdateOne(m *Medicine) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicine(m))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicineClient) UpdateOneID(id int64) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicineID(id))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Medicine.
func (c *MedicineClient) Delete() *MedicineDelete {
	mutation := newMedicineMutation(c.config, OpDelete)
	return &MedicineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicineClient) DeleteOne(m *Medicine) *MedicineDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicineClient) DeleteOneID(id int64) *MedicineDeleteOne {
	builder := c.Delete().Where(medicine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicineDeleteOne{builder}
}

// Query returns a query builder for Medicine.
func (c *MedicineClient) Query() *MedicineQuery {
	return &MedicineQuery{config: c.config}
}

// Get returns a Medicine entity by its id.
func (c *MedicineClient) Get(ctx context.Context, id int64) (*Medicine, error) {
	return c.Query().Where(medicine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicineClient) GetX(ctx context.Context, id int64) *Medicine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MedicineClient) Hooks() []Hook {
	return c.hooks.Medicine
}

// OperationClient is a client for the Operation schema.
type OperationClient struct {
	config
}

// NewOperationClient returns a client for the Operation from the given config.
func NewOperationClient(c config) *OperationClient {
	return &OperationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operation.Hooks(f(g(h())))`.
func (c *OperationClient) Use(hooks ...Hook) {
	c.hooks.Operation = append(c.hooks.Operation, hooks...)
}

// Create returns a create builder for Operation.
func (c *OperationClient) Create() *OperationCreate {
	mutation := newOperationMutation(c.config, OpCreate)
	return &OperationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Operation entities.
func (c *OperationClient) CreateBulk(builders ...*OperationCreate) *OperationCreateBulk {
	return &OperationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Operation.
func (c *OperationClient) Update() *OperationUpdate {
	mutation := newOperationMutation(c.config, OpUpdate)
	return &OperationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperationClient) UpdateOne(o *Operation) *OperationUpdateOne {
	mutation := newOperationMutation(c.config, OpUpdateOne, withOperation(o))
	return &OperationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperationClient) UpdateOneID(id int64) *OperationUpdateOne {
	mutation := newOperationMutation(c.config, OpUpdateOne, withOperationID(id))
	return &OperationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Operation.
func (c *OperationClient) Delete() *OperationDelete {
	mutation := newOperationMutation(c.config, OpDelete)
	return &OperationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OperationClient) DeleteOne(o *Operation) *OperationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OperationClient) DeleteOneID(id int64) *OperationDeleteOne {
	builder := c.Delete().Where(operation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperationDeleteOne{builder}
}

// Query returns a query builder for Operation.
func (c *OperationClient) Query() *OperationQuery {
	return &OperationQuery{config: c.config}
}

// Get returns a Operation entity by its id.
func (c *OperationClient) Get(ctx context.Context, id int64) (*Operation, error) {
	return c.Query().Where(operation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperationClient) GetX(ctx context.Context, id int64) *Operation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OperationClient) Hooks() []Hook {
	return c.hooks.Operation
}

// PositionClient is a client for the Position schema.
type PositionClient struct {
	config
}

// NewPositionClient returns a client for the Position from the given config.
func NewPositionClient(c config) *PositionClient {
	return &PositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `position.Hooks(f(g(h())))`.
func (c *PositionClient) Use(hooks ...Hook) {
	c.hooks.Position = append(c.hooks.Position, hooks...)
}

// Create returns a create builder for Position.
func (c *PositionClient) Create() *PositionCreate {
	mutation := newPositionMutation(c.config, OpCreate)
	return &PositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Position entities.
func (c *PositionClient) CreateBulk(builders ...*PositionCreate) *PositionCreateBulk {
	return &PositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Position.
func (c *PositionClient) Update() *PositionUpdate {
	mutation := newPositionMutation(c.config, OpUpdate)
	return &PositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionClient) UpdateOne(po *Position) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPosition(po))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionClient) UpdateOneID(id int64) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPositionID(id))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Position.
func (c *PositionClient) Delete() *PositionDelete {
	mutation := newPositionMutation(c.config, OpDelete)
	return &PositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PositionClient) DeleteOne(po *Position) *PositionDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PositionClient) DeleteOneID(id int64) *PositionDeleteOne {
	builder := c.Delete().Where(position.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionDeleteOne{builder}
}

// Query returns a query builder for Position.
func (c *PositionClient) Query() *PositionQuery {
	return &PositionQuery{config: c.config}
}

// Get returns a Position entity by its id.
func (c *PositionClient) Get(ctx context.Context, id int64) (*Position, error) {
	return c.Query().Where(position.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionClient) GetX(ctx context.Context, id int64) *Position {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PositionClient) Hooks() []Hook {
	return c.hooks.Position
}

// PositionApiClient is a client for the PositionApi schema.
type PositionApiClient struct {
	config
}

// NewPositionApiClient returns a client for the PositionApi from the given config.
func NewPositionApiClient(c config) *PositionApiClient {
	return &PositionApiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `positionapi.Hooks(f(g(h())))`.
func (c *PositionApiClient) Use(hooks ...Hook) {
	c.hooks.PositionApi = append(c.hooks.PositionApi, hooks...)
}

// Create returns a create builder for PositionApi.
func (c *PositionApiClient) Create() *PositionApiCreate {
	mutation := newPositionApiMutation(c.config, OpCreate)
	return &PositionApiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of PositionApi entities.
func (c *PositionApiClient) CreateBulk(builders ...*PositionApiCreate) *PositionApiCreateBulk {
	return &PositionApiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PositionApi.
func (c *PositionApiClient) Update() *PositionApiUpdate {
	mutation := newPositionApiMutation(c.config, OpUpdate)
	return &PositionApiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionApiClient) UpdateOne(pa *PositionApi) *PositionApiUpdateOne {
	mutation := newPositionApiMutation(c.config, OpUpdateOne, withPositionApi(pa))
	return &PositionApiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionApiClient) UpdateOneID(id int64) *PositionApiUpdateOne {
	mutation := newPositionApiMutation(c.config, OpUpdateOne, withPositionApiID(id))
	return &PositionApiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PositionApi.
func (c *PositionApiClient) Delete() *PositionApiDelete {
	mutation := newPositionApiMutation(c.config, OpDelete)
	return &PositionApiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PositionApiClient) DeleteOne(pa *PositionApi) *PositionApiDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PositionApiClient) DeleteOneID(id int64) *PositionApiDeleteOne {
	builder := c.Delete().Where(positionapi.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionApiDeleteOne{builder}
}

// Query returns a query builder for PositionApi.
func (c *PositionApiClient) Query() *PositionApiQuery {
	return &PositionApiQuery{config: c.config}
}

// Get returns a PositionApi entity by its id.
func (c *PositionApiClient) Get(ctx context.Context, id int64) (*PositionApi, error) {
	return c.Query().Where(positionapi.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionApiClient) GetX(ctx context.Context, id int64) *PositionApi {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PositionApiClient) Hooks() []Hook {
	return c.hooks.PositionApi
}

// PregnancyTestClient is a client for the PregnancyTest schema.
type PregnancyTestClient struct {
	config
}

// NewPregnancyTestClient returns a client for the PregnancyTest from the given config.
func NewPregnancyTestClient(c config) *PregnancyTestClient {
	return &PregnancyTestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pregnancytest.Hooks(f(g(h())))`.
func (c *PregnancyTestClient) Use(hooks ...Hook) {
	c.hooks.PregnancyTest = append(c.hooks.PregnancyTest, hooks...)
}

// Create returns a create builder for PregnancyTest.
func (c *PregnancyTestClient) Create() *PregnancyTestCreate {
	mutation := newPregnancyTestMutation(c.config, OpCreate)
	return &PregnancyTestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of PregnancyTest entities.
func (c *PregnancyTestClient) CreateBulk(builders ...*PregnancyTestCreate) *PregnancyTestCreateBulk {
	return &PregnancyTestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PregnancyTest.
func (c *PregnancyTestClient) Update() *PregnancyTestUpdate {
	mutation := newPregnancyTestMutation(c.config, OpUpdate)
	return &PregnancyTestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PregnancyTestClient) UpdateOne(pt *PregnancyTest) *PregnancyTestUpdateOne {
	mutation := newPregnancyTestMutation(c.config, OpUpdateOne, withPregnancyTest(pt))
	return &PregnancyTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PregnancyTestClient) UpdateOneID(id int64) *PregnancyTestUpdateOne {
	mutation := newPregnancyTestMutation(c.config, OpUpdateOne, withPregnancyTestID(id))
	return &PregnancyTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PregnancyTest.
func (c *PregnancyTestClient) Delete() *PregnancyTestDelete {
	mutation := newPregnancyTestMutation(c.config, OpDelete)
	return &PregnancyTestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PregnancyTestClient) DeleteOne(pt *PregnancyTest) *PregnancyTestDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PregnancyTestClient) DeleteOneID(id int64) *PregnancyTestDeleteOne {
	builder := c.Delete().Where(pregnancytest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PregnancyTestDeleteOne{builder}
}

// Query returns a query builder for PregnancyTest.
func (c *PregnancyTestClient) Query() *PregnancyTestQuery {
	return &PregnancyTestQuery{config: c.config}
}

// Get returns a PregnancyTest entity by its id.
func (c *PregnancyTestClient) Get(ctx context.Context, id int64) (*PregnancyTest, error) {
	return c.Query().Where(pregnancytest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PregnancyTestClient) GetX(ctx context.Context, id int64) *PregnancyTest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PregnancyTestClient) Hooks() []Hook {
	return c.hooks.PregnancyTest
}

// PregnancyTestMethodClient is a client for the PregnancyTestMethod schema.
type PregnancyTestMethodClient struct {
	config
}

// NewPregnancyTestMethodClient returns a client for the PregnancyTestMethod from the given config.
func NewPregnancyTestMethodClient(c config) *PregnancyTestMethodClient {
	return &PregnancyTestMethodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pregnancytestmethod.Hooks(f(g(h())))`.
func (c *PregnancyTestMethodClient) Use(hooks ...Hook) {
	c.hooks.PregnancyTestMethod = append(c.hooks.PregnancyTestMethod, hooks...)
}

// Create returns a create builder for PregnancyTestMethod.
func (c *PregnancyTestMethodClient) Create() *PregnancyTestMethodCreate {
	mutation := newPregnancyTestMethodMutation(c.config, OpCreate)
	return &PregnancyTestMethodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of PregnancyTestMethod entities.
func (c *PregnancyTestMethodClient) CreateBulk(builders ...*PregnancyTestMethodCreate) *PregnancyTestMethodCreateBulk {
	return &PregnancyTestMethodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PregnancyTestMethod.
func (c *PregnancyTestMethodClient) Update() *PregnancyTestMethodUpdate {
	mutation := newPregnancyTestMethodMutation(c.config, OpUpdate)
	return &PregnancyTestMethodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PregnancyTestMethodClient) UpdateOne(ptm *PregnancyTestMethod) *PregnancyTestMethodUpdateOne {
	mutation := newPregnancyTestMethodMutation(c.config, OpUpdateOne, withPregnancyTestMethod(ptm))
	return &PregnancyTestMethodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PregnancyTestMethodClient) UpdateOneID(id int64) *PregnancyTestMethodUpdateOne {
	mutation := newPregnancyTestMethodMutation(c.config, OpUpdateOne, withPregnancyTestMethodID(id))
	return &PregnancyTestMethodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PregnancyTestMethod.
func (c *PregnancyTestMethodClient) Delete() *PregnancyTestMethodDelete {
	mutation := newPregnancyTestMethodMutation(c.config, OpDelete)
	return &PregnancyTestMethodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PregnancyTestMethodClient) DeleteOne(ptm *PregnancyTestMethod) *PregnancyTestMethodDeleteOne {
	return c.DeleteOneID(ptm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PregnancyTestMethodClient) DeleteOneID(id int64) *PregnancyTestMethodDeleteOne {
	builder := c.Delete().Where(pregnancytestmethod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PregnancyTestMethodDeleteOne{builder}
}

// Query returns a query builder for PregnancyTestMethod.
func (c *PregnancyTestMethodClient) Query() *PregnancyTestMethodQuery {
	return &PregnancyTestMethodQuery{config: c.config}
}

// Get returns a PregnancyTestMethod entity by its id.
func (c *PregnancyTestMethodClient) Get(ctx context.Context, id int64) (*PregnancyTestMethod, error) {
	return c.Query().Where(pregnancytestmethod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PregnancyTestMethodClient) GetX(ctx context.Context, id int64) *PregnancyTestMethod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PregnancyTestMethodClient) Hooks() []Hook {
	return c.hooks.PregnancyTestMethod
}

// PregnancyTestResultClient is a client for the PregnancyTestResult schema.
type PregnancyTestResultClient struct {
	config
}

// NewPregnancyTestResultClient returns a client for the PregnancyTestResult from the given config.
func NewPregnancyTestResultClient(c config) *PregnancyTestResultClient {
	return &PregnancyTestResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pregnancytestresult.Hooks(f(g(h())))`.
func (c *PregnancyTestResultClient) Use(hooks ...Hook) {
	c.hooks.PregnancyTestResult = append(c.hooks.PregnancyTestResult, hooks...)
}

// Create returns a create builder for PregnancyTestResult.
func (c *PregnancyTestResultClient) Create() *PregnancyTestResultCreate {
	mutation := newPregnancyTestResultMutation(c.config, OpCreate)
	return &PregnancyTestResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of PregnancyTestResult entities.
func (c *PregnancyTestResultClient) CreateBulk(builders ...*PregnancyTestResultCreate) *PregnancyTestResultCreateBulk {
	return &PregnancyTestResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PregnancyTestResult.
func (c *PregnancyTestResultClient) Update() *PregnancyTestResultUpdate {
	mutation := newPregnancyTestResultMutation(c.config, OpUpdate)
	return &PregnancyTestResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PregnancyTestResultClient) UpdateOne(ptr *PregnancyTestResult) *PregnancyTestResultUpdateOne {
	mutation := newPregnancyTestResultMutation(c.config, OpUpdateOne, withPregnancyTestResult(ptr))
	return &PregnancyTestResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PregnancyTestResultClient) UpdateOneID(id int64) *PregnancyTestResultUpdateOne {
	mutation := newPregnancyTestResultMutation(c.config, OpUpdateOne, withPregnancyTestResultID(id))
	return &PregnancyTestResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PregnancyTestResult.
func (c *PregnancyTestResultClient) Delete() *PregnancyTestResultDelete {
	mutation := newPregnancyTestResultMutation(c.config, OpDelete)
	return &PregnancyTestResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PregnancyTestResultClient) DeleteOne(ptr *PregnancyTestResult) *PregnancyTestResultDeleteOne {
	return c.DeleteOneID(ptr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PregnancyTestResultClient) DeleteOneID(id int64) *PregnancyTestResultDeleteOne {
	builder := c.Delete().Where(pregnancytestresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PregnancyTestResultDeleteOne{builder}
}

// Query returns a query builder for PregnancyTestResult.
func (c *PregnancyTestResultClient) Query() *PregnancyTestResultQuery {
	return &PregnancyTestResultQuery{config: c.config}
}

// Get returns a PregnancyTestResult entity by its id.
func (c *PregnancyTestResultClient) Get(ctx context.Context, id int64) (*PregnancyTestResult, error) {
	return c.Query().Where(pregnancytestresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PregnancyTestResultClient) GetX(ctx context.Context, id int64) *PregnancyTestResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PregnancyTestResultClient) Hooks() []Hook {
	return c.hooks.PregnancyTestResult
}

// PregnancyTestTypeClient is a client for the PregnancyTestType schema.
type PregnancyTestTypeClient struct {
	config
}

// NewPregnancyTestTypeClient returns a client for the PregnancyTestType from the given config.
func NewPregnancyTestTypeClient(c config) *PregnancyTestTypeClient {
	return &PregnancyTestTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pregnancytesttype.Hooks(f(g(h())))`.
func (c *PregnancyTestTypeClient) Use(hooks ...Hook) {
	c.hooks.PregnancyTestType = append(c.hooks.PregnancyTestType, hooks...)
}

// Create returns a create builder for PregnancyTestType.
func (c *PregnancyTestTypeClient) Create() *PregnancyTestTypeCreate {
	mutation := newPregnancyTestTypeMutation(c.config, OpCreate)
	return &PregnancyTestTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of PregnancyTestType entities.
func (c *PregnancyTestTypeClient) CreateBulk(builders ...*PregnancyTestTypeCreate) *PregnancyTestTypeCreateBulk {
	return &PregnancyTestTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PregnancyTestType.
func (c *PregnancyTestTypeClient) Update() *PregnancyTestTypeUpdate {
	mutation := newPregnancyTestTypeMutation(c.config, OpUpdate)
	return &PregnancyTestTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PregnancyTestTypeClient) UpdateOne(ptt *PregnancyTestType) *PregnancyTestTypeUpdateOne {
	mutation := newPregnancyTestTypeMutation(c.config, OpUpdateOne, withPregnancyTestType(ptt))
	return &PregnancyTestTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PregnancyTestTypeClient) UpdateOneID(id int64) *PregnancyTestTypeUpdateOne {
	mutation := newPregnancyTestTypeMutation(c.config, OpUpdateOne, withPregnancyTestTypeID(id))
	return &PregnancyTestTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PregnancyTestType.
func (c *PregnancyTestTypeClient) Delete() *PregnancyTestTypeDelete {
	mutation := newPregnancyTestTypeMutation(c.config, OpDelete)
	return &PregnancyTestTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PregnancyTestTypeClient) DeleteOne(ptt *PregnancyTestType) *PregnancyTestTypeDeleteOne {
	return c.DeleteOneID(ptt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PregnancyTestTypeClient) DeleteOneID(id int64) *PregnancyTestTypeDeleteOne {
	builder := c.Delete().Where(pregnancytesttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PregnancyTestTypeDeleteOne{builder}
}

// Query returns a query builder for PregnancyTestType.
func (c *PregnancyTestTypeClient) Query() *PregnancyTestTypeQuery {
	return &PregnancyTestTypeQuery{config: c.config}
}

// Get returns a PregnancyTestType entity by its id.
func (c *PregnancyTestTypeClient) Get(ctx context.Context, id int64) (*PregnancyTestType, error) {
	return c.Query().Where(pregnancytesttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PregnancyTestTypeClient) GetX(ctx context.Context, id int64) *PregnancyTestType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PregnancyTestTypeClient) Hooks() []Hook {
	return c.hooks.PregnancyTestType
}

// RationClient is a client for the Ration schema.
type RationClient struct {
	config
}

// NewRationClient returns a client for the Ration from the given config.
func NewRationClient(c config) *RationClient {
	return &RationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ration.Hooks(f(g(h())))`.
func (c *RationClient) Use(hooks ...Hook) {
	c.hooks.Ration = append(c.hooks.Ration, hooks...)
}

// Create returns a create builder for Ration.
func (c *RationClient) Create() *RationCreate {
	mutation := newRationMutation(c.config, OpCreate)
	return &RationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Ration entities.
func (c *RationClient) CreateBulk(builders ...*RationCreate) *RationCreateBulk {
	return &RationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ration.
func (c *RationClient) Update() *RationUpdate {
	mutation := newRationMutation(c.config, OpUpdate)
	return &RationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RationClient) UpdateOne(r *Ration) *RationUpdateOne {
	mutation := newRationMutation(c.config, OpUpdateOne, withRation(r))
	return &RationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RationClient) UpdateOneID(id int64) *RationUpdateOne {
	mutation := newRationMutation(c.config, OpUpdateOne, withRationID(id))
	return &RationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ration.
func (c *RationClient) Delete() *RationDelete {
	mutation := newRationMutation(c.config, OpDelete)
	return &RationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RationClient) DeleteOne(r *Ration) *RationDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RationClient) DeleteOneID(id int64) *RationDeleteOne {
	builder := c.Delete().Where(ration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RationDeleteOne{builder}
}

// Query returns a query builder for Ration.
func (c *RationClient) Query() *RationQuery {
	return &RationQuery{config: c.config}
}

// Get returns a Ration entity by its id.
func (c *RationClient) Get(ctx context.Context, id int64) (*Ration, error) {
	return c.Query().Where(ration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RationClient) GetX(ctx context.Context, id int64) *Ration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RationClient) Hooks() []Hook {
	return c.hooks.Ration
}

// RationFormulaClient is a client for the RationFormula schema.
type RationFormulaClient struct {
	config
}

// NewRationFormulaClient returns a client for the RationFormula from the given config.
func NewRationFormulaClient(c config) *RationFormulaClient {
	return &RationFormulaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rationformula.Hooks(f(g(h())))`.
func (c *RationFormulaClient) Use(hooks ...Hook) {
	c.hooks.RationFormula = append(c.hooks.RationFormula, hooks...)
}

// Create returns a create builder for RationFormula.
func (c *RationFormulaClient) Create() *RationFormulaCreate {
	mutation := newRationFormulaMutation(c.config, OpCreate)
	return &RationFormulaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of RationFormula entities.
func (c *RationFormulaClient) CreateBulk(builders ...*RationFormulaCreate) *RationFormulaCreateBulk {
	return &RationFormulaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RationFormula.
func (c *RationFormulaClient) Update() *RationFormulaUpdate {
	mutation := newRationFormulaMutation(c.config, OpUpdate)
	return &RationFormulaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RationFormulaClient) UpdateOne(rf *RationFormula) *RationFormulaUpdateOne {
	mutation := newRationFormulaMutation(c.config, OpUpdateOne, withRationFormula(rf))
	return &RationFormulaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RationFormulaClient) UpdateOneID(id int64) *RationFormulaUpdateOne {
	mutation := newRationFormulaMutation(c.config, OpUpdateOne, withRationFormulaID(id))
	return &RationFormulaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RationFormula.
func (c *RationFormulaClient) Delete() *RationFormulaDelete {
	mutation := newRationFormulaMutation(c.config, OpDelete)
	return &RationFormulaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RationFormulaClient) DeleteOne(rf *RationFormula) *RationFormulaDeleteOne {
	return c.DeleteOneID(rf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RationFormulaClient) DeleteOneID(id int64) *RationFormulaDeleteOne {
	builder := c.Delete().Where(rationformula.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RationFormulaDeleteOne{builder}
}

// Query returns a query builder for RationFormula.
func (c *RationFormulaClient) Query() *RationFormulaQuery {
	return &RationFormulaQuery{config: c.config}
}

// Get returns a RationFormula entity by its id.
func (c *RationFormulaClient) Get(ctx context.Context, id int64) (*RationFormula, error) {
	return c.Query().Where(rationformula.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RationFormulaClient) GetX(ctx context.Context, id int64) *RationFormula {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RationFormulaClient) Hooks() []Hook {
	return c.hooks.RationFormula
}

// RationProcessClient is a client for the RationProcess schema.
type RationProcessClient struct {
	config
}

// NewRationProcessClient returns a client for the RationProcess from the given config.
func NewRationProcessClient(c config) *RationProcessClient {
	return &RationProcessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rationprocess.Hooks(f(g(h())))`.
func (c *RationProcessClient) Use(hooks ...Hook) {
	c.hooks.RationProcess = append(c.hooks.RationProcess, hooks...)
}

// Create returns a create builder for RationProcess.
func (c *RationProcessClient) Create() *RationProcessCreate {
	mutation := newRationProcessMutation(c.config, OpCreate)
	return &RationProcessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of RationProcess entities.
func (c *RationProcessClient) CreateBulk(builders ...*RationProcessCreate) *RationProcessCreateBulk {
	return &RationProcessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RationProcess.
func (c *RationProcessClient) Update() *RationProcessUpdate {
	mutation := newRationProcessMutation(c.config, OpUpdate)
	return &RationProcessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RationProcessClient) UpdateOne(rp *RationProcess) *RationProcessUpdateOne {
	mutation := newRationProcessMutation(c.config, OpUpdateOne, withRationProcess(rp))
	return &RationProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RationProcessClient) UpdateOneID(id int64) *RationProcessUpdateOne {
	mutation := newRationProcessMutation(c.config, OpUpdateOne, withRationProcessID(id))
	return &RationProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RationProcess.
func (c *RationProcessClient) Delete() *RationProcessDelete {
	mutation := newRationProcessMutation(c.config, OpDelete)
	return &RationProcessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RationProcessClient) DeleteOne(rp *RationProcess) *RationProcessDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RationProcessClient) DeleteOneID(id int64) *RationProcessDeleteOne {
	builder := c.Delete().Where(rationprocess.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RationProcessDeleteOne{builder}
}

// Query returns a query builder for RationProcess.
func (c *RationProcessClient) Query() *RationProcessQuery {
	return &RationProcessQuery{config: c.config}
}

// Get returns a RationProcess entity by its id.
func (c *RationProcessClient) Get(ctx context.Context, id int64) (*RationProcess, error) {
	return c.Query().Where(rationprocess.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RationProcessClient) GetX(ctx context.Context, id int64) *RationProcess {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RationProcessClient) Hooks() []Hook {
	return c.hooks.RationProcess
}

// ReproductionParametersClient is a client for the ReproductionParameters schema.
type ReproductionParametersClient struct {
	config
}

// NewReproductionParametersClient returns a client for the ReproductionParameters from the given config.
func NewReproductionParametersClient(c config) *ReproductionParametersClient {
	return &ReproductionParametersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reproductionparameters.Hooks(f(g(h())))`.
func (c *ReproductionParametersClient) Use(hooks ...Hook) {
	c.hooks.ReproductionParameters = append(c.hooks.ReproductionParameters, hooks...)
}

// Create returns a create builder for ReproductionParameters.
func (c *ReproductionParametersClient) Create() *ReproductionParametersCreate {
	mutation := newReproductionParametersMutation(c.config, OpCreate)
	return &ReproductionParametersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ReproductionParameters entities.
func (c *ReproductionParametersClient) CreateBulk(builders ...*ReproductionParametersCreate) *ReproductionParametersCreateBulk {
	return &ReproductionParametersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReproductionParameters.
func (c *ReproductionParametersClient) Update() *ReproductionParametersUpdate {
	mutation := newReproductionParametersMutation(c.config, OpUpdate)
	return &ReproductionParametersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReproductionParametersClient) UpdateOne(rp *ReproductionParameters) *ReproductionParametersUpdateOne {
	mutation := newReproductionParametersMutation(c.config, OpUpdateOne, withReproductionParameters(rp))
	return &ReproductionParametersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReproductionParametersClient) UpdateOneID(id int64) *ReproductionParametersUpdateOne {
	mutation := newReproductionParametersMutation(c.config, OpUpdateOne, withReproductionParametersID(id))
	return &ReproductionParametersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReproductionParameters.
func (c *ReproductionParametersClient) Delete() *ReproductionParametersDelete {
	mutation := newReproductionParametersMutation(c.config, OpDelete)
	return &ReproductionParametersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReproductionParametersClient) DeleteOne(rp *ReproductionParameters) *ReproductionParametersDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReproductionParametersClient) DeleteOneID(id int64) *ReproductionParametersDeleteOne {
	builder := c.Delete().Where(reproductionparameters.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReproductionParametersDeleteOne{builder}
}

// Query returns a query builder for ReproductionParameters.
func (c *ReproductionParametersClient) Query() *ReproductionParametersQuery {
	return &ReproductionParametersQuery{config: c.config}
}

// Get returns a ReproductionParameters entity by its id.
func (c *ReproductionParametersClient) Get(ctx context.Context, id int64) (*ReproductionParameters, error) {
	return c.Query().Where(reproductionparameters.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReproductionParametersClient) GetX(ctx context.Context, id int64) *ReproductionParameters {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReproductionParametersClient) Hooks() []Hook {
	return c.hooks.ReproductionParameters
}

// ReproductiveStateClient is a client for the ReproductiveState schema.
type ReproductiveStateClient struct {
	config
}

// NewReproductiveStateClient returns a client for the ReproductiveState from the given config.
func NewReproductiveStateClient(c config) *ReproductiveStateClient {
	return &ReproductiveStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reproductivestate.Hooks(f(g(h())))`.
func (c *ReproductiveStateClient) Use(hooks ...Hook) {
	c.hooks.ReproductiveState = append(c.hooks.ReproductiveState, hooks...)
}

// Create returns a create builder for ReproductiveState.
func (c *ReproductiveStateClient) Create() *ReproductiveStateCreate {
	mutation := newReproductiveStateMutation(c.config, OpCreate)
	return &ReproductiveStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ReproductiveState entities.
func (c *ReproductiveStateClient) CreateBulk(builders ...*ReproductiveStateCreate) *ReproductiveStateCreateBulk {
	return &ReproductiveStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReproductiveState.
func (c *ReproductiveStateClient) Update() *ReproductiveStateUpdate {
	mutation := newReproductiveStateMutation(c.config, OpUpdate)
	return &ReproductiveStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReproductiveStateClient) UpdateOne(rs *ReproductiveState) *ReproductiveStateUpdateOne {
	mutation := newReproductiveStateMutation(c.config, OpUpdateOne, withReproductiveState(rs))
	return &ReproductiveStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReproductiveStateClient) UpdateOneID(id int64) *ReproductiveStateUpdateOne {
	mutation := newReproductiveStateMutation(c.config, OpUpdateOne, withReproductiveStateID(id))
	return &ReproductiveStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReproductiveState.
func (c *ReproductiveStateClient) Delete() *ReproductiveStateDelete {
	mutation := newReproductiveStateMutation(c.config, OpDelete)
	return &ReproductiveStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReproductiveStateClient) DeleteOne(rs *ReproductiveState) *ReproductiveStateDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReproductiveStateClient) DeleteOneID(id int64) *ReproductiveStateDeleteOne {
	builder := c.Delete().Where(reproductivestate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReproductiveStateDeleteOne{builder}
}

// Query returns a query builder for ReproductiveState.
func (c *ReproductiveStateClient) Query() *ReproductiveStateQuery {
	return &ReproductiveStateQuery{config: c.config}
}

// Get returns a ReproductiveState entity by its id.
func (c *ReproductiveStateClient) Get(ctx context.Context, id int64) (*ReproductiveState, error) {
	return c.Query().Where(reproductivestate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReproductiveStateClient) GetX(ctx context.Context, id int64) *ReproductiveState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReproductiveStateClient) Hooks() []Hook {
	return c.hooks.ReproductiveState
}

// SemenFrozenTypeClient is a client for the SemenFrozenType schema.
type SemenFrozenTypeClient struct {
	config
}

// NewSemenFrozenTypeClient returns a client for the SemenFrozenType from the given config.
func NewSemenFrozenTypeClient(c config) *SemenFrozenTypeClient {
	return &SemenFrozenTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `semenfrozentype.Hooks(f(g(h())))`.
func (c *SemenFrozenTypeClient) Use(hooks ...Hook) {
	c.hooks.SemenFrozenType = append(c.hooks.SemenFrozenType, hooks...)
}

// Create returns a create builder for SemenFrozenType.
func (c *SemenFrozenTypeClient) Create() *SemenFrozenTypeCreate {
	mutation := newSemenFrozenTypeMutation(c.config, OpCreate)
	return &SemenFrozenTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of SemenFrozenType entities.
func (c *SemenFrozenTypeClient) CreateBulk(builders ...*SemenFrozenTypeCreate) *SemenFrozenTypeCreateBulk {
	return &SemenFrozenTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SemenFrozenType.
func (c *SemenFrozenTypeClient) Update() *SemenFrozenTypeUpdate {
	mutation := newSemenFrozenTypeMutation(c.config, OpUpdate)
	return &SemenFrozenTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SemenFrozenTypeClient) UpdateOne(sft *SemenFrozenType) *SemenFrozenTypeUpdateOne {
	mutation := newSemenFrozenTypeMutation(c.config, OpUpdateOne, withSemenFrozenType(sft))
	return &SemenFrozenTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SemenFrozenTypeClient) UpdateOneID(id int64) *SemenFrozenTypeUpdateOne {
	mutation := newSemenFrozenTypeMutation(c.config, OpUpdateOne, withSemenFrozenTypeID(id))
	return &SemenFrozenTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SemenFrozenType.
func (c *SemenFrozenTypeClient) Delete() *SemenFrozenTypeDelete {
	mutation := newSemenFrozenTypeMutation(c.config, OpDelete)
	return &SemenFrozenTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SemenFrozenTypeClient) DeleteOne(sft *SemenFrozenType) *SemenFrozenTypeDeleteOne {
	return c.DeleteOneID(sft.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SemenFrozenTypeClient) DeleteOneID(id int64) *SemenFrozenTypeDeleteOne {
	builder := c.Delete().Where(semenfrozentype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SemenFrozenTypeDeleteOne{builder}
}

// Query returns a query builder for SemenFrozenType.
func (c *SemenFrozenTypeClient) Query() *SemenFrozenTypeQuery {
	return &SemenFrozenTypeQuery{config: c.config}
}

// Get returns a SemenFrozenType entity by its id.
func (c *SemenFrozenTypeClient) Get(ctx context.Context, id int64) (*SemenFrozenType, error) {
	return c.Query().Where(semenfrozentype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SemenFrozenTypeClient) GetX(ctx context.Context, id int64) *SemenFrozenType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SemenFrozenTypeClient) Hooks() []Hook {
	return c.hooks.SemenFrozenType
}

// ShedClient is a client for the Shed schema.
type ShedClient struct {
	config
}

// NewShedClient returns a client for the Shed from the given config.
func NewShedClient(c config) *ShedClient {
	return &ShedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shed.Hooks(f(g(h())))`.
func (c *ShedClient) Use(hooks ...Hook) {
	c.hooks.Shed = append(c.hooks.Shed, hooks...)
}

// Create returns a create builder for Shed.
func (c *ShedClient) Create() *ShedCreate {
	mutation := newShedMutation(c.config, OpCreate)
	return &ShedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Shed entities.
func (c *ShedClient) CreateBulk(builders ...*ShedCreate) *ShedCreateBulk {
	return &ShedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Shed.
func (c *ShedClient) Update() *ShedUpdate {
	mutation := newShedMutation(c.config, OpUpdate)
	return &ShedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShedClient) UpdateOne(s *Shed) *ShedUpdateOne {
	mutation := newShedMutation(c.config, OpUpdateOne, withShed(s))
	return &ShedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShedClient) UpdateOneID(id int64) *ShedUpdateOne {
	mutation := newShedMutation(c.config, OpUpdateOne, withShedID(id))
	return &ShedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shed.
func (c *ShedClient) Delete() *ShedDelete {
	mutation := newShedMutation(c.config, OpDelete)
	return &ShedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShedClient) DeleteOne(s *Shed) *ShedDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShedClient) DeleteOneID(id int64) *ShedDeleteOne {
	builder := c.Delete().Where(shed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShedDeleteOne{builder}
}

// Query returns a query builder for Shed.
func (c *ShedClient) Query() *ShedQuery {
	return &ShedQuery{config: c.config}
}

// Get returns a Shed entity by its id.
func (c *ShedClient) Get(ctx context.Context, id int64) (*Shed, error) {
	return c.Query().Where(shed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShedClient) GetX(ctx context.Context, id int64) *Shed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShedClient) Hooks() []Hook {
	return c.hooks.Shed
}

// ShedCategoryClient is a client for the ShedCategory schema.
type ShedCategoryClient struct {
	config
}

// NewShedCategoryClient returns a client for the ShedCategory from the given config.
func NewShedCategoryClient(c config) *ShedCategoryClient {
	return &ShedCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shedcategory.Hooks(f(g(h())))`.
func (c *ShedCategoryClient) Use(hooks ...Hook) {
	c.hooks.ShedCategory = append(c.hooks.ShedCategory, hooks...)
}

// Create returns a create builder for ShedCategory.
func (c *ShedCategoryClient) Create() *ShedCategoryCreate {
	mutation := newShedCategoryMutation(c.config, OpCreate)
	return &ShedCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ShedCategory entities.
func (c *ShedCategoryClient) CreateBulk(builders ...*ShedCategoryCreate) *ShedCategoryCreateBulk {
	return &ShedCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShedCategory.
func (c *ShedCategoryClient) Update() *ShedCategoryUpdate {
	mutation := newShedCategoryMutation(c.config, OpUpdate)
	return &ShedCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShedCategoryClient) UpdateOne(sc *ShedCategory) *ShedCategoryUpdateOne {
	mutation := newShedCategoryMutation(c.config, OpUpdateOne, withShedCategory(sc))
	return &ShedCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShedCategoryClient) UpdateOneID(id int64) *ShedCategoryUpdateOne {
	mutation := newShedCategoryMutation(c.config, OpUpdateOne, withShedCategoryID(id))
	return &ShedCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShedCategory.
func (c *ShedCategoryClient) Delete() *ShedCategoryDelete {
	mutation := newShedCategoryMutation(c.config, OpDelete)
	return &ShedCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShedCategoryClient) DeleteOne(sc *ShedCategory) *ShedCategoryDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShedCategoryClient) DeleteOneID(id int64) *ShedCategoryDeleteOne {
	builder := c.Delete().Where(shedcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShedCategoryDeleteOne{builder}
}

// Query returns a query builder for ShedCategory.
func (c *ShedCategoryClient) Query() *ShedCategoryQuery {
	return &ShedCategoryQuery{config: c.config}
}

// Get returns a ShedCategory entity by its id.
func (c *ShedCategoryClient) Get(ctx context.Context, id int64) (*ShedCategory, error) {
	return c.Query().Where(shedcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShedCategoryClient) GetX(ctx context.Context, id int64) *ShedCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShedCategoryClient) Hooks() []Hook {
	return c.hooks.ShedCategory
}

// ShedSettingClient is a client for the ShedSetting schema.
type ShedSettingClient struct {
	config
}

// NewShedSettingClient returns a client for the ShedSetting from the given config.
func NewShedSettingClient(c config) *ShedSettingClient {
	return &ShedSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shedsetting.Hooks(f(g(h())))`.
func (c *ShedSettingClient) Use(hooks ...Hook) {
	c.hooks.ShedSetting = append(c.hooks.ShedSetting, hooks...)
}

// Create returns a create builder for ShedSetting.
func (c *ShedSettingClient) Create() *ShedSettingCreate {
	mutation := newShedSettingMutation(c.config, OpCreate)
	return &ShedSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ShedSetting entities.
func (c *ShedSettingClient) CreateBulk(builders ...*ShedSettingCreate) *ShedSettingCreateBulk {
	return &ShedSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShedSetting.
func (c *ShedSettingClient) Update() *ShedSettingUpdate {
	mutation := newShedSettingMutation(c.config, OpUpdate)
	return &ShedSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShedSettingClient) UpdateOne(ss *ShedSetting) *ShedSettingUpdateOne {
	mutation := newShedSettingMutation(c.config, OpUpdateOne, withShedSetting(ss))
	return &ShedSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShedSettingClient) UpdateOneID(id int64) *ShedSettingUpdateOne {
	mutation := newShedSettingMutation(c.config, OpUpdateOne, withShedSettingID(id))
	return &ShedSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShedSetting.
func (c *ShedSettingClient) Delete() *ShedSettingDelete {
	mutation := newShedSettingMutation(c.config, OpDelete)
	return &ShedSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShedSettingClient) DeleteOne(ss *ShedSetting) *ShedSettingDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShedSettingClient) DeleteOneID(id int64) *ShedSettingDeleteOne {
	builder := c.Delete().Where(shedsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShedSettingDeleteOne{builder}
}

// Query returns a query builder for ShedSetting.
func (c *ShedSettingClient) Query() *ShedSettingQuery {
	return &ShedSettingQuery{config: c.config}
}

// Get returns a ShedSetting entity by its id.
func (c *ShedSettingClient) Get(ctx context.Context, id int64) (*ShedSetting, error) {
	return c.Query().Where(shedsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShedSettingClient) GetX(ctx context.Context, id int64) *ShedSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShedSettingClient) Hooks() []Hook {
	return c.hooks.ShedSetting
}

// ShedTransClient is a client for the ShedTrans schema.
type ShedTransClient struct {
	config
}

// NewShedTransClient returns a client for the ShedTrans from the given config.
func NewShedTransClient(c config) *ShedTransClient {
	return &ShedTransClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shedtrans.Hooks(f(g(h())))`.
func (c *ShedTransClient) Use(hooks ...Hook) {
	c.hooks.ShedTrans = append(c.hooks.ShedTrans, hooks...)
}

// Create returns a create builder for ShedTrans.
func (c *ShedTransClient) Create() *ShedTransCreate {
	mutation := newShedTransMutation(c.config, OpCreate)
	return &ShedTransCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ShedTrans entities.
func (c *ShedTransClient) CreateBulk(builders ...*ShedTransCreate) *ShedTransCreateBulk {
	return &ShedTransCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShedTrans.
func (c *ShedTransClient) Update() *ShedTransUpdate {
	mutation := newShedTransMutation(c.config, OpUpdate)
	return &ShedTransUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShedTransClient) UpdateOne(st *ShedTrans) *ShedTransUpdateOne {
	mutation := newShedTransMutation(c.config, OpUpdateOne, withShedTrans(st))
	return &ShedTransUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShedTransClient) UpdateOneID(id int64) *ShedTransUpdateOne {
	mutation := newShedTransMutation(c.config, OpUpdateOne, withShedTransID(id))
	return &ShedTransUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShedTrans.
func (c *ShedTransClient) Delete() *ShedTransDelete {
	mutation := newShedTransMutation(c.config, OpDelete)
	return &ShedTransDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShedTransClient) DeleteOne(st *ShedTrans) *ShedTransDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShedTransClient) DeleteOneID(id int64) *ShedTransDeleteOne {
	builder := c.Delete().Where(shedtrans.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShedTransDeleteOne{builder}
}

// Query returns a query builder for ShedTrans.
func (c *ShedTransClient) Query() *ShedTransQuery {
	return &ShedTransQuery{config: c.config}
}

// Get returns a ShedTrans entity by its id.
func (c *ShedTransClient) Get(ctx context.Context, id int64) (*ShedTrans, error) {
	return c.Query().Where(shedtrans.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShedTransClient) GetX(ctx context.Context, id int64) *ShedTrans {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShedTransClient) Hooks() []Hook {
	return c.hooks.ShedTrans
}

// ShedTypeClient is a client for the ShedType schema.
type ShedTypeClient struct {
	config
}

// NewShedTypeClient returns a client for the ShedType from the given config.
func NewShedTypeClient(c config) *ShedTypeClient {
	return &ShedTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shedtype.Hooks(f(g(h())))`.
func (c *ShedTypeClient) Use(hooks ...Hook) {
	c.hooks.ShedType = append(c.hooks.ShedType, hooks...)
}

// Create returns a create builder for ShedType.
func (c *ShedTypeClient) Create() *ShedTypeCreate {
	mutation := newShedTypeMutation(c.config, OpCreate)
	return &ShedTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ShedType entities.
func (c *ShedTypeClient) CreateBulk(builders ...*ShedTypeCreate) *ShedTypeCreateBulk {
	return &ShedTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShedType.
func (c *ShedTypeClient) Update() *ShedTypeUpdate {
	mutation := newShedTypeMutation(c.config, OpUpdate)
	return &ShedTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShedTypeClient) UpdateOne(st *ShedType) *ShedTypeUpdateOne {
	mutation := newShedTypeMutation(c.config, OpUpdateOne, withShedType(st))
	return &ShedTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShedTypeClient) UpdateOneID(id int64) *ShedTypeUpdateOne {
	mutation := newShedTypeMutation(c.config, OpUpdateOne, withShedTypeID(id))
	return &ShedTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShedType.
func (c *ShedTypeClient) Delete() *ShedTypeDelete {
	mutation := newShedTypeMutation(c.config, OpDelete)
	return &ShedTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShedTypeClient) DeleteOne(st *ShedType) *ShedTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShedTypeClient) DeleteOneID(id int64) *ShedTypeDeleteOne {
	builder := c.Delete().Where(shedtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShedTypeDeleteOne{builder}
}

// Query returns a query builder for ShedType.
func (c *ShedTypeClient) Query() *ShedTypeQuery {
	return &ShedTypeQuery{config: c.config}
}

// Get returns a ShedType entity by its id.
func (c *ShedTypeClient) Get(ctx context.Context, id int64) (*ShedType, error) {
	return c.Query().Where(shedtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShedTypeClient) GetX(ctx context.Context, id int64) *ShedType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShedTypeClient) Hooks() []Hook {
	return c.hooks.ShedType
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Create returns a create builder for Tenant.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id int64) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TenantClient) DeleteOneID(id int64) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{config: c.config}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id int64) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id int64) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// TreatmentResultClient is a client for the TreatmentResult schema.
type TreatmentResultClient struct {
	config
}

// NewTreatmentResultClient returns a client for the TreatmentResult from the given config.
func NewTreatmentResultClient(c config) *TreatmentResultClient {
	return &TreatmentResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `treatmentresult.Hooks(f(g(h())))`.
func (c *TreatmentResultClient) Use(hooks ...Hook) {
	c.hooks.TreatmentResult = append(c.hooks.TreatmentResult, hooks...)
}

// Create returns a create builder for TreatmentResult.
func (c *TreatmentResultClient) Create() *TreatmentResultCreate {
	mutation := newTreatmentResultMutation(c.config, OpCreate)
	return &TreatmentResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of TreatmentResult entities.
func (c *TreatmentResultClient) CreateBulk(builders ...*TreatmentResultCreate) *TreatmentResultCreateBulk {
	return &TreatmentResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TreatmentResult.
func (c *TreatmentResultClient) Update() *TreatmentResultUpdate {
	mutation := newTreatmentResultMutation(c.config, OpUpdate)
	return &TreatmentResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TreatmentResultClient) UpdateOne(tr *TreatmentResult) *TreatmentResultUpdateOne {
	mutation := newTreatmentResultMutation(c.config, OpUpdateOne, withTreatmentResult(tr))
	return &TreatmentResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TreatmentResultClient) UpdateOneID(id int64) *TreatmentResultUpdateOne {
	mutation := newTreatmentResultMutation(c.config, OpUpdateOne, withTreatmentResultID(id))
	return &TreatmentResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TreatmentResult.
func (c *TreatmentResultClient) Delete() *TreatmentResultDelete {
	mutation := newTreatmentResultMutation(c.config, OpDelete)
	return &TreatmentResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TreatmentResultClient) DeleteOne(tr *TreatmentResult) *TreatmentResultDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TreatmentResultClient) DeleteOneID(id int64) *TreatmentResultDeleteOne {
	builder := c.Delete().Where(treatmentresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TreatmentResultDeleteOne{builder}
}

// Query returns a query builder for TreatmentResult.
func (c *TreatmentResultClient) Query() *TreatmentResultQuery {
	return &TreatmentResultQuery{config: c.config}
}

// Get returns a TreatmentResult entity by its id.
func (c *TreatmentResultClient) Get(ctx context.Context, id int64) (*TreatmentResult, error) {
	return c.Query().Where(treatmentresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TreatmentResultClient) GetX(ctx context.Context, id int64) *TreatmentResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TreatmentResultClient) Hooks() []Hook {
	return c.hooks.TreatmentResult
}

// TreatmentStateClient is a client for the TreatmentState schema.
type TreatmentStateClient struct {
	config
}

// NewTreatmentStateClient returns a client for the TreatmentState from the given config.
func NewTreatmentStateClient(c config) *TreatmentStateClient {
	return &TreatmentStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `treatmentstate.Hooks(f(g(h())))`.
func (c *TreatmentStateClient) Use(hooks ...Hook) {
	c.hooks.TreatmentState = append(c.hooks.TreatmentState, hooks...)
}

// Create returns a create builder for TreatmentState.
func (c *TreatmentStateClient) Create() *TreatmentStateCreate {
	mutation := newTreatmentStateMutation(c.config, OpCreate)
	return &TreatmentStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of TreatmentState entities.
func (c *TreatmentStateClient) CreateBulk(builders ...*TreatmentStateCreate) *TreatmentStateCreateBulk {
	return &TreatmentStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TreatmentState.
func (c *TreatmentStateClient) Update() *TreatmentStateUpdate {
	mutation := newTreatmentStateMutation(c.config, OpUpdate)
	return &TreatmentStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TreatmentStateClient) UpdateOne(ts *TreatmentState) *TreatmentStateUpdateOne {
	mutation := newTreatmentStateMutation(c.config, OpUpdateOne, withTreatmentState(ts))
	return &TreatmentStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TreatmentStateClient) UpdateOneID(id int64) *TreatmentStateUpdateOne {
	mutation := newTreatmentStateMutation(c.config, OpUpdateOne, withTreatmentStateID(id))
	return &TreatmentStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TreatmentState.
func (c *TreatmentStateClient) Delete() *TreatmentStateDelete {
	mutation := newTreatmentStateMutation(c.config, OpDelete)
	return &TreatmentStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TreatmentStateClient) DeleteOne(ts *TreatmentState) *TreatmentStateDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TreatmentStateClient) DeleteOneID(id int64) *TreatmentStateDeleteOne {
	builder := c.Delete().Where(treatmentstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TreatmentStateDeleteOne{builder}
}

// Query returns a query builder for TreatmentState.
func (c *TreatmentStateClient) Query() *TreatmentStateQuery {
	return &TreatmentStateQuery{config: c.config}
}

// Get returns a TreatmentState entity by its id.
func (c *TreatmentStateClient) Get(ctx context.Context, id int64) (*TreatmentState, error) {
	return c.Query().Where(treatmentstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TreatmentStateClient) GetX(ctx context.Context, id int64) *TreatmentState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TreatmentStateClient) Hooks() []Hook {
	return c.hooks.TreatmentState
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// VeterinaryDrugsInfoClient is a client for the VeterinaryDrugsInfo schema.
type VeterinaryDrugsInfoClient struct {
	config
}

// NewVeterinaryDrugsInfoClient returns a client for the VeterinaryDrugsInfo from the given config.
func NewVeterinaryDrugsInfoClient(c config) *VeterinaryDrugsInfoClient {
	return &VeterinaryDrugsInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `veterinarydrugsinfo.Hooks(f(g(h())))`.
func (c *VeterinaryDrugsInfoClient) Use(hooks ...Hook) {
	c.hooks.VeterinaryDrugsInfo = append(c.hooks.VeterinaryDrugsInfo, hooks...)
}

// Create returns a create builder for VeterinaryDrugsInfo.
func (c *VeterinaryDrugsInfoClient) Create() *VeterinaryDrugsInfoCreate {
	mutation := newVeterinaryDrugsInfoMutation(c.config, OpCreate)
	return &VeterinaryDrugsInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of VeterinaryDrugsInfo entities.
func (c *VeterinaryDrugsInfoClient) CreateBulk(builders ...*VeterinaryDrugsInfoCreate) *VeterinaryDrugsInfoCreateBulk {
	return &VeterinaryDrugsInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VeterinaryDrugsInfo.
func (c *VeterinaryDrugsInfoClient) Update() *VeterinaryDrugsInfoUpdate {
	mutation := newVeterinaryDrugsInfoMutation(c.config, OpUpdate)
	return &VeterinaryDrugsInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VeterinaryDrugsInfoClient) UpdateOne(vdi *VeterinaryDrugsInfo) *VeterinaryDrugsInfoUpdateOne {
	mutation := newVeterinaryDrugsInfoMutation(c.config, OpUpdateOne, withVeterinaryDrugsInfo(vdi))
	return &VeterinaryDrugsInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VeterinaryDrugsInfoClient) UpdateOneID(id int64) *VeterinaryDrugsInfoUpdateOne {
	mutation := newVeterinaryDrugsInfoMutation(c.config, OpUpdateOne, withVeterinaryDrugsInfoID(id))
	return &VeterinaryDrugsInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VeterinaryDrugsInfo.
func (c *VeterinaryDrugsInfoClient) Delete() *VeterinaryDrugsInfoDelete {
	mutation := newVeterinaryDrugsInfoMutation(c.config, OpDelete)
	return &VeterinaryDrugsInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VeterinaryDrugsInfoClient) DeleteOne(vdi *VeterinaryDrugsInfo) *VeterinaryDrugsInfoDeleteOne {
	return c.DeleteOneID(vdi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VeterinaryDrugsInfoClient) DeleteOneID(id int64) *VeterinaryDrugsInfoDeleteOne {
	builder := c.Delete().Where(veterinarydrugsinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VeterinaryDrugsInfoDeleteOne{builder}
}

// Query returns a query builder for VeterinaryDrugsInfo.
func (c *VeterinaryDrugsInfoClient) Query() *VeterinaryDrugsInfoQuery {
	return &VeterinaryDrugsInfoQuery{config: c.config}
}

// Get returns a VeterinaryDrugsInfo entity by its id.
func (c *VeterinaryDrugsInfoClient) Get(ctx context.Context, id int64) (*VeterinaryDrugsInfo, error) {
	return c.Query().Where(veterinarydrugsinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VeterinaryDrugsInfoClient) GetX(ctx context.Context, id int64) *VeterinaryDrugsInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VeterinaryDrugsInfoClient) Hooks() []Hook {
	return c.hooks.VeterinaryDrugsInfo
}

// WarehouseSettingClient is a client for the WarehouseSetting schema.
type WarehouseSettingClient struct {
	config
}

// NewWarehouseSettingClient returns a client for the WarehouseSetting from the given config.
func NewWarehouseSettingClient(c config) *WarehouseSettingClient {
	return &WarehouseSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `warehousesetting.Hooks(f(g(h())))`.
func (c *WarehouseSettingClient) Use(hooks ...Hook) {
	c.hooks.WarehouseSetting = append(c.hooks.WarehouseSetting, hooks...)
}

// Create returns a create builder for WarehouseSetting.
func (c *WarehouseSettingClient) Create() *WarehouseSettingCreate {
	mutation := newWarehouseSettingMutation(c.config, OpCreate)
	return &WarehouseSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of WarehouseSetting entities.
func (c *WarehouseSettingClient) CreateBulk(builders ...*WarehouseSettingCreate) *WarehouseSettingCreateBulk {
	return &WarehouseSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WarehouseSetting.
func (c *WarehouseSettingClient) Update() *WarehouseSettingUpdate {
	mutation := newWarehouseSettingMutation(c.config, OpUpdate)
	return &WarehouseSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WarehouseSettingClient) UpdateOne(ws *WarehouseSetting) *WarehouseSettingUpdateOne {
	mutation := newWarehouseSettingMutation(c.config, OpUpdateOne, withWarehouseSetting(ws))
	return &WarehouseSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WarehouseSettingClient) UpdateOneID(id int64) *WarehouseSettingUpdateOne {
	mutation := newWarehouseSettingMutation(c.config, OpUpdateOne, withWarehouseSettingID(id))
	return &WarehouseSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WarehouseSetting.
func (c *WarehouseSettingClient) Delete() *WarehouseSettingDelete {
	mutation := newWarehouseSettingMutation(c.config, OpDelete)
	return &WarehouseSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WarehouseSettingClient) DeleteOne(ws *WarehouseSetting) *WarehouseSettingDeleteOne {
	return c.DeleteOneID(ws.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WarehouseSettingClient) DeleteOneID(id int64) *WarehouseSettingDeleteOne {
	builder := c.Delete().Where(warehousesetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WarehouseSettingDeleteOne{builder}
}

// Query returns a query builder for WarehouseSetting.
func (c *WarehouseSettingClient) Query() *WarehouseSettingQuery {
	return &WarehouseSettingQuery{config: c.config}
}

// Get returns a WarehouseSetting entity by its id.
func (c *WarehouseSettingClient) Get(ctx context.Context, id int64) (*WarehouseSetting, error) {
	return c.Query().Where(warehousesetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WarehouseSettingClient) GetX(ctx context.Context, id int64) *WarehouseSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WarehouseSettingClient) Hooks() []Hook {
	return c.hooks.WarehouseSetting
}

// WhereaboutsClient is a client for the Whereabouts schema.
type WhereaboutsClient struct {
	config
}

// NewWhereaboutsClient returns a client for the Whereabouts from the given config.
func NewWhereaboutsClient(c config) *WhereaboutsClient {
	return &WhereaboutsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `whereabouts.Hooks(f(g(h())))`.
func (c *WhereaboutsClient) Use(hooks ...Hook) {
	c.hooks.Whereabouts = append(c.hooks.Whereabouts, hooks...)
}

// Create returns a create builder for Whereabouts.
func (c *WhereaboutsClient) Create() *WhereaboutsCreate {
	mutation := newWhereaboutsMutation(c.config, OpCreate)
	return &WhereaboutsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Whereabouts entities.
func (c *WhereaboutsClient) CreateBulk(builders ...*WhereaboutsCreate) *WhereaboutsCreateBulk {
	return &WhereaboutsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Whereabouts.
func (c *WhereaboutsClient) Update() *WhereaboutsUpdate {
	mutation := newWhereaboutsMutation(c.config, OpUpdate)
	return &WhereaboutsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WhereaboutsClient) UpdateOne(w *Whereabouts) *WhereaboutsUpdateOne {
	mutation := newWhereaboutsMutation(c.config, OpUpdateOne, withWhereabouts(w))
	return &WhereaboutsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WhereaboutsClient) UpdateOneID(id int64) *WhereaboutsUpdateOne {
	mutation := newWhereaboutsMutation(c.config, OpUpdateOne, withWhereaboutsID(id))
	return &WhereaboutsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Whereabouts.
func (c *WhereaboutsClient) Delete() *WhereaboutsDelete {
	mutation := newWhereaboutsMutation(c.config, OpDelete)
	return &WhereaboutsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WhereaboutsClient) DeleteOne(w *Whereabouts) *WhereaboutsDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WhereaboutsClient) DeleteOneID(id int64) *WhereaboutsDeleteOne {
	builder := c.Delete().Where(whereabouts.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WhereaboutsDeleteOne{builder}
}

// Query returns a query builder for Whereabouts.
func (c *WhereaboutsClient) Query() *WhereaboutsQuery {
	return &WhereaboutsQuery{config: c.config}
}

// Get returns a Whereabouts entity by its id.
func (c *WhereaboutsClient) Get(ctx context.Context, id int64) (*Whereabouts, error) {
	return c.Query().Where(whereabouts.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WhereaboutsClient) GetX(ctx context.Context, id int64) *Whereabouts {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WhereaboutsClient) Hooks() []Hook {
	return c.hooks.Whereabouts
}

// WindDirectionClient is a client for the WindDirection schema.
type WindDirectionClient struct {
	config
}

// NewWindDirectionClient returns a client for the WindDirection from the given config.
func NewWindDirectionClient(c config) *WindDirectionClient {
	return &WindDirectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `winddirection.Hooks(f(g(h())))`.
func (c *WindDirectionClient) Use(hooks ...Hook) {
	c.hooks.WindDirection = append(c.hooks.WindDirection, hooks...)
}

// Create returns a create builder for WindDirection.
func (c *WindDirectionClient) Create() *WindDirectionCreate {
	mutation := newWindDirectionMutation(c.config, OpCreate)
	return &WindDirectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of WindDirection entities.
func (c *WindDirectionClient) CreateBulk(builders ...*WindDirectionCreate) *WindDirectionCreateBulk {
	return &WindDirectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WindDirection.
func (c *WindDirectionClient) Update() *WindDirectionUpdate {
	mutation := newWindDirectionMutation(c.config, OpUpdate)
	return &WindDirectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WindDirectionClient) UpdateOne(wd *WindDirection) *WindDirectionUpdateOne {
	mutation := newWindDirectionMutation(c.config, OpUpdateOne, withWindDirection(wd))
	return &WindDirectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WindDirectionClient) UpdateOneID(id int64) *WindDirectionUpdateOne {
	mutation := newWindDirectionMutation(c.config, OpUpdateOne, withWindDirectionID(id))
	return &WindDirectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WindDirection.
func (c *WindDirectionClient) Delete() *WindDirectionDelete {
	mutation := newWindDirectionMutation(c.config, OpDelete)
	return &WindDirectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WindDirectionClient) DeleteOne(wd *WindDirection) *WindDirectionDeleteOne {
	return c.DeleteOneID(wd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WindDirectionClient) DeleteOneID(id int64) *WindDirectionDeleteOne {
	builder := c.Delete().Where(winddirection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WindDirectionDeleteOne{builder}
}

// Query returns a query builder for WindDirection.
func (c *WindDirectionClient) Query() *WindDirectionQuery {
	return &WindDirectionQuery{config: c.config}
}

// Get returns a WindDirection entity by its id.
func (c *WindDirectionClient) Get(ctx context.Context, id int64) (*WindDirection, error) {
	return c.Query().Where(winddirection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WindDirectionClient) GetX(ctx context.Context, id int64) *WindDirection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WindDirectionClient) Hooks() []Hook {
	return c.hooks.WindDirection
}

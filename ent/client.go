// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"cattleai/ent/migrate"

	"cattleai/ent/birthsurrounding"
	"cattleai/ent/breathrate"
	"cattleai/ent/breedingtype"
	"cattleai/ent/category"
	"cattleai/ent/cattle"
	"cattleai/ent/cattlecate"
	"cattleai/ent/cattlegender"
	"cattleai/ent/cattlehaircolor"
	"cattleai/ent/cattlejoinedtype"
	"cattleai/ent/cattleowner"
	"cattleai/ent/cattletype"
	"cattleai/ent/conf"
	"cattleai/ent/duty"
	"cattleai/ent/farm"
	"cattleai/ent/hairstate"
	"cattleai/ent/position"
	"cattleai/ent/reproductivestate"
	"cattleai/ent/shed"
	"cattleai/ent/shedcategory"
	"cattleai/ent/shedtype"
	"cattleai/ent/user"
	"cattleai/ent/winddirection"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BirthSurrounding is the client for interacting with the BirthSurrounding builders.
	BirthSurrounding *BirthSurroundingClient
	// BreathRate is the client for interacting with the BreathRate builders.
	BreathRate *BreathRateClient
	// BreedingType is the client for interacting with the BreedingType builders.
	BreedingType *BreedingTypeClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Cattle is the client for interacting with the Cattle builders.
	Cattle *CattleClient
	// CattleCate is the client for interacting with the CattleCate builders.
	CattleCate *CattleCateClient
	// CattleGender is the client for interacting with the CattleGender builders.
	CattleGender *CattleGenderClient
	// CattleHairColor is the client for interacting with the CattleHairColor builders.
	CattleHairColor *CattleHairColorClient
	// CattleJoinedType is the client for interacting with the CattleJoinedType builders.
	CattleJoinedType *CattleJoinedTypeClient
	// CattleOwner is the client for interacting with the CattleOwner builders.
	CattleOwner *CattleOwnerClient
	// CattleType is the client for interacting with the CattleType builders.
	CattleType *CattleTypeClient
	// Conf is the client for interacting with the Conf builders.
	Conf *ConfClient
	// Duty is the client for interacting with the Duty builders.
	Duty *DutyClient
	// Farm is the client for interacting with the Farm builders.
	Farm *FarmClient
	// HairState is the client for interacting with the HairState builders.
	HairState *HairStateClient
	// Position is the client for interacting with the Position builders.
	Position *PositionClient
	// ReproductiveState is the client for interacting with the ReproductiveState builders.
	ReproductiveState *ReproductiveStateClient
	// Shed is the client for interacting with the Shed builders.
	Shed *ShedClient
	// ShedCategory is the client for interacting with the ShedCategory builders.
	ShedCategory *ShedCategoryClient
	// ShedType is the client for interacting with the ShedType builders.
	ShedType *ShedTypeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// WindDirection is the client for interacting with the WindDirection builders.
	WindDirection *WindDirectionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BirthSurrounding = NewBirthSurroundingClient(c.config)
	c.BreathRate = NewBreathRateClient(c.config)
	c.BreedingType = NewBreedingTypeClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Cattle = NewCattleClient(c.config)
	c.CattleCate = NewCattleCateClient(c.config)
	c.CattleGender = NewCattleGenderClient(c.config)
	c.CattleHairColor = NewCattleHairColorClient(c.config)
	c.CattleJoinedType = NewCattleJoinedTypeClient(c.config)
	c.CattleOwner = NewCattleOwnerClient(c.config)
	c.CattleType = NewCattleTypeClient(c.config)
	c.Conf = NewConfClient(c.config)
	c.Duty = NewDutyClient(c.config)
	c.Farm = NewFarmClient(c.config)
	c.HairState = NewHairStateClient(c.config)
	c.Position = NewPositionClient(c.config)
	c.ReproductiveState = NewReproductiveStateClient(c.config)
	c.Shed = NewShedClient(c.config)
	c.ShedCategory = NewShedCategoryClient(c.config)
	c.ShedType = NewShedTypeClient(c.config)
	c.User = NewUserClient(c.config)
	c.WindDirection = NewWindDirectionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		BirthSurrounding:  NewBirthSurroundingClient(cfg),
		BreathRate:        NewBreathRateClient(cfg),
		BreedingType:      NewBreedingTypeClient(cfg),
		Category:          NewCategoryClient(cfg),
		Cattle:            NewCattleClient(cfg),
		CattleCate:        NewCattleCateClient(cfg),
		CattleGender:      NewCattleGenderClient(cfg),
		CattleHairColor:   NewCattleHairColorClient(cfg),
		CattleJoinedType:  NewCattleJoinedTypeClient(cfg),
		CattleOwner:       NewCattleOwnerClient(cfg),
		CattleType:        NewCattleTypeClient(cfg),
		Conf:              NewConfClient(cfg),
		Duty:              NewDutyClient(cfg),
		Farm:              NewFarmClient(cfg),
		HairState:         NewHairStateClient(cfg),
		Position:          NewPositionClient(cfg),
		ReproductiveState: NewReproductiveStateClient(cfg),
		Shed:              NewShedClient(cfg),
		ShedCategory:      NewShedCategoryClient(cfg),
		ShedType:          NewShedTypeClient(cfg),
		User:              NewUserClient(cfg),
		WindDirection:     NewWindDirectionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:            cfg,
		BirthSurrounding:  NewBirthSurroundingClient(cfg),
		BreathRate:        NewBreathRateClient(cfg),
		BreedingType:      NewBreedingTypeClient(cfg),
		Category:          NewCategoryClient(cfg),
		Cattle:            NewCattleClient(cfg),
		CattleCate:        NewCattleCateClient(cfg),
		CattleGender:      NewCattleGenderClient(cfg),
		CattleHairColor:   NewCattleHairColorClient(cfg),
		CattleJoinedType:  NewCattleJoinedTypeClient(cfg),
		CattleOwner:       NewCattleOwnerClient(cfg),
		CattleType:        NewCattleTypeClient(cfg),
		Conf:              NewConfClient(cfg),
		Duty:              NewDutyClient(cfg),
		Farm:              NewFarmClient(cfg),
		HairState:         NewHairStateClient(cfg),
		Position:          NewPositionClient(cfg),
		ReproductiveState: NewReproductiveStateClient(cfg),
		Shed:              NewShedClient(cfg),
		ShedCategory:      NewShedCategoryClient(cfg),
		ShedType:          NewShedTypeClient(cfg),
		User:              NewUserClient(cfg),
		WindDirection:     NewWindDirectionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BirthSurrounding.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BirthSurrounding.Use(hooks...)
	c.BreathRate.Use(hooks...)
	c.BreedingType.Use(hooks...)
	c.Category.Use(hooks...)
	c.Cattle.Use(hooks...)
	c.CattleCate.Use(hooks...)
	c.CattleGender.Use(hooks...)
	c.CattleHairColor.Use(hooks...)
	c.CattleJoinedType.Use(hooks...)
	c.CattleOwner.Use(hooks...)
	c.CattleType.Use(hooks...)
	c.Conf.Use(hooks...)
	c.Duty.Use(hooks...)
	c.Farm.Use(hooks...)
	c.HairState.Use(hooks...)
	c.Position.Use(hooks...)
	c.ReproductiveState.Use(hooks...)
	c.Shed.Use(hooks...)
	c.ShedCategory.Use(hooks...)
	c.ShedType.Use(hooks...)
	c.User.Use(hooks...)
	c.WindDirection.Use(hooks...)
}

// BirthSurroundingClient is a client for the BirthSurrounding schema.
type BirthSurroundingClient struct {
	config
}

// NewBirthSurroundingClient returns a client for the BirthSurrounding from the given config.
func NewBirthSurroundingClient(c config) *BirthSurroundingClient {
	return &BirthSurroundingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `birthsurrounding.Hooks(f(g(h())))`.
func (c *BirthSurroundingClient) Use(hooks ...Hook) {
	c.hooks.BirthSurrounding = append(c.hooks.BirthSurrounding, hooks...)
}

// Create returns a create builder for BirthSurrounding.
func (c *BirthSurroundingClient) Create() *BirthSurroundingCreate {
	mutation := newBirthSurroundingMutation(c.config, OpCreate)
	return &BirthSurroundingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of BirthSurrounding entities.
func (c *BirthSurroundingClient) CreateBulk(builders ...*BirthSurroundingCreate) *BirthSurroundingCreateBulk {
	return &BirthSurroundingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BirthSurrounding.
func (c *BirthSurroundingClient) Update() *BirthSurroundingUpdate {
	mutation := newBirthSurroundingMutation(c.config, OpUpdate)
	return &BirthSurroundingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BirthSurroundingClient) UpdateOne(bs *BirthSurrounding) *BirthSurroundingUpdateOne {
	mutation := newBirthSurroundingMutation(c.config, OpUpdateOne, withBirthSurrounding(bs))
	return &BirthSurroundingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BirthSurroundingClient) UpdateOneID(id int64) *BirthSurroundingUpdateOne {
	mutation := newBirthSurroundingMutation(c.config, OpUpdateOne, withBirthSurroundingID(id))
	return &BirthSurroundingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BirthSurrounding.
func (c *BirthSurroundingClient) Delete() *BirthSurroundingDelete {
	mutation := newBirthSurroundingMutation(c.config, OpDelete)
	return &BirthSurroundingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BirthSurroundingClient) DeleteOne(bs *BirthSurrounding) *BirthSurroundingDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BirthSurroundingClient) DeleteOneID(id int64) *BirthSurroundingDeleteOne {
	builder := c.Delete().Where(birthsurrounding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BirthSurroundingDeleteOne{builder}
}

// Query returns a query builder for BirthSurrounding.
func (c *BirthSurroundingClient) Query() *BirthSurroundingQuery {
	return &BirthSurroundingQuery{config: c.config}
}

// Get returns a BirthSurrounding entity by its id.
func (c *BirthSurroundingClient) Get(ctx context.Context, id int64) (*BirthSurrounding, error) {
	return c.Query().Where(birthsurrounding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BirthSurroundingClient) GetX(ctx context.Context, id int64) *BirthSurrounding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BirthSurroundingClient) Hooks() []Hook {
	return c.hooks.BirthSurrounding
}

// BreathRateClient is a client for the BreathRate schema.
type BreathRateClient struct {
	config
}

// NewBreathRateClient returns a client for the BreathRate from the given config.
func NewBreathRateClient(c config) *BreathRateClient {
	return &BreathRateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `breathrate.Hooks(f(g(h())))`.
func (c *BreathRateClient) Use(hooks ...Hook) {
	c.hooks.BreathRate = append(c.hooks.BreathRate, hooks...)
}

// Create returns a create builder for BreathRate.
func (c *BreathRateClient) Create() *BreathRateCreate {
	mutation := newBreathRateMutation(c.config, OpCreate)
	return &BreathRateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of BreathRate entities.
func (c *BreathRateClient) CreateBulk(builders ...*BreathRateCreate) *BreathRateCreateBulk {
	return &BreathRateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BreathRate.
func (c *BreathRateClient) Update() *BreathRateUpdate {
	mutation := newBreathRateMutation(c.config, OpUpdate)
	return &BreathRateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BreathRateClient) UpdateOne(br *BreathRate) *BreathRateUpdateOne {
	mutation := newBreathRateMutation(c.config, OpUpdateOne, withBreathRate(br))
	return &BreathRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BreathRateClient) UpdateOneID(id int64) *BreathRateUpdateOne {
	mutation := newBreathRateMutation(c.config, OpUpdateOne, withBreathRateID(id))
	return &BreathRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BreathRate.
func (c *BreathRateClient) Delete() *BreathRateDelete {
	mutation := newBreathRateMutation(c.config, OpDelete)
	return &BreathRateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BreathRateClient) DeleteOne(br *BreathRate) *BreathRateDeleteOne {
	return c.DeleteOneID(br.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BreathRateClient) DeleteOneID(id int64) *BreathRateDeleteOne {
	builder := c.Delete().Where(breathrate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BreathRateDeleteOne{builder}
}

// Query returns a query builder for BreathRate.
func (c *BreathRateClient) Query() *BreathRateQuery {
	return &BreathRateQuery{config: c.config}
}

// Get returns a BreathRate entity by its id.
func (c *BreathRateClient) Get(ctx context.Context, id int64) (*BreathRate, error) {
	return c.Query().Where(breathrate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BreathRateClient) GetX(ctx context.Context, id int64) *BreathRate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BreathRateClient) Hooks() []Hook {
	return c.hooks.BreathRate
}

// BreedingTypeClient is a client for the BreedingType schema.
type BreedingTypeClient struct {
	config
}

// NewBreedingTypeClient returns a client for the BreedingType from the given config.
func NewBreedingTypeClient(c config) *BreedingTypeClient {
	return &BreedingTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `breedingtype.Hooks(f(g(h())))`.
func (c *BreedingTypeClient) Use(hooks ...Hook) {
	c.hooks.BreedingType = append(c.hooks.BreedingType, hooks...)
}

// Create returns a create builder for BreedingType.
func (c *BreedingTypeClient) Create() *BreedingTypeCreate {
	mutation := newBreedingTypeMutation(c.config, OpCreate)
	return &BreedingTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of BreedingType entities.
func (c *BreedingTypeClient) CreateBulk(builders ...*BreedingTypeCreate) *BreedingTypeCreateBulk {
	return &BreedingTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BreedingType.
func (c *BreedingTypeClient) Update() *BreedingTypeUpdate {
	mutation := newBreedingTypeMutation(c.config, OpUpdate)
	return &BreedingTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BreedingTypeClient) UpdateOne(bt *BreedingType) *BreedingTypeUpdateOne {
	mutation := newBreedingTypeMutation(c.config, OpUpdateOne, withBreedingType(bt))
	return &BreedingTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BreedingTypeClient) UpdateOneID(id int64) *BreedingTypeUpdateOne {
	mutation := newBreedingTypeMutation(c.config, OpUpdateOne, withBreedingTypeID(id))
	return &BreedingTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BreedingType.
func (c *BreedingTypeClient) Delete() *BreedingTypeDelete {
	mutation := newBreedingTypeMutation(c.config, OpDelete)
	return &BreedingTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BreedingTypeClient) DeleteOne(bt *BreedingType) *BreedingTypeDeleteOne {
	return c.DeleteOneID(bt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BreedingTypeClient) DeleteOneID(id int64) *BreedingTypeDeleteOne {
	builder := c.Delete().Where(breedingtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BreedingTypeDeleteOne{builder}
}

// Query returns a query builder for BreedingType.
func (c *BreedingTypeClient) Query() *BreedingTypeQuery {
	return &BreedingTypeQuery{config: c.config}
}

// Get returns a BreedingType entity by its id.
func (c *BreedingTypeClient) Get(ctx context.Context, id int64) (*BreedingType, error) {
	return c.Query().Where(breedingtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BreedingTypeClient) GetX(ctx context.Context, id int64) *BreedingType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BreedingTypeClient) Hooks() []Hook {
	return c.hooks.BreedingType
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int64) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int64) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{config: c.config}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int64) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int64) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// CattleClient is a client for the Cattle schema.
type CattleClient struct {
	config
}

// NewCattleClient returns a client for the Cattle from the given config.
func NewCattleClient(c config) *CattleClient {
	return &CattleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattle.Hooks(f(g(h())))`.
func (c *CattleClient) Use(hooks ...Hook) {
	c.hooks.Cattle = append(c.hooks.Cattle, hooks...)
}

// Create returns a create builder for Cattle.
func (c *CattleClient) Create() *CattleCreate {
	mutation := newCattleMutation(c.config, OpCreate)
	return &CattleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Cattle entities.
func (c *CattleClient) CreateBulk(builders ...*CattleCreate) *CattleCreateBulk {
	return &CattleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cattle.
func (c *CattleClient) Update() *CattleUpdate {
	mutation := newCattleMutation(c.config, OpUpdate)
	return &CattleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleClient) UpdateOne(ca *Cattle) *CattleUpdateOne {
	mutation := newCattleMutation(c.config, OpUpdateOne, withCattle(ca))
	return &CattleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleClient) UpdateOneID(id int64) *CattleUpdateOne {
	mutation := newCattleMutation(c.config, OpUpdateOne, withCattleID(id))
	return &CattleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cattle.
func (c *CattleClient) Delete() *CattleDelete {
	mutation := newCattleMutation(c.config, OpDelete)
	return &CattleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleClient) DeleteOne(ca *Cattle) *CattleDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleClient) DeleteOneID(id int64) *CattleDeleteOne {
	builder := c.Delete().Where(cattle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleDeleteOne{builder}
}

// Query returns a query builder for Cattle.
func (c *CattleClient) Query() *CattleQuery {
	return &CattleQuery{config: c.config}
}

// Get returns a Cattle entity by its id.
func (c *CattleClient) Get(ctx context.Context, id int64) (*Cattle, error) {
	return c.Query().Where(cattle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleClient) GetX(ctx context.Context, id int64) *Cattle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleClient) Hooks() []Hook {
	return c.hooks.Cattle
}

// CattleCateClient is a client for the CattleCate schema.
type CattleCateClient struct {
	config
}

// NewCattleCateClient returns a client for the CattleCate from the given config.
func NewCattleCateClient(c config) *CattleCateClient {
	return &CattleCateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlecate.Hooks(f(g(h())))`.
func (c *CattleCateClient) Use(hooks ...Hook) {
	c.hooks.CattleCate = append(c.hooks.CattleCate, hooks...)
}

// Create returns a create builder for CattleCate.
func (c *CattleCateClient) Create() *CattleCateCreate {
	mutation := newCattleCateMutation(c.config, OpCreate)
	return &CattleCateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleCate entities.
func (c *CattleCateClient) CreateBulk(builders ...*CattleCateCreate) *CattleCateCreateBulk {
	return &CattleCateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleCate.
func (c *CattleCateClient) Update() *CattleCateUpdate {
	mutation := newCattleCateMutation(c.config, OpUpdate)
	return &CattleCateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleCateClient) UpdateOne(cc *CattleCate) *CattleCateUpdateOne {
	mutation := newCattleCateMutation(c.config, OpUpdateOne, withCattleCate(cc))
	return &CattleCateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleCateClient) UpdateOneID(id int64) *CattleCateUpdateOne {
	mutation := newCattleCateMutation(c.config, OpUpdateOne, withCattleCateID(id))
	return &CattleCateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleCate.
func (c *CattleCateClient) Delete() *CattleCateDelete {
	mutation := newCattleCateMutation(c.config, OpDelete)
	return &CattleCateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleCateClient) DeleteOne(cc *CattleCate) *CattleCateDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleCateClient) DeleteOneID(id int64) *CattleCateDeleteOne {
	builder := c.Delete().Where(cattlecate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleCateDeleteOne{builder}
}

// Query returns a query builder for CattleCate.
func (c *CattleCateClient) Query() *CattleCateQuery {
	return &CattleCateQuery{config: c.config}
}

// Get returns a CattleCate entity by its id.
func (c *CattleCateClient) Get(ctx context.Context, id int64) (*CattleCate, error) {
	return c.Query().Where(cattlecate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleCateClient) GetX(ctx context.Context, id int64) *CattleCate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleCateClient) Hooks() []Hook {
	return c.hooks.CattleCate
}

// CattleGenderClient is a client for the CattleGender schema.
type CattleGenderClient struct {
	config
}

// NewCattleGenderClient returns a client for the CattleGender from the given config.
func NewCattleGenderClient(c config) *CattleGenderClient {
	return &CattleGenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlegender.Hooks(f(g(h())))`.
func (c *CattleGenderClient) Use(hooks ...Hook) {
	c.hooks.CattleGender = append(c.hooks.CattleGender, hooks...)
}

// Create returns a create builder for CattleGender.
func (c *CattleGenderClient) Create() *CattleGenderCreate {
	mutation := newCattleGenderMutation(c.config, OpCreate)
	return &CattleGenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleGender entities.
func (c *CattleGenderClient) CreateBulk(builders ...*CattleGenderCreate) *CattleGenderCreateBulk {
	return &CattleGenderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleGender.
func (c *CattleGenderClient) Update() *CattleGenderUpdate {
	mutation := newCattleGenderMutation(c.config, OpUpdate)
	return &CattleGenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleGenderClient) UpdateOne(cg *CattleGender) *CattleGenderUpdateOne {
	mutation := newCattleGenderMutation(c.config, OpUpdateOne, withCattleGender(cg))
	return &CattleGenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleGenderClient) UpdateOneID(id int64) *CattleGenderUpdateOne {
	mutation := newCattleGenderMutation(c.config, OpUpdateOne, withCattleGenderID(id))
	return &CattleGenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleGender.
func (c *CattleGenderClient) Delete() *CattleGenderDelete {
	mutation := newCattleGenderMutation(c.config, OpDelete)
	return &CattleGenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleGenderClient) DeleteOne(cg *CattleGender) *CattleGenderDeleteOne {
	return c.DeleteOneID(cg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleGenderClient) DeleteOneID(id int64) *CattleGenderDeleteOne {
	builder := c.Delete().Where(cattlegender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleGenderDeleteOne{builder}
}

// Query returns a query builder for CattleGender.
func (c *CattleGenderClient) Query() *CattleGenderQuery {
	return &CattleGenderQuery{config: c.config}
}

// Get returns a CattleGender entity by its id.
func (c *CattleGenderClient) Get(ctx context.Context, id int64) (*CattleGender, error) {
	return c.Query().Where(cattlegender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleGenderClient) GetX(ctx context.Context, id int64) *CattleGender {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleGenderClient) Hooks() []Hook {
	return c.hooks.CattleGender
}

// CattleHairColorClient is a client for the CattleHairColor schema.
type CattleHairColorClient struct {
	config
}

// NewCattleHairColorClient returns a client for the CattleHairColor from the given config.
func NewCattleHairColorClient(c config) *CattleHairColorClient {
	return &CattleHairColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlehaircolor.Hooks(f(g(h())))`.
func (c *CattleHairColorClient) Use(hooks ...Hook) {
	c.hooks.CattleHairColor = append(c.hooks.CattleHairColor, hooks...)
}

// Create returns a create builder for CattleHairColor.
func (c *CattleHairColorClient) Create() *CattleHairColorCreate {
	mutation := newCattleHairColorMutation(c.config, OpCreate)
	return &CattleHairColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleHairColor entities.
func (c *CattleHairColorClient) CreateBulk(builders ...*CattleHairColorCreate) *CattleHairColorCreateBulk {
	return &CattleHairColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleHairColor.
func (c *CattleHairColorClient) Update() *CattleHairColorUpdate {
	mutation := newCattleHairColorMutation(c.config, OpUpdate)
	return &CattleHairColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleHairColorClient) UpdateOne(chc *CattleHairColor) *CattleHairColorUpdateOne {
	mutation := newCattleHairColorMutation(c.config, OpUpdateOne, withCattleHairColor(chc))
	return &CattleHairColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleHairColorClient) UpdateOneID(id int64) *CattleHairColorUpdateOne {
	mutation := newCattleHairColorMutation(c.config, OpUpdateOne, withCattleHairColorID(id))
	return &CattleHairColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleHairColor.
func (c *CattleHairColorClient) Delete() *CattleHairColorDelete {
	mutation := newCattleHairColorMutation(c.config, OpDelete)
	return &CattleHairColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleHairColorClient) DeleteOne(chc *CattleHairColor) *CattleHairColorDeleteOne {
	return c.DeleteOneID(chc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleHairColorClient) DeleteOneID(id int64) *CattleHairColorDeleteOne {
	builder := c.Delete().Where(cattlehaircolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleHairColorDeleteOne{builder}
}

// Query returns a query builder for CattleHairColor.
func (c *CattleHairColorClient) Query() *CattleHairColorQuery {
	return &CattleHairColorQuery{config: c.config}
}

// Get returns a CattleHairColor entity by its id.
func (c *CattleHairColorClient) Get(ctx context.Context, id int64) (*CattleHairColor, error) {
	return c.Query().Where(cattlehaircolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleHairColorClient) GetX(ctx context.Context, id int64) *CattleHairColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleHairColorClient) Hooks() []Hook {
	return c.hooks.CattleHairColor
}

// CattleJoinedTypeClient is a client for the CattleJoinedType schema.
type CattleJoinedTypeClient struct {
	config
}

// NewCattleJoinedTypeClient returns a client for the CattleJoinedType from the given config.
func NewCattleJoinedTypeClient(c config) *CattleJoinedTypeClient {
	return &CattleJoinedTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattlejoinedtype.Hooks(f(g(h())))`.
func (c *CattleJoinedTypeClient) Use(hooks ...Hook) {
	c.hooks.CattleJoinedType = append(c.hooks.CattleJoinedType, hooks...)
}

// Create returns a create builder for CattleJoinedType.
func (c *CattleJoinedTypeClient) Create() *CattleJoinedTypeCreate {
	mutation := newCattleJoinedTypeMutation(c.config, OpCreate)
	return &CattleJoinedTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleJoinedType entities.
func (c *CattleJoinedTypeClient) CreateBulk(builders ...*CattleJoinedTypeCreate) *CattleJoinedTypeCreateBulk {
	return &CattleJoinedTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleJoinedType.
func (c *CattleJoinedTypeClient) Update() *CattleJoinedTypeUpdate {
	mutation := newCattleJoinedTypeMutation(c.config, OpUpdate)
	return &CattleJoinedTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleJoinedTypeClient) UpdateOne(cjt *CattleJoinedType) *CattleJoinedTypeUpdateOne {
	mutation := newCattleJoinedTypeMutation(c.config, OpUpdateOne, withCattleJoinedType(cjt))
	return &CattleJoinedTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleJoinedTypeClient) UpdateOneID(id int64) *CattleJoinedTypeUpdateOne {
	mutation := newCattleJoinedTypeMutation(c.config, OpUpdateOne, withCattleJoinedTypeID(id))
	return &CattleJoinedTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleJoinedType.
func (c *CattleJoinedTypeClient) Delete() *CattleJoinedTypeDelete {
	mutation := newCattleJoinedTypeMutation(c.config, OpDelete)
	return &CattleJoinedTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleJoinedTypeClient) DeleteOne(cjt *CattleJoinedType) *CattleJoinedTypeDeleteOne {
	return c.DeleteOneID(cjt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleJoinedTypeClient) DeleteOneID(id int64) *CattleJoinedTypeDeleteOne {
	builder := c.Delete().Where(cattlejoinedtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleJoinedTypeDeleteOne{builder}
}

// Query returns a query builder for CattleJoinedType.
func (c *CattleJoinedTypeClient) Query() *CattleJoinedTypeQuery {
	return &CattleJoinedTypeQuery{config: c.config}
}

// Get returns a CattleJoinedType entity by its id.
func (c *CattleJoinedTypeClient) Get(ctx context.Context, id int64) (*CattleJoinedType, error) {
	return c.Query().Where(cattlejoinedtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleJoinedTypeClient) GetX(ctx context.Context, id int64) *CattleJoinedType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleJoinedTypeClient) Hooks() []Hook {
	return c.hooks.CattleJoinedType
}

// CattleOwnerClient is a client for the CattleOwner schema.
type CattleOwnerClient struct {
	config
}

// NewCattleOwnerClient returns a client for the CattleOwner from the given config.
func NewCattleOwnerClient(c config) *CattleOwnerClient {
	return &CattleOwnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattleowner.Hooks(f(g(h())))`.
func (c *CattleOwnerClient) Use(hooks ...Hook) {
	c.hooks.CattleOwner = append(c.hooks.CattleOwner, hooks...)
}

// Create returns a create builder for CattleOwner.
func (c *CattleOwnerClient) Create() *CattleOwnerCreate {
	mutation := newCattleOwnerMutation(c.config, OpCreate)
	return &CattleOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleOwner entities.
func (c *CattleOwnerClient) CreateBulk(builders ...*CattleOwnerCreate) *CattleOwnerCreateBulk {
	return &CattleOwnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleOwner.
func (c *CattleOwnerClient) Update() *CattleOwnerUpdate {
	mutation := newCattleOwnerMutation(c.config, OpUpdate)
	return &CattleOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleOwnerClient) UpdateOne(co *CattleOwner) *CattleOwnerUpdateOne {
	mutation := newCattleOwnerMutation(c.config, OpUpdateOne, withCattleOwner(co))
	return &CattleOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleOwnerClient) UpdateOneID(id int64) *CattleOwnerUpdateOne {
	mutation := newCattleOwnerMutation(c.config, OpUpdateOne, withCattleOwnerID(id))
	return &CattleOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleOwner.
func (c *CattleOwnerClient) Delete() *CattleOwnerDelete {
	mutation := newCattleOwnerMutation(c.config, OpDelete)
	return &CattleOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleOwnerClient) DeleteOne(co *CattleOwner) *CattleOwnerDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleOwnerClient) DeleteOneID(id int64) *CattleOwnerDeleteOne {
	builder := c.Delete().Where(cattleowner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleOwnerDeleteOne{builder}
}

// Query returns a query builder for CattleOwner.
func (c *CattleOwnerClient) Query() *CattleOwnerQuery {
	return &CattleOwnerQuery{config: c.config}
}

// Get returns a CattleOwner entity by its id.
func (c *CattleOwnerClient) Get(ctx context.Context, id int64) (*CattleOwner, error) {
	return c.Query().Where(cattleowner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleOwnerClient) GetX(ctx context.Context, id int64) *CattleOwner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleOwnerClient) Hooks() []Hook {
	return c.hooks.CattleOwner
}

// CattleTypeClient is a client for the CattleType schema.
type CattleTypeClient struct {
	config
}

// NewCattleTypeClient returns a client for the CattleType from the given config.
func NewCattleTypeClient(c config) *CattleTypeClient {
	return &CattleTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cattletype.Hooks(f(g(h())))`.
func (c *CattleTypeClient) Use(hooks ...Hook) {
	c.hooks.CattleType = append(c.hooks.CattleType, hooks...)
}

// Create returns a create builder for CattleType.
func (c *CattleTypeClient) Create() *CattleTypeCreate {
	mutation := newCattleTypeMutation(c.config, OpCreate)
	return &CattleTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of CattleType entities.
func (c *CattleTypeClient) CreateBulk(builders ...*CattleTypeCreate) *CattleTypeCreateBulk {
	return &CattleTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CattleType.
func (c *CattleTypeClient) Update() *CattleTypeUpdate {
	mutation := newCattleTypeMutation(c.config, OpUpdate)
	return &CattleTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CattleTypeClient) UpdateOne(ct *CattleType) *CattleTypeUpdateOne {
	mutation := newCattleTypeMutation(c.config, OpUpdateOne, withCattleType(ct))
	return &CattleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CattleTypeClient) UpdateOneID(id int64) *CattleTypeUpdateOne {
	mutation := newCattleTypeMutation(c.config, OpUpdateOne, withCattleTypeID(id))
	return &CattleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CattleType.
func (c *CattleTypeClient) Delete() *CattleTypeDelete {
	mutation := newCattleTypeMutation(c.config, OpDelete)
	return &CattleTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CattleTypeClient) DeleteOne(ct *CattleType) *CattleTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CattleTypeClient) DeleteOneID(id int64) *CattleTypeDeleteOne {
	builder := c.Delete().Where(cattletype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CattleTypeDeleteOne{builder}
}

// Query returns a query builder for CattleType.
func (c *CattleTypeClient) Query() *CattleTypeQuery {
	return &CattleTypeQuery{config: c.config}
}

// Get returns a CattleType entity by its id.
func (c *CattleTypeClient) Get(ctx context.Context, id int64) (*CattleType, error) {
	return c.Query().Where(cattletype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CattleTypeClient) GetX(ctx context.Context, id int64) *CattleType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CattleTypeClient) Hooks() []Hook {
	return c.hooks.CattleType
}

// ConfClient is a client for the Conf schema.
type ConfClient struct {
	config
}

// NewConfClient returns a client for the Conf from the given config.
func NewConfClient(c config) *ConfClient {
	return &ConfClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `conf.Hooks(f(g(h())))`.
func (c *ConfClient) Use(hooks ...Hook) {
	c.hooks.Conf = append(c.hooks.Conf, hooks...)
}

// Create returns a create builder for Conf.
func (c *ConfClient) Create() *ConfCreate {
	mutation := newConfMutation(c.config, OpCreate)
	return &ConfCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Conf entities.
func (c *ConfClient) CreateBulk(builders ...*ConfCreate) *ConfCreateBulk {
	return &ConfCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Conf.
func (c *ConfClient) Update() *ConfUpdate {
	mutation := newConfMutation(c.config, OpUpdate)
	return &ConfUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfClient) UpdateOne(co *Conf) *ConfUpdateOne {
	mutation := newConfMutation(c.config, OpUpdateOne, withConf(co))
	return &ConfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfClient) UpdateOneID(id int64) *ConfUpdateOne {
	mutation := newConfMutation(c.config, OpUpdateOne, withConfID(id))
	return &ConfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Conf.
func (c *ConfClient) Delete() *ConfDelete {
	mutation := newConfMutation(c.config, OpDelete)
	return &ConfDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConfClient) DeleteOne(co *Conf) *ConfDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConfClient) DeleteOneID(id int64) *ConfDeleteOne {
	builder := c.Delete().Where(conf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfDeleteOne{builder}
}

// Query returns a query builder for Conf.
func (c *ConfClient) Query() *ConfQuery {
	return &ConfQuery{config: c.config}
}

// Get returns a Conf entity by its id.
func (c *ConfClient) Get(ctx context.Context, id int64) (*Conf, error) {
	return c.Query().Where(conf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfClient) GetX(ctx context.Context, id int64) *Conf {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConfClient) Hooks() []Hook {
	return c.hooks.Conf
}

// DutyClient is a client for the Duty schema.
type DutyClient struct {
	config
}

// NewDutyClient returns a client for the Duty from the given config.
func NewDutyClient(c config) *DutyClient {
	return &DutyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `duty.Hooks(f(g(h())))`.
func (c *DutyClient) Use(hooks ...Hook) {
	c.hooks.Duty = append(c.hooks.Duty, hooks...)
}

// Create returns a create builder for Duty.
func (c *DutyClient) Create() *DutyCreate {
	mutation := newDutyMutation(c.config, OpCreate)
	return &DutyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Duty entities.
func (c *DutyClient) CreateBulk(builders ...*DutyCreate) *DutyCreateBulk {
	return &DutyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Duty.
func (c *DutyClient) Update() *DutyUpdate {
	mutation := newDutyMutation(c.config, OpUpdate)
	return &DutyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DutyClient) UpdateOne(d *Duty) *DutyUpdateOne {
	mutation := newDutyMutation(c.config, OpUpdateOne, withDuty(d))
	return &DutyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DutyClient) UpdateOneID(id int64) *DutyUpdateOne {
	mutation := newDutyMutation(c.config, OpUpdateOne, withDutyID(id))
	return &DutyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Duty.
func (c *DutyClient) Delete() *DutyDelete {
	mutation := newDutyMutation(c.config, OpDelete)
	return &DutyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DutyClient) DeleteOne(d *Duty) *DutyDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DutyClient) DeleteOneID(id int64) *DutyDeleteOne {
	builder := c.Delete().Where(duty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DutyDeleteOne{builder}
}

// Query returns a query builder for Duty.
func (c *DutyClient) Query() *DutyQuery {
	return &DutyQuery{config: c.config}
}

// Get returns a Duty entity by its id.
func (c *DutyClient) Get(ctx context.Context, id int64) (*Duty, error) {
	return c.Query().Where(duty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DutyClient) GetX(ctx context.Context, id int64) *Duty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DutyClient) Hooks() []Hook {
	return c.hooks.Duty
}

// FarmClient is a client for the Farm schema.
type FarmClient struct {
	config
}

// NewFarmClient returns a client for the Farm from the given config.
func NewFarmClient(c config) *FarmClient {
	return &FarmClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `farm.Hooks(f(g(h())))`.
func (c *FarmClient) Use(hooks ...Hook) {
	c.hooks.Farm = append(c.hooks.Farm, hooks...)
}

// Create returns a create builder for Farm.
func (c *FarmClient) Create() *FarmCreate {
	mutation := newFarmMutation(c.config, OpCreate)
	return &FarmCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Farm entities.
func (c *FarmClient) CreateBulk(builders ...*FarmCreate) *FarmCreateBulk {
	return &FarmCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Farm.
func (c *FarmClient) Update() *FarmUpdate {
	mutation := newFarmMutation(c.config, OpUpdate)
	return &FarmUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FarmClient) UpdateOne(f *Farm) *FarmUpdateOne {
	mutation := newFarmMutation(c.config, OpUpdateOne, withFarm(f))
	return &FarmUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FarmClient) UpdateOneID(id int64) *FarmUpdateOne {
	mutation := newFarmMutation(c.config, OpUpdateOne, withFarmID(id))
	return &FarmUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Farm.
func (c *FarmClient) Delete() *FarmDelete {
	mutation := newFarmMutation(c.config, OpDelete)
	return &FarmDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FarmClient) DeleteOne(f *Farm) *FarmDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FarmClient) DeleteOneID(id int64) *FarmDeleteOne {
	builder := c.Delete().Where(farm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FarmDeleteOne{builder}
}

// Query returns a query builder for Farm.
func (c *FarmClient) Query() *FarmQuery {
	return &FarmQuery{config: c.config}
}

// Get returns a Farm entity by its id.
func (c *FarmClient) Get(ctx context.Context, id int64) (*Farm, error) {
	return c.Query().Where(farm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FarmClient) GetX(ctx context.Context, id int64) *Farm {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FarmClient) Hooks() []Hook {
	return c.hooks.Farm
}

// HairStateClient is a client for the HairState schema.
type HairStateClient struct {
	config
}

// NewHairStateClient returns a client for the HairState from the given config.
func NewHairStateClient(c config) *HairStateClient {
	return &HairStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hairstate.Hooks(f(g(h())))`.
func (c *HairStateClient) Use(hooks ...Hook) {
	c.hooks.HairState = append(c.hooks.HairState, hooks...)
}

// Create returns a create builder for HairState.
func (c *HairStateClient) Create() *HairStateCreate {
	mutation := newHairStateMutation(c.config, OpCreate)
	return &HairStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of HairState entities.
func (c *HairStateClient) CreateBulk(builders ...*HairStateCreate) *HairStateCreateBulk {
	return &HairStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HairState.
func (c *HairStateClient) Update() *HairStateUpdate {
	mutation := newHairStateMutation(c.config, OpUpdate)
	return &HairStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HairStateClient) UpdateOne(hs *HairState) *HairStateUpdateOne {
	mutation := newHairStateMutation(c.config, OpUpdateOne, withHairState(hs))
	return &HairStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HairStateClient) UpdateOneID(id int64) *HairStateUpdateOne {
	mutation := newHairStateMutation(c.config, OpUpdateOne, withHairStateID(id))
	return &HairStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HairState.
func (c *HairStateClient) Delete() *HairStateDelete {
	mutation := newHairStateMutation(c.config, OpDelete)
	return &HairStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HairStateClient) DeleteOne(hs *HairState) *HairStateDeleteOne {
	return c.DeleteOneID(hs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HairStateClient) DeleteOneID(id int64) *HairStateDeleteOne {
	builder := c.Delete().Where(hairstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HairStateDeleteOne{builder}
}

// Query returns a query builder for HairState.
func (c *HairStateClient) Query() *HairStateQuery {
	return &HairStateQuery{config: c.config}
}

// Get returns a HairState entity by its id.
func (c *HairStateClient) Get(ctx context.Context, id int64) (*HairState, error) {
	return c.Query().Where(hairstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HairStateClient) GetX(ctx context.Context, id int64) *HairState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HairStateClient) Hooks() []Hook {
	return c.hooks.HairState
}

// PositionClient is a client for the Position schema.
type PositionClient struct {
	config
}

// NewPositionClient returns a client for the Position from the given config.
func NewPositionClient(c config) *PositionClient {
	return &PositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `position.Hooks(f(g(h())))`.
func (c *PositionClient) Use(hooks ...Hook) {
	c.hooks.Position = append(c.hooks.Position, hooks...)
}

// Create returns a create builder for Position.
func (c *PositionClient) Create() *PositionCreate {
	mutation := newPositionMutation(c.config, OpCreate)
	return &PositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Position entities.
func (c *PositionClient) CreateBulk(builders ...*PositionCreate) *PositionCreateBulk {
	return &PositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Position.
func (c *PositionClient) Update() *PositionUpdate {
	mutation := newPositionMutation(c.config, OpUpdate)
	return &PositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionClient) UpdateOne(po *Position) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPosition(po))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionClient) UpdateOneID(id int64) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPositionID(id))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Position.
func (c *PositionClient) Delete() *PositionDelete {
	mutation := newPositionMutation(c.config, OpDelete)
	return &PositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PositionClient) DeleteOne(po *Position) *PositionDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PositionClient) DeleteOneID(id int64) *PositionDeleteOne {
	builder := c.Delete().Where(position.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionDeleteOne{builder}
}

// Query returns a query builder for Position.
func (c *PositionClient) Query() *PositionQuery {
	return &PositionQuery{config: c.config}
}

// Get returns a Position entity by its id.
func (c *PositionClient) Get(ctx context.Context, id int64) (*Position, error) {
	return c.Query().Where(position.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionClient) GetX(ctx context.Context, id int64) *Position {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PositionClient) Hooks() []Hook {
	return c.hooks.Position
}

// ReproductiveStateClient is a client for the ReproductiveState schema.
type ReproductiveStateClient struct {
	config
}

// NewReproductiveStateClient returns a client for the ReproductiveState from the given config.
func NewReproductiveStateClient(c config) *ReproductiveStateClient {
	return &ReproductiveStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reproductivestate.Hooks(f(g(h())))`.
func (c *ReproductiveStateClient) Use(hooks ...Hook) {
	c.hooks.ReproductiveState = append(c.hooks.ReproductiveState, hooks...)
}

// Create returns a create builder for ReproductiveState.
func (c *ReproductiveStateClient) Create() *ReproductiveStateCreate {
	mutation := newReproductiveStateMutation(c.config, OpCreate)
	return &ReproductiveStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ReproductiveState entities.
func (c *ReproductiveStateClient) CreateBulk(builders ...*ReproductiveStateCreate) *ReproductiveStateCreateBulk {
	return &ReproductiveStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReproductiveState.
func (c *ReproductiveStateClient) Update() *ReproductiveStateUpdate {
	mutation := newReproductiveStateMutation(c.config, OpUpdate)
	return &ReproductiveStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReproductiveStateClient) UpdateOne(rs *ReproductiveState) *ReproductiveStateUpdateOne {
	mutation := newReproductiveStateMutation(c.config, OpUpdateOne, withReproductiveState(rs))
	return &ReproductiveStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReproductiveStateClient) UpdateOneID(id int64) *ReproductiveStateUpdateOne {
	mutation := newReproductiveStateMutation(c.config, OpUpdateOne, withReproductiveStateID(id))
	return &ReproductiveStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReproductiveState.
func (c *ReproductiveStateClient) Delete() *ReproductiveStateDelete {
	mutation := newReproductiveStateMutation(c.config, OpDelete)
	return &ReproductiveStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReproductiveStateClient) DeleteOne(rs *ReproductiveState) *ReproductiveStateDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReproductiveStateClient) DeleteOneID(id int64) *ReproductiveStateDeleteOne {
	builder := c.Delete().Where(reproductivestate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReproductiveStateDeleteOne{builder}
}

// Query returns a query builder for ReproductiveState.
func (c *ReproductiveStateClient) Query() *ReproductiveStateQuery {
	return &ReproductiveStateQuery{config: c.config}
}

// Get returns a ReproductiveState entity by its id.
func (c *ReproductiveStateClient) Get(ctx context.Context, id int64) (*ReproductiveState, error) {
	return c.Query().Where(reproductivestate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReproductiveStateClient) GetX(ctx context.Context, id int64) *ReproductiveState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReproductiveStateClient) Hooks() []Hook {
	return c.hooks.ReproductiveState
}

// ShedClient is a client for the Shed schema.
type ShedClient struct {
	config
}

// NewShedClient returns a client for the Shed from the given config.
func NewShedClient(c config) *ShedClient {
	return &ShedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shed.Hooks(f(g(h())))`.
func (c *ShedClient) Use(hooks ...Hook) {
	c.hooks.Shed = append(c.hooks.Shed, hooks...)
}

// Create returns a create builder for Shed.
func (c *ShedClient) Create() *ShedCreate {
	mutation := newShedMutation(c.config, OpCreate)
	return &ShedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Shed entities.
func (c *ShedClient) CreateBulk(builders ...*ShedCreate) *ShedCreateBulk {
	return &ShedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Shed.
func (c *ShedClient) Update() *ShedUpdate {
	mutation := newShedMutation(c.config, OpUpdate)
	return &ShedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShedClient) UpdateOne(s *Shed) *ShedUpdateOne {
	mutation := newShedMutation(c.config, OpUpdateOne, withShed(s))
	return &ShedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShedClient) UpdateOneID(id int64) *ShedUpdateOne {
	mutation := newShedMutation(c.config, OpUpdateOne, withShedID(id))
	return &ShedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shed.
func (c *ShedClient) Delete() *ShedDelete {
	mutation := newShedMutation(c.config, OpDelete)
	return &ShedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShedClient) DeleteOne(s *Shed) *ShedDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShedClient) DeleteOneID(id int64) *ShedDeleteOne {
	builder := c.Delete().Where(shed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShedDeleteOne{builder}
}

// Query returns a query builder for Shed.
func (c *ShedClient) Query() *ShedQuery {
	return &ShedQuery{config: c.config}
}

// Get returns a Shed entity by its id.
func (c *ShedClient) Get(ctx context.Context, id int64) (*Shed, error) {
	return c.Query().Where(shed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShedClient) GetX(ctx context.Context, id int64) *Shed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShedClient) Hooks() []Hook {
	return c.hooks.Shed
}

// ShedCategoryClient is a client for the ShedCategory schema.
type ShedCategoryClient struct {
	config
}

// NewShedCategoryClient returns a client for the ShedCategory from the given config.
func NewShedCategoryClient(c config) *ShedCategoryClient {
	return &ShedCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shedcategory.Hooks(f(g(h())))`.
func (c *ShedCategoryClient) Use(hooks ...Hook) {
	c.hooks.ShedCategory = append(c.hooks.ShedCategory, hooks...)
}

// Create returns a create builder for ShedCategory.
func (c *ShedCategoryClient) Create() *ShedCategoryCreate {
	mutation := newShedCategoryMutation(c.config, OpCreate)
	return &ShedCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ShedCategory entities.
func (c *ShedCategoryClient) CreateBulk(builders ...*ShedCategoryCreate) *ShedCategoryCreateBulk {
	return &ShedCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShedCategory.
func (c *ShedCategoryClient) Update() *ShedCategoryUpdate {
	mutation := newShedCategoryMutation(c.config, OpUpdate)
	return &ShedCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShedCategoryClient) UpdateOne(sc *ShedCategory) *ShedCategoryUpdateOne {
	mutation := newShedCategoryMutation(c.config, OpUpdateOne, withShedCategory(sc))
	return &ShedCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShedCategoryClient) UpdateOneID(id int64) *ShedCategoryUpdateOne {
	mutation := newShedCategoryMutation(c.config, OpUpdateOne, withShedCategoryID(id))
	return &ShedCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShedCategory.
func (c *ShedCategoryClient) Delete() *ShedCategoryDelete {
	mutation := newShedCategoryMutation(c.config, OpDelete)
	return &ShedCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShedCategoryClient) DeleteOne(sc *ShedCategory) *ShedCategoryDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShedCategoryClient) DeleteOneID(id int64) *ShedCategoryDeleteOne {
	builder := c.Delete().Where(shedcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShedCategoryDeleteOne{builder}
}

// Query returns a query builder for ShedCategory.
func (c *ShedCategoryClient) Query() *ShedCategoryQuery {
	return &ShedCategoryQuery{config: c.config}
}

// Get returns a ShedCategory entity by its id.
func (c *ShedCategoryClient) Get(ctx context.Context, id int64) (*ShedCategory, error) {
	return c.Query().Where(shedcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShedCategoryClient) GetX(ctx context.Context, id int64) *ShedCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShedCategoryClient) Hooks() []Hook {
	return c.hooks.ShedCategory
}

// ShedTypeClient is a client for the ShedType schema.
type ShedTypeClient struct {
	config
}

// NewShedTypeClient returns a client for the ShedType from the given config.
func NewShedTypeClient(c config) *ShedTypeClient {
	return &ShedTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shedtype.Hooks(f(g(h())))`.
func (c *ShedTypeClient) Use(hooks ...Hook) {
	c.hooks.ShedType = append(c.hooks.ShedType, hooks...)
}

// Create returns a create builder for ShedType.
func (c *ShedTypeClient) Create() *ShedTypeCreate {
	mutation := newShedTypeMutation(c.config, OpCreate)
	return &ShedTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ShedType entities.
func (c *ShedTypeClient) CreateBulk(builders ...*ShedTypeCreate) *ShedTypeCreateBulk {
	return &ShedTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShedType.
func (c *ShedTypeClient) Update() *ShedTypeUpdate {
	mutation := newShedTypeMutation(c.config, OpUpdate)
	return &ShedTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShedTypeClient) UpdateOne(st *ShedType) *ShedTypeUpdateOne {
	mutation := newShedTypeMutation(c.config, OpUpdateOne, withShedType(st))
	return &ShedTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShedTypeClient) UpdateOneID(id int64) *ShedTypeUpdateOne {
	mutation := newShedTypeMutation(c.config, OpUpdateOne, withShedTypeID(id))
	return &ShedTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShedType.
func (c *ShedTypeClient) Delete() *ShedTypeDelete {
	mutation := newShedTypeMutation(c.config, OpDelete)
	return &ShedTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShedTypeClient) DeleteOne(st *ShedType) *ShedTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShedTypeClient) DeleteOneID(id int64) *ShedTypeDeleteOne {
	builder := c.Delete().Where(shedtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShedTypeDeleteOne{builder}
}

// Query returns a query builder for ShedType.
func (c *ShedTypeClient) Query() *ShedTypeQuery {
	return &ShedTypeQuery{config: c.config}
}

// Get returns a ShedType entity by its id.
func (c *ShedTypeClient) Get(ctx context.Context, id int64) (*ShedType, error) {
	return c.Query().Where(shedtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShedTypeClient) GetX(ctx context.Context, id int64) *ShedType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShedTypeClient) Hooks() []Hook {
	return c.hooks.ShedType
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// WindDirectionClient is a client for the WindDirection schema.
type WindDirectionClient struct {
	config
}

// NewWindDirectionClient returns a client for the WindDirection from the given config.
func NewWindDirectionClient(c config) *WindDirectionClient {
	return &WindDirectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `winddirection.Hooks(f(g(h())))`.
func (c *WindDirectionClient) Use(hooks ...Hook) {
	c.hooks.WindDirection = append(c.hooks.WindDirection, hooks...)
}

// Create returns a create builder for WindDirection.
func (c *WindDirectionClient) Create() *WindDirectionCreate {
	mutation := newWindDirectionMutation(c.config, OpCreate)
	return &WindDirectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of WindDirection entities.
func (c *WindDirectionClient) CreateBulk(builders ...*WindDirectionCreate) *WindDirectionCreateBulk {
	return &WindDirectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WindDirection.
func (c *WindDirectionClient) Update() *WindDirectionUpdate {
	mutation := newWindDirectionMutation(c.config, OpUpdate)
	return &WindDirectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WindDirectionClient) UpdateOne(wd *WindDirection) *WindDirectionUpdateOne {
	mutation := newWindDirectionMutation(c.config, OpUpdateOne, withWindDirection(wd))
	return &WindDirectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WindDirectionClient) UpdateOneID(id int64) *WindDirectionUpdateOne {
	mutation := newWindDirectionMutation(c.config, OpUpdateOne, withWindDirectionID(id))
	return &WindDirectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WindDirection.
func (c *WindDirectionClient) Delete() *WindDirectionDelete {
	mutation := newWindDirectionMutation(c.config, OpDelete)
	return &WindDirectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WindDirectionClient) DeleteOne(wd *WindDirection) *WindDirectionDeleteOne {
	return c.DeleteOneID(wd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WindDirectionClient) DeleteOneID(id int64) *WindDirectionDeleteOne {
	builder := c.Delete().Where(winddirection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WindDirectionDeleteOne{builder}
}

// Query returns a query builder for WindDirection.
func (c *WindDirectionClient) Query() *WindDirectionQuery {
	return &WindDirectionQuery{config: c.config}
}

// Get returns a WindDirection entity by its id.
func (c *WindDirectionClient) Get(ctx context.Context, id int64) (*WindDirection, error) {
	return c.Query().Where(winddirection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WindDirectionClient) GetX(ctx context.Context, id int64) *WindDirection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WindDirectionClient) Hooks() []Hook {
	return c.hooks.WindDirection
}

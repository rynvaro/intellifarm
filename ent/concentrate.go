// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/concentrate"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Concentrate is the model entity for the Concentrate schema.
type Concentrate struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FormulaId holds the value of the "formulaId" field.
	FormulaId int64 `json:"formulaId,omitempty"`
	// FormulaName holds the value of the "formulaName" field.
	FormulaName string `json:"formulaName,omitempty"`
	// FormulaCode holds the value of the "formulaCode" field.
	FormulaCode string `json:"formulaCode,omitempty"`
	// Inventory holds the value of the "inventory" field.
	Inventory int64 `json:"inventory,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Concentrate) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullInt64{},  // formulaId
		&sql.NullString{}, // formulaName
		&sql.NullString{}, // formulaCode
		&sql.NullInt64{},  // inventory
		&sql.NullString{}, // userName
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullInt64{},  // farmId
		&sql.NullString{}, // farmName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Concentrate fields.
func (c *Concentrate) assignValues(values ...interface{}) error {
	if m, n := len(values), len(concentrate.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field formulaId", values[1])
	} else if value.Valid {
		c.FormulaId = value.Int64
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field formulaName", values[2])
	} else if value.Valid {
		c.FormulaName = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field formulaCode", values[3])
	} else if value.Valid {
		c.FormulaCode = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field inventory", values[4])
	} else if value.Valid {
		c.Inventory = value.Int64
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[5])
	} else if value.Valid {
		c.UserName = value.String
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[6])
	} else if value.Valid {
		c.TenantId = value.Int64
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[7])
	} else if value.Valid {
		c.TenantName = value.String
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[8])
	} else if value.Valid {
		c.FarmId = value.Int64
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[9])
	} else if value.Valid {
		c.FarmName = value.String
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[10])
	} else if value.Valid {
		c.Remarks = value.String
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[11])
	} else if value.Valid {
		c.CreatedAt = value.Int64
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[12])
	} else if value.Valid {
		c.UpdatedAt = value.Int64
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[13])
	} else if value.Valid {
		c.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Concentrate.
// Note that, you need to call Concentrate.Unwrap() before calling this method, if this Concentrate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Concentrate) Update() *ConcentrateUpdateOne {
	return (&ConcentrateClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Concentrate) Unwrap() *Concentrate {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Concentrate is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Concentrate) String() string {
	var builder strings.Builder
	builder.WriteString("Concentrate(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", formulaId=")
	builder.WriteString(fmt.Sprintf("%v", c.FormulaId))
	builder.WriteString(", formulaName=")
	builder.WriteString(c.FormulaName)
	builder.WriteString(", formulaCode=")
	builder.WriteString(c.FormulaCode)
	builder.WriteString(", inventory=")
	builder.WriteString(fmt.Sprintf("%v", c.Inventory))
	builder.WriteString(", userName=")
	builder.WriteString(c.UserName)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", c.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(c.TenantName)
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", c.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(c.FarmName)
	builder.WriteString(", remarks=")
	builder.WriteString(c.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", c.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Concentrates is a parsable slice of Concentrate.
type Concentrates []*Concentrate

func (c Concentrates) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/concentrate"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ConcentrateCreate is the builder for creating a Concentrate entity.
type ConcentrateCreate struct {
	config
	mutation *ConcentrateMutation
	hooks    []Hook
}

// SetName sets the name field.
func (cc *ConcentrateCreate) SetName(s string) *ConcentrateCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetFormulaId sets the formulaId field.
func (cc *ConcentrateCreate) SetFormulaId(i int64) *ConcentrateCreate {
	cc.mutation.SetFormulaId(i)
	return cc
}

// SetFormulaName sets the formulaName field.
func (cc *ConcentrateCreate) SetFormulaName(s string) *ConcentrateCreate {
	cc.mutation.SetFormulaName(s)
	return cc
}

// SetFormulaCode sets the formulaCode field.
func (cc *ConcentrateCreate) SetFormulaCode(s string) *ConcentrateCreate {
	cc.mutation.SetFormulaCode(s)
	return cc
}

// SetInventory sets the inventory field.
func (cc *ConcentrateCreate) SetInventory(i int64) *ConcentrateCreate {
	cc.mutation.SetInventory(i)
	return cc
}

// SetUserName sets the userName field.
func (cc *ConcentrateCreate) SetUserName(s string) *ConcentrateCreate {
	cc.mutation.SetUserName(s)
	return cc
}

// SetTenantId sets the tenantId field.
func (cc *ConcentrateCreate) SetTenantId(i int64) *ConcentrateCreate {
	cc.mutation.SetTenantId(i)
	return cc
}

// SetTenantName sets the tenantName field.
func (cc *ConcentrateCreate) SetTenantName(s string) *ConcentrateCreate {
	cc.mutation.SetTenantName(s)
	return cc
}

// SetFarmId sets the farmId field.
func (cc *ConcentrateCreate) SetFarmId(i int64) *ConcentrateCreate {
	cc.mutation.SetFarmId(i)
	return cc
}

// SetFarmName sets the farmName field.
func (cc *ConcentrateCreate) SetFarmName(s string) *ConcentrateCreate {
	cc.mutation.SetFarmName(s)
	return cc
}

// SetRemarks sets the remarks field.
func (cc *ConcentrateCreate) SetRemarks(s string) *ConcentrateCreate {
	cc.mutation.SetRemarks(s)
	return cc
}

// SetCreatedAt sets the createdAt field.
func (cc *ConcentrateCreate) SetCreatedAt(i int64) *ConcentrateCreate {
	cc.mutation.SetCreatedAt(i)
	return cc
}

// SetUpdatedAt sets the updatedAt field.
func (cc *ConcentrateCreate) SetUpdatedAt(i int64) *ConcentrateCreate {
	cc.mutation.SetUpdatedAt(i)
	return cc
}

// SetDeleted sets the deleted field.
func (cc *ConcentrateCreate) SetDeleted(i int) *ConcentrateCreate {
	cc.mutation.SetDeleted(i)
	return cc
}

// Mutation returns the ConcentrateMutation object of the builder.
func (cc *ConcentrateCreate) Mutation() *ConcentrateMutation {
	return cc.mutation
}

// Save creates the Concentrate in the database.
func (cc *ConcentrateCreate) Save(ctx context.Context) (*Concentrate, error) {
	var (
		err  error
		node *Concentrate
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConcentrateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConcentrateCreate) SaveX(ctx context.Context) *Concentrate {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConcentrateCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := cc.mutation.FormulaId(); !ok {
		return &ValidationError{Name: "formulaId", err: errors.New("ent: missing required field \"formulaId\"")}
	}
	if _, ok := cc.mutation.FormulaName(); !ok {
		return &ValidationError{Name: "formulaName", err: errors.New("ent: missing required field \"formulaName\"")}
	}
	if _, ok := cc.mutation.FormulaCode(); !ok {
		return &ValidationError{Name: "formulaCode", err: errors.New("ent: missing required field \"formulaCode\"")}
	}
	if _, ok := cc.mutation.Inventory(); !ok {
		return &ValidationError{Name: "inventory", err: errors.New("ent: missing required field \"inventory\"")}
	}
	if _, ok := cc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := cc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := cc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := cc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New("ent: missing required field \"farmId\"")}
	}
	if _, ok := cc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New("ent: missing required field \"farmName\"")}
	}
	if _, ok := cc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := cc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (cc *ConcentrateCreate) sqlSave(ctx context.Context) (*Concentrate, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (cc *ConcentrateCreate) createSpec() (*Concentrate, *sqlgraph.CreateSpec) {
	var (
		_node = &Concentrate{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: concentrate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: concentrate.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrate.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.FormulaId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrate.FieldFormulaId,
		})
		_node.FormulaId = value
	}
	if value, ok := cc.mutation.FormulaName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrate.FieldFormulaName,
		})
		_node.FormulaName = value
	}
	if value, ok := cc.mutation.FormulaCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrate.FieldFormulaCode,
		})
		_node.FormulaCode = value
	}
	if value, ok := cc.mutation.Inventory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrate.FieldInventory,
		})
		_node.Inventory = value
	}
	if value, ok := cc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrate.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := cc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrate.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := cc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrate.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := cc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrate.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := cc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrate.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := cc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrate.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrate.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// ConcentrateCreateBulk is the builder for creating a bulk of Concentrate entities.
type ConcentrateCreateBulk struct {
	config
	builders []*ConcentrateCreate
}

// Save creates the Concentrate entities in the database.
func (ccb *ConcentrateCreateBulk) Save(ctx context.Context) ([]*Concentrate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Concentrate, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConcentrateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ccb *ConcentrateCreateBulk) SaveX(ctx context.Context) []*Concentrate {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/concentrateformula"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ConcentrateFormula is the model entity for the ConcentrateFormula schema.
type ConcentrateFormula struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// 1 启用 2 停用
	Status int `json:"status,omitempty"`
	// 成本
	Cost int64 `json:"cost,omitempty"`
	// JSON格式的配比数据
	Data string `json:"data,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConcentrateFormula) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case concentrateformula.FieldID, concentrateformula.FieldStatus, concentrateformula.FieldCost, concentrateformula.FieldTenantId, concentrateformula.FieldFarmId, concentrateformula.FieldCreatedAt, concentrateformula.FieldUpdatedAt, concentrateformula.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case concentrateformula.FieldName, concentrateformula.FieldCode, concentrateformula.FieldData, concentrateformula.FieldTenantName, concentrateformula.FieldFarmName, concentrateformula.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ConcentrateFormula", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConcentrateFormula fields.
func (cf *ConcentrateFormula) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case concentrateformula.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cf.ID = int(value.Int64)
		case concentrateformula.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cf.Name = value.String
			}
		case concentrateformula.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				cf.Code = value.String
			}
		case concentrateformula.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cf.Status = int(value.Int64)
			}
		case concentrateformula.FieldCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				cf.Cost = value.Int64
			}
		case concentrateformula.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				cf.Data = value.String
			}
		case concentrateformula.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cf.TenantId = value.Int64
			}
		case concentrateformula.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				cf.TenantName = value.String
			}
		case concentrateformula.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				cf.FarmId = value.Int64
			}
		case concentrateformula.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				cf.FarmName = value.String
			}
		case concentrateformula.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				cf.Remarks = value.String
			}
		case concentrateformula.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cf.CreatedAt = value.Int64
			}
		case concentrateformula.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cf.UpdatedAt = value.Int64
			}
		case concentrateformula.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cf.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ConcentrateFormula.
// Note that you need to call ConcentrateFormula.Unwrap() before calling this method if this ConcentrateFormula
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *ConcentrateFormula) Update() *ConcentrateFormulaUpdateOne {
	return (&ConcentrateFormulaClient{config: cf.config}).UpdateOne(cf)
}

// Unwrap unwraps the ConcentrateFormula entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cf *ConcentrateFormula) Unwrap() *ConcentrateFormula {
	_tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConcentrateFormula is not a transactional entity")
	}
	cf.config.driver = _tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *ConcentrateFormula) String() string {
	var builder strings.Builder
	builder.WriteString("ConcentrateFormula(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cf.ID))
	builder.WriteString("name=")
	builder.WriteString(cf.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(cf.Code)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cf.Status))
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", cf.Cost))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(cf.Data)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cf.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(cf.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", cf.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(cf.FarmName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(cf.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cf.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cf.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cf.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// ConcentrateFormulas is a parsable slice of ConcentrateFormula.
type ConcentrateFormulas []*ConcentrateFormula

func (cf ConcentrateFormulas) config(cfg config) {
	for _i := range cf {
		cf[_i].config = cfg
	}
}

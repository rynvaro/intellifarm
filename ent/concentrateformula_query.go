// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/concentrateformula"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ConcentrateFormulaQuery is the builder for querying ConcentrateFormula entities.
type ConcentrateFormulaQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ConcentrateFormula
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (cfq *ConcentrateFormulaQuery) Where(ps ...predicate.ConcentrateFormula) *ConcentrateFormulaQuery {
	cfq.predicates = append(cfq.predicates, ps...)
	return cfq
}

// Limit adds a limit step to the query.
func (cfq *ConcentrateFormulaQuery) Limit(limit int) *ConcentrateFormulaQuery {
	cfq.limit = &limit
	return cfq
}

// Offset adds an offset step to the query.
func (cfq *ConcentrateFormulaQuery) Offset(offset int) *ConcentrateFormulaQuery {
	cfq.offset = &offset
	return cfq
}

// Order adds an order step to the query.
func (cfq *ConcentrateFormulaQuery) Order(o ...OrderFunc) *ConcentrateFormulaQuery {
	cfq.order = append(cfq.order, o...)
	return cfq
}

// First returns the first ConcentrateFormula entity in the query. Returns *NotFoundError when no concentrateformula was found.
func (cfq *ConcentrateFormulaQuery) First(ctx context.Context) (*ConcentrateFormula, error) {
	nodes, err := cfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{concentrateformula.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cfq *ConcentrateFormulaQuery) FirstX(ctx context.Context) *ConcentrateFormula {
	node, err := cfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ConcentrateFormula id in the query. Returns *NotFoundError when no id was found.
func (cfq *ConcentrateFormulaQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{concentrateformula.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (cfq *ConcentrateFormulaQuery) FirstXID(ctx context.Context) int64 {
	id, err := cfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ConcentrateFormula entity in the query, returns an error if not exactly one entity was returned.
func (cfq *ConcentrateFormulaQuery) Only(ctx context.Context) (*ConcentrateFormula, error) {
	nodes, err := cfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{concentrateformula.Label}
	default:
		return nil, &NotSingularError{concentrateformula.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cfq *ConcentrateFormulaQuery) OnlyX(ctx context.Context) *ConcentrateFormula {
	node, err := cfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ConcentrateFormula id in the query, returns an error if not exactly one id was returned.
func (cfq *ConcentrateFormulaQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{concentrateformula.Label}
	default:
		err = &NotSingularError{concentrateformula.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cfq *ConcentrateFormulaQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := cfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ConcentrateFormulas.
func (cfq *ConcentrateFormulaQuery) All(ctx context.Context) ([]*ConcentrateFormula, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cfq *ConcentrateFormulaQuery) AllX(ctx context.Context) []*ConcentrateFormula {
	nodes, err := cfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ConcentrateFormula ids.
func (cfq *ConcentrateFormulaQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := cfq.Select(concentrateformula.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cfq *ConcentrateFormulaQuery) IDsX(ctx context.Context) []int64 {
	ids, err := cfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cfq *ConcentrateFormulaQuery) Count(ctx context.Context) (int, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cfq *ConcentrateFormulaQuery) CountX(ctx context.Context) int {
	count, err := cfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cfq *ConcentrateFormulaQuery) Exist(ctx context.Context) (bool, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cfq *ConcentrateFormulaQuery) ExistX(ctx context.Context) bool {
	exist, err := cfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cfq *ConcentrateFormulaQuery) Clone() *ConcentrateFormulaQuery {
	return &ConcentrateFormulaQuery{
		config:     cfq.config,
		limit:      cfq.limit,
		offset:     cfq.offset,
		order:      append([]OrderFunc{}, cfq.order...),
		unique:     append([]string{}, cfq.unique...),
		predicates: append([]predicate.ConcentrateFormula{}, cfq.predicates...),
		// clone intermediate query.
		sql:  cfq.sql.Clone(),
		path: cfq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ConcentrateFormula.Query().
//		GroupBy(concentrateformula.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cfq *ConcentrateFormulaQuery) GroupBy(field string, fields ...string) *ConcentrateFormulaGroupBy {
	group := &ConcentrateFormulaGroupBy{config: cfq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cfq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ConcentrateFormula.Query().
//		Select(concentrateformula.FieldName).
//		Scan(ctx, &v)
//
func (cfq *ConcentrateFormulaQuery) Select(field string, fields ...string) *ConcentrateFormulaSelect {
	selector := &ConcentrateFormulaSelect{config: cfq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cfq.sqlQuery(), nil
	}
	return selector
}

func (cfq *ConcentrateFormulaQuery) prepareQuery(ctx context.Context) error {
	if cfq.path != nil {
		prev, err := cfq.path(ctx)
		if err != nil {
			return err
		}
		cfq.sql = prev
	}
	return nil
}

func (cfq *ConcentrateFormulaQuery) sqlAll(ctx context.Context) ([]*ConcentrateFormula, error) {
	var (
		nodes = []*ConcentrateFormula{}
		_spec = cfq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &ConcentrateFormula{config: cfq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, cfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (cfq *ConcentrateFormulaQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cfq.querySpec()
	return sqlgraph.CountNodes(ctx, cfq.driver, _spec)
}

func (cfq *ConcentrateFormulaQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cfq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (cfq *ConcentrateFormulaQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concentrateformula.Table,
			Columns: concentrateformula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: concentrateformula.FieldID,
			},
		},
		From:   cfq.sql,
		Unique: true,
	}
	if ps := cfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, concentrateformula.ValidColumn)
			}
		}
	}
	return _spec
}

func (cfq *ConcentrateFormulaQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(cfq.driver.Dialect())
	t1 := builder.Table(concentrateformula.Table)
	selector := builder.Select(t1.Columns(concentrateformula.Columns...)...).From(t1)
	if cfq.sql != nil {
		selector = cfq.sql
		selector.Select(selector.Columns(concentrateformula.Columns...)...)
	}
	for _, p := range cfq.predicates {
		p(selector)
	}
	for _, p := range cfq.order {
		p(selector, concentrateformula.ValidColumn)
	}
	if offset := cfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ConcentrateFormulaGroupBy is the builder for group-by ConcentrateFormula entities.
type ConcentrateFormulaGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cfgb *ConcentrateFormulaGroupBy) Aggregate(fns ...AggregateFunc) *ConcentrateFormulaGroupBy {
	cfgb.fns = append(cfgb.fns, fns...)
	return cfgb
}

// Scan applies the group-by query and scan the result into the given value.
func (cfgb *ConcentrateFormulaGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cfgb.path(ctx)
	if err != nil {
		return err
	}
	cfgb.sql = query
	return cfgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cfgb *ConcentrateFormulaGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cfgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (cfgb *ConcentrateFormulaGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cfgb.fields) > 1 {
		return nil, errors.New("ent: ConcentrateFormulaGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cfgb *ConcentrateFormulaGroupBy) StringsX(ctx context.Context) []string {
	v, err := cfgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (cfgb *ConcentrateFormulaGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cfgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{concentrateformula.Label}
	default:
		err = fmt.Errorf("ent: ConcentrateFormulaGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cfgb *ConcentrateFormulaGroupBy) StringX(ctx context.Context) string {
	v, err := cfgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (cfgb *ConcentrateFormulaGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cfgb.fields) > 1 {
		return nil, errors.New("ent: ConcentrateFormulaGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cfgb *ConcentrateFormulaGroupBy) IntsX(ctx context.Context) []int {
	v, err := cfgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (cfgb *ConcentrateFormulaGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cfgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{concentrateformula.Label}
	default:
		err = fmt.Errorf("ent: ConcentrateFormulaGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cfgb *ConcentrateFormulaGroupBy) IntX(ctx context.Context) int {
	v, err := cfgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (cfgb *ConcentrateFormulaGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cfgb.fields) > 1 {
		return nil, errors.New("ent: ConcentrateFormulaGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cfgb *ConcentrateFormulaGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cfgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (cfgb *ConcentrateFormulaGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cfgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{concentrateformula.Label}
	default:
		err = fmt.Errorf("ent: ConcentrateFormulaGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cfgb *ConcentrateFormulaGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cfgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (cfgb *ConcentrateFormulaGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cfgb.fields) > 1 {
		return nil, errors.New("ent: ConcentrateFormulaGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cfgb *ConcentrateFormulaGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cfgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (cfgb *ConcentrateFormulaGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cfgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{concentrateformula.Label}
	default:
		err = fmt.Errorf("ent: ConcentrateFormulaGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cfgb *ConcentrateFormulaGroupBy) BoolX(ctx context.Context) bool {
	v, err := cfgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cfgb *ConcentrateFormulaGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cfgb.fields {
		if !concentrateformula.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cfgb *ConcentrateFormulaGroupBy) sqlQuery() *sql.Selector {
	selector := cfgb.sql
	columns := make([]string, 0, len(cfgb.fields)+len(cfgb.fns))
	columns = append(columns, cfgb.fields...)
	for _, fn := range cfgb.fns {
		columns = append(columns, fn(selector, concentrateformula.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(cfgb.fields...)
}

// ConcentrateFormulaSelect is the builder for select fields of ConcentrateFormula entities.
type ConcentrateFormulaSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (cfs *ConcentrateFormulaSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := cfs.path(ctx)
	if err != nil {
		return err
	}
	cfs.sql = query
	return cfs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cfs *ConcentrateFormulaSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cfs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (cfs *ConcentrateFormulaSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cfs.fields) > 1 {
		return nil, errors.New("ent: ConcentrateFormulaSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cfs *ConcentrateFormulaSelect) StringsX(ctx context.Context) []string {
	v, err := cfs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (cfs *ConcentrateFormulaSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cfs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{concentrateformula.Label}
	default:
		err = fmt.Errorf("ent: ConcentrateFormulaSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cfs *ConcentrateFormulaSelect) StringX(ctx context.Context) string {
	v, err := cfs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (cfs *ConcentrateFormulaSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cfs.fields) > 1 {
		return nil, errors.New("ent: ConcentrateFormulaSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cfs *ConcentrateFormulaSelect) IntsX(ctx context.Context) []int {
	v, err := cfs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (cfs *ConcentrateFormulaSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cfs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{concentrateformula.Label}
	default:
		err = fmt.Errorf("ent: ConcentrateFormulaSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cfs *ConcentrateFormulaSelect) IntX(ctx context.Context) int {
	v, err := cfs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (cfs *ConcentrateFormulaSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cfs.fields) > 1 {
		return nil, errors.New("ent: ConcentrateFormulaSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cfs *ConcentrateFormulaSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cfs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (cfs *ConcentrateFormulaSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cfs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{concentrateformula.Label}
	default:
		err = fmt.Errorf("ent: ConcentrateFormulaSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cfs *ConcentrateFormulaSelect) Float64X(ctx context.Context) float64 {
	v, err := cfs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (cfs *ConcentrateFormulaSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cfs.fields) > 1 {
		return nil, errors.New("ent: ConcentrateFormulaSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cfs *ConcentrateFormulaSelect) BoolsX(ctx context.Context) []bool {
	v, err := cfs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (cfs *ConcentrateFormulaSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cfs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{concentrateformula.Label}
	default:
		err = fmt.Errorf("ent: ConcentrateFormulaSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cfs *ConcentrateFormulaSelect) BoolX(ctx context.Context) bool {
	v, err := cfs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cfs *ConcentrateFormulaSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cfs.fields {
		if !concentrateformula.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := cfs.sqlQuery().Query()
	if err := cfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cfs *ConcentrateFormulaSelect) sqlQuery() sql.Querier {
	selector := cfs.sql
	selector.Select(selector.Columns(cfs.fields...)...)
	return selector
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/concentrateformula"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConcentrateFormulaUpdate is the builder for updating ConcentrateFormula entities.
type ConcentrateFormulaUpdate struct {
	config
	hooks    []Hook
	mutation *ConcentrateFormulaMutation
}

// Where appends a list predicates to the ConcentrateFormulaUpdate builder.
func (cfu *ConcentrateFormulaUpdate) Where(ps ...predicate.ConcentrateFormula) *ConcentrateFormulaUpdate {
	cfu.mutation.Where(ps...)
	return cfu
}

// SetName sets the "name" field.
func (cfu *ConcentrateFormulaUpdate) SetName(s string) *ConcentrateFormulaUpdate {
	cfu.mutation.SetName(s)
	return cfu
}

// SetCode sets the "code" field.
func (cfu *ConcentrateFormulaUpdate) SetCode(s string) *ConcentrateFormulaUpdate {
	cfu.mutation.SetCode(s)
	return cfu
}

// SetStatus sets the "status" field.
func (cfu *ConcentrateFormulaUpdate) SetStatus(i int) *ConcentrateFormulaUpdate {
	cfu.mutation.ResetStatus()
	cfu.mutation.SetStatus(i)
	return cfu
}

// AddStatus adds i to the "status" field.
func (cfu *ConcentrateFormulaUpdate) AddStatus(i int) *ConcentrateFormulaUpdate {
	cfu.mutation.AddStatus(i)
	return cfu
}

// SetCost sets the "cost" field.
func (cfu *ConcentrateFormulaUpdate) SetCost(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.ResetCost()
	cfu.mutation.SetCost(i)
	return cfu
}

// AddCost adds i to the "cost" field.
func (cfu *ConcentrateFormulaUpdate) AddCost(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.AddCost(i)
	return cfu
}

// SetData sets the "data" field.
func (cfu *ConcentrateFormulaUpdate) SetData(s string) *ConcentrateFormulaUpdate {
	cfu.mutation.SetData(s)
	return cfu
}

// SetTenantId sets the "tenantId" field.
func (cfu *ConcentrateFormulaUpdate) SetTenantId(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.ResetTenantId()
	cfu.mutation.SetTenantId(i)
	return cfu
}

// AddTenantId adds i to the "tenantId" field.
func (cfu *ConcentrateFormulaUpdate) AddTenantId(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.AddTenantId(i)
	return cfu
}

// SetTenantName sets the "tenantName" field.
func (cfu *ConcentrateFormulaUpdate) SetTenantName(s string) *ConcentrateFormulaUpdate {
	cfu.mutation.SetTenantName(s)
	return cfu
}

// SetFarmId sets the "farmId" field.
func (cfu *ConcentrateFormulaUpdate) SetFarmId(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.ResetFarmId()
	cfu.mutation.SetFarmId(i)
	return cfu
}

// AddFarmId adds i to the "farmId" field.
func (cfu *ConcentrateFormulaUpdate) AddFarmId(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.AddFarmId(i)
	return cfu
}

// SetFarmName sets the "farmName" field.
func (cfu *ConcentrateFormulaUpdate) SetFarmName(s string) *ConcentrateFormulaUpdate {
	cfu.mutation.SetFarmName(s)
	return cfu
}

// SetRemarks sets the "remarks" field.
func (cfu *ConcentrateFormulaUpdate) SetRemarks(s string) *ConcentrateFormulaUpdate {
	cfu.mutation.SetRemarks(s)
	return cfu
}

// SetCreatedAt sets the "createdAt" field.
func (cfu *ConcentrateFormulaUpdate) SetCreatedAt(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.ResetCreatedAt()
	cfu.mutation.SetCreatedAt(i)
	return cfu
}

// AddCreatedAt adds i to the "createdAt" field.
func (cfu *ConcentrateFormulaUpdate) AddCreatedAt(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.AddCreatedAt(i)
	return cfu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cfu *ConcentrateFormulaUpdate) SetUpdatedAt(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.ResetUpdatedAt()
	cfu.mutation.SetUpdatedAt(i)
	return cfu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cfu *ConcentrateFormulaUpdate) AddUpdatedAt(i int64) *ConcentrateFormulaUpdate {
	cfu.mutation.AddUpdatedAt(i)
	return cfu
}

// SetDeleted sets the "deleted" field.
func (cfu *ConcentrateFormulaUpdate) SetDeleted(i int) *ConcentrateFormulaUpdate {
	cfu.mutation.ResetDeleted()
	cfu.mutation.SetDeleted(i)
	return cfu
}

// AddDeleted adds i to the "deleted" field.
func (cfu *ConcentrateFormulaUpdate) AddDeleted(i int) *ConcentrateFormulaUpdate {
	cfu.mutation.AddDeleted(i)
	return cfu
}

// Mutation returns the ConcentrateFormulaMutation object of the builder.
func (cfu *ConcentrateFormulaUpdate) Mutation() *ConcentrateFormulaMutation {
	return cfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *ConcentrateFormulaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cfu.hooks) == 0 {
		affected, err = cfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConcentrateFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cfu.mutation = mutation
			affected, err = cfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cfu.hooks) - 1; i >= 0; i-- {
			if cfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *ConcentrateFormulaUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *ConcentrateFormulaUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *ConcentrateFormulaUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cfu *ConcentrateFormulaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concentrateformula.Table,
			Columns: concentrateformula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: concentrateformula.FieldID,
			},
		},
	}
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldName,
		})
	}
	if value, ok := cfu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldCode,
		})
	}
	if value, ok := cfu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateformula.FieldStatus,
		})
	}
	if value, ok := cfu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateformula.FieldStatus,
		})
	}
	if value, ok := cfu.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldCost,
		})
	}
	if value, ok := cfu.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldCost,
		})
	}
	if value, ok := cfu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldData,
		})
	}
	if value, ok := cfu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldTenantId,
		})
	}
	if value, ok := cfu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldTenantId,
		})
	}
	if value, ok := cfu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldTenantName,
		})
	}
	if value, ok := cfu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldFarmId,
		})
	}
	if value, ok := cfu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldFarmId,
		})
	}
	if value, ok := cfu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldFarmName,
		})
	}
	if value, ok := cfu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldRemarks,
		})
	}
	if value, ok := cfu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldCreatedAt,
		})
	}
	if value, ok := cfu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldCreatedAt,
		})
	}
	if value, ok := cfu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldUpdatedAt,
		})
	}
	if value, ok := cfu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldUpdatedAt,
		})
	}
	if value, ok := cfu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateformula.FieldDeleted,
		})
	}
	if value, ok := cfu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateformula.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concentrateformula.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ConcentrateFormulaUpdateOne is the builder for updating a single ConcentrateFormula entity.
type ConcentrateFormulaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConcentrateFormulaMutation
}

// SetName sets the "name" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetName(s string) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.SetName(s)
	return cfuo
}

// SetCode sets the "code" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetCode(s string) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.SetCode(s)
	return cfuo
}

// SetStatus sets the "status" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetStatus(i int) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.ResetStatus()
	cfuo.mutation.SetStatus(i)
	return cfuo
}

// AddStatus adds i to the "status" field.
func (cfuo *ConcentrateFormulaUpdateOne) AddStatus(i int) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.AddStatus(i)
	return cfuo
}

// SetCost sets the "cost" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetCost(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.ResetCost()
	cfuo.mutation.SetCost(i)
	return cfuo
}

// AddCost adds i to the "cost" field.
func (cfuo *ConcentrateFormulaUpdateOne) AddCost(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.AddCost(i)
	return cfuo
}

// SetData sets the "data" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetData(s string) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.SetData(s)
	return cfuo
}

// SetTenantId sets the "tenantId" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetTenantId(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.ResetTenantId()
	cfuo.mutation.SetTenantId(i)
	return cfuo
}

// AddTenantId adds i to the "tenantId" field.
func (cfuo *ConcentrateFormulaUpdateOne) AddTenantId(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.AddTenantId(i)
	return cfuo
}

// SetTenantName sets the "tenantName" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetTenantName(s string) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.SetTenantName(s)
	return cfuo
}

// SetFarmId sets the "farmId" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetFarmId(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.ResetFarmId()
	cfuo.mutation.SetFarmId(i)
	return cfuo
}

// AddFarmId adds i to the "farmId" field.
func (cfuo *ConcentrateFormulaUpdateOne) AddFarmId(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.AddFarmId(i)
	return cfuo
}

// SetFarmName sets the "farmName" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetFarmName(s string) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.SetFarmName(s)
	return cfuo
}

// SetRemarks sets the "remarks" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetRemarks(s string) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.SetRemarks(s)
	return cfuo
}

// SetCreatedAt sets the "createdAt" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetCreatedAt(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.ResetCreatedAt()
	cfuo.mutation.SetCreatedAt(i)
	return cfuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (cfuo *ConcentrateFormulaUpdateOne) AddCreatedAt(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.AddCreatedAt(i)
	return cfuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetUpdatedAt(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.ResetUpdatedAt()
	cfuo.mutation.SetUpdatedAt(i)
	return cfuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cfuo *ConcentrateFormulaUpdateOne) AddUpdatedAt(i int64) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.AddUpdatedAt(i)
	return cfuo
}

// SetDeleted sets the "deleted" field.
func (cfuo *ConcentrateFormulaUpdateOne) SetDeleted(i int) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.ResetDeleted()
	cfuo.mutation.SetDeleted(i)
	return cfuo
}

// AddDeleted adds i to the "deleted" field.
func (cfuo *ConcentrateFormulaUpdateOne) AddDeleted(i int) *ConcentrateFormulaUpdateOne {
	cfuo.mutation.AddDeleted(i)
	return cfuo
}

// Mutation returns the ConcentrateFormulaMutation object of the builder.
func (cfuo *ConcentrateFormulaUpdateOne) Mutation() *ConcentrateFormulaMutation {
	return cfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfuo *ConcentrateFormulaUpdateOne) Select(field string, fields ...string) *ConcentrateFormulaUpdateOne {
	cfuo.fields = append([]string{field}, fields...)
	return cfuo
}

// Save executes the query and returns the updated ConcentrateFormula entity.
func (cfuo *ConcentrateFormulaUpdateOne) Save(ctx context.Context) (*ConcentrateFormula, error) {
	var (
		err  error
		node *ConcentrateFormula
	)
	if len(cfuo.hooks) == 0 {
		node, err = cfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConcentrateFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cfuo.mutation = mutation
			node, err = cfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cfuo.hooks) - 1; i >= 0; i-- {
			if cfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ConcentrateFormula)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConcentrateFormulaMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *ConcentrateFormulaUpdateOne) SaveX(ctx context.Context) *ConcentrateFormula {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *ConcentrateFormulaUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *ConcentrateFormulaUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cfuo *ConcentrateFormulaUpdateOne) sqlSave(ctx context.Context) (_node *ConcentrateFormula, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concentrateformula.Table,
			Columns: concentrateformula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: concentrateformula.FieldID,
			},
		},
	}
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConcentrateFormula.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, concentrateformula.FieldID)
		for _, f := range fields {
			if !concentrateformula.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != concentrateformula.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldName,
		})
	}
	if value, ok := cfuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldCode,
		})
	}
	if value, ok := cfuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateformula.FieldStatus,
		})
	}
	if value, ok := cfuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateformula.FieldStatus,
		})
	}
	if value, ok := cfuo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldCost,
		})
	}
	if value, ok := cfuo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldCost,
		})
	}
	if value, ok := cfuo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldData,
		})
	}
	if value, ok := cfuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldTenantId,
		})
	}
	if value, ok := cfuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldTenantId,
		})
	}
	if value, ok := cfuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldTenantName,
		})
	}
	if value, ok := cfuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldFarmId,
		})
	}
	if value, ok := cfuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldFarmId,
		})
	}
	if value, ok := cfuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldFarmName,
		})
	}
	if value, ok := cfuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateformula.FieldRemarks,
		})
	}
	if value, ok := cfuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldCreatedAt,
		})
	}
	if value, ok := cfuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldCreatedAt,
		})
	}
	if value, ok := cfuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldUpdatedAt,
		})
	}
	if value, ok := cfuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateformula.FieldUpdatedAt,
		})
	}
	if value, ok := cfuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateformula.FieldDeleted,
		})
	}
	if value, ok := cfuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateformula.FieldDeleted,
		})
	}
	_node = &ConcentrateFormula{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concentrateformula.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

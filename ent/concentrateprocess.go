// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/concentrateprocess"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ConcentrateProcess is the model entity for the ConcentrateProcess schema.
type ConcentrateProcess struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 精料ID
	ConcentrateId int64 `json:"concentrateId,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// 加工日期
	Date int64 `json:"date,omitempty"`
	// 加工数量
	Count int64 `json:"count,omitempty"`
	// 实际入库量
	In int64 `json:"in,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConcentrateProcess) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case concentrateprocess.FieldID, concentrateprocess.FieldConcentrateId, concentrateprocess.FieldDate, concentrateprocess.FieldCount, concentrateprocess.FieldIn, concentrateprocess.FieldTenantId, concentrateprocess.FieldFarmId, concentrateprocess.FieldCreatedAt, concentrateprocess.FieldUpdatedAt, concentrateprocess.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case concentrateprocess.FieldName, concentrateprocess.FieldUserName, concentrateprocess.FieldTenantName, concentrateprocess.FieldFarmName, concentrateprocess.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ConcentrateProcess", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConcentrateProcess fields.
func (cp *ConcentrateProcess) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case concentrateprocess.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case concentrateprocess.FieldConcentrateId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field concentrateId", values[i])
			} else if value.Valid {
				cp.ConcentrateId = value.Int64
			}
		case concentrateprocess.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cp.Name = value.String
			}
		case concentrateprocess.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				cp.Date = value.Int64
			}
		case concentrateprocess.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				cp.Count = value.Int64
			}
		case concentrateprocess.FieldIn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field in", values[i])
			} else if value.Valid {
				cp.In = value.Int64
			}
		case concentrateprocess.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				cp.UserName = value.String
			}
		case concentrateprocess.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cp.TenantId = value.Int64
			}
		case concentrateprocess.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				cp.TenantName = value.String
			}
		case concentrateprocess.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				cp.FarmId = value.Int64
			}
		case concentrateprocess.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				cp.FarmName = value.String
			}
		case concentrateprocess.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				cp.Remarks = value.String
			}
		case concentrateprocess.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cp.CreatedAt = value.Int64
			}
		case concentrateprocess.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cp.UpdatedAt = value.Int64
			}
		case concentrateprocess.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cp.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ConcentrateProcess.
// Note that you need to call ConcentrateProcess.Unwrap() before calling this method if this ConcentrateProcess
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *ConcentrateProcess) Update() *ConcentrateProcessUpdateOne {
	return (&ConcentrateProcessClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the ConcentrateProcess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *ConcentrateProcess) Unwrap() *ConcentrateProcess {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConcentrateProcess is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *ConcentrateProcess) String() string {
	var builder strings.Builder
	builder.WriteString("ConcentrateProcess(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("concentrateId=")
	builder.WriteString(fmt.Sprintf("%v", cp.ConcentrateId))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cp.Name)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", cp.Date))
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", cp.Count))
	builder.WriteString(", ")
	builder.WriteString("in=")
	builder.WriteString(fmt.Sprintf("%v", cp.In))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(cp.UserName)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cp.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(cp.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", cp.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(cp.FarmName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(cp.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", cp.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", cp.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cp.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// ConcentrateProcesses is a parsable slice of ConcentrateProcess.
type ConcentrateProcesses []*ConcentrateProcess

func (cp ConcentrateProcesses) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}

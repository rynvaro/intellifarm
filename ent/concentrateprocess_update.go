// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/concentrateprocess"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConcentrateProcessUpdate is the builder for updating ConcentrateProcess entities.
type ConcentrateProcessUpdate struct {
	config
	hooks    []Hook
	mutation *ConcentrateProcessMutation
}

// Where appends a list predicates to the ConcentrateProcessUpdate builder.
func (cpu *ConcentrateProcessUpdate) Where(ps ...predicate.ConcentrateProcess) *ConcentrateProcessUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetConcentrateId sets the "concentrateId" field.
func (cpu *ConcentrateProcessUpdate) SetConcentrateId(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetConcentrateId()
	cpu.mutation.SetConcentrateId(i)
	return cpu
}

// AddConcentrateId adds i to the "concentrateId" field.
func (cpu *ConcentrateProcessUpdate) AddConcentrateId(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddConcentrateId(i)
	return cpu
}

// SetName sets the "name" field.
func (cpu *ConcentrateProcessUpdate) SetName(s string) *ConcentrateProcessUpdate {
	cpu.mutation.SetName(s)
	return cpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpu *ConcentrateProcessUpdate) SetNillableName(s *string) *ConcentrateProcessUpdate {
	if s != nil {
		cpu.SetName(*s)
	}
	return cpu
}

// ClearName clears the value of the "name" field.
func (cpu *ConcentrateProcessUpdate) ClearName() *ConcentrateProcessUpdate {
	cpu.mutation.ClearName()
	return cpu
}

// SetDate sets the "date" field.
func (cpu *ConcentrateProcessUpdate) SetDate(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetDate()
	cpu.mutation.SetDate(i)
	return cpu
}

// AddDate adds i to the "date" field.
func (cpu *ConcentrateProcessUpdate) AddDate(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddDate(i)
	return cpu
}

// SetCount sets the "count" field.
func (cpu *ConcentrateProcessUpdate) SetCount(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetCount()
	cpu.mutation.SetCount(i)
	return cpu
}

// AddCount adds i to the "count" field.
func (cpu *ConcentrateProcessUpdate) AddCount(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddCount(i)
	return cpu
}

// SetIn sets the "in" field.
func (cpu *ConcentrateProcessUpdate) SetIn(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetIn()
	cpu.mutation.SetIn(i)
	return cpu
}

// AddIn adds i to the "in" field.
func (cpu *ConcentrateProcessUpdate) AddIn(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddIn(i)
	return cpu
}

// SetUserName sets the "userName" field.
func (cpu *ConcentrateProcessUpdate) SetUserName(s string) *ConcentrateProcessUpdate {
	cpu.mutation.SetUserName(s)
	return cpu
}

// SetTenantId sets the "tenantId" field.
func (cpu *ConcentrateProcessUpdate) SetTenantId(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetTenantId()
	cpu.mutation.SetTenantId(i)
	return cpu
}

// AddTenantId adds i to the "tenantId" field.
func (cpu *ConcentrateProcessUpdate) AddTenantId(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddTenantId(i)
	return cpu
}

// SetTenantName sets the "tenantName" field.
func (cpu *ConcentrateProcessUpdate) SetTenantName(s string) *ConcentrateProcessUpdate {
	cpu.mutation.SetTenantName(s)
	return cpu
}

// SetFarmId sets the "farmId" field.
func (cpu *ConcentrateProcessUpdate) SetFarmId(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetFarmId()
	cpu.mutation.SetFarmId(i)
	return cpu
}

// AddFarmId adds i to the "farmId" field.
func (cpu *ConcentrateProcessUpdate) AddFarmId(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddFarmId(i)
	return cpu
}

// SetFarmName sets the "farmName" field.
func (cpu *ConcentrateProcessUpdate) SetFarmName(s string) *ConcentrateProcessUpdate {
	cpu.mutation.SetFarmName(s)
	return cpu
}

// SetRemarks sets the "remarks" field.
func (cpu *ConcentrateProcessUpdate) SetRemarks(s string) *ConcentrateProcessUpdate {
	cpu.mutation.SetRemarks(s)
	return cpu
}

// SetCreatedAt sets the "createdAt" field.
func (cpu *ConcentrateProcessUpdate) SetCreatedAt(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetCreatedAt()
	cpu.mutation.SetCreatedAt(i)
	return cpu
}

// AddCreatedAt adds i to the "createdAt" field.
func (cpu *ConcentrateProcessUpdate) AddCreatedAt(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddCreatedAt(i)
	return cpu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cpu *ConcentrateProcessUpdate) SetUpdatedAt(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetUpdatedAt()
	cpu.mutation.SetUpdatedAt(i)
	return cpu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cpu *ConcentrateProcessUpdate) AddUpdatedAt(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddUpdatedAt(i)
	return cpu
}

// SetDeleted sets the "deleted" field.
func (cpu *ConcentrateProcessUpdate) SetDeleted(i int) *ConcentrateProcessUpdate {
	cpu.mutation.ResetDeleted()
	cpu.mutation.SetDeleted(i)
	return cpu
}

// AddDeleted adds i to the "deleted" field.
func (cpu *ConcentrateProcessUpdate) AddDeleted(i int) *ConcentrateProcessUpdate {
	cpu.mutation.AddDeleted(i)
	return cpu
}

// Mutation returns the ConcentrateProcessMutation object of the builder.
func (cpu *ConcentrateProcessUpdate) Mutation() *ConcentrateProcessMutation {
	return cpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *ConcentrateProcessUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cpu.hooks) == 0 {
		affected, err = cpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConcentrateProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpu.mutation = mutation
			affected, err = cpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cpu.hooks) - 1; i >= 0; i-- {
			if cpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *ConcentrateProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *ConcentrateProcessUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *ConcentrateProcessUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpu *ConcentrateProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concentrateprocess.Table,
			Columns: concentrateprocess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: concentrateprocess.FieldID,
			},
		},
	}
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.ConcentrateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldConcentrateId,
		})
	}
	if value, ok := cpu.mutation.AddedConcentrateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldConcentrateId,
		})
	}
	if value, ok := cpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldName,
		})
	}
	if cpu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: concentrateprocess.FieldName,
		})
	}
	if value, ok := cpu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldDate,
		})
	}
	if value, ok := cpu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldDate,
		})
	}
	if value, ok := cpu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCount,
		})
	}
	if value, ok := cpu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCount,
		})
	}
	if value, ok := cpu.mutation.In(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldIn,
		})
	}
	if value, ok := cpu.mutation.AddedIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldIn,
		})
	}
	if value, ok := cpu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldUserName,
		})
	}
	if value, ok := cpu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldTenantId,
		})
	}
	if value, ok := cpu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldTenantId,
		})
	}
	if value, ok := cpu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldTenantName,
		})
	}
	if value, ok := cpu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldFarmId,
		})
	}
	if value, ok := cpu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldFarmId,
		})
	}
	if value, ok := cpu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldFarmName,
		})
	}
	if value, ok := cpu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldRemarks,
		})
	}
	if value, ok := cpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCreatedAt,
		})
	}
	if value, ok := cpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCreatedAt,
		})
	}
	if value, ok := cpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldUpdatedAt,
		})
	}
	if value, ok := cpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldUpdatedAt,
		})
	}
	if value, ok := cpu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateprocess.FieldDeleted,
		})
	}
	if value, ok := cpu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateprocess.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concentrateprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ConcentrateProcessUpdateOne is the builder for updating a single ConcentrateProcess entity.
type ConcentrateProcessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConcentrateProcessMutation
}

// SetConcentrateId sets the "concentrateId" field.
func (cpuo *ConcentrateProcessUpdateOne) SetConcentrateId(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetConcentrateId()
	cpuo.mutation.SetConcentrateId(i)
	return cpuo
}

// AddConcentrateId adds i to the "concentrateId" field.
func (cpuo *ConcentrateProcessUpdateOne) AddConcentrateId(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddConcentrateId(i)
	return cpuo
}

// SetName sets the "name" field.
func (cpuo *ConcentrateProcessUpdateOne) SetName(s string) *ConcentrateProcessUpdateOne {
	cpuo.mutation.SetName(s)
	return cpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpuo *ConcentrateProcessUpdateOne) SetNillableName(s *string) *ConcentrateProcessUpdateOne {
	if s != nil {
		cpuo.SetName(*s)
	}
	return cpuo
}

// ClearName clears the value of the "name" field.
func (cpuo *ConcentrateProcessUpdateOne) ClearName() *ConcentrateProcessUpdateOne {
	cpuo.mutation.ClearName()
	return cpuo
}

// SetDate sets the "date" field.
func (cpuo *ConcentrateProcessUpdateOne) SetDate(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetDate()
	cpuo.mutation.SetDate(i)
	return cpuo
}

// AddDate adds i to the "date" field.
func (cpuo *ConcentrateProcessUpdateOne) AddDate(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddDate(i)
	return cpuo
}

// SetCount sets the "count" field.
func (cpuo *ConcentrateProcessUpdateOne) SetCount(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetCount()
	cpuo.mutation.SetCount(i)
	return cpuo
}

// AddCount adds i to the "count" field.
func (cpuo *ConcentrateProcessUpdateOne) AddCount(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddCount(i)
	return cpuo
}

// SetIn sets the "in" field.
func (cpuo *ConcentrateProcessUpdateOne) SetIn(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetIn()
	cpuo.mutation.SetIn(i)
	return cpuo
}

// AddIn adds i to the "in" field.
func (cpuo *ConcentrateProcessUpdateOne) AddIn(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddIn(i)
	return cpuo
}

// SetUserName sets the "userName" field.
func (cpuo *ConcentrateProcessUpdateOne) SetUserName(s string) *ConcentrateProcessUpdateOne {
	cpuo.mutation.SetUserName(s)
	return cpuo
}

// SetTenantId sets the "tenantId" field.
func (cpuo *ConcentrateProcessUpdateOne) SetTenantId(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetTenantId()
	cpuo.mutation.SetTenantId(i)
	return cpuo
}

// AddTenantId adds i to the "tenantId" field.
func (cpuo *ConcentrateProcessUpdateOne) AddTenantId(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddTenantId(i)
	return cpuo
}

// SetTenantName sets the "tenantName" field.
func (cpuo *ConcentrateProcessUpdateOne) SetTenantName(s string) *ConcentrateProcessUpdateOne {
	cpuo.mutation.SetTenantName(s)
	return cpuo
}

// SetFarmId sets the "farmId" field.
func (cpuo *ConcentrateProcessUpdateOne) SetFarmId(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetFarmId()
	cpuo.mutation.SetFarmId(i)
	return cpuo
}

// AddFarmId adds i to the "farmId" field.
func (cpuo *ConcentrateProcessUpdateOne) AddFarmId(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddFarmId(i)
	return cpuo
}

// SetFarmName sets the "farmName" field.
func (cpuo *ConcentrateProcessUpdateOne) SetFarmName(s string) *ConcentrateProcessUpdateOne {
	cpuo.mutation.SetFarmName(s)
	return cpuo
}

// SetRemarks sets the "remarks" field.
func (cpuo *ConcentrateProcessUpdateOne) SetRemarks(s string) *ConcentrateProcessUpdateOne {
	cpuo.mutation.SetRemarks(s)
	return cpuo
}

// SetCreatedAt sets the "createdAt" field.
func (cpuo *ConcentrateProcessUpdateOne) SetCreatedAt(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetCreatedAt()
	cpuo.mutation.SetCreatedAt(i)
	return cpuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (cpuo *ConcentrateProcessUpdateOne) AddCreatedAt(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddCreatedAt(i)
	return cpuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (cpuo *ConcentrateProcessUpdateOne) SetUpdatedAt(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetUpdatedAt()
	cpuo.mutation.SetUpdatedAt(i)
	return cpuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (cpuo *ConcentrateProcessUpdateOne) AddUpdatedAt(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddUpdatedAt(i)
	return cpuo
}

// SetDeleted sets the "deleted" field.
func (cpuo *ConcentrateProcessUpdateOne) SetDeleted(i int) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetDeleted()
	cpuo.mutation.SetDeleted(i)
	return cpuo
}

// AddDeleted adds i to the "deleted" field.
func (cpuo *ConcentrateProcessUpdateOne) AddDeleted(i int) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddDeleted(i)
	return cpuo
}

// Mutation returns the ConcentrateProcessMutation object of the builder.
func (cpuo *ConcentrateProcessUpdateOne) Mutation() *ConcentrateProcessMutation {
	return cpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *ConcentrateProcessUpdateOne) Select(field string, fields ...string) *ConcentrateProcessUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated ConcentrateProcess entity.
func (cpuo *ConcentrateProcessUpdateOne) Save(ctx context.Context) (*ConcentrateProcess, error) {
	var (
		err  error
		node *ConcentrateProcess
	)
	if len(cpuo.hooks) == 0 {
		node, err = cpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConcentrateProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpuo.mutation = mutation
			node, err = cpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpuo.hooks) - 1; i >= 0; i-- {
			if cpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ConcentrateProcess)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConcentrateProcessMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *ConcentrateProcessUpdateOne) SaveX(ctx context.Context) *ConcentrateProcess {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *ConcentrateProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *ConcentrateProcessUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpuo *ConcentrateProcessUpdateOne) sqlSave(ctx context.Context) (_node *ConcentrateProcess, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concentrateprocess.Table,
			Columns: concentrateprocess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: concentrateprocess.FieldID,
			},
		},
	}
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConcentrateProcess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, concentrateprocess.FieldID)
		for _, f := range fields {
			if !concentrateprocess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != concentrateprocess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.ConcentrateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldConcentrateId,
		})
	}
	if value, ok := cpuo.mutation.AddedConcentrateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldConcentrateId,
		})
	}
	if value, ok := cpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldName,
		})
	}
	if cpuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: concentrateprocess.FieldName,
		})
	}
	if value, ok := cpuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldDate,
		})
	}
	if value, ok := cpuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldDate,
		})
	}
	if value, ok := cpuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCount,
		})
	}
	if value, ok := cpuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCount,
		})
	}
	if value, ok := cpuo.mutation.In(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldIn,
		})
	}
	if value, ok := cpuo.mutation.AddedIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldIn,
		})
	}
	if value, ok := cpuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldUserName,
		})
	}
	if value, ok := cpuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldTenantId,
		})
	}
	if value, ok := cpuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldTenantId,
		})
	}
	if value, ok := cpuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldTenantName,
		})
	}
	if value, ok := cpuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldFarmId,
		})
	}
	if value, ok := cpuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldFarmId,
		})
	}
	if value, ok := cpuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldFarmName,
		})
	}
	if value, ok := cpuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldRemarks,
		})
	}
	if value, ok := cpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCreatedAt,
		})
	}
	if value, ok := cpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCreatedAt,
		})
	}
	if value, ok := cpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldUpdatedAt,
		})
	}
	if value, ok := cpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldUpdatedAt,
		})
	}
	if value, ok := cpuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateprocess.FieldDeleted,
		})
	}
	if value, ok := cpuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateprocess.FieldDeleted,
		})
	}
	_node = &ConcentrateProcess{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concentrateprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

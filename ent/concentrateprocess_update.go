// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/concentrateprocess"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ConcentrateProcessUpdate is the builder for updating ConcentrateProcess entities.
type ConcentrateProcessUpdate struct {
	config
	hooks      []Hook
	mutation   *ConcentrateProcessMutation
	predicates []predicate.ConcentrateProcess
}

// Where adds a new predicate for the builder.
func (cpu *ConcentrateProcessUpdate) Where(ps ...predicate.ConcentrateProcess) *ConcentrateProcessUpdate {
	cpu.predicates = append(cpu.predicates, ps...)
	return cpu
}

// SetName sets the name field.
func (cpu *ConcentrateProcessUpdate) SetName(s string) *ConcentrateProcessUpdate {
	cpu.mutation.SetName(s)
	return cpu
}

// SetCode sets the code field.
func (cpu *ConcentrateProcessUpdate) SetCode(s string) *ConcentrateProcessUpdate {
	cpu.mutation.SetCode(s)
	return cpu
}

// SetDate sets the date field.
func (cpu *ConcentrateProcessUpdate) SetDate(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetDate()
	cpu.mutation.SetDate(i)
	return cpu
}

// AddDate adds i to date.
func (cpu *ConcentrateProcessUpdate) AddDate(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddDate(i)
	return cpu
}

// SetCount sets the count field.
func (cpu *ConcentrateProcessUpdate) SetCount(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetCount()
	cpu.mutation.SetCount(i)
	return cpu
}

// AddCount adds i to count.
func (cpu *ConcentrateProcessUpdate) AddCount(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddCount(i)
	return cpu
}

// SetIn sets the in field.
func (cpu *ConcentrateProcessUpdate) SetIn(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetIn()
	cpu.mutation.SetIn(i)
	return cpu
}

// AddIn adds i to in.
func (cpu *ConcentrateProcessUpdate) AddIn(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddIn(i)
	return cpu
}

// SetInventory sets the inventory field.
func (cpu *ConcentrateProcessUpdate) SetInventory(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetInventory()
	cpu.mutation.SetInventory(i)
	return cpu
}

// AddInventory adds i to inventory.
func (cpu *ConcentrateProcessUpdate) AddInventory(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddInventory(i)
	return cpu
}

// SetUserName sets the userName field.
func (cpu *ConcentrateProcessUpdate) SetUserName(s string) *ConcentrateProcessUpdate {
	cpu.mutation.SetUserName(s)
	return cpu
}

// SetRemarks sets the remarks field.
func (cpu *ConcentrateProcessUpdate) SetRemarks(s string) *ConcentrateProcessUpdate {
	cpu.mutation.SetRemarks(s)
	return cpu
}

// SetCreatedAt sets the createdAt field.
func (cpu *ConcentrateProcessUpdate) SetCreatedAt(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetCreatedAt()
	cpu.mutation.SetCreatedAt(i)
	return cpu
}

// AddCreatedAt adds i to createdAt.
func (cpu *ConcentrateProcessUpdate) AddCreatedAt(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddCreatedAt(i)
	return cpu
}

// SetUpdatedAt sets the updatedAt field.
func (cpu *ConcentrateProcessUpdate) SetUpdatedAt(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.ResetUpdatedAt()
	cpu.mutation.SetUpdatedAt(i)
	return cpu
}

// AddUpdatedAt adds i to updatedAt.
func (cpu *ConcentrateProcessUpdate) AddUpdatedAt(i int64) *ConcentrateProcessUpdate {
	cpu.mutation.AddUpdatedAt(i)
	return cpu
}

// SetDeleted sets the deleted field.
func (cpu *ConcentrateProcessUpdate) SetDeleted(i int) *ConcentrateProcessUpdate {
	cpu.mutation.ResetDeleted()
	cpu.mutation.SetDeleted(i)
	return cpu
}

// AddDeleted adds i to deleted.
func (cpu *ConcentrateProcessUpdate) AddDeleted(i int) *ConcentrateProcessUpdate {
	cpu.mutation.AddDeleted(i)
	return cpu
}

// Mutation returns the ConcentrateProcessMutation object of the builder.
func (cpu *ConcentrateProcessUpdate) Mutation() *ConcentrateProcessMutation {
	return cpu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cpu *ConcentrateProcessUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cpu.hooks) == 0 {
		affected, err = cpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConcentrateProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpu.mutation = mutation
			affected, err = cpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cpu.hooks) - 1; i >= 0; i-- {
			mut = cpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *ConcentrateProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *ConcentrateProcessUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *ConcentrateProcessUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpu *ConcentrateProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concentrateprocess.Table,
			Columns: concentrateprocess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: concentrateprocess.FieldID,
			},
		},
	}
	if ps := cpu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldName,
		})
	}
	if value, ok := cpu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldCode,
		})
	}
	if value, ok := cpu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldDate,
		})
	}
	if value, ok := cpu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldDate,
		})
	}
	if value, ok := cpu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCount,
		})
	}
	if value, ok := cpu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCount,
		})
	}
	if value, ok := cpu.mutation.In(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldIn,
		})
	}
	if value, ok := cpu.mutation.AddedIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldIn,
		})
	}
	if value, ok := cpu.mutation.Inventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldInventory,
		})
	}
	if value, ok := cpu.mutation.AddedInventory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldInventory,
		})
	}
	if value, ok := cpu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldUserName,
		})
	}
	if value, ok := cpu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldRemarks,
		})
	}
	if value, ok := cpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCreatedAt,
		})
	}
	if value, ok := cpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCreatedAt,
		})
	}
	if value, ok := cpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldUpdatedAt,
		})
	}
	if value, ok := cpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldUpdatedAt,
		})
	}
	if value, ok := cpu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateprocess.FieldDeleted,
		})
	}
	if value, ok := cpu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateprocess.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concentrateprocess.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ConcentrateProcessUpdateOne is the builder for updating a single ConcentrateProcess entity.
type ConcentrateProcessUpdateOne struct {
	config
	hooks    []Hook
	mutation *ConcentrateProcessMutation
}

// SetName sets the name field.
func (cpuo *ConcentrateProcessUpdateOne) SetName(s string) *ConcentrateProcessUpdateOne {
	cpuo.mutation.SetName(s)
	return cpuo
}

// SetCode sets the code field.
func (cpuo *ConcentrateProcessUpdateOne) SetCode(s string) *ConcentrateProcessUpdateOne {
	cpuo.mutation.SetCode(s)
	return cpuo
}

// SetDate sets the date field.
func (cpuo *ConcentrateProcessUpdateOne) SetDate(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetDate()
	cpuo.mutation.SetDate(i)
	return cpuo
}

// AddDate adds i to date.
func (cpuo *ConcentrateProcessUpdateOne) AddDate(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddDate(i)
	return cpuo
}

// SetCount sets the count field.
func (cpuo *ConcentrateProcessUpdateOne) SetCount(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetCount()
	cpuo.mutation.SetCount(i)
	return cpuo
}

// AddCount adds i to count.
func (cpuo *ConcentrateProcessUpdateOne) AddCount(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddCount(i)
	return cpuo
}

// SetIn sets the in field.
func (cpuo *ConcentrateProcessUpdateOne) SetIn(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetIn()
	cpuo.mutation.SetIn(i)
	return cpuo
}

// AddIn adds i to in.
func (cpuo *ConcentrateProcessUpdateOne) AddIn(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddIn(i)
	return cpuo
}

// SetInventory sets the inventory field.
func (cpuo *ConcentrateProcessUpdateOne) SetInventory(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetInventory()
	cpuo.mutation.SetInventory(i)
	return cpuo
}

// AddInventory adds i to inventory.
func (cpuo *ConcentrateProcessUpdateOne) AddInventory(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddInventory(i)
	return cpuo
}

// SetUserName sets the userName field.
func (cpuo *ConcentrateProcessUpdateOne) SetUserName(s string) *ConcentrateProcessUpdateOne {
	cpuo.mutation.SetUserName(s)
	return cpuo
}

// SetRemarks sets the remarks field.
func (cpuo *ConcentrateProcessUpdateOne) SetRemarks(s string) *ConcentrateProcessUpdateOne {
	cpuo.mutation.SetRemarks(s)
	return cpuo
}

// SetCreatedAt sets the createdAt field.
func (cpuo *ConcentrateProcessUpdateOne) SetCreatedAt(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetCreatedAt()
	cpuo.mutation.SetCreatedAt(i)
	return cpuo
}

// AddCreatedAt adds i to createdAt.
func (cpuo *ConcentrateProcessUpdateOne) AddCreatedAt(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddCreatedAt(i)
	return cpuo
}

// SetUpdatedAt sets the updatedAt field.
func (cpuo *ConcentrateProcessUpdateOne) SetUpdatedAt(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetUpdatedAt()
	cpuo.mutation.SetUpdatedAt(i)
	return cpuo
}

// AddUpdatedAt adds i to updatedAt.
func (cpuo *ConcentrateProcessUpdateOne) AddUpdatedAt(i int64) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddUpdatedAt(i)
	return cpuo
}

// SetDeleted sets the deleted field.
func (cpuo *ConcentrateProcessUpdateOne) SetDeleted(i int) *ConcentrateProcessUpdateOne {
	cpuo.mutation.ResetDeleted()
	cpuo.mutation.SetDeleted(i)
	return cpuo
}

// AddDeleted adds i to deleted.
func (cpuo *ConcentrateProcessUpdateOne) AddDeleted(i int) *ConcentrateProcessUpdateOne {
	cpuo.mutation.AddDeleted(i)
	return cpuo
}

// Mutation returns the ConcentrateProcessMutation object of the builder.
func (cpuo *ConcentrateProcessUpdateOne) Mutation() *ConcentrateProcessMutation {
	return cpuo.mutation
}

// Save executes the query and returns the updated entity.
func (cpuo *ConcentrateProcessUpdateOne) Save(ctx context.Context) (*ConcentrateProcess, error) {
	var (
		err  error
		node *ConcentrateProcess
	)
	if len(cpuo.hooks) == 0 {
		node, err = cpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConcentrateProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpuo.mutation = mutation
			node, err = cpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpuo.hooks) - 1; i >= 0; i-- {
			mut = cpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *ConcentrateProcessUpdateOne) SaveX(ctx context.Context) *ConcentrateProcess {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *ConcentrateProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *ConcentrateProcessUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpuo *ConcentrateProcessUpdateOne) sqlSave(ctx context.Context) (_node *ConcentrateProcess, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concentrateprocess.Table,
			Columns: concentrateprocess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: concentrateprocess.FieldID,
			},
		},
	}
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ConcentrateProcess.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldName,
		})
	}
	if value, ok := cpuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldCode,
		})
	}
	if value, ok := cpuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldDate,
		})
	}
	if value, ok := cpuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldDate,
		})
	}
	if value, ok := cpuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCount,
		})
	}
	if value, ok := cpuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCount,
		})
	}
	if value, ok := cpuo.mutation.In(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldIn,
		})
	}
	if value, ok := cpuo.mutation.AddedIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldIn,
		})
	}
	if value, ok := cpuo.mutation.Inventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldInventory,
		})
	}
	if value, ok := cpuo.mutation.AddedInventory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldInventory,
		})
	}
	if value, ok := cpuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldUserName,
		})
	}
	if value, ok := cpuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concentrateprocess.FieldRemarks,
		})
	}
	if value, ok := cpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCreatedAt,
		})
	}
	if value, ok := cpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldCreatedAt,
		})
	}
	if value, ok := cpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldUpdatedAt,
		})
	}
	if value, ok := cpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concentrateprocess.FieldUpdatedAt,
		})
	}
	if value, ok := cpuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateprocess.FieldDeleted,
		})
	}
	if value, ok := cpuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: concentrateprocess.FieldDeleted,
		})
	}
	_node = &ConcentrateProcess{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concentrateprocess.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

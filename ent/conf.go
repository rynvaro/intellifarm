// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/confs"
	"cattleai/ent/conf"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Conf is the model entity for the Conf schema.
type Conf struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Confs holds the value of the "confs" field.
	Confs *confs.Confs `json:"confs,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Conf) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case conf.FieldConfs:
			values[i] = new([]byte)
		case conf.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Conf", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Conf fields.
func (c *Conf) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case conf.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case conf.FieldConfs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field confs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Confs); err != nil {
					return fmt.Errorf("unmarshal field confs: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Conf.
// Note that you need to call Conf.Unwrap() before calling this method if this Conf
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Conf) Update() *ConfUpdateOne {
	return (&ConfClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Conf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Conf) Unwrap() *Conf {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Conf is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Conf) String() string {
	var builder strings.Builder
	builder.WriteString("Conf(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("confs=")
	builder.WriteString(fmt.Sprintf("%v", c.Confs))
	builder.WriteByte(')')
	return builder.String()
}

// Confs is a parsable slice of Conf.
type Confs []*Conf

func (c Confs) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}

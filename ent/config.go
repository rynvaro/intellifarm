// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/facebook/ent"
	"github.com/facebook/ent/dialect"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...interface{})
	// hooks to execute on mutations.
	hooks *hooks
}

// hooks per client, for fast access.
type hooks struct {
	API                 []ent.Hook
	Abortion            []ent.Hook
	AbortionType        []ent.Hook
	BirthSurrounding    []ent.Hook
	BreathRate          []ent.Hook
	Breeding            []ent.Hook
	BreedingType        []ent.Hook
	Calve               []ent.Hook
	CalveCount          []ent.Hook
	CalveType           []ent.Hook
	Category            []ent.Hook
	Cattle              []ent.Hook
	CattleCate          []ent.Hook
	CattleDie           []ent.Hook
	CattleGender        []ent.Hook
	CattleGroup         []ent.Hook
	CattleGrow          []ent.Hook
	CattleGrowsData     []ent.Hook
	CattleGrowsRate     []ent.Hook
	CattleHairColor     []ent.Hook
	CattleIn            []ent.Hook
	CattleJoinedType    []ent.Hook
	CattleOut           []ent.Hook
	CattleOwner         []ent.Hook
	CattleType          []ent.Hook
	Change              []ent.Hook
	ConcentrateFormula  []ent.Hook
	ConcentrateProcess  []ent.Hook
	Conf                []ent.Hook
	Disinfect           []ent.Hook
	Dispence            []ent.Hook
	Duty                []ent.Hook
	Epidemic            []ent.Hook
	EpidemicType        []ent.Hook
	Estrus              []ent.Hook
	EstrusType          []ent.Hook
	Event               []ent.Hook
	Farm                []ent.Hook
	FeedGroup           []ent.Hook
	FeedRecord          []ent.Hook
	HairState           []ent.Hook
	HealthCare          []ent.Hook
	Immunity            []ent.Hook
	Inspection          []ent.Hook
	Material            []ent.Hook
	MaterialTest        []ent.Hook
	Medicine            []ent.Hook
	Operation           []ent.Hook
	Position            []ent.Hook
	PositionApi         []ent.Hook
	PregnancyTest       []ent.Hook
	PregnancyTestMethod []ent.Hook
	PregnancyTestResult []ent.Hook
	PregnancyTestType   []ent.Hook
	Ration              []ent.Hook
	ReproductiveState   []ent.Hook
	SemenFrozenType     []ent.Hook
	Shed                []ent.Hook
	ShedCategory        []ent.Hook
	ShedTrans           []ent.Hook
	ShedType            []ent.Hook
	Tenant              []ent.Hook
	TreatmentResult     []ent.Hook
	TreatmentState      []ent.Hook
	User                []ent.Hook
	Whereabouts         []ent.Hook
	WindDirection       []ent.Hook
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...interface{})) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

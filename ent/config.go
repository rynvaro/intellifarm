// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/facebook/ent"
	"github.com/facebook/ent/dialect"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...interface{})
	// hooks to execute on mutations.
	hooks *hooks
}

// hooks per client, for fast access.
type hooks struct {
	BirthSurrounding  []ent.Hook
	BreathRate        []ent.Hook
	BreedingType      []ent.Hook
	Category          []ent.Hook
	Cattle            []ent.Hook
	CattleCate        []ent.Hook
	CattleGender      []ent.Hook
	CattleGrow        []ent.Hook
	CattleGrowsData   []ent.Hook
	CattleGrowsRate   []ent.Hook
	CattleHairColor   []ent.Hook
	CattleJoinedType  []ent.Hook
	CattleOwner       []ent.Hook
	CattleType        []ent.Hook
	Conf              []ent.Hook
	Duty              []ent.Hook
	Farm              []ent.Hook
	HairState         []ent.Hook
	Position          []ent.Hook
	ReproductiveState []ent.Hook
	Shed              []ent.Hook
	ShedCategory      []ent.Hook
	ShedType          []ent.Hook
	User              []ent.Hook
	WindDirection     []ent.Hook
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...interface{})) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

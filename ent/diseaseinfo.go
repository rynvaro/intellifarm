// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/diseaseinfo"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// DiseaseInfo is the model entity for the DiseaseInfo schema.
type DiseaseInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 编码
	Code string `json:"code,omitempty"`
	// 类型
	Type string `json:"type,omitempty"`
	// 描述
	Description string `json:"description,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiseaseInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case diseaseinfo.FieldID, diseaseinfo.FieldTenantId, diseaseinfo.FieldCreatedAt, diseaseinfo.FieldUpdatedAt, diseaseinfo.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case diseaseinfo.FieldName, diseaseinfo.FieldCode, diseaseinfo.FieldType, diseaseinfo.FieldDescription, diseaseinfo.FieldTenantName, diseaseinfo.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DiseaseInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiseaseInfo fields.
func (di *DiseaseInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case diseaseinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			di.ID = int(value.Int64)
		case diseaseinfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				di.Name = value.String
			}
		case diseaseinfo.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				di.Code = value.String
			}
		case diseaseinfo.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				di.Type = value.String
			}
		case diseaseinfo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				di.Description = value.String
			}
		case diseaseinfo.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				di.TenantId = value.Int64
			}
		case diseaseinfo.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				di.TenantName = value.String
			}
		case diseaseinfo.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				di.Remarks = value.String
			}
		case diseaseinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				di.CreatedAt = value.Int64
			}
		case diseaseinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				di.UpdatedAt = value.Int64
			}
		case diseaseinfo.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				di.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DiseaseInfo.
// Note that you need to call DiseaseInfo.Unwrap() before calling this method if this DiseaseInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *DiseaseInfo) Update() *DiseaseInfoUpdateOne {
	return (&DiseaseInfoClient{config: di.config}).UpdateOne(di)
}

// Unwrap unwraps the DiseaseInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *DiseaseInfo) Unwrap() *DiseaseInfo {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiseaseInfo is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *DiseaseInfo) String() string {
	var builder strings.Builder
	builder.WriteString("DiseaseInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("name=")
	builder.WriteString(di.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(di.Code)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(di.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(di.Description)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", di.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(di.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(di.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", di.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", di.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", di.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// DiseaseInfos is a parsable slice of DiseaseInfo.
type DiseaseInfos []*DiseaseInfo

func (di DiseaseInfos) config(cfg config) {
	for _i := range di {
		di[_i].config = cfg
	}
}

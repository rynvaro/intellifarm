// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/diseaseinfo"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiseaseInfoCreate is the builder for creating a DiseaseInfo entity.
type DiseaseInfoCreate struct {
	config
	mutation *DiseaseInfoMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dic *DiseaseInfoCreate) SetName(s string) *DiseaseInfoCreate {
	dic.mutation.SetName(s)
	return dic
}

// SetCode sets the "code" field.
func (dic *DiseaseInfoCreate) SetCode(s string) *DiseaseInfoCreate {
	dic.mutation.SetCode(s)
	return dic
}

// SetType sets the "type" field.
func (dic *DiseaseInfoCreate) SetType(s string) *DiseaseInfoCreate {
	dic.mutation.SetType(s)
	return dic
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dic *DiseaseInfoCreate) SetNillableType(s *string) *DiseaseInfoCreate {
	if s != nil {
		dic.SetType(*s)
	}
	return dic
}

// SetDescription sets the "description" field.
func (dic *DiseaseInfoCreate) SetDescription(s string) *DiseaseInfoCreate {
	dic.mutation.SetDescription(s)
	return dic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dic *DiseaseInfoCreate) SetNillableDescription(s *string) *DiseaseInfoCreate {
	if s != nil {
		dic.SetDescription(*s)
	}
	return dic
}

// SetTenantId sets the "tenantId" field.
func (dic *DiseaseInfoCreate) SetTenantId(i int64) *DiseaseInfoCreate {
	dic.mutation.SetTenantId(i)
	return dic
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (dic *DiseaseInfoCreate) SetNillableTenantId(i *int64) *DiseaseInfoCreate {
	if i != nil {
		dic.SetTenantId(*i)
	}
	return dic
}

// SetTenantName sets the "tenantName" field.
func (dic *DiseaseInfoCreate) SetTenantName(s string) *DiseaseInfoCreate {
	dic.mutation.SetTenantName(s)
	return dic
}

// SetNillableTenantName sets the "tenantName" field if the given value is not nil.
func (dic *DiseaseInfoCreate) SetNillableTenantName(s *string) *DiseaseInfoCreate {
	if s != nil {
		dic.SetTenantName(*s)
	}
	return dic
}

// SetRemarks sets the "remarks" field.
func (dic *DiseaseInfoCreate) SetRemarks(s string) *DiseaseInfoCreate {
	dic.mutation.SetRemarks(s)
	return dic
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (dic *DiseaseInfoCreate) SetNillableRemarks(s *string) *DiseaseInfoCreate {
	if s != nil {
		dic.SetRemarks(*s)
	}
	return dic
}

// SetCreatedAt sets the "createdAt" field.
func (dic *DiseaseInfoCreate) SetCreatedAt(i int64) *DiseaseInfoCreate {
	dic.mutation.SetCreatedAt(i)
	return dic
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (dic *DiseaseInfoCreate) SetNillableCreatedAt(i *int64) *DiseaseInfoCreate {
	if i != nil {
		dic.SetCreatedAt(*i)
	}
	return dic
}

// SetUpdatedAt sets the "updatedAt" field.
func (dic *DiseaseInfoCreate) SetUpdatedAt(i int64) *DiseaseInfoCreate {
	dic.mutation.SetUpdatedAt(i)
	return dic
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (dic *DiseaseInfoCreate) SetNillableUpdatedAt(i *int64) *DiseaseInfoCreate {
	if i != nil {
		dic.SetUpdatedAt(*i)
	}
	return dic
}

// SetDeleted sets the "deleted" field.
func (dic *DiseaseInfoCreate) SetDeleted(i int) *DiseaseInfoCreate {
	dic.mutation.SetDeleted(i)
	return dic
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (dic *DiseaseInfoCreate) SetNillableDeleted(i *int) *DiseaseInfoCreate {
	if i != nil {
		dic.SetDeleted(*i)
	}
	return dic
}

// Mutation returns the DiseaseInfoMutation object of the builder.
func (dic *DiseaseInfoCreate) Mutation() *DiseaseInfoMutation {
	return dic.mutation
}

// Save creates the DiseaseInfo in the database.
func (dic *DiseaseInfoCreate) Save(ctx context.Context) (*DiseaseInfo, error) {
	var (
		err  error
		node *DiseaseInfo
	)
	if len(dic.hooks) == 0 {
		if err = dic.check(); err != nil {
			return nil, err
		}
		node, err = dic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiseaseInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dic.check(); err != nil {
				return nil, err
			}
			dic.mutation = mutation
			if node, err = dic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dic.hooks) - 1; i >= 0; i-- {
			if dic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DiseaseInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DiseaseInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DiseaseInfoCreate) SaveX(ctx context.Context) *DiseaseInfo {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DiseaseInfoCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DiseaseInfoCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dic *DiseaseInfoCreate) check() error {
	if _, ok := dic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DiseaseInfo.name"`)}
	}
	if _, ok := dic.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "DiseaseInfo.code"`)}
	}
	return nil
}

func (dic *DiseaseInfoCreate) sqlSave(ctx context.Context) (*DiseaseInfo, error) {
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dic *DiseaseInfoCreate) createSpec() (*DiseaseInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &DiseaseInfo{config: dic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: diseaseinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: diseaseinfo.FieldID,
			},
		}
	)
	if value, ok := dic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diseaseinfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := dic.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diseaseinfo.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := dic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diseaseinfo.FieldType,
		})
		_node.Type = value
	}
	if value, ok := dic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diseaseinfo.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := dic.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: diseaseinfo.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := dic.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diseaseinfo.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := dic.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diseaseinfo.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := dic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: diseaseinfo.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: diseaseinfo.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dic.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: diseaseinfo.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// DiseaseInfoCreateBulk is the builder for creating many DiseaseInfo entities in bulk.
type DiseaseInfoCreateBulk struct {
	config
	builders []*DiseaseInfoCreate
}

// Save creates the DiseaseInfo entities in the database.
func (dicb *DiseaseInfoCreateBulk) Save(ctx context.Context) ([]*DiseaseInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DiseaseInfo, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiseaseInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DiseaseInfoCreateBulk) SaveX(ctx context.Context) []*DiseaseInfo {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DiseaseInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DiseaseInfoCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}

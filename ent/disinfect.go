// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/disinfect"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Disinfect is the model entity for the Disinfect schema.
type Disinfect struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CattleId holds the value of the "cattleId" field.
	CattleId int64 `json:"cattleId,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// ShedId holds the value of the "shedId" field.
	ShedId int64 `json:"shedId,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Date holds the value of the "date" field.
	Date int64 `json:"date,omitempty"`
	// TypeId holds the value of the "typeId" field.
	TypeId int `json:"typeId,omitempty"`
	// TypeName holds the value of the "typeName" field.
	TypeName string `json:"typeName,omitempty"`
	// MethodId holds the value of the "methodId" field.
	MethodId int `json:"methodId,omitempty"`
	// MethodName holds the value of the "methodName" field.
	MethodName string `json:"methodName,omitempty"`
	// WayId holds the value of the "wayId" field.
	WayId int `json:"wayId,omitempty"`
	// WayName holds the value of the "wayName" field.
	WayName string `json:"wayName,omitempty"`
	// Drug holds the value of the "drug" field.
	Drug string `json:"drug,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Disinfect) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // cattleId
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullInt64{},  // farmId
		&sql.NullString{}, // farmName
		&sql.NullInt64{},  // shedId
		&sql.NullString{}, // shedName
		&sql.NullString{}, // name
		&sql.NullInt64{},  // date
		&sql.NullInt64{},  // typeId
		&sql.NullString{}, // typeName
		&sql.NullInt64{},  // methodId
		&sql.NullString{}, // methodName
		&sql.NullInt64{},  // wayId
		&sql.NullString{}, // wayName
		&sql.NullString{}, // drug
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Disinfect fields.
func (d *Disinfect) assignValues(values ...interface{}) error {
	if m, n := len(values), len(disinfect.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field cattleId", values[0])
	} else if value.Valid {
		d.CattleId = value.Int64
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[1])
	} else if value.Valid {
		d.TenantId = value.Int64
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[2])
	} else if value.Valid {
		d.TenantName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[3])
	} else if value.Valid {
		d.FarmId = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[4])
	} else if value.Valid {
		d.FarmName = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field shedId", values[5])
	} else if value.Valid {
		d.ShedId = value.Int64
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[6])
	} else if value.Valid {
		d.ShedName = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[7])
	} else if value.Valid {
		d.Name = value.String
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[8])
	} else if value.Valid {
		d.Date = value.Int64
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field typeId", values[9])
	} else if value.Valid {
		d.TypeId = int(value.Int64)
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field typeName", values[10])
	} else if value.Valid {
		d.TypeName = value.String
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field methodId", values[11])
	} else if value.Valid {
		d.MethodId = int(value.Int64)
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field methodName", values[12])
	} else if value.Valid {
		d.MethodName = value.String
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field wayId", values[13])
	} else if value.Valid {
		d.WayId = int(value.Int64)
	}
	if value, ok := values[14].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field wayName", values[14])
	} else if value.Valid {
		d.WayName = value.String
	}
	if value, ok := values[15].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field drug", values[15])
	} else if value.Valid {
		d.Drug = value.String
	}
	if value, ok := values[16].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[16])
	} else if value.Valid {
		d.Remarks = value.String
	}
	if value, ok := values[17].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[17])
	} else if value.Valid {
		d.CreatedAt = value.Int64
	}
	if value, ok := values[18].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[18])
	} else if value.Valid {
		d.UpdatedAt = value.Int64
	}
	if value, ok := values[19].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[19])
	} else if value.Valid {
		d.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Disinfect.
// Note that, you need to call Disinfect.Unwrap() before calling this method, if this Disinfect
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Disinfect) Update() *DisinfectUpdateOne {
	return (&DisinfectClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Disinfect) Unwrap() *Disinfect {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Disinfect is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Disinfect) String() string {
	var builder strings.Builder
	builder.WriteString("Disinfect(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", cattleId=")
	builder.WriteString(fmt.Sprintf("%v", d.CattleId))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", d.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(d.TenantName)
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", d.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(d.FarmName)
	builder.WriteString(", shedId=")
	builder.WriteString(fmt.Sprintf("%v", d.ShedId))
	builder.WriteString(", shedName=")
	builder.WriteString(d.ShedName)
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", date=")
	builder.WriteString(fmt.Sprintf("%v", d.Date))
	builder.WriteString(", typeId=")
	builder.WriteString(fmt.Sprintf("%v", d.TypeId))
	builder.WriteString(", typeName=")
	builder.WriteString(d.TypeName)
	builder.WriteString(", methodId=")
	builder.WriteString(fmt.Sprintf("%v", d.MethodId))
	builder.WriteString(", methodName=")
	builder.WriteString(d.MethodName)
	builder.WriteString(", wayId=")
	builder.WriteString(fmt.Sprintf("%v", d.WayId))
	builder.WriteString(", wayName=")
	builder.WriteString(d.WayName)
	builder.WriteString(", drug=")
	builder.WriteString(d.Drug)
	builder.WriteString(", remarks=")
	builder.WriteString(d.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", d.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Disinfects is a parsable slice of Disinfect.
type Disinfects []*Disinfect

func (d Disinfects) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/disinfect"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Disinfect is the model entity for the Disinfect schema.
type Disinfect struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 日期
	Date int64 `json:"date,omitempty"`
	// 类型ID
	TypeId int `json:"typeId,omitempty"`
	// 类型
	TypeName string `json:"typeName,omitempty"`
	// MethodId holds the value of the "methodId" field.
	MethodId int `json:"methodId,omitempty"`
	// MethodName holds the value of the "methodName" field.
	MethodName string `json:"methodName,omitempty"`
	// WayId holds the value of the "wayId" field.
	WayId int `json:"wayId,omitempty"`
	// WayName holds the value of the "wayName" field.
	WayName string `json:"wayName,omitempty"`
	// 用药
	Drug string `json:"drug,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Disinfect) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case disinfect.FieldID, disinfect.FieldCattleId, disinfect.FieldTenantId, disinfect.FieldFarmId, disinfect.FieldShedId, disinfect.FieldDate, disinfect.FieldTypeId, disinfect.FieldMethodId, disinfect.FieldWayId, disinfect.FieldCreatedAt, disinfect.FieldUpdatedAt, disinfect.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case disinfect.FieldTenantName, disinfect.FieldFarmName, disinfect.FieldShedName, disinfect.FieldName, disinfect.FieldTypeName, disinfect.FieldMethodName, disinfect.FieldWayName, disinfect.FieldDrug, disinfect.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Disinfect", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Disinfect fields.
func (d *Disinfect) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case disinfect.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case disinfect.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				d.CattleId = value.Int64
			}
		case disinfect.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				d.TenantId = value.Int64
			}
		case disinfect.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				d.TenantName = value.String
			}
		case disinfect.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				d.FarmId = value.Int64
			}
		case disinfect.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				d.FarmName = value.String
			}
		case disinfect.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				d.ShedId = value.Int64
			}
		case disinfect.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				d.ShedName = value.String
			}
		case disinfect.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case disinfect.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				d.Date = value.Int64
			}
		case disinfect.FieldTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field typeId", values[i])
			} else if value.Valid {
				d.TypeId = int(value.Int64)
			}
		case disinfect.FieldTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field typeName", values[i])
			} else if value.Valid {
				d.TypeName = value.String
			}
		case disinfect.FieldMethodId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field methodId", values[i])
			} else if value.Valid {
				d.MethodId = int(value.Int64)
			}
		case disinfect.FieldMethodName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field methodName", values[i])
			} else if value.Valid {
				d.MethodName = value.String
			}
		case disinfect.FieldWayId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wayId", values[i])
			} else if value.Valid {
				d.WayId = int(value.Int64)
			}
		case disinfect.FieldWayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wayName", values[i])
			} else if value.Valid {
				d.WayName = value.String
			}
		case disinfect.FieldDrug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field drug", values[i])
			} else if value.Valid {
				d.Drug = value.String
			}
		case disinfect.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				d.Remarks = value.String
			}
		case disinfect.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Int64
			}
		case disinfect.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Int64
			}
		case disinfect.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				d.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Disinfect.
// Note that you need to call Disinfect.Unwrap() before calling this method if this Disinfect
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Disinfect) Update() *DisinfectUpdateOne {
	return (&DisinfectClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Disinfect entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Disinfect) Unwrap() *Disinfect {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Disinfect is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Disinfect) String() string {
	var builder strings.Builder
	builder.WriteString("Disinfect(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", d.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", d.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(d.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", d.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(d.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", d.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(d.ShedName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", d.Date))
	builder.WriteString(", ")
	builder.WriteString("typeId=")
	builder.WriteString(fmt.Sprintf("%v", d.TypeId))
	builder.WriteString(", ")
	builder.WriteString("typeName=")
	builder.WriteString(d.TypeName)
	builder.WriteString(", ")
	builder.WriteString("methodId=")
	builder.WriteString(fmt.Sprintf("%v", d.MethodId))
	builder.WriteString(", ")
	builder.WriteString("methodName=")
	builder.WriteString(d.MethodName)
	builder.WriteString(", ")
	builder.WriteString("wayId=")
	builder.WriteString(fmt.Sprintf("%v", d.WayId))
	builder.WriteString(", ")
	builder.WriteString("wayName=")
	builder.WriteString(d.WayName)
	builder.WriteString(", ")
	builder.WriteString("drug=")
	builder.WriteString(d.Drug)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(d.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", d.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Disinfects is a parsable slice of Disinfect.
type Disinfects []*Disinfect

func (d Disinfects) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/disinfect"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DisinfectCreate is the builder for creating a Disinfect entity.
type DisinfectCreate struct {
	config
	mutation *DisinfectMutation
	hooks    []Hook
}

// SetCattleId sets the "cattleId" field.
func (dc *DisinfectCreate) SetCattleId(i int64) *DisinfectCreate {
	dc.mutation.SetCattleId(i)
	return dc
}

// SetTenantId sets the "tenantId" field.
func (dc *DisinfectCreate) SetTenantId(i int64) *DisinfectCreate {
	dc.mutation.SetTenantId(i)
	return dc
}

// SetTenantName sets the "tenantName" field.
func (dc *DisinfectCreate) SetTenantName(s string) *DisinfectCreate {
	dc.mutation.SetTenantName(s)
	return dc
}

// SetFarmId sets the "farmId" field.
func (dc *DisinfectCreate) SetFarmId(i int64) *DisinfectCreate {
	dc.mutation.SetFarmId(i)
	return dc
}

// SetFarmName sets the "farmName" field.
func (dc *DisinfectCreate) SetFarmName(s string) *DisinfectCreate {
	dc.mutation.SetFarmName(s)
	return dc
}

// SetShedId sets the "shedId" field.
func (dc *DisinfectCreate) SetShedId(i int64) *DisinfectCreate {
	dc.mutation.SetShedId(i)
	return dc
}

// SetShedName sets the "shedName" field.
func (dc *DisinfectCreate) SetShedName(s string) *DisinfectCreate {
	dc.mutation.SetShedName(s)
	return dc
}

// SetName sets the "name" field.
func (dc *DisinfectCreate) SetName(s string) *DisinfectCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetDate sets the "date" field.
func (dc *DisinfectCreate) SetDate(i int64) *DisinfectCreate {
	dc.mutation.SetDate(i)
	return dc
}

// SetTypeId sets the "typeId" field.
func (dc *DisinfectCreate) SetTypeId(i int) *DisinfectCreate {
	dc.mutation.SetTypeId(i)
	return dc
}

// SetTypeName sets the "typeName" field.
func (dc *DisinfectCreate) SetTypeName(s string) *DisinfectCreate {
	dc.mutation.SetTypeName(s)
	return dc
}

// SetMethodId sets the "methodId" field.
func (dc *DisinfectCreate) SetMethodId(i int) *DisinfectCreate {
	dc.mutation.SetMethodId(i)
	return dc
}

// SetMethodName sets the "methodName" field.
func (dc *DisinfectCreate) SetMethodName(s string) *DisinfectCreate {
	dc.mutation.SetMethodName(s)
	return dc
}

// SetWayId sets the "wayId" field.
func (dc *DisinfectCreate) SetWayId(i int) *DisinfectCreate {
	dc.mutation.SetWayId(i)
	return dc
}

// SetWayName sets the "wayName" field.
func (dc *DisinfectCreate) SetWayName(s string) *DisinfectCreate {
	dc.mutation.SetWayName(s)
	return dc
}

// SetDrug sets the "drug" field.
func (dc *DisinfectCreate) SetDrug(s string) *DisinfectCreate {
	dc.mutation.SetDrug(s)
	return dc
}

// SetRemarks sets the "remarks" field.
func (dc *DisinfectCreate) SetRemarks(s string) *DisinfectCreate {
	dc.mutation.SetRemarks(s)
	return dc
}

// SetCreatedAt sets the "createdAt" field.
func (dc *DisinfectCreate) SetCreatedAt(i int64) *DisinfectCreate {
	dc.mutation.SetCreatedAt(i)
	return dc
}

// SetUpdatedAt sets the "updatedAt" field.
func (dc *DisinfectCreate) SetUpdatedAt(i int64) *DisinfectCreate {
	dc.mutation.SetUpdatedAt(i)
	return dc
}

// SetDeleted sets the "deleted" field.
func (dc *DisinfectCreate) SetDeleted(i int) *DisinfectCreate {
	dc.mutation.SetDeleted(i)
	return dc
}

// Mutation returns the DisinfectMutation object of the builder.
func (dc *DisinfectCreate) Mutation() *DisinfectMutation {
	return dc.mutation
}

// Save creates the Disinfect in the database.
func (dc *DisinfectCreate) Save(ctx context.Context) (*Disinfect, error) {
	var (
		err  error
		node *Disinfect
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DisinfectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Disinfect)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DisinfectMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DisinfectCreate) SaveX(ctx context.Context) *Disinfect {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DisinfectCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DisinfectCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DisinfectCreate) check() error {
	if _, ok := dc.mutation.CattleId(); !ok {
		return &ValidationError{Name: "cattleId", err: errors.New(`ent: missing required field "Disinfect.cattleId"`)}
	}
	if _, ok := dc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "Disinfect.tenantId"`)}
	}
	if _, ok := dc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "Disinfect.tenantName"`)}
	}
	if _, ok := dc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New(`ent: missing required field "Disinfect.farmId"`)}
	}
	if _, ok := dc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New(`ent: missing required field "Disinfect.farmName"`)}
	}
	if _, ok := dc.mutation.ShedId(); !ok {
		return &ValidationError{Name: "shedId", err: errors.New(`ent: missing required field "Disinfect.shedId"`)}
	}
	if _, ok := dc.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New(`ent: missing required field "Disinfect.shedName"`)}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Disinfect.name"`)}
	}
	if _, ok := dc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Disinfect.date"`)}
	}
	if _, ok := dc.mutation.TypeId(); !ok {
		return &ValidationError{Name: "typeId", err: errors.New(`ent: missing required field "Disinfect.typeId"`)}
	}
	if _, ok := dc.mutation.TypeName(); !ok {
		return &ValidationError{Name: "typeName", err: errors.New(`ent: missing required field "Disinfect.typeName"`)}
	}
	if _, ok := dc.mutation.MethodId(); !ok {
		return &ValidationError{Name: "methodId", err: errors.New(`ent: missing required field "Disinfect.methodId"`)}
	}
	if _, ok := dc.mutation.MethodName(); !ok {
		return &ValidationError{Name: "methodName", err: errors.New(`ent: missing required field "Disinfect.methodName"`)}
	}
	if _, ok := dc.mutation.WayId(); !ok {
		return &ValidationError{Name: "wayId", err: errors.New(`ent: missing required field "Disinfect.wayId"`)}
	}
	if _, ok := dc.mutation.WayName(); !ok {
		return &ValidationError{Name: "wayName", err: errors.New(`ent: missing required field "Disinfect.wayName"`)}
	}
	if _, ok := dc.mutation.Drug(); !ok {
		return &ValidationError{Name: "drug", err: errors.New(`ent: missing required field "Disinfect.drug"`)}
	}
	if _, ok := dc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "Disinfect.remarks"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Disinfect.createdAt"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Disinfect.updatedAt"`)}
	}
	if _, ok := dc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Disinfect.deleted"`)}
	}
	return nil
}

func (dc *DisinfectCreate) sqlSave(ctx context.Context) (*Disinfect, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DisinfectCreate) createSpec() (*Disinfect, *sqlgraph.CreateSpec) {
	var (
		_node = &Disinfect{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: disinfect.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: disinfect.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.CattleId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldCattleId,
		})
		_node.CattleId = value
	}
	if value, ok := dc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := dc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := dc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := dc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := dc.mutation.ShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldShedId,
		})
		_node.ShedId = value
	}
	if value, ok := dc.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldName,
		})
		_node.Name = value
	}
	if value, ok := dc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := dc.mutation.TypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldTypeId,
		})
		_node.TypeId = value
	}
	if value, ok := dc.mutation.TypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldTypeName,
		})
		_node.TypeName = value
	}
	if value, ok := dc.mutation.MethodId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldMethodId,
		})
		_node.MethodId = value
	}
	if value, ok := dc.mutation.MethodName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldMethodName,
		})
		_node.MethodName = value
	}
	if value, ok := dc.mutation.WayId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldWayId,
		})
		_node.WayId = value
	}
	if value, ok := dc.mutation.WayName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldWayName,
		})
		_node.WayName = value
	}
	if value, ok := dc.mutation.Drug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldDrug,
		})
		_node.Drug = value
	}
	if value, ok := dc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// DisinfectCreateBulk is the builder for creating many Disinfect entities in bulk.
type DisinfectCreateBulk struct {
	config
	builders []*DisinfectCreate
}

// Save creates the Disinfect entities in the database.
func (dcb *DisinfectCreateBulk) Save(ctx context.Context) ([]*Disinfect, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Disinfect, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DisinfectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DisinfectCreateBulk) SaveX(ctx context.Context) []*Disinfect {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DisinfectCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DisinfectCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/disinfect"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DisinfectUpdate is the builder for updating Disinfect entities.
type DisinfectUpdate struct {
	config
	hooks      []Hook
	mutation   *DisinfectMutation
	predicates []predicate.Disinfect
}

// Where adds a new predicate for the builder.
func (du *DisinfectUpdate) Where(ps ...predicate.Disinfect) *DisinfectUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetName sets the name field.
func (du *DisinfectUpdate) SetName(s string) *DisinfectUpdate {
	du.mutation.SetName(s)
	return du
}

// SetDate sets the date field.
func (du *DisinfectUpdate) SetDate(i int64) *DisinfectUpdate {
	du.mutation.ResetDate()
	du.mutation.SetDate(i)
	return du
}

// AddDate adds i to date.
func (du *DisinfectUpdate) AddDate(i int64) *DisinfectUpdate {
	du.mutation.AddDate(i)
	return du
}

// SetTypeId sets the typeId field.
func (du *DisinfectUpdate) SetTypeId(i int) *DisinfectUpdate {
	du.mutation.ResetTypeId()
	du.mutation.SetTypeId(i)
	return du
}

// AddTypeId adds i to typeId.
func (du *DisinfectUpdate) AddTypeId(i int) *DisinfectUpdate {
	du.mutation.AddTypeId(i)
	return du
}

// SetTypeName sets the typeName field.
func (du *DisinfectUpdate) SetTypeName(s string) *DisinfectUpdate {
	du.mutation.SetTypeName(s)
	return du
}

// SetMethodId sets the methodId field.
func (du *DisinfectUpdate) SetMethodId(i int) *DisinfectUpdate {
	du.mutation.ResetMethodId()
	du.mutation.SetMethodId(i)
	return du
}

// AddMethodId adds i to methodId.
func (du *DisinfectUpdate) AddMethodId(i int) *DisinfectUpdate {
	du.mutation.AddMethodId(i)
	return du
}

// SetMethodName sets the methodName field.
func (du *DisinfectUpdate) SetMethodName(s string) *DisinfectUpdate {
	du.mutation.SetMethodName(s)
	return du
}

// SetWayId sets the wayId field.
func (du *DisinfectUpdate) SetWayId(i int) *DisinfectUpdate {
	du.mutation.ResetWayId()
	du.mutation.SetWayId(i)
	return du
}

// AddWayId adds i to wayId.
func (du *DisinfectUpdate) AddWayId(i int) *DisinfectUpdate {
	du.mutation.AddWayId(i)
	return du
}

// SetWayName sets the wayName field.
func (du *DisinfectUpdate) SetWayName(s string) *DisinfectUpdate {
	du.mutation.SetWayName(s)
	return du
}

// SetDrug sets the drug field.
func (du *DisinfectUpdate) SetDrug(s string) *DisinfectUpdate {
	du.mutation.SetDrug(s)
	return du
}

// SetRemarks sets the remarks field.
func (du *DisinfectUpdate) SetRemarks(s string) *DisinfectUpdate {
	du.mutation.SetRemarks(s)
	return du
}

// SetCreatedAt sets the createdAt field.
func (du *DisinfectUpdate) SetCreatedAt(i int64) *DisinfectUpdate {
	du.mutation.ResetCreatedAt()
	du.mutation.SetCreatedAt(i)
	return du
}

// AddCreatedAt adds i to createdAt.
func (du *DisinfectUpdate) AddCreatedAt(i int64) *DisinfectUpdate {
	du.mutation.AddCreatedAt(i)
	return du
}

// SetUpdatedAt sets the updatedAt field.
func (du *DisinfectUpdate) SetUpdatedAt(i int64) *DisinfectUpdate {
	du.mutation.ResetUpdatedAt()
	du.mutation.SetUpdatedAt(i)
	return du
}

// AddUpdatedAt adds i to updatedAt.
func (du *DisinfectUpdate) AddUpdatedAt(i int64) *DisinfectUpdate {
	du.mutation.AddUpdatedAt(i)
	return du
}

// SetDeleted sets the deleted field.
func (du *DisinfectUpdate) SetDeleted(i int) *DisinfectUpdate {
	du.mutation.ResetDeleted()
	du.mutation.SetDeleted(i)
	return du
}

// AddDeleted adds i to deleted.
func (du *DisinfectUpdate) AddDeleted(i int) *DisinfectUpdate {
	du.mutation.AddDeleted(i)
	return du
}

// Mutation returns the DisinfectMutation object of the builder.
func (du *DisinfectUpdate) Mutation() *DisinfectMutation {
	return du.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DisinfectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DisinfectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DisinfectUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DisinfectUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DisinfectUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DisinfectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   disinfect.Table,
			Columns: disinfect.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: disinfect.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldName,
		})
	}
	if value, ok := du.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldDate,
		})
	}
	if value, ok := du.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldDate,
		})
	}
	if value, ok := du.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldTypeId,
		})
	}
	if value, ok := du.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldTypeId,
		})
	}
	if value, ok := du.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldTypeName,
		})
	}
	if value, ok := du.mutation.MethodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldMethodId,
		})
	}
	if value, ok := du.mutation.AddedMethodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldMethodId,
		})
	}
	if value, ok := du.mutation.MethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldMethodName,
		})
	}
	if value, ok := du.mutation.WayId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldWayId,
		})
	}
	if value, ok := du.mutation.AddedWayId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldWayId,
		})
	}
	if value, ok := du.mutation.WayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldWayName,
		})
	}
	if value, ok := du.mutation.Drug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldDrug,
		})
	}
	if value, ok := du.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldRemarks,
		})
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldCreatedAt,
		})
	}
	if value, ok := du.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldCreatedAt,
		})
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldUpdatedAt,
		})
	}
	if value, ok := du.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldUpdatedAt,
		})
	}
	if value, ok := du.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldDeleted,
		})
	}
	if value, ok := du.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disinfect.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DisinfectUpdateOne is the builder for updating a single Disinfect entity.
type DisinfectUpdateOne struct {
	config
	hooks    []Hook
	mutation *DisinfectMutation
}

// SetName sets the name field.
func (duo *DisinfectUpdateOne) SetName(s string) *DisinfectUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetDate sets the date field.
func (duo *DisinfectUpdateOne) SetDate(i int64) *DisinfectUpdateOne {
	duo.mutation.ResetDate()
	duo.mutation.SetDate(i)
	return duo
}

// AddDate adds i to date.
func (duo *DisinfectUpdateOne) AddDate(i int64) *DisinfectUpdateOne {
	duo.mutation.AddDate(i)
	return duo
}

// SetTypeId sets the typeId field.
func (duo *DisinfectUpdateOne) SetTypeId(i int) *DisinfectUpdateOne {
	duo.mutation.ResetTypeId()
	duo.mutation.SetTypeId(i)
	return duo
}

// AddTypeId adds i to typeId.
func (duo *DisinfectUpdateOne) AddTypeId(i int) *DisinfectUpdateOne {
	duo.mutation.AddTypeId(i)
	return duo
}

// SetTypeName sets the typeName field.
func (duo *DisinfectUpdateOne) SetTypeName(s string) *DisinfectUpdateOne {
	duo.mutation.SetTypeName(s)
	return duo
}

// SetMethodId sets the methodId field.
func (duo *DisinfectUpdateOne) SetMethodId(i int) *DisinfectUpdateOne {
	duo.mutation.ResetMethodId()
	duo.mutation.SetMethodId(i)
	return duo
}

// AddMethodId adds i to methodId.
func (duo *DisinfectUpdateOne) AddMethodId(i int) *DisinfectUpdateOne {
	duo.mutation.AddMethodId(i)
	return duo
}

// SetMethodName sets the methodName field.
func (duo *DisinfectUpdateOne) SetMethodName(s string) *DisinfectUpdateOne {
	duo.mutation.SetMethodName(s)
	return duo
}

// SetWayId sets the wayId field.
func (duo *DisinfectUpdateOne) SetWayId(i int) *DisinfectUpdateOne {
	duo.mutation.ResetWayId()
	duo.mutation.SetWayId(i)
	return duo
}

// AddWayId adds i to wayId.
func (duo *DisinfectUpdateOne) AddWayId(i int) *DisinfectUpdateOne {
	duo.mutation.AddWayId(i)
	return duo
}

// SetWayName sets the wayName field.
func (duo *DisinfectUpdateOne) SetWayName(s string) *DisinfectUpdateOne {
	duo.mutation.SetWayName(s)
	return duo
}

// SetDrug sets the drug field.
func (duo *DisinfectUpdateOne) SetDrug(s string) *DisinfectUpdateOne {
	duo.mutation.SetDrug(s)
	return duo
}

// SetRemarks sets the remarks field.
func (duo *DisinfectUpdateOne) SetRemarks(s string) *DisinfectUpdateOne {
	duo.mutation.SetRemarks(s)
	return duo
}

// SetCreatedAt sets the createdAt field.
func (duo *DisinfectUpdateOne) SetCreatedAt(i int64) *DisinfectUpdateOne {
	duo.mutation.ResetCreatedAt()
	duo.mutation.SetCreatedAt(i)
	return duo
}

// AddCreatedAt adds i to createdAt.
func (duo *DisinfectUpdateOne) AddCreatedAt(i int64) *DisinfectUpdateOne {
	duo.mutation.AddCreatedAt(i)
	return duo
}

// SetUpdatedAt sets the updatedAt field.
func (duo *DisinfectUpdateOne) SetUpdatedAt(i int64) *DisinfectUpdateOne {
	duo.mutation.ResetUpdatedAt()
	duo.mutation.SetUpdatedAt(i)
	return duo
}

// AddUpdatedAt adds i to updatedAt.
func (duo *DisinfectUpdateOne) AddUpdatedAt(i int64) *DisinfectUpdateOne {
	duo.mutation.AddUpdatedAt(i)
	return duo
}

// SetDeleted sets the deleted field.
func (duo *DisinfectUpdateOne) SetDeleted(i int) *DisinfectUpdateOne {
	duo.mutation.ResetDeleted()
	duo.mutation.SetDeleted(i)
	return duo
}

// AddDeleted adds i to deleted.
func (duo *DisinfectUpdateOne) AddDeleted(i int) *DisinfectUpdateOne {
	duo.mutation.AddDeleted(i)
	return duo
}

// Mutation returns the DisinfectMutation object of the builder.
func (duo *DisinfectUpdateOne) Mutation() *DisinfectMutation {
	return duo.mutation
}

// Save executes the query and returns the updated entity.
func (duo *DisinfectUpdateOne) Save(ctx context.Context) (*Disinfect, error) {
	var (
		err  error
		node *Disinfect
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DisinfectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DisinfectUpdateOne) SaveX(ctx context.Context) *Disinfect {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DisinfectUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DisinfectUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DisinfectUpdateOne) sqlSave(ctx context.Context) (_node *Disinfect, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   disinfect.Table,
			Columns: disinfect.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: disinfect.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Disinfect.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldName,
		})
	}
	if value, ok := duo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldDate,
		})
	}
	if value, ok := duo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldDate,
		})
	}
	if value, ok := duo.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldTypeId,
		})
	}
	if value, ok := duo.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldTypeId,
		})
	}
	if value, ok := duo.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldTypeName,
		})
	}
	if value, ok := duo.mutation.MethodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldMethodId,
		})
	}
	if value, ok := duo.mutation.AddedMethodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldMethodId,
		})
	}
	if value, ok := duo.mutation.MethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldMethodName,
		})
	}
	if value, ok := duo.mutation.WayId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldWayId,
		})
	}
	if value, ok := duo.mutation.AddedWayId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldWayId,
		})
	}
	if value, ok := duo.mutation.WayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldWayName,
		})
	}
	if value, ok := duo.mutation.Drug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldDrug,
		})
	}
	if value, ok := duo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disinfect.FieldRemarks,
		})
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldCreatedAt,
		})
	}
	if value, ok := duo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldCreatedAt,
		})
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldUpdatedAt,
		})
	}
	if value, ok := duo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: disinfect.FieldUpdatedAt,
		})
	}
	if value, ok := duo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldDeleted,
		})
	}
	if value, ok := duo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: disinfect.FieldDeleted,
		})
	}
	_node = &Disinfect{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disinfect.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

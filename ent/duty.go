// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/duty"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Duty is the model entity for the Duty schema.
type Duty struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Duty) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Duty fields.
func (d *Duty) assignValues(values ...interface{}) error {
	if m, n := len(values), len(duty.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		d.Name = value.String
	}
	return nil
}

// Update returns a builder for updating this Duty.
// Note that, you need to call Duty.Unwrap() before calling this method, if this Duty
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Duty) Update() *DutyUpdateOne {
	return (&DutyClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Duty) Unwrap() *Duty {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Duty is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Duty) String() string {
	var builder strings.Builder
	builder.WriteString("Duty(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Duties is a parsable slice of Duty.
type Duties []*Duty

func (d Duties) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}

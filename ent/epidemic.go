// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/epidemic"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Epidemic is the model entity for the Epidemic schema.
type Epidemic struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// Onset holds the value of the "onset" field.
	Onset int64 `json:"onset,omitempty"`
	// EpidemicTypeId holds the value of the "epidemicTypeId" field.
	EpidemicTypeId int `json:"epidemicTypeId,omitempty"`
	// EpidemicTypeName holds the value of the "epidemicTypeName" field.
	EpidemicTypeName string `json:"epidemicTypeName,omitempty"`
	// IsolatedShedName holds the value of the "isolatedShedName" field.
	IsolatedShedName string `json:"isolatedShedName,omitempty"`
	// DiagedBy holds the value of the "diagedBy" field.
	DiagedBy string `json:"diagedBy,omitempty"`
	// TreatmentResultId holds the value of the "treatmentResultId" field.
	TreatmentResultId int `json:"treatmentResultId,omitempty"`
	// TreatmentResultName holds the value of the "treatmentResultName" field.
	TreatmentResultName string `json:"treatmentResultName,omitempty"`
	// TreatmentState holds the value of the "treatmentState" field.
	TreatmentState string `json:"treatmentState,omitempty"`
	// TreatmentAt holds the value of the "treatmentAt" field.
	TreatmentAt int64 `json:"treatmentAt,omitempty"`
	// Whereabout holds the value of the "whereabout" field.
	Whereabout string `json:"whereabout,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Epidemic) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // earNumber
		&sql.NullString{}, // shedName
		&sql.NullInt64{},  // onset
		&sql.NullInt64{},  // epidemicTypeId
		&sql.NullString{}, // epidemicTypeName
		&sql.NullString{}, // isolatedShedName
		&sql.NullString{}, // diagedBy
		&sql.NullInt64{},  // treatmentResultId
		&sql.NullString{}, // treatmentResultName
		&sql.NullString{}, // treatmentState
		&sql.NullInt64{},  // treatmentAt
		&sql.NullString{}, // whereabout
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Epidemic fields.
func (e *Epidemic) assignValues(values ...interface{}) error {
	if m, n := len(values), len(epidemic.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		e.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[1])
	} else if value.Valid {
		e.EarNumber = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[2])
	} else if value.Valid {
		e.ShedName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field onset", values[3])
	} else if value.Valid {
		e.Onset = value.Int64
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field epidemicTypeId", values[4])
	} else if value.Valid {
		e.EpidemicTypeId = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field epidemicTypeName", values[5])
	} else if value.Valid {
		e.EpidemicTypeName = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field isolatedShedName", values[6])
	} else if value.Valid {
		e.IsolatedShedName = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field diagedBy", values[7])
	} else if value.Valid {
		e.DiagedBy = value.String
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field treatmentResultId", values[8])
	} else if value.Valid {
		e.TreatmentResultId = int(value.Int64)
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field treatmentResultName", values[9])
	} else if value.Valid {
		e.TreatmentResultName = value.String
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field treatmentState", values[10])
	} else if value.Valid {
		e.TreatmentState = value.String
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field treatmentAt", values[11])
	} else if value.Valid {
		e.TreatmentAt = value.Int64
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field whereabout", values[12])
	} else if value.Valid {
		e.Whereabout = value.String
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[13])
	} else if value.Valid {
		e.TenantId = value.Int64
	}
	if value, ok := values[14].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[14])
	} else if value.Valid {
		e.TenantName = value.String
	}
	if value, ok := values[15].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[15])
	} else if value.Valid {
		e.Remarks = value.String
	}
	if value, ok := values[16].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[16])
	} else if value.Valid {
		e.CreatedAt = value.Int64
	}
	if value, ok := values[17].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[17])
	} else if value.Valid {
		e.UpdatedAt = value.Int64
	}
	if value, ok := values[18].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[18])
	} else if value.Valid {
		e.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Epidemic.
// Note that, you need to call Epidemic.Unwrap() before calling this method, if this Epidemic
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Epidemic) Update() *EpidemicUpdateOne {
	return (&EpidemicClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Epidemic) Unwrap() *Epidemic {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Epidemic is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Epidemic) String() string {
	var builder strings.Builder
	builder.WriteString("Epidemic(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteString(", earNumber=")
	builder.WriteString(e.EarNumber)
	builder.WriteString(", shedName=")
	builder.WriteString(e.ShedName)
	builder.WriteString(", onset=")
	builder.WriteString(fmt.Sprintf("%v", e.Onset))
	builder.WriteString(", epidemicTypeId=")
	builder.WriteString(fmt.Sprintf("%v", e.EpidemicTypeId))
	builder.WriteString(", epidemicTypeName=")
	builder.WriteString(e.EpidemicTypeName)
	builder.WriteString(", isolatedShedName=")
	builder.WriteString(e.IsolatedShedName)
	builder.WriteString(", diagedBy=")
	builder.WriteString(e.DiagedBy)
	builder.WriteString(", treatmentResultId=")
	builder.WriteString(fmt.Sprintf("%v", e.TreatmentResultId))
	builder.WriteString(", treatmentResultName=")
	builder.WriteString(e.TreatmentResultName)
	builder.WriteString(", treatmentState=")
	builder.WriteString(e.TreatmentState)
	builder.WriteString(", treatmentAt=")
	builder.WriteString(fmt.Sprintf("%v", e.TreatmentAt))
	builder.WriteString(", whereabout=")
	builder.WriteString(e.Whereabout)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", e.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(e.TenantName)
	builder.WriteString(", remarks=")
	builder.WriteString(e.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", e.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Epidemics is a parsable slice of Epidemic.
type Epidemics []*Epidemic

func (e Epidemics) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}

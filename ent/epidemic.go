// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/epidemic"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Epidemic is the model entity for the Epidemic schema.
type Epidemic struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// 疫病名称
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 发病日期
	Onset int64 `json:"onset,omitempty"`
	// EpidemicTypeId holds the value of the "epidemicTypeId" field.
	EpidemicTypeId int `json:"epidemicTypeId,omitempty"`
	// EpidemicTypeName holds the value of the "epidemicTypeName" field.
	EpidemicTypeName string `json:"epidemicTypeName,omitempty"`
	// 隔离栋舍
	IsolatedShedName string `json:"isolatedShedName,omitempty"`
	// 诊断兽医
	DiagedBy string `json:"diagedBy,omitempty"`
	// TreatmentResultId holds the value of the "treatmentResultId" field.
	TreatmentResultId int `json:"treatmentResultId,omitempty"`
	// TreatmentResultName holds the value of the "treatmentResultName" field.
	TreatmentResultName string `json:"treatmentResultName,omitempty"`
	// TreatmentState holds the value of the "treatmentState" field.
	TreatmentState string `json:"treatmentState,omitempty"`
	// 治疗结束日期
	TreatmentAt int64 `json:"treatmentAt,omitempty"`
	// 去向
	Whereabout string `json:"whereabout,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Epidemic) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case epidemic.FieldID, epidemic.FieldCattleId, epidemic.FieldTenantId, epidemic.FieldFarmId, epidemic.FieldShedId, epidemic.FieldOnset, epidemic.FieldEpidemicTypeId, epidemic.FieldTreatmentResultId, epidemic.FieldTreatmentAt, epidemic.FieldCreatedAt, epidemic.FieldUpdatedAt, epidemic.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case epidemic.FieldTenantName, epidemic.FieldFarmName, epidemic.FieldShedName, epidemic.FieldName, epidemic.FieldEarNumber, epidemic.FieldEpidemicTypeName, epidemic.FieldIsolatedShedName, epidemic.FieldDiagedBy, epidemic.FieldTreatmentResultName, epidemic.FieldTreatmentState, epidemic.FieldWhereabout, epidemic.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Epidemic", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Epidemic fields.
func (e *Epidemic) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case epidemic.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case epidemic.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				e.CattleId = value.Int64
			}
		case epidemic.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				e.TenantId = value.Int64
			}
		case epidemic.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				e.TenantName = value.String
			}
		case epidemic.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				e.FarmId = value.Int64
			}
		case epidemic.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				e.FarmName = value.String
			}
		case epidemic.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				e.ShedId = value.Int64
			}
		case epidemic.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				e.ShedName = value.String
			}
		case epidemic.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case epidemic.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				e.EarNumber = value.String
			}
		case epidemic.FieldOnset:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field onset", values[i])
			} else if value.Valid {
				e.Onset = value.Int64
			}
		case epidemic.FieldEpidemicTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field epidemicTypeId", values[i])
			} else if value.Valid {
				e.EpidemicTypeId = int(value.Int64)
			}
		case epidemic.FieldEpidemicTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field epidemicTypeName", values[i])
			} else if value.Valid {
				e.EpidemicTypeName = value.String
			}
		case epidemic.FieldIsolatedShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isolatedShedName", values[i])
			} else if value.Valid {
				e.IsolatedShedName = value.String
			}
		case epidemic.FieldDiagedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field diagedBy", values[i])
			} else if value.Valid {
				e.DiagedBy = value.String
			}
		case epidemic.FieldTreatmentResultId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field treatmentResultId", values[i])
			} else if value.Valid {
				e.TreatmentResultId = int(value.Int64)
			}
		case epidemic.FieldTreatmentResultName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field treatmentResultName", values[i])
			} else if value.Valid {
				e.TreatmentResultName = value.String
			}
		case epidemic.FieldTreatmentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field treatmentState", values[i])
			} else if value.Valid {
				e.TreatmentState = value.String
			}
		case epidemic.FieldTreatmentAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field treatmentAt", values[i])
			} else if value.Valid {
				e.TreatmentAt = value.Int64
			}
		case epidemic.FieldWhereabout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whereabout", values[i])
			} else if value.Valid {
				e.Whereabout = value.String
			}
		case epidemic.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				e.Remarks = value.String
			}
		case epidemic.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Int64
			}
		case epidemic.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Int64
			}
		case epidemic.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				e.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Epidemic.
// Note that you need to call Epidemic.Unwrap() before calling this method if this Epidemic
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Epidemic) Update() *EpidemicUpdateOne {
	return (&EpidemicClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Epidemic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Epidemic) Unwrap() *Epidemic {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Epidemic is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Epidemic) String() string {
	var builder strings.Builder
	builder.WriteString("Epidemic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", e.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", e.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(e.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", e.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(e.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", e.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(e.ShedName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(e.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("onset=")
	builder.WriteString(fmt.Sprintf("%v", e.Onset))
	builder.WriteString(", ")
	builder.WriteString("epidemicTypeId=")
	builder.WriteString(fmt.Sprintf("%v", e.EpidemicTypeId))
	builder.WriteString(", ")
	builder.WriteString("epidemicTypeName=")
	builder.WriteString(e.EpidemicTypeName)
	builder.WriteString(", ")
	builder.WriteString("isolatedShedName=")
	builder.WriteString(e.IsolatedShedName)
	builder.WriteString(", ")
	builder.WriteString("diagedBy=")
	builder.WriteString(e.DiagedBy)
	builder.WriteString(", ")
	builder.WriteString("treatmentResultId=")
	builder.WriteString(fmt.Sprintf("%v", e.TreatmentResultId))
	builder.WriteString(", ")
	builder.WriteString("treatmentResultName=")
	builder.WriteString(e.TreatmentResultName)
	builder.WriteString(", ")
	builder.WriteString("treatmentState=")
	builder.WriteString(e.TreatmentState)
	builder.WriteString(", ")
	builder.WriteString("treatmentAt=")
	builder.WriteString(fmt.Sprintf("%v", e.TreatmentAt))
	builder.WriteString(", ")
	builder.WriteString("whereabout=")
	builder.WriteString(e.Whereabout)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(e.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", e.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Epidemics is a parsable slice of Epidemic.
type Epidemics []*Epidemic

func (e Epidemics) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package epidemic

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// EarNumber applies equality check predicate on the "earNumber" field. It's identical to EarNumberEQ.
func EarNumber(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// ShedName applies equality check predicate on the "shedName" field. It's identical to ShedNameEQ.
func ShedName(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// Onset applies equality check predicate on the "onset" field. It's identical to OnsetEQ.
func Onset(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnset), v))
	})
}

// EpidemicTypeId applies equality check predicate on the "epidemicTypeId" field. It's identical to EpidemicTypeIdEQ.
func EpidemicTypeId(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpidemicTypeId), v))
	})
}

// EpidemicTypeName applies equality check predicate on the "epidemicTypeName" field. It's identical to EpidemicTypeNameEQ.
func EpidemicTypeName(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpidemicTypeName), v))
	})
}

// IsolatedShedName applies equality check predicate on the "isolatedShedName" field. It's identical to IsolatedShedNameEQ.
func IsolatedShedName(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsolatedShedName), v))
	})
}

// DiagedBy applies equality check predicate on the "diagedBy" field. It's identical to DiagedByEQ.
func DiagedBy(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagedBy), v))
	})
}

// TreatmentResultId applies equality check predicate on the "treatmentResultId" field. It's identical to TreatmentResultIdEQ.
func TreatmentResultId(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentResultId), v))
	})
}

// TreatmentResultName applies equality check predicate on the "treatmentResultName" field. It's identical to TreatmentResultNameEQ.
func TreatmentResultName(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentState applies equality check predicate on the "treatmentState" field. It's identical to TreatmentStateEQ.
func TreatmentState(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentState), v))
	})
}

// TreatmentAt applies equality check predicate on the "treatmentAt" field. It's identical to TreatmentAtEQ.
func TreatmentAt(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentAt), v))
	})
}

// Whereabout applies equality check predicate on the "whereabout" field. It's identical to WhereaboutEQ.
func Whereabout(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhereabout), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EarNumberEQ applies the EQ predicate on the "earNumber" field.
func EarNumberEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberNEQ applies the NEQ predicate on the "earNumber" field.
func EarNumberNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberIn applies the In predicate on the "earNumber" field.
func EarNumberIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEarNumber), v...))
	})
}

// EarNumberNotIn applies the NotIn predicate on the "earNumber" field.
func EarNumberNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEarNumber), v...))
	})
}

// EarNumberGT applies the GT predicate on the "earNumber" field.
func EarNumberGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEarNumber), v))
	})
}

// EarNumberGTE applies the GTE predicate on the "earNumber" field.
func EarNumberGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberLT applies the LT predicate on the "earNumber" field.
func EarNumberLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEarNumber), v))
	})
}

// EarNumberLTE applies the LTE predicate on the "earNumber" field.
func EarNumberLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberContains applies the Contains predicate on the "earNumber" field.
func EarNumberContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasPrefix applies the HasPrefix predicate on the "earNumber" field.
func EarNumberHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasSuffix applies the HasSuffix predicate on the "earNumber" field.
func EarNumberHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEarNumber), v))
	})
}

// EarNumberEqualFold applies the EqualFold predicate on the "earNumber" field.
func EarNumberEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEarNumber), v))
	})
}

// EarNumberContainsFold applies the ContainsFold predicate on the "earNumber" field.
func EarNumberContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEarNumber), v))
	})
}

// ShedNameEQ applies the EQ predicate on the "shedName" field.
func ShedNameEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// ShedNameNEQ applies the NEQ predicate on the "shedName" field.
func ShedNameNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedName), v))
	})
}

// ShedNameIn applies the In predicate on the "shedName" field.
func ShedNameIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShedName), v...))
	})
}

// ShedNameNotIn applies the NotIn predicate on the "shedName" field.
func ShedNameNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShedName), v...))
	})
}

// ShedNameGT applies the GT predicate on the "shedName" field.
func ShedNameGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedName), v))
	})
}

// ShedNameGTE applies the GTE predicate on the "shedName" field.
func ShedNameGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedName), v))
	})
}

// ShedNameLT applies the LT predicate on the "shedName" field.
func ShedNameLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedName), v))
	})
}

// ShedNameLTE applies the LTE predicate on the "shedName" field.
func ShedNameLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedName), v))
	})
}

// ShedNameContains applies the Contains predicate on the "shedName" field.
func ShedNameContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedName), v))
	})
}

// ShedNameHasPrefix applies the HasPrefix predicate on the "shedName" field.
func ShedNameHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedName), v))
	})
}

// ShedNameHasSuffix applies the HasSuffix predicate on the "shedName" field.
func ShedNameHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedName), v))
	})
}

// ShedNameEqualFold applies the EqualFold predicate on the "shedName" field.
func ShedNameEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedName), v))
	})
}

// ShedNameContainsFold applies the ContainsFold predicate on the "shedName" field.
func ShedNameContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedName), v))
	})
}

// OnsetEQ applies the EQ predicate on the "onset" field.
func OnsetEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnset), v))
	})
}

// OnsetNEQ applies the NEQ predicate on the "onset" field.
func OnsetNEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnset), v))
	})
}

// OnsetIn applies the In predicate on the "onset" field.
func OnsetIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOnset), v...))
	})
}

// OnsetNotIn applies the NotIn predicate on the "onset" field.
func OnsetNotIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOnset), v...))
	})
}

// OnsetGT applies the GT predicate on the "onset" field.
func OnsetGT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOnset), v))
	})
}

// OnsetGTE applies the GTE predicate on the "onset" field.
func OnsetGTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOnset), v))
	})
}

// OnsetLT applies the LT predicate on the "onset" field.
func OnsetLT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOnset), v))
	})
}

// OnsetLTE applies the LTE predicate on the "onset" field.
func OnsetLTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOnset), v))
	})
}

// EpidemicTypeIdEQ applies the EQ predicate on the "epidemicTypeId" field.
func EpidemicTypeIdEQ(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpidemicTypeId), v))
	})
}

// EpidemicTypeIdNEQ applies the NEQ predicate on the "epidemicTypeId" field.
func EpidemicTypeIdNEQ(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEpidemicTypeId), v))
	})
}

// EpidemicTypeIdIn applies the In predicate on the "epidemicTypeId" field.
func EpidemicTypeIdIn(vs ...int) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEpidemicTypeId), v...))
	})
}

// EpidemicTypeIdNotIn applies the NotIn predicate on the "epidemicTypeId" field.
func EpidemicTypeIdNotIn(vs ...int) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEpidemicTypeId), v...))
	})
}

// EpidemicTypeIdGT applies the GT predicate on the "epidemicTypeId" field.
func EpidemicTypeIdGT(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEpidemicTypeId), v))
	})
}

// EpidemicTypeIdGTE applies the GTE predicate on the "epidemicTypeId" field.
func EpidemicTypeIdGTE(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEpidemicTypeId), v))
	})
}

// EpidemicTypeIdLT applies the LT predicate on the "epidemicTypeId" field.
func EpidemicTypeIdLT(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEpidemicTypeId), v))
	})
}

// EpidemicTypeIdLTE applies the LTE predicate on the "epidemicTypeId" field.
func EpidemicTypeIdLTE(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEpidemicTypeId), v))
	})
}

// EpidemicTypeNameEQ applies the EQ predicate on the "epidemicTypeName" field.
func EpidemicTypeNameEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameNEQ applies the NEQ predicate on the "epidemicTypeName" field.
func EpidemicTypeNameNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameIn applies the In predicate on the "epidemicTypeName" field.
func EpidemicTypeNameIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEpidemicTypeName), v...))
	})
}

// EpidemicTypeNameNotIn applies the NotIn predicate on the "epidemicTypeName" field.
func EpidemicTypeNameNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEpidemicTypeName), v...))
	})
}

// EpidemicTypeNameGT applies the GT predicate on the "epidemicTypeName" field.
func EpidemicTypeNameGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameGTE applies the GTE predicate on the "epidemicTypeName" field.
func EpidemicTypeNameGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameLT applies the LT predicate on the "epidemicTypeName" field.
func EpidemicTypeNameLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameLTE applies the LTE predicate on the "epidemicTypeName" field.
func EpidemicTypeNameLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameContains applies the Contains predicate on the "epidemicTypeName" field.
func EpidemicTypeNameContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameHasPrefix applies the HasPrefix predicate on the "epidemicTypeName" field.
func EpidemicTypeNameHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameHasSuffix applies the HasSuffix predicate on the "epidemicTypeName" field.
func EpidemicTypeNameHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameEqualFold applies the EqualFold predicate on the "epidemicTypeName" field.
func EpidemicTypeNameEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEpidemicTypeName), v))
	})
}

// EpidemicTypeNameContainsFold applies the ContainsFold predicate on the "epidemicTypeName" field.
func EpidemicTypeNameContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEpidemicTypeName), v))
	})
}

// IsolatedShedNameEQ applies the EQ predicate on the "isolatedShedName" field.
func IsolatedShedNameEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameNEQ applies the NEQ predicate on the "isolatedShedName" field.
func IsolatedShedNameNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameIn applies the In predicate on the "isolatedShedName" field.
func IsolatedShedNameIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsolatedShedName), v...))
	})
}

// IsolatedShedNameNotIn applies the NotIn predicate on the "isolatedShedName" field.
func IsolatedShedNameNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsolatedShedName), v...))
	})
}

// IsolatedShedNameGT applies the GT predicate on the "isolatedShedName" field.
func IsolatedShedNameGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameGTE applies the GTE predicate on the "isolatedShedName" field.
func IsolatedShedNameGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameLT applies the LT predicate on the "isolatedShedName" field.
func IsolatedShedNameLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameLTE applies the LTE predicate on the "isolatedShedName" field.
func IsolatedShedNameLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameContains applies the Contains predicate on the "isolatedShedName" field.
func IsolatedShedNameContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameHasPrefix applies the HasPrefix predicate on the "isolatedShedName" field.
func IsolatedShedNameHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameHasSuffix applies the HasSuffix predicate on the "isolatedShedName" field.
func IsolatedShedNameHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameEqualFold applies the EqualFold predicate on the "isolatedShedName" field.
func IsolatedShedNameEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsolatedShedName), v))
	})
}

// IsolatedShedNameContainsFold applies the ContainsFold predicate on the "isolatedShedName" field.
func IsolatedShedNameContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsolatedShedName), v))
	})
}

// DiagedByEQ applies the EQ predicate on the "diagedBy" field.
func DiagedByEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagedBy), v))
	})
}

// DiagedByNEQ applies the NEQ predicate on the "diagedBy" field.
func DiagedByNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiagedBy), v))
	})
}

// DiagedByIn applies the In predicate on the "diagedBy" field.
func DiagedByIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiagedBy), v...))
	})
}

// DiagedByNotIn applies the NotIn predicate on the "diagedBy" field.
func DiagedByNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiagedBy), v...))
	})
}

// DiagedByGT applies the GT predicate on the "diagedBy" field.
func DiagedByGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiagedBy), v))
	})
}

// DiagedByGTE applies the GTE predicate on the "diagedBy" field.
func DiagedByGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiagedBy), v))
	})
}

// DiagedByLT applies the LT predicate on the "diagedBy" field.
func DiagedByLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiagedBy), v))
	})
}

// DiagedByLTE applies the LTE predicate on the "diagedBy" field.
func DiagedByLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiagedBy), v))
	})
}

// DiagedByContains applies the Contains predicate on the "diagedBy" field.
func DiagedByContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiagedBy), v))
	})
}

// DiagedByHasPrefix applies the HasPrefix predicate on the "diagedBy" field.
func DiagedByHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiagedBy), v))
	})
}

// DiagedByHasSuffix applies the HasSuffix predicate on the "diagedBy" field.
func DiagedByHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiagedBy), v))
	})
}

// DiagedByEqualFold applies the EqualFold predicate on the "diagedBy" field.
func DiagedByEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiagedBy), v))
	})
}

// DiagedByContainsFold applies the ContainsFold predicate on the "diagedBy" field.
func DiagedByContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiagedBy), v))
	})
}

// TreatmentResultIdEQ applies the EQ predicate on the "treatmentResultId" field.
func TreatmentResultIdEQ(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentResultId), v))
	})
}

// TreatmentResultIdNEQ applies the NEQ predicate on the "treatmentResultId" field.
func TreatmentResultIdNEQ(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreatmentResultId), v))
	})
}

// TreatmentResultIdIn applies the In predicate on the "treatmentResultId" field.
func TreatmentResultIdIn(vs ...int) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreatmentResultId), v...))
	})
}

// TreatmentResultIdNotIn applies the NotIn predicate on the "treatmentResultId" field.
func TreatmentResultIdNotIn(vs ...int) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreatmentResultId), v...))
	})
}

// TreatmentResultIdGT applies the GT predicate on the "treatmentResultId" field.
func TreatmentResultIdGT(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreatmentResultId), v))
	})
}

// TreatmentResultIdGTE applies the GTE predicate on the "treatmentResultId" field.
func TreatmentResultIdGTE(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreatmentResultId), v))
	})
}

// TreatmentResultIdLT applies the LT predicate on the "treatmentResultId" field.
func TreatmentResultIdLT(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreatmentResultId), v))
	})
}

// TreatmentResultIdLTE applies the LTE predicate on the "treatmentResultId" field.
func TreatmentResultIdLTE(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreatmentResultId), v))
	})
}

// TreatmentResultNameEQ applies the EQ predicate on the "treatmentResultName" field.
func TreatmentResultNameEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameNEQ applies the NEQ predicate on the "treatmentResultName" field.
func TreatmentResultNameNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameIn applies the In predicate on the "treatmentResultName" field.
func TreatmentResultNameIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreatmentResultName), v...))
	})
}

// TreatmentResultNameNotIn applies the NotIn predicate on the "treatmentResultName" field.
func TreatmentResultNameNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreatmentResultName), v...))
	})
}

// TreatmentResultNameGT applies the GT predicate on the "treatmentResultName" field.
func TreatmentResultNameGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameGTE applies the GTE predicate on the "treatmentResultName" field.
func TreatmentResultNameGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameLT applies the LT predicate on the "treatmentResultName" field.
func TreatmentResultNameLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameLTE applies the LTE predicate on the "treatmentResultName" field.
func TreatmentResultNameLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameContains applies the Contains predicate on the "treatmentResultName" field.
func TreatmentResultNameContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameHasPrefix applies the HasPrefix predicate on the "treatmentResultName" field.
func TreatmentResultNameHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameHasSuffix applies the HasSuffix predicate on the "treatmentResultName" field.
func TreatmentResultNameHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameEqualFold applies the EqualFold predicate on the "treatmentResultName" field.
func TreatmentResultNameEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentResultNameContainsFold applies the ContainsFold predicate on the "treatmentResultName" field.
func TreatmentResultNameContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTreatmentResultName), v))
	})
}

// TreatmentStateEQ applies the EQ predicate on the "treatmentState" field.
func TreatmentStateEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateNEQ applies the NEQ predicate on the "treatmentState" field.
func TreatmentStateNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateIn applies the In predicate on the "treatmentState" field.
func TreatmentStateIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreatmentState), v...))
	})
}

// TreatmentStateNotIn applies the NotIn predicate on the "treatmentState" field.
func TreatmentStateNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreatmentState), v...))
	})
}

// TreatmentStateGT applies the GT predicate on the "treatmentState" field.
func TreatmentStateGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateGTE applies the GTE predicate on the "treatmentState" field.
func TreatmentStateGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateLT applies the LT predicate on the "treatmentState" field.
func TreatmentStateLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateLTE applies the LTE predicate on the "treatmentState" field.
func TreatmentStateLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateContains applies the Contains predicate on the "treatmentState" field.
func TreatmentStateContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateHasPrefix applies the HasPrefix predicate on the "treatmentState" field.
func TreatmentStateHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateHasSuffix applies the HasSuffix predicate on the "treatmentState" field.
func TreatmentStateHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateEqualFold applies the EqualFold predicate on the "treatmentState" field.
func TreatmentStateEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTreatmentState), v))
	})
}

// TreatmentStateContainsFold applies the ContainsFold predicate on the "treatmentState" field.
func TreatmentStateContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTreatmentState), v))
	})
}

// TreatmentAtEQ applies the EQ predicate on the "treatmentAt" field.
func TreatmentAtEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentAt), v))
	})
}

// TreatmentAtNEQ applies the NEQ predicate on the "treatmentAt" field.
func TreatmentAtNEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreatmentAt), v))
	})
}

// TreatmentAtIn applies the In predicate on the "treatmentAt" field.
func TreatmentAtIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreatmentAt), v...))
	})
}

// TreatmentAtNotIn applies the NotIn predicate on the "treatmentAt" field.
func TreatmentAtNotIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreatmentAt), v...))
	})
}

// TreatmentAtGT applies the GT predicate on the "treatmentAt" field.
func TreatmentAtGT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreatmentAt), v))
	})
}

// TreatmentAtGTE applies the GTE predicate on the "treatmentAt" field.
func TreatmentAtGTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreatmentAt), v))
	})
}

// TreatmentAtLT applies the LT predicate on the "treatmentAt" field.
func TreatmentAtLT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreatmentAt), v))
	})
}

// TreatmentAtLTE applies the LTE predicate on the "treatmentAt" field.
func TreatmentAtLTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreatmentAt), v))
	})
}

// WhereaboutEQ applies the EQ predicate on the "whereabout" field.
func WhereaboutEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhereabout), v))
	})
}

// WhereaboutNEQ applies the NEQ predicate on the "whereabout" field.
func WhereaboutNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWhereabout), v))
	})
}

// WhereaboutIn applies the In predicate on the "whereabout" field.
func WhereaboutIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWhereabout), v...))
	})
}

// WhereaboutNotIn applies the NotIn predicate on the "whereabout" field.
func WhereaboutNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWhereabout), v...))
	})
}

// WhereaboutGT applies the GT predicate on the "whereabout" field.
func WhereaboutGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWhereabout), v))
	})
}

// WhereaboutGTE applies the GTE predicate on the "whereabout" field.
func WhereaboutGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWhereabout), v))
	})
}

// WhereaboutLT applies the LT predicate on the "whereabout" field.
func WhereaboutLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWhereabout), v))
	})
}

// WhereaboutLTE applies the LTE predicate on the "whereabout" field.
func WhereaboutLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWhereabout), v))
	})
}

// WhereaboutContains applies the Contains predicate on the "whereabout" field.
func WhereaboutContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWhereabout), v))
	})
}

// WhereaboutHasPrefix applies the HasPrefix predicate on the "whereabout" field.
func WhereaboutHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWhereabout), v))
	})
}

// WhereaboutHasSuffix applies the HasSuffix predicate on the "whereabout" field.
func WhereaboutHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWhereabout), v))
	})
}

// WhereaboutEqualFold applies the EqualFold predicate on the "whereabout" field.
func WhereaboutEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWhereabout), v))
	})
}

// WhereaboutContainsFold applies the ContainsFold predicate on the "whereabout" field.
func WhereaboutContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWhereabout), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.Epidemic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Epidemic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Epidemic) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Epidemic) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Epidemic) predicate.Epidemic {
	return predicate.Epidemic(func(s *sql.Selector) {
		p(s.Not())
	})
}

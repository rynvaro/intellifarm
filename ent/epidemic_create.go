// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/epidemic"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EpidemicCreate is the builder for creating a Epidemic entity.
type EpidemicCreate struct {
	config
	mutation *EpidemicMutation
	hooks    []Hook
}

// SetCattleId sets the "cattleId" field.
func (ec *EpidemicCreate) SetCattleId(i int64) *EpidemicCreate {
	ec.mutation.SetCattleId(i)
	return ec
}

// SetTenantId sets the "tenantId" field.
func (ec *EpidemicCreate) SetTenantId(i int64) *EpidemicCreate {
	ec.mutation.SetTenantId(i)
	return ec
}

// SetTenantName sets the "tenantName" field.
func (ec *EpidemicCreate) SetTenantName(s string) *EpidemicCreate {
	ec.mutation.SetTenantName(s)
	return ec
}

// SetFarmId sets the "farmId" field.
func (ec *EpidemicCreate) SetFarmId(i int64) *EpidemicCreate {
	ec.mutation.SetFarmId(i)
	return ec
}

// SetFarmName sets the "farmName" field.
func (ec *EpidemicCreate) SetFarmName(s string) *EpidemicCreate {
	ec.mutation.SetFarmName(s)
	return ec
}

// SetShedId sets the "shedId" field.
func (ec *EpidemicCreate) SetShedId(i int64) *EpidemicCreate {
	ec.mutation.SetShedId(i)
	return ec
}

// SetShedName sets the "shedName" field.
func (ec *EpidemicCreate) SetShedName(s string) *EpidemicCreate {
	ec.mutation.SetShedName(s)
	return ec
}

// SetName sets the "name" field.
func (ec *EpidemicCreate) SetName(s string) *EpidemicCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetEarNumber sets the "earNumber" field.
func (ec *EpidemicCreate) SetEarNumber(s string) *EpidemicCreate {
	ec.mutation.SetEarNumber(s)
	return ec
}

// SetOnset sets the "onset" field.
func (ec *EpidemicCreate) SetOnset(i int64) *EpidemicCreate {
	ec.mutation.SetOnset(i)
	return ec
}

// SetEpidemicTypeId sets the "epidemicTypeId" field.
func (ec *EpidemicCreate) SetEpidemicTypeId(i int) *EpidemicCreate {
	ec.mutation.SetEpidemicTypeId(i)
	return ec
}

// SetEpidemicTypeName sets the "epidemicTypeName" field.
func (ec *EpidemicCreate) SetEpidemicTypeName(s string) *EpidemicCreate {
	ec.mutation.SetEpidemicTypeName(s)
	return ec
}

// SetIsolatedShedName sets the "isolatedShedName" field.
func (ec *EpidemicCreate) SetIsolatedShedName(s string) *EpidemicCreate {
	ec.mutation.SetIsolatedShedName(s)
	return ec
}

// SetDiagedBy sets the "diagedBy" field.
func (ec *EpidemicCreate) SetDiagedBy(s string) *EpidemicCreate {
	ec.mutation.SetDiagedBy(s)
	return ec
}

// SetTreatmentResultId sets the "treatmentResultId" field.
func (ec *EpidemicCreate) SetTreatmentResultId(i int) *EpidemicCreate {
	ec.mutation.SetTreatmentResultId(i)
	return ec
}

// SetTreatmentResultName sets the "treatmentResultName" field.
func (ec *EpidemicCreate) SetTreatmentResultName(s string) *EpidemicCreate {
	ec.mutation.SetTreatmentResultName(s)
	return ec
}

// SetTreatmentState sets the "treatmentState" field.
func (ec *EpidemicCreate) SetTreatmentState(s string) *EpidemicCreate {
	ec.mutation.SetTreatmentState(s)
	return ec
}

// SetTreatmentAt sets the "treatmentAt" field.
func (ec *EpidemicCreate) SetTreatmentAt(i int64) *EpidemicCreate {
	ec.mutation.SetTreatmentAt(i)
	return ec
}

// SetWhereabout sets the "whereabout" field.
func (ec *EpidemicCreate) SetWhereabout(s string) *EpidemicCreate {
	ec.mutation.SetWhereabout(s)
	return ec
}

// SetRemarks sets the "remarks" field.
func (ec *EpidemicCreate) SetRemarks(s string) *EpidemicCreate {
	ec.mutation.SetRemarks(s)
	return ec
}

// SetCreatedAt sets the "createdAt" field.
func (ec *EpidemicCreate) SetCreatedAt(i int64) *EpidemicCreate {
	ec.mutation.SetCreatedAt(i)
	return ec
}

// SetUpdatedAt sets the "updatedAt" field.
func (ec *EpidemicCreate) SetUpdatedAt(i int64) *EpidemicCreate {
	ec.mutation.SetUpdatedAt(i)
	return ec
}

// SetDeleted sets the "deleted" field.
func (ec *EpidemicCreate) SetDeleted(i int) *EpidemicCreate {
	ec.mutation.SetDeleted(i)
	return ec
}

// Mutation returns the EpidemicMutation object of the builder.
func (ec *EpidemicCreate) Mutation() *EpidemicMutation {
	return ec.mutation
}

// Save creates the Epidemic in the database.
func (ec *EpidemicCreate) Save(ctx context.Context) (*Epidemic, error) {
	var (
		err  error
		node *Epidemic
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EpidemicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Epidemic)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EpidemicMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EpidemicCreate) SaveX(ctx context.Context) *Epidemic {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EpidemicCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EpidemicCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EpidemicCreate) check() error {
	if _, ok := ec.mutation.CattleId(); !ok {
		return &ValidationError{Name: "cattleId", err: errors.New(`ent: missing required field "Epidemic.cattleId"`)}
	}
	if _, ok := ec.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "Epidemic.tenantId"`)}
	}
	if _, ok := ec.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "Epidemic.tenantName"`)}
	}
	if _, ok := ec.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New(`ent: missing required field "Epidemic.farmId"`)}
	}
	if _, ok := ec.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New(`ent: missing required field "Epidemic.farmName"`)}
	}
	if _, ok := ec.mutation.ShedId(); !ok {
		return &ValidationError{Name: "shedId", err: errors.New(`ent: missing required field "Epidemic.shedId"`)}
	}
	if _, ok := ec.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New(`ent: missing required field "Epidemic.shedName"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Epidemic.name"`)}
	}
	if _, ok := ec.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New(`ent: missing required field "Epidemic.earNumber"`)}
	}
	if _, ok := ec.mutation.Onset(); !ok {
		return &ValidationError{Name: "onset", err: errors.New(`ent: missing required field "Epidemic.onset"`)}
	}
	if _, ok := ec.mutation.EpidemicTypeId(); !ok {
		return &ValidationError{Name: "epidemicTypeId", err: errors.New(`ent: missing required field "Epidemic.epidemicTypeId"`)}
	}
	if _, ok := ec.mutation.EpidemicTypeName(); !ok {
		return &ValidationError{Name: "epidemicTypeName", err: errors.New(`ent: missing required field "Epidemic.epidemicTypeName"`)}
	}
	if _, ok := ec.mutation.IsolatedShedName(); !ok {
		return &ValidationError{Name: "isolatedShedName", err: errors.New(`ent: missing required field "Epidemic.isolatedShedName"`)}
	}
	if _, ok := ec.mutation.DiagedBy(); !ok {
		return &ValidationError{Name: "diagedBy", err: errors.New(`ent: missing required field "Epidemic.diagedBy"`)}
	}
	if _, ok := ec.mutation.TreatmentResultId(); !ok {
		return &ValidationError{Name: "treatmentResultId", err: errors.New(`ent: missing required field "Epidemic.treatmentResultId"`)}
	}
	if _, ok := ec.mutation.TreatmentResultName(); !ok {
		return &ValidationError{Name: "treatmentResultName", err: errors.New(`ent: missing required field "Epidemic.treatmentResultName"`)}
	}
	if _, ok := ec.mutation.TreatmentState(); !ok {
		return &ValidationError{Name: "treatmentState", err: errors.New(`ent: missing required field "Epidemic.treatmentState"`)}
	}
	if _, ok := ec.mutation.TreatmentAt(); !ok {
		return &ValidationError{Name: "treatmentAt", err: errors.New(`ent: missing required field "Epidemic.treatmentAt"`)}
	}
	if _, ok := ec.mutation.Whereabout(); !ok {
		return &ValidationError{Name: "whereabout", err: errors.New(`ent: missing required field "Epidemic.whereabout"`)}
	}
	if _, ok := ec.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "Epidemic.remarks"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Epidemic.createdAt"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Epidemic.updatedAt"`)}
	}
	if _, ok := ec.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Epidemic.deleted"`)}
	}
	return nil
}

func (ec *EpidemicCreate) sqlSave(ctx context.Context) (*Epidemic, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EpidemicCreate) createSpec() (*Epidemic, *sqlgraph.CreateSpec) {
	var (
		_node = &Epidemic{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: epidemic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: epidemic.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.CattleId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCattleId,
		})
		_node.CattleId = value
	}
	if value, ok := ec.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := ec.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := ec.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := ec.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := ec.mutation.ShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldShedId,
		})
		_node.ShedId = value
	}
	if value, ok := ec.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ec.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := ec.mutation.Onset(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldOnset,
		})
		_node.Onset = value
	}
	if value, ok := ec.mutation.EpidemicTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldEpidemicTypeId,
		})
		_node.EpidemicTypeId = value
	}
	if value, ok := ec.mutation.EpidemicTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldEpidemicTypeName,
		})
		_node.EpidemicTypeName = value
	}
	if value, ok := ec.mutation.IsolatedShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldIsolatedShedName,
		})
		_node.IsolatedShedName = value
	}
	if value, ok := ec.mutation.DiagedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldDiagedBy,
		})
		_node.DiagedBy = value
	}
	if value, ok := ec.mutation.TreatmentResultId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldTreatmentResultId,
		})
		_node.TreatmentResultId = value
	}
	if value, ok := ec.mutation.TreatmentResultName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldTreatmentResultName,
		})
		_node.TreatmentResultName = value
	}
	if value, ok := ec.mutation.TreatmentState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldTreatmentState,
		})
		_node.TreatmentState = value
	}
	if value, ok := ec.mutation.TreatmentAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTreatmentAt,
		})
		_node.TreatmentAt = value
	}
	if value, ok := ec.mutation.Whereabout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldWhereabout,
		})
		_node.Whereabout = value
	}
	if value, ok := ec.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// EpidemicCreateBulk is the builder for creating many Epidemic entities in bulk.
type EpidemicCreateBulk struct {
	config
	builders []*EpidemicCreate
}

// Save creates the Epidemic entities in the database.
func (ecb *EpidemicCreateBulk) Save(ctx context.Context) ([]*Epidemic, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Epidemic, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EpidemicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EpidemicCreateBulk) SaveX(ctx context.Context) []*Epidemic {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EpidemicCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EpidemicCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/epidemic"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// EpidemicUpdate is the builder for updating Epidemic entities.
type EpidemicUpdate struct {
	config
	hooks      []Hook
	mutation   *EpidemicMutation
	predicates []predicate.Epidemic
}

// Where adds a new predicate for the builder.
func (eu *EpidemicUpdate) Where(ps ...predicate.Epidemic) *EpidemicUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetCattleId sets the cattleId field.
func (eu *EpidemicUpdate) SetCattleId(i int64) *EpidemicUpdate {
	eu.mutation.ResetCattleId()
	eu.mutation.SetCattleId(i)
	return eu
}

// AddCattleId adds i to cattleId.
func (eu *EpidemicUpdate) AddCattleId(i int64) *EpidemicUpdate {
	eu.mutation.AddCattleId(i)
	return eu
}

// SetTenantId sets the tenantId field.
func (eu *EpidemicUpdate) SetTenantId(i int64) *EpidemicUpdate {
	eu.mutation.ResetTenantId()
	eu.mutation.SetTenantId(i)
	return eu
}

// AddTenantId adds i to tenantId.
func (eu *EpidemicUpdate) AddTenantId(i int64) *EpidemicUpdate {
	eu.mutation.AddTenantId(i)
	return eu
}

// SetTenantName sets the tenantName field.
func (eu *EpidemicUpdate) SetTenantName(s string) *EpidemicUpdate {
	eu.mutation.SetTenantName(s)
	return eu
}

// SetFarmId sets the farmId field.
func (eu *EpidemicUpdate) SetFarmId(i int64) *EpidemicUpdate {
	eu.mutation.ResetFarmId()
	eu.mutation.SetFarmId(i)
	return eu
}

// AddFarmId adds i to farmId.
func (eu *EpidemicUpdate) AddFarmId(i int64) *EpidemicUpdate {
	eu.mutation.AddFarmId(i)
	return eu
}

// SetFarmName sets the farmName field.
func (eu *EpidemicUpdate) SetFarmName(s string) *EpidemicUpdate {
	eu.mutation.SetFarmName(s)
	return eu
}

// SetShedId sets the shedId field.
func (eu *EpidemicUpdate) SetShedId(i int64) *EpidemicUpdate {
	eu.mutation.ResetShedId()
	eu.mutation.SetShedId(i)
	return eu
}

// AddShedId adds i to shedId.
func (eu *EpidemicUpdate) AddShedId(i int64) *EpidemicUpdate {
	eu.mutation.AddShedId(i)
	return eu
}

// SetShedName sets the shedName field.
func (eu *EpidemicUpdate) SetShedName(s string) *EpidemicUpdate {
	eu.mutation.SetShedName(s)
	return eu
}

// SetName sets the name field.
func (eu *EpidemicUpdate) SetName(s string) *EpidemicUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetEarNumber sets the earNumber field.
func (eu *EpidemicUpdate) SetEarNumber(s string) *EpidemicUpdate {
	eu.mutation.SetEarNumber(s)
	return eu
}

// SetOnset sets the onset field.
func (eu *EpidemicUpdate) SetOnset(i int64) *EpidemicUpdate {
	eu.mutation.ResetOnset()
	eu.mutation.SetOnset(i)
	return eu
}

// AddOnset adds i to onset.
func (eu *EpidemicUpdate) AddOnset(i int64) *EpidemicUpdate {
	eu.mutation.AddOnset(i)
	return eu
}

// SetEpidemicTypeId sets the epidemicTypeId field.
func (eu *EpidemicUpdate) SetEpidemicTypeId(i int) *EpidemicUpdate {
	eu.mutation.ResetEpidemicTypeId()
	eu.mutation.SetEpidemicTypeId(i)
	return eu
}

// AddEpidemicTypeId adds i to epidemicTypeId.
func (eu *EpidemicUpdate) AddEpidemicTypeId(i int) *EpidemicUpdate {
	eu.mutation.AddEpidemicTypeId(i)
	return eu
}

// SetEpidemicTypeName sets the epidemicTypeName field.
func (eu *EpidemicUpdate) SetEpidemicTypeName(s string) *EpidemicUpdate {
	eu.mutation.SetEpidemicTypeName(s)
	return eu
}

// SetIsolatedShedName sets the isolatedShedName field.
func (eu *EpidemicUpdate) SetIsolatedShedName(s string) *EpidemicUpdate {
	eu.mutation.SetIsolatedShedName(s)
	return eu
}

// SetDiagedBy sets the diagedBy field.
func (eu *EpidemicUpdate) SetDiagedBy(s string) *EpidemicUpdate {
	eu.mutation.SetDiagedBy(s)
	return eu
}

// SetTreatmentResultId sets the treatmentResultId field.
func (eu *EpidemicUpdate) SetTreatmentResultId(i int) *EpidemicUpdate {
	eu.mutation.ResetTreatmentResultId()
	eu.mutation.SetTreatmentResultId(i)
	return eu
}

// AddTreatmentResultId adds i to treatmentResultId.
func (eu *EpidemicUpdate) AddTreatmentResultId(i int) *EpidemicUpdate {
	eu.mutation.AddTreatmentResultId(i)
	return eu
}

// SetTreatmentResultName sets the treatmentResultName field.
func (eu *EpidemicUpdate) SetTreatmentResultName(s string) *EpidemicUpdate {
	eu.mutation.SetTreatmentResultName(s)
	return eu
}

// SetTreatmentState sets the treatmentState field.
func (eu *EpidemicUpdate) SetTreatmentState(s string) *EpidemicUpdate {
	eu.mutation.SetTreatmentState(s)
	return eu
}

// SetTreatmentAt sets the treatmentAt field.
func (eu *EpidemicUpdate) SetTreatmentAt(i int64) *EpidemicUpdate {
	eu.mutation.ResetTreatmentAt()
	eu.mutation.SetTreatmentAt(i)
	return eu
}

// AddTreatmentAt adds i to treatmentAt.
func (eu *EpidemicUpdate) AddTreatmentAt(i int64) *EpidemicUpdate {
	eu.mutation.AddTreatmentAt(i)
	return eu
}

// SetWhereabout sets the whereabout field.
func (eu *EpidemicUpdate) SetWhereabout(s string) *EpidemicUpdate {
	eu.mutation.SetWhereabout(s)
	return eu
}

// SetRemarks sets the remarks field.
func (eu *EpidemicUpdate) SetRemarks(s string) *EpidemicUpdate {
	eu.mutation.SetRemarks(s)
	return eu
}

// SetCreatedAt sets the createdAt field.
func (eu *EpidemicUpdate) SetCreatedAt(i int64) *EpidemicUpdate {
	eu.mutation.ResetCreatedAt()
	eu.mutation.SetCreatedAt(i)
	return eu
}

// AddCreatedAt adds i to createdAt.
func (eu *EpidemicUpdate) AddCreatedAt(i int64) *EpidemicUpdate {
	eu.mutation.AddCreatedAt(i)
	return eu
}

// SetUpdatedAt sets the updatedAt field.
func (eu *EpidemicUpdate) SetUpdatedAt(i int64) *EpidemicUpdate {
	eu.mutation.ResetUpdatedAt()
	eu.mutation.SetUpdatedAt(i)
	return eu
}

// AddUpdatedAt adds i to updatedAt.
func (eu *EpidemicUpdate) AddUpdatedAt(i int64) *EpidemicUpdate {
	eu.mutation.AddUpdatedAt(i)
	return eu
}

// SetDeleted sets the deleted field.
func (eu *EpidemicUpdate) SetDeleted(i int) *EpidemicUpdate {
	eu.mutation.ResetDeleted()
	eu.mutation.SetDeleted(i)
	return eu
}

// AddDeleted adds i to deleted.
func (eu *EpidemicUpdate) AddDeleted(i int) *EpidemicUpdate {
	eu.mutation.AddDeleted(i)
	return eu
}

// Mutation returns the EpidemicMutation object of the builder.
func (eu *EpidemicUpdate) Mutation() *EpidemicMutation {
	return eu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EpidemicUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EpidemicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EpidemicUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EpidemicUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EpidemicUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EpidemicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   epidemic.Table,
			Columns: epidemic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: epidemic.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCattleId,
		})
	}
	if value, ok := eu.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCattleId,
		})
	}
	if value, ok := eu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTenantId,
		})
	}
	if value, ok := eu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTenantId,
		})
	}
	if value, ok := eu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldTenantName,
		})
	}
	if value, ok := eu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldFarmId,
		})
	}
	if value, ok := eu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldFarmId,
		})
	}
	if value, ok := eu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldFarmName,
		})
	}
	if value, ok := eu.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldShedId,
		})
	}
	if value, ok := eu.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldShedId,
		})
	}
	if value, ok := eu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldShedName,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldName,
		})
	}
	if value, ok := eu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldEarNumber,
		})
	}
	if value, ok := eu.mutation.Onset(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldOnset,
		})
	}
	if value, ok := eu.mutation.AddedOnset(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldOnset,
		})
	}
	if value, ok := eu.mutation.EpidemicTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldEpidemicTypeId,
		})
	}
	if value, ok := eu.mutation.AddedEpidemicTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldEpidemicTypeId,
		})
	}
	if value, ok := eu.mutation.EpidemicTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldEpidemicTypeName,
		})
	}
	if value, ok := eu.mutation.IsolatedShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldIsolatedShedName,
		})
	}
	if value, ok := eu.mutation.DiagedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldDiagedBy,
		})
	}
	if value, ok := eu.mutation.TreatmentResultId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldTreatmentResultId,
		})
	}
	if value, ok := eu.mutation.AddedTreatmentResultId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldTreatmentResultId,
		})
	}
	if value, ok := eu.mutation.TreatmentResultName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldTreatmentResultName,
		})
	}
	if value, ok := eu.mutation.TreatmentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldTreatmentState,
		})
	}
	if value, ok := eu.mutation.TreatmentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTreatmentAt,
		})
	}
	if value, ok := eu.mutation.AddedTreatmentAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTreatmentAt,
		})
	}
	if value, ok := eu.mutation.Whereabout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldWhereabout,
		})
	}
	if value, ok := eu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldRemarks,
		})
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldDeleted,
		})
	}
	if value, ok := eu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{epidemic.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EpidemicUpdateOne is the builder for updating a single Epidemic entity.
type EpidemicUpdateOne struct {
	config
	hooks    []Hook
	mutation *EpidemicMutation
}

// SetCattleId sets the cattleId field.
func (euo *EpidemicUpdateOne) SetCattleId(i int64) *EpidemicUpdateOne {
	euo.mutation.ResetCattleId()
	euo.mutation.SetCattleId(i)
	return euo
}

// AddCattleId adds i to cattleId.
func (euo *EpidemicUpdateOne) AddCattleId(i int64) *EpidemicUpdateOne {
	euo.mutation.AddCattleId(i)
	return euo
}

// SetTenantId sets the tenantId field.
func (euo *EpidemicUpdateOne) SetTenantId(i int64) *EpidemicUpdateOne {
	euo.mutation.ResetTenantId()
	euo.mutation.SetTenantId(i)
	return euo
}

// AddTenantId adds i to tenantId.
func (euo *EpidemicUpdateOne) AddTenantId(i int64) *EpidemicUpdateOne {
	euo.mutation.AddTenantId(i)
	return euo
}

// SetTenantName sets the tenantName field.
func (euo *EpidemicUpdateOne) SetTenantName(s string) *EpidemicUpdateOne {
	euo.mutation.SetTenantName(s)
	return euo
}

// SetFarmId sets the farmId field.
func (euo *EpidemicUpdateOne) SetFarmId(i int64) *EpidemicUpdateOne {
	euo.mutation.ResetFarmId()
	euo.mutation.SetFarmId(i)
	return euo
}

// AddFarmId adds i to farmId.
func (euo *EpidemicUpdateOne) AddFarmId(i int64) *EpidemicUpdateOne {
	euo.mutation.AddFarmId(i)
	return euo
}

// SetFarmName sets the farmName field.
func (euo *EpidemicUpdateOne) SetFarmName(s string) *EpidemicUpdateOne {
	euo.mutation.SetFarmName(s)
	return euo
}

// SetShedId sets the shedId field.
func (euo *EpidemicUpdateOne) SetShedId(i int64) *EpidemicUpdateOne {
	euo.mutation.ResetShedId()
	euo.mutation.SetShedId(i)
	return euo
}

// AddShedId adds i to shedId.
func (euo *EpidemicUpdateOne) AddShedId(i int64) *EpidemicUpdateOne {
	euo.mutation.AddShedId(i)
	return euo
}

// SetShedName sets the shedName field.
func (euo *EpidemicUpdateOne) SetShedName(s string) *EpidemicUpdateOne {
	euo.mutation.SetShedName(s)
	return euo
}

// SetName sets the name field.
func (euo *EpidemicUpdateOne) SetName(s string) *EpidemicUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetEarNumber sets the earNumber field.
func (euo *EpidemicUpdateOne) SetEarNumber(s string) *EpidemicUpdateOne {
	euo.mutation.SetEarNumber(s)
	return euo
}

// SetOnset sets the onset field.
func (euo *EpidemicUpdateOne) SetOnset(i int64) *EpidemicUpdateOne {
	euo.mutation.ResetOnset()
	euo.mutation.SetOnset(i)
	return euo
}

// AddOnset adds i to onset.
func (euo *EpidemicUpdateOne) AddOnset(i int64) *EpidemicUpdateOne {
	euo.mutation.AddOnset(i)
	return euo
}

// SetEpidemicTypeId sets the epidemicTypeId field.
func (euo *EpidemicUpdateOne) SetEpidemicTypeId(i int) *EpidemicUpdateOne {
	euo.mutation.ResetEpidemicTypeId()
	euo.mutation.SetEpidemicTypeId(i)
	return euo
}

// AddEpidemicTypeId adds i to epidemicTypeId.
func (euo *EpidemicUpdateOne) AddEpidemicTypeId(i int) *EpidemicUpdateOne {
	euo.mutation.AddEpidemicTypeId(i)
	return euo
}

// SetEpidemicTypeName sets the epidemicTypeName field.
func (euo *EpidemicUpdateOne) SetEpidemicTypeName(s string) *EpidemicUpdateOne {
	euo.mutation.SetEpidemicTypeName(s)
	return euo
}

// SetIsolatedShedName sets the isolatedShedName field.
func (euo *EpidemicUpdateOne) SetIsolatedShedName(s string) *EpidemicUpdateOne {
	euo.mutation.SetIsolatedShedName(s)
	return euo
}

// SetDiagedBy sets the diagedBy field.
func (euo *EpidemicUpdateOne) SetDiagedBy(s string) *EpidemicUpdateOne {
	euo.mutation.SetDiagedBy(s)
	return euo
}

// SetTreatmentResultId sets the treatmentResultId field.
func (euo *EpidemicUpdateOne) SetTreatmentResultId(i int) *EpidemicUpdateOne {
	euo.mutation.ResetTreatmentResultId()
	euo.mutation.SetTreatmentResultId(i)
	return euo
}

// AddTreatmentResultId adds i to treatmentResultId.
func (euo *EpidemicUpdateOne) AddTreatmentResultId(i int) *EpidemicUpdateOne {
	euo.mutation.AddTreatmentResultId(i)
	return euo
}

// SetTreatmentResultName sets the treatmentResultName field.
func (euo *EpidemicUpdateOne) SetTreatmentResultName(s string) *EpidemicUpdateOne {
	euo.mutation.SetTreatmentResultName(s)
	return euo
}

// SetTreatmentState sets the treatmentState field.
func (euo *EpidemicUpdateOne) SetTreatmentState(s string) *EpidemicUpdateOne {
	euo.mutation.SetTreatmentState(s)
	return euo
}

// SetTreatmentAt sets the treatmentAt field.
func (euo *EpidemicUpdateOne) SetTreatmentAt(i int64) *EpidemicUpdateOne {
	euo.mutation.ResetTreatmentAt()
	euo.mutation.SetTreatmentAt(i)
	return euo
}

// AddTreatmentAt adds i to treatmentAt.
func (euo *EpidemicUpdateOne) AddTreatmentAt(i int64) *EpidemicUpdateOne {
	euo.mutation.AddTreatmentAt(i)
	return euo
}

// SetWhereabout sets the whereabout field.
func (euo *EpidemicUpdateOne) SetWhereabout(s string) *EpidemicUpdateOne {
	euo.mutation.SetWhereabout(s)
	return euo
}

// SetRemarks sets the remarks field.
func (euo *EpidemicUpdateOne) SetRemarks(s string) *EpidemicUpdateOne {
	euo.mutation.SetRemarks(s)
	return euo
}

// SetCreatedAt sets the createdAt field.
func (euo *EpidemicUpdateOne) SetCreatedAt(i int64) *EpidemicUpdateOne {
	euo.mutation.ResetCreatedAt()
	euo.mutation.SetCreatedAt(i)
	return euo
}

// AddCreatedAt adds i to createdAt.
func (euo *EpidemicUpdateOne) AddCreatedAt(i int64) *EpidemicUpdateOne {
	euo.mutation.AddCreatedAt(i)
	return euo
}

// SetUpdatedAt sets the updatedAt field.
func (euo *EpidemicUpdateOne) SetUpdatedAt(i int64) *EpidemicUpdateOne {
	euo.mutation.ResetUpdatedAt()
	euo.mutation.SetUpdatedAt(i)
	return euo
}

// AddUpdatedAt adds i to updatedAt.
func (euo *EpidemicUpdateOne) AddUpdatedAt(i int64) *EpidemicUpdateOne {
	euo.mutation.AddUpdatedAt(i)
	return euo
}

// SetDeleted sets the deleted field.
func (euo *EpidemicUpdateOne) SetDeleted(i int) *EpidemicUpdateOne {
	euo.mutation.ResetDeleted()
	euo.mutation.SetDeleted(i)
	return euo
}

// AddDeleted adds i to deleted.
func (euo *EpidemicUpdateOne) AddDeleted(i int) *EpidemicUpdateOne {
	euo.mutation.AddDeleted(i)
	return euo
}

// Mutation returns the EpidemicMutation object of the builder.
func (euo *EpidemicUpdateOne) Mutation() *EpidemicMutation {
	return euo.mutation
}

// Save executes the query and returns the updated entity.
func (euo *EpidemicUpdateOne) Save(ctx context.Context) (*Epidemic, error) {
	var (
		err  error
		node *Epidemic
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EpidemicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EpidemicUpdateOne) SaveX(ctx context.Context) *Epidemic {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EpidemicUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EpidemicUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EpidemicUpdateOne) sqlSave(ctx context.Context) (_node *Epidemic, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   epidemic.Table,
			Columns: epidemic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: epidemic.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Epidemic.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCattleId,
		})
	}
	if value, ok := euo.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCattleId,
		})
	}
	if value, ok := euo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTenantId,
		})
	}
	if value, ok := euo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTenantId,
		})
	}
	if value, ok := euo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldTenantName,
		})
	}
	if value, ok := euo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldFarmId,
		})
	}
	if value, ok := euo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldFarmId,
		})
	}
	if value, ok := euo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldFarmName,
		})
	}
	if value, ok := euo.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldShedId,
		})
	}
	if value, ok := euo.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldShedId,
		})
	}
	if value, ok := euo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldShedName,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldName,
		})
	}
	if value, ok := euo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldEarNumber,
		})
	}
	if value, ok := euo.mutation.Onset(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldOnset,
		})
	}
	if value, ok := euo.mutation.AddedOnset(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldOnset,
		})
	}
	if value, ok := euo.mutation.EpidemicTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldEpidemicTypeId,
		})
	}
	if value, ok := euo.mutation.AddedEpidemicTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldEpidemicTypeId,
		})
	}
	if value, ok := euo.mutation.EpidemicTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldEpidemicTypeName,
		})
	}
	if value, ok := euo.mutation.IsolatedShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldIsolatedShedName,
		})
	}
	if value, ok := euo.mutation.DiagedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldDiagedBy,
		})
	}
	if value, ok := euo.mutation.TreatmentResultId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldTreatmentResultId,
		})
	}
	if value, ok := euo.mutation.AddedTreatmentResultId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldTreatmentResultId,
		})
	}
	if value, ok := euo.mutation.TreatmentResultName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldTreatmentResultName,
		})
	}
	if value, ok := euo.mutation.TreatmentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldTreatmentState,
		})
	}
	if value, ok := euo.mutation.TreatmentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTreatmentAt,
		})
	}
	if value, ok := euo.mutation.AddedTreatmentAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldTreatmentAt,
		})
	}
	if value, ok := euo.mutation.Whereabout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldWhereabout,
		})
	}
	if value, ok := euo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemic.FieldRemarks,
		})
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: epidemic.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldDeleted,
		})
	}
	if value, ok := euo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: epidemic.FieldDeleted,
		})
	}
	_node = &Epidemic{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{epidemic.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/epidemictype"
	"cattleai/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EpidemicTypeQuery is the builder for querying EpidemicType entities.
type EpidemicTypeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.EpidemicType
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EpidemicTypeQuery builder.
func (etq *EpidemicTypeQuery) Where(ps ...predicate.EpidemicType) *EpidemicTypeQuery {
	etq.predicates = append(etq.predicates, ps...)
	return etq
}

// Limit adds a limit step to the query.
func (etq *EpidemicTypeQuery) Limit(limit int) *EpidemicTypeQuery {
	etq.limit = &limit
	return etq
}

// Offset adds an offset step to the query.
func (etq *EpidemicTypeQuery) Offset(offset int) *EpidemicTypeQuery {
	etq.offset = &offset
	return etq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (etq *EpidemicTypeQuery) Unique(unique bool) *EpidemicTypeQuery {
	etq.unique = &unique
	return etq
}

// Order adds an order step to the query.
func (etq *EpidemicTypeQuery) Order(o ...OrderFunc) *EpidemicTypeQuery {
	etq.order = append(etq.order, o...)
	return etq
}

// First returns the first EpidemicType entity from the query.
// Returns a *NotFoundError when no EpidemicType was found.
func (etq *EpidemicTypeQuery) First(ctx context.Context) (*EpidemicType, error) {
	nodes, err := etq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{epidemictype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (etq *EpidemicTypeQuery) FirstX(ctx context.Context) *EpidemicType {
	node, err := etq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EpidemicType ID from the query.
// Returns a *NotFoundError when no EpidemicType ID was found.
func (etq *EpidemicTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = etq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{epidemictype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (etq *EpidemicTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := etq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EpidemicType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EpidemicType entity is found.
// Returns a *NotFoundError when no EpidemicType entities are found.
func (etq *EpidemicTypeQuery) Only(ctx context.Context) (*EpidemicType, error) {
	nodes, err := etq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{epidemictype.Label}
	default:
		return nil, &NotSingularError{epidemictype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (etq *EpidemicTypeQuery) OnlyX(ctx context.Context) *EpidemicType {
	node, err := etq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EpidemicType ID in the query.
// Returns a *NotSingularError when more than one EpidemicType ID is found.
// Returns a *NotFoundError when no entities are found.
func (etq *EpidemicTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = etq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{epidemictype.Label}
	default:
		err = &NotSingularError{epidemictype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (etq *EpidemicTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := etq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EpidemicTypes.
func (etq *EpidemicTypeQuery) All(ctx context.Context) ([]*EpidemicType, error) {
	if err := etq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return etq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (etq *EpidemicTypeQuery) AllX(ctx context.Context) []*EpidemicType {
	nodes, err := etq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EpidemicType IDs.
func (etq *EpidemicTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := etq.Select(epidemictype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (etq *EpidemicTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := etq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (etq *EpidemicTypeQuery) Count(ctx context.Context) (int, error) {
	if err := etq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return etq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (etq *EpidemicTypeQuery) CountX(ctx context.Context) int {
	count, err := etq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (etq *EpidemicTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := etq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return etq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (etq *EpidemicTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := etq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EpidemicTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (etq *EpidemicTypeQuery) Clone() *EpidemicTypeQuery {
	if etq == nil {
		return nil
	}
	return &EpidemicTypeQuery{
		config:     etq.config,
		limit:      etq.limit,
		offset:     etq.offset,
		order:      append([]OrderFunc{}, etq.order...),
		predicates: append([]predicate.EpidemicType{}, etq.predicates...),
		// clone intermediate query.
		sql:    etq.sql.Clone(),
		path:   etq.path,
		unique: etq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EpidemicType.Query().
//		GroupBy(epidemictype.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (etq *EpidemicTypeQuery) GroupBy(field string, fields ...string) *EpidemicTypeGroupBy {
	grbuild := &EpidemicTypeGroupBy{config: etq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return etq.sqlQuery(ctx), nil
	}
	grbuild.label = epidemictype.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.EpidemicType.Query().
//		Select(epidemictype.FieldName).
//		Scan(ctx, &v)
func (etq *EpidemicTypeQuery) Select(fields ...string) *EpidemicTypeSelect {
	etq.fields = append(etq.fields, fields...)
	selbuild := &EpidemicTypeSelect{EpidemicTypeQuery: etq}
	selbuild.label = epidemictype.Label
	selbuild.flds, selbuild.scan = &etq.fields, selbuild.Scan
	return selbuild
}

func (etq *EpidemicTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range etq.fields {
		if !epidemictype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if etq.path != nil {
		prev, err := etq.path(ctx)
		if err != nil {
			return err
		}
		etq.sql = prev
	}
	return nil
}

func (etq *EpidemicTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EpidemicType, error) {
	var (
		nodes = []*EpidemicType{}
		_spec = etq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*EpidemicType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &EpidemicType{config: etq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, etq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (etq *EpidemicTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := etq.querySpec()
	_spec.Node.Columns = etq.fields
	if len(etq.fields) > 0 {
		_spec.Unique = etq.unique != nil && *etq.unique
	}
	return sqlgraph.CountNodes(ctx, etq.driver, _spec)
}

func (etq *EpidemicTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := etq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (etq *EpidemicTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   epidemictype.Table,
			Columns: epidemictype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: epidemictype.FieldID,
			},
		},
		From:   etq.sql,
		Unique: true,
	}
	if unique := etq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := etq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, epidemictype.FieldID)
		for i := range fields {
			if fields[i] != epidemictype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := etq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := etq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := etq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := etq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (etq *EpidemicTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(etq.driver.Dialect())
	t1 := builder.Table(epidemictype.Table)
	columns := etq.fields
	if len(columns) == 0 {
		columns = epidemictype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if etq.sql != nil {
		selector = etq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if etq.unique != nil && *etq.unique {
		selector.Distinct()
	}
	for _, p := range etq.predicates {
		p(selector)
	}
	for _, p := range etq.order {
		p(selector)
	}
	if offset := etq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := etq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EpidemicTypeGroupBy is the group-by builder for EpidemicType entities.
type EpidemicTypeGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (etgb *EpidemicTypeGroupBy) Aggregate(fns ...AggregateFunc) *EpidemicTypeGroupBy {
	etgb.fns = append(etgb.fns, fns...)
	return etgb
}

// Scan applies the group-by query and scans the result into the given value.
func (etgb *EpidemicTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := etgb.path(ctx)
	if err != nil {
		return err
	}
	etgb.sql = query
	return etgb.sqlScan(ctx, v)
}

func (etgb *EpidemicTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range etgb.fields {
		if !epidemictype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := etgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := etgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (etgb *EpidemicTypeGroupBy) sqlQuery() *sql.Selector {
	selector := etgb.sql.Select()
	aggregation := make([]string, 0, len(etgb.fns))
	for _, fn := range etgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(etgb.fields)+len(etgb.fns))
		for _, f := range etgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(etgb.fields...)...)
}

// EpidemicTypeSelect is the builder for selecting fields of EpidemicType entities.
type EpidemicTypeSelect struct {
	*EpidemicTypeQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ets *EpidemicTypeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ets.prepareQuery(ctx); err != nil {
		return err
	}
	ets.sql = ets.EpidemicTypeQuery.sqlQuery(ctx)
	return ets.sqlScan(ctx, v)
}

func (ets *EpidemicTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ets.sql.Query()
	if err := ets.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

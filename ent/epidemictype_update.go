// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/epidemictype"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// EpidemicTypeUpdate is the builder for updating EpidemicType entities.
type EpidemicTypeUpdate struct {
	config
	hooks      []Hook
	mutation   *EpidemicTypeMutation
	predicates []predicate.EpidemicType
}

// Where adds a new predicate for the builder.
func (etu *EpidemicTypeUpdate) Where(ps ...predicate.EpidemicType) *EpidemicTypeUpdate {
	etu.predicates = append(etu.predicates, ps...)
	return etu
}

// SetName sets the name field.
func (etu *EpidemicTypeUpdate) SetName(s string) *EpidemicTypeUpdate {
	etu.mutation.SetName(s)
	return etu
}

// Mutation returns the EpidemicTypeMutation object of the builder.
func (etu *EpidemicTypeUpdate) Mutation() *EpidemicTypeMutation {
	return etu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (etu *EpidemicTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(etu.hooks) == 0 {
		if err = etu.check(); err != nil {
			return 0, err
		}
		affected, err = etu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EpidemicTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etu.check(); err != nil {
				return 0, err
			}
			etu.mutation = mutation
			affected, err = etu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(etu.hooks) - 1; i >= 0; i-- {
			mut = etu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EpidemicTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EpidemicTypeUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EpidemicTypeUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etu *EpidemicTypeUpdate) check() error {
	if v, ok := etu.mutation.Name(); ok {
		if err := epidemictype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (etu *EpidemicTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   epidemictype.Table,
			Columns: epidemictype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: epidemictype.FieldID,
			},
		},
	}
	if ps := etu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemictype.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{epidemictype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EpidemicTypeUpdateOne is the builder for updating a single EpidemicType entity.
type EpidemicTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *EpidemicTypeMutation
}

// SetName sets the name field.
func (etuo *EpidemicTypeUpdateOne) SetName(s string) *EpidemicTypeUpdateOne {
	etuo.mutation.SetName(s)
	return etuo
}

// Mutation returns the EpidemicTypeMutation object of the builder.
func (etuo *EpidemicTypeUpdateOne) Mutation() *EpidemicTypeMutation {
	return etuo.mutation
}

// Save executes the query and returns the updated entity.
func (etuo *EpidemicTypeUpdateOne) Save(ctx context.Context) (*EpidemicType, error) {
	var (
		err  error
		node *EpidemicType
	)
	if len(etuo.hooks) == 0 {
		if err = etuo.check(); err != nil {
			return nil, err
		}
		node, err = etuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EpidemicTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etuo.check(); err != nil {
				return nil, err
			}
			etuo.mutation = mutation
			node, err = etuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(etuo.hooks) - 1; i >= 0; i-- {
			mut = etuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EpidemicTypeUpdateOne) SaveX(ctx context.Context) *EpidemicType {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EpidemicTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EpidemicTypeUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etuo *EpidemicTypeUpdateOne) check() error {
	if v, ok := etuo.mutation.Name(); ok {
		if err := epidemictype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (etuo *EpidemicTypeUpdateOne) sqlSave(ctx context.Context) (_node *EpidemicType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   epidemictype.Table,
			Columns: epidemictype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: epidemictype.FieldID,
			},
		},
	}
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EpidemicType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := etuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: epidemictype.FieldName,
		})
	}
	_node = &EpidemicType{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{epidemictype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/estrus"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Estrus is the model entity for the Estrus schema.
type Estrus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 胎次
	Times int `json:"times,omitempty"`
	// EstrusAt holds the value of the "estrusAt" field.
	EstrusAt int64 `json:"estrusAt,omitempty"`
	// EstrusTypeId holds the value of the "estrusTypeId" field.
	EstrusTypeId int `json:"estrusTypeId,omitempty"`
	// EstrusTypeName holds the value of the "estrusTypeName" field.
	EstrusTypeName string `json:"estrusTypeName,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Estrus) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case estrus.FieldID, estrus.FieldCattleId, estrus.FieldTenantId, estrus.FieldFarmId, estrus.FieldShedId, estrus.FieldTimes, estrus.FieldEstrusAt, estrus.FieldEstrusTypeId, estrus.FieldCreatedAt, estrus.FieldUpdatedAt, estrus.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case estrus.FieldTenantName, estrus.FieldFarmName, estrus.FieldShedName, estrus.FieldName, estrus.FieldEarNumber, estrus.FieldEstrusTypeName, estrus.FieldUserName, estrus.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Estrus", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Estrus fields.
func (e *Estrus) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case estrus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case estrus.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				e.CattleId = value.Int64
			}
		case estrus.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				e.TenantId = value.Int64
			}
		case estrus.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				e.TenantName = value.String
			}
		case estrus.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				e.FarmId = value.Int64
			}
		case estrus.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				e.FarmName = value.String
			}
		case estrus.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				e.ShedId = value.Int64
			}
		case estrus.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				e.ShedName = value.String
			}
		case estrus.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case estrus.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				e.EarNumber = value.String
			}
		case estrus.FieldTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field times", values[i])
			} else if value.Valid {
				e.Times = int(value.Int64)
			}
		case estrus.FieldEstrusAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estrusAt", values[i])
			} else if value.Valid {
				e.EstrusAt = value.Int64
			}
		case estrus.FieldEstrusTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estrusTypeId", values[i])
			} else if value.Valid {
				e.EstrusTypeId = int(value.Int64)
			}
		case estrus.FieldEstrusTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field estrusTypeName", values[i])
			} else if value.Valid {
				e.EstrusTypeName = value.String
			}
		case estrus.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				e.UserName = value.String
			}
		case estrus.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				e.Remarks = value.String
			}
		case estrus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Int64
			}
		case estrus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Int64
			}
		case estrus.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				e.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Estrus.
// Note that you need to call Estrus.Unwrap() before calling this method if this Estrus
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Estrus) Update() *EstrusUpdateOne {
	return (&EstrusClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Estrus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Estrus) Unwrap() *Estrus {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Estrus is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Estrus) String() string {
	var builder strings.Builder
	builder.WriteString("Estrus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", e.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", e.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(e.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", e.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(e.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", e.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(e.ShedName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(e.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("times=")
	builder.WriteString(fmt.Sprintf("%v", e.Times))
	builder.WriteString(", ")
	builder.WriteString("estrusAt=")
	builder.WriteString(fmt.Sprintf("%v", e.EstrusAt))
	builder.WriteString(", ")
	builder.WriteString("estrusTypeId=")
	builder.WriteString(fmt.Sprintf("%v", e.EstrusTypeId))
	builder.WriteString(", ")
	builder.WriteString("estrusTypeName=")
	builder.WriteString(e.EstrusTypeName)
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(e.UserName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(e.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", e.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// EstrusSlice is a parsable slice of Estrus.
type EstrusSlice []*Estrus

func (e EstrusSlice) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/estrus"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Estrus is the model entity for the Estrus schema.
type Estrus struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// Times holds the value of the "times" field.
	Times int `json:"times,omitempty"`
	// ReproductiveState holds the value of the "reproductiveState" field.
	ReproductiveState string `json:"reproductiveState,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// EstrusAt holds the value of the "estrusAt" field.
	EstrusAt int64 `json:"estrusAt,omitempty"`
	// EstrusTypeId holds the value of the "estrusTypeId" field.
	EstrusTypeId int `json:"estrusTypeId,omitempty"`
	// EstrusTypeName holds the value of the "estrusTypeName" field.
	EstrusTypeName string `json:"estrusTypeName,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Estrus) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // earNumber
		&sql.NullInt64{},  // times
		&sql.NullString{}, // reproductiveState
		&sql.NullString{}, // shedName
		&sql.NullInt64{},  // estrusAt
		&sql.NullInt64{},  // estrusTypeId
		&sql.NullString{}, // estrusTypeName
		&sql.NullString{}, // userName
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Estrus fields.
func (e *Estrus) assignValues(values ...interface{}) error {
	if m, n := len(values), len(estrus.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		e.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[1])
	} else if value.Valid {
		e.EarNumber = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field times", values[2])
	} else if value.Valid {
		e.Times = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reproductiveState", values[3])
	} else if value.Valid {
		e.ReproductiveState = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[4])
	} else if value.Valid {
		e.ShedName = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field estrusAt", values[5])
	} else if value.Valid {
		e.EstrusAt = value.Int64
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field estrusTypeId", values[6])
	} else if value.Valid {
		e.EstrusTypeId = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field estrusTypeName", values[7])
	} else if value.Valid {
		e.EstrusTypeName = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[8])
	} else if value.Valid {
		e.UserName = value.String
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[9])
	} else if value.Valid {
		e.TenantId = value.Int64
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[10])
	} else if value.Valid {
		e.TenantName = value.String
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[11])
	} else if value.Valid {
		e.Remarks = value.String
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[12])
	} else if value.Valid {
		e.CreatedAt = value.Int64
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[13])
	} else if value.Valid {
		e.UpdatedAt = value.Int64
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[14])
	} else if value.Valid {
		e.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Estrus.
// Note that, you need to call Estrus.Unwrap() before calling this method, if this Estrus
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Estrus) Update() *EstrusUpdateOne {
	return (&EstrusClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Estrus) Unwrap() *Estrus {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Estrus is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Estrus) String() string {
	var builder strings.Builder
	builder.WriteString("Estrus(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteString(", earNumber=")
	builder.WriteString(e.EarNumber)
	builder.WriteString(", times=")
	builder.WriteString(fmt.Sprintf("%v", e.Times))
	builder.WriteString(", reproductiveState=")
	builder.WriteString(e.ReproductiveState)
	builder.WriteString(", shedName=")
	builder.WriteString(e.ShedName)
	builder.WriteString(", estrusAt=")
	builder.WriteString(fmt.Sprintf("%v", e.EstrusAt))
	builder.WriteString(", estrusTypeId=")
	builder.WriteString(fmt.Sprintf("%v", e.EstrusTypeId))
	builder.WriteString(", estrusTypeName=")
	builder.WriteString(e.EstrusTypeName)
	builder.WriteString(", userName=")
	builder.WriteString(e.UserName)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", e.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(e.TenantName)
	builder.WriteString(", remarks=")
	builder.WriteString(e.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", e.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// EstrusSlice is a parsable slice of Estrus.
type EstrusSlice []*Estrus

func (e EstrusSlice) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}

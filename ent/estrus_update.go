// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/estrus"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// EstrusUpdate is the builder for updating Estrus entities.
type EstrusUpdate struct {
	config
	hooks      []Hook
	mutation   *EstrusMutation
	predicates []predicate.Estrus
}

// Where adds a new predicate for the builder.
func (eu *EstrusUpdate) Where(ps ...predicate.Estrus) *EstrusUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetName sets the name field.
func (eu *EstrusUpdate) SetName(s string) *EstrusUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the name field if the given value is not nil.
func (eu *EstrusUpdate) SetNillableName(s *string) *EstrusUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// ClearName clears the value of name.
func (eu *EstrusUpdate) ClearName() *EstrusUpdate {
	eu.mutation.ClearName()
	return eu
}

// SetEarNumber sets the earNumber field.
func (eu *EstrusUpdate) SetEarNumber(s string) *EstrusUpdate {
	eu.mutation.SetEarNumber(s)
	return eu
}

// SetTimes sets the times field.
func (eu *EstrusUpdate) SetTimes(i int) *EstrusUpdate {
	eu.mutation.ResetTimes()
	eu.mutation.SetTimes(i)
	return eu
}

// AddTimes adds i to times.
func (eu *EstrusUpdate) AddTimes(i int) *EstrusUpdate {
	eu.mutation.AddTimes(i)
	return eu
}

// SetReproductiveState sets the reproductiveState field.
func (eu *EstrusUpdate) SetReproductiveState(s string) *EstrusUpdate {
	eu.mutation.SetReproductiveState(s)
	return eu
}

// SetShedName sets the shedName field.
func (eu *EstrusUpdate) SetShedName(s string) *EstrusUpdate {
	eu.mutation.SetShedName(s)
	return eu
}

// SetEstrusAt sets the estrusAt field.
func (eu *EstrusUpdate) SetEstrusAt(i int64) *EstrusUpdate {
	eu.mutation.ResetEstrusAt()
	eu.mutation.SetEstrusAt(i)
	return eu
}

// AddEstrusAt adds i to estrusAt.
func (eu *EstrusUpdate) AddEstrusAt(i int64) *EstrusUpdate {
	eu.mutation.AddEstrusAt(i)
	return eu
}

// SetEstrusTypeId sets the estrusTypeId field.
func (eu *EstrusUpdate) SetEstrusTypeId(i int) *EstrusUpdate {
	eu.mutation.ResetEstrusTypeId()
	eu.mutation.SetEstrusTypeId(i)
	return eu
}

// AddEstrusTypeId adds i to estrusTypeId.
func (eu *EstrusUpdate) AddEstrusTypeId(i int) *EstrusUpdate {
	eu.mutation.AddEstrusTypeId(i)
	return eu
}

// SetEstrusTypeName sets the estrusTypeName field.
func (eu *EstrusUpdate) SetEstrusTypeName(s string) *EstrusUpdate {
	eu.mutation.SetEstrusTypeName(s)
	return eu
}

// SetUserName sets the userName field.
func (eu *EstrusUpdate) SetUserName(s string) *EstrusUpdate {
	eu.mutation.SetUserName(s)
	return eu
}

// SetTenantId sets the tenantId field.
func (eu *EstrusUpdate) SetTenantId(i int64) *EstrusUpdate {
	eu.mutation.ResetTenantId()
	eu.mutation.SetTenantId(i)
	return eu
}

// AddTenantId adds i to tenantId.
func (eu *EstrusUpdate) AddTenantId(i int64) *EstrusUpdate {
	eu.mutation.AddTenantId(i)
	return eu
}

// SetTenantName sets the tenantName field.
func (eu *EstrusUpdate) SetTenantName(s string) *EstrusUpdate {
	eu.mutation.SetTenantName(s)
	return eu
}

// SetRemarks sets the remarks field.
func (eu *EstrusUpdate) SetRemarks(s string) *EstrusUpdate {
	eu.mutation.SetRemarks(s)
	return eu
}

// SetCreatedAt sets the createdAt field.
func (eu *EstrusUpdate) SetCreatedAt(i int64) *EstrusUpdate {
	eu.mutation.ResetCreatedAt()
	eu.mutation.SetCreatedAt(i)
	return eu
}

// AddCreatedAt adds i to createdAt.
func (eu *EstrusUpdate) AddCreatedAt(i int64) *EstrusUpdate {
	eu.mutation.AddCreatedAt(i)
	return eu
}

// SetUpdatedAt sets the updatedAt field.
func (eu *EstrusUpdate) SetUpdatedAt(i int64) *EstrusUpdate {
	eu.mutation.ResetUpdatedAt()
	eu.mutation.SetUpdatedAt(i)
	return eu
}

// AddUpdatedAt adds i to updatedAt.
func (eu *EstrusUpdate) AddUpdatedAt(i int64) *EstrusUpdate {
	eu.mutation.AddUpdatedAt(i)
	return eu
}

// SetDeleted sets the deleted field.
func (eu *EstrusUpdate) SetDeleted(i int) *EstrusUpdate {
	eu.mutation.ResetDeleted()
	eu.mutation.SetDeleted(i)
	return eu
}

// AddDeleted adds i to deleted.
func (eu *EstrusUpdate) AddDeleted(i int) *EstrusUpdate {
	eu.mutation.AddDeleted(i)
	return eu
}

// Mutation returns the EstrusMutation object of the builder.
func (eu *EstrusUpdate) Mutation() *EstrusMutation {
	return eu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EstrusUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EstrusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EstrusUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EstrusUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EstrusUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EstrusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   estrus.Table,
			Columns: estrus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: estrus.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldName,
		})
	}
	if eu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: estrus.FieldName,
		})
	}
	if value, ok := eu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldEarNumber,
		})
	}
	if value, ok := eu.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldTimes,
		})
	}
	if value, ok := eu.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldTimes,
		})
	}
	if value, ok := eu.mutation.ReproductiveState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldReproductiveState,
		})
	}
	if value, ok := eu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldShedName,
		})
	}
	if value, ok := eu.mutation.EstrusAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldEstrusAt,
		})
	}
	if value, ok := eu.mutation.AddedEstrusAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldEstrusAt,
		})
	}
	if value, ok := eu.mutation.EstrusTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldEstrusTypeId,
		})
	}
	if value, ok := eu.mutation.AddedEstrusTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldEstrusTypeId,
		})
	}
	if value, ok := eu.mutation.EstrusTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldEstrusTypeName,
		})
	}
	if value, ok := eu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldUserName,
		})
	}
	if value, ok := eu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldTenantId,
		})
	}
	if value, ok := eu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldTenantId,
		})
	}
	if value, ok := eu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldTenantName,
		})
	}
	if value, ok := eu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldRemarks,
		})
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldDeleted,
		})
	}
	if value, ok := eu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{estrus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EstrusUpdateOne is the builder for updating a single Estrus entity.
type EstrusUpdateOne struct {
	config
	hooks    []Hook
	mutation *EstrusMutation
}

// SetName sets the name field.
func (euo *EstrusUpdateOne) SetName(s string) *EstrusUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the name field if the given value is not nil.
func (euo *EstrusUpdateOne) SetNillableName(s *string) *EstrusUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// ClearName clears the value of name.
func (euo *EstrusUpdateOne) ClearName() *EstrusUpdateOne {
	euo.mutation.ClearName()
	return euo
}

// SetEarNumber sets the earNumber field.
func (euo *EstrusUpdateOne) SetEarNumber(s string) *EstrusUpdateOne {
	euo.mutation.SetEarNumber(s)
	return euo
}

// SetTimes sets the times field.
func (euo *EstrusUpdateOne) SetTimes(i int) *EstrusUpdateOne {
	euo.mutation.ResetTimes()
	euo.mutation.SetTimes(i)
	return euo
}

// AddTimes adds i to times.
func (euo *EstrusUpdateOne) AddTimes(i int) *EstrusUpdateOne {
	euo.mutation.AddTimes(i)
	return euo
}

// SetReproductiveState sets the reproductiveState field.
func (euo *EstrusUpdateOne) SetReproductiveState(s string) *EstrusUpdateOne {
	euo.mutation.SetReproductiveState(s)
	return euo
}

// SetShedName sets the shedName field.
func (euo *EstrusUpdateOne) SetShedName(s string) *EstrusUpdateOne {
	euo.mutation.SetShedName(s)
	return euo
}

// SetEstrusAt sets the estrusAt field.
func (euo *EstrusUpdateOne) SetEstrusAt(i int64) *EstrusUpdateOne {
	euo.mutation.ResetEstrusAt()
	euo.mutation.SetEstrusAt(i)
	return euo
}

// AddEstrusAt adds i to estrusAt.
func (euo *EstrusUpdateOne) AddEstrusAt(i int64) *EstrusUpdateOne {
	euo.mutation.AddEstrusAt(i)
	return euo
}

// SetEstrusTypeId sets the estrusTypeId field.
func (euo *EstrusUpdateOne) SetEstrusTypeId(i int) *EstrusUpdateOne {
	euo.mutation.ResetEstrusTypeId()
	euo.mutation.SetEstrusTypeId(i)
	return euo
}

// AddEstrusTypeId adds i to estrusTypeId.
func (euo *EstrusUpdateOne) AddEstrusTypeId(i int) *EstrusUpdateOne {
	euo.mutation.AddEstrusTypeId(i)
	return euo
}

// SetEstrusTypeName sets the estrusTypeName field.
func (euo *EstrusUpdateOne) SetEstrusTypeName(s string) *EstrusUpdateOne {
	euo.mutation.SetEstrusTypeName(s)
	return euo
}

// SetUserName sets the userName field.
func (euo *EstrusUpdateOne) SetUserName(s string) *EstrusUpdateOne {
	euo.mutation.SetUserName(s)
	return euo
}

// SetTenantId sets the tenantId field.
func (euo *EstrusUpdateOne) SetTenantId(i int64) *EstrusUpdateOne {
	euo.mutation.ResetTenantId()
	euo.mutation.SetTenantId(i)
	return euo
}

// AddTenantId adds i to tenantId.
func (euo *EstrusUpdateOne) AddTenantId(i int64) *EstrusUpdateOne {
	euo.mutation.AddTenantId(i)
	return euo
}

// SetTenantName sets the tenantName field.
func (euo *EstrusUpdateOne) SetTenantName(s string) *EstrusUpdateOne {
	euo.mutation.SetTenantName(s)
	return euo
}

// SetRemarks sets the remarks field.
func (euo *EstrusUpdateOne) SetRemarks(s string) *EstrusUpdateOne {
	euo.mutation.SetRemarks(s)
	return euo
}

// SetCreatedAt sets the createdAt field.
func (euo *EstrusUpdateOne) SetCreatedAt(i int64) *EstrusUpdateOne {
	euo.mutation.ResetCreatedAt()
	euo.mutation.SetCreatedAt(i)
	return euo
}

// AddCreatedAt adds i to createdAt.
func (euo *EstrusUpdateOne) AddCreatedAt(i int64) *EstrusUpdateOne {
	euo.mutation.AddCreatedAt(i)
	return euo
}

// SetUpdatedAt sets the updatedAt field.
func (euo *EstrusUpdateOne) SetUpdatedAt(i int64) *EstrusUpdateOne {
	euo.mutation.ResetUpdatedAt()
	euo.mutation.SetUpdatedAt(i)
	return euo
}

// AddUpdatedAt adds i to updatedAt.
func (euo *EstrusUpdateOne) AddUpdatedAt(i int64) *EstrusUpdateOne {
	euo.mutation.AddUpdatedAt(i)
	return euo
}

// SetDeleted sets the deleted field.
func (euo *EstrusUpdateOne) SetDeleted(i int) *EstrusUpdateOne {
	euo.mutation.ResetDeleted()
	euo.mutation.SetDeleted(i)
	return euo
}

// AddDeleted adds i to deleted.
func (euo *EstrusUpdateOne) AddDeleted(i int) *EstrusUpdateOne {
	euo.mutation.AddDeleted(i)
	return euo
}

// Mutation returns the EstrusMutation object of the builder.
func (euo *EstrusUpdateOne) Mutation() *EstrusMutation {
	return euo.mutation
}

// Save executes the query and returns the updated entity.
func (euo *EstrusUpdateOne) Save(ctx context.Context) (*Estrus, error) {
	var (
		err  error
		node *Estrus
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EstrusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EstrusUpdateOne) SaveX(ctx context.Context) *Estrus {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EstrusUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EstrusUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EstrusUpdateOne) sqlSave(ctx context.Context) (_node *Estrus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   estrus.Table,
			Columns: estrus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: estrus.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Estrus.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldName,
		})
	}
	if euo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: estrus.FieldName,
		})
	}
	if value, ok := euo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldEarNumber,
		})
	}
	if value, ok := euo.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldTimes,
		})
	}
	if value, ok := euo.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldTimes,
		})
	}
	if value, ok := euo.mutation.ReproductiveState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldReproductiveState,
		})
	}
	if value, ok := euo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldShedName,
		})
	}
	if value, ok := euo.mutation.EstrusAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldEstrusAt,
		})
	}
	if value, ok := euo.mutation.AddedEstrusAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldEstrusAt,
		})
	}
	if value, ok := euo.mutation.EstrusTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldEstrusTypeId,
		})
	}
	if value, ok := euo.mutation.AddedEstrusTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldEstrusTypeId,
		})
	}
	if value, ok := euo.mutation.EstrusTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldEstrusTypeName,
		})
	}
	if value, ok := euo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldUserName,
		})
	}
	if value, ok := euo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldTenantId,
		})
	}
	if value, ok := euo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldTenantId,
		})
	}
	if value, ok := euo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldTenantName,
		})
	}
	if value, ok := euo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estrus.FieldRemarks,
		})
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: estrus.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldDeleted,
		})
	}
	if value, ok := euo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: estrus.FieldDeleted,
		})
	}
	_node = &Estrus{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{estrus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

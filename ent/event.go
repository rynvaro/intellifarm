// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/event"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// EventTypeId holds the value of the "eventTypeId" field.
	EventTypeId int `json:"eventTypeId,omitempty"`
	// EventTypeName holds the value of the "eventTypeName" field.
	EventTypeName string `json:"eventTypeName,omitempty"`
	// EventSubTypeId holds the value of the "eventSubTypeId" field.
	EventSubTypeId int `json:"eventSubTypeId,omitempty"`
	// EventSubTypeName holds the value of the "eventSubTypeName" field.
	EventSubTypeName string `json:"eventSubTypeName,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// ShedId holds the value of the "shedId" field.
	ShedId int64 `json:"shedId,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// 胎次
	Times int `json:"times,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldID, event.FieldEventTypeId, event.FieldEventSubTypeId, event.FieldTenantId, event.FieldFarmId, event.FieldShedId, event.FieldTimes, event.FieldCreatedAt, event.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case event.FieldEarNumber, event.FieldEventTypeName, event.FieldEventSubTypeName, event.FieldTenantName, event.FieldFarmName, event.FieldShedName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Event", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case event.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				e.EarNumber = value.String
			}
		case event.FieldEventTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field eventTypeId", values[i])
			} else if value.Valid {
				e.EventTypeId = int(value.Int64)
			}
		case event.FieldEventTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eventTypeName", values[i])
			} else if value.Valid {
				e.EventTypeName = value.String
			}
		case event.FieldEventSubTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field eventSubTypeId", values[i])
			} else if value.Valid {
				e.EventSubTypeId = int(value.Int64)
			}
		case event.FieldEventSubTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eventSubTypeName", values[i])
			} else if value.Valid {
				e.EventSubTypeName = value.String
			}
		case event.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				e.TenantId = value.Int64
			}
		case event.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				e.TenantName = value.String
			}
		case event.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				e.FarmId = value.Int64
			}
		case event.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				e.FarmName = value.String
			}
		case event.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				e.ShedId = value.Int64
			}
		case event.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				e.ShedName = value.String
			}
		case event.FieldTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field times", values[i])
			} else if value.Valid {
				e.Times = int(value.Int64)
			}
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Int64
			}
		case event.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				e.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("earNumber=")
	builder.WriteString(e.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("eventTypeId=")
	builder.WriteString(fmt.Sprintf("%v", e.EventTypeId))
	builder.WriteString(", ")
	builder.WriteString("eventTypeName=")
	builder.WriteString(e.EventTypeName)
	builder.WriteString(", ")
	builder.WriteString("eventSubTypeId=")
	builder.WriteString(fmt.Sprintf("%v", e.EventSubTypeId))
	builder.WriteString(", ")
	builder.WriteString("eventSubTypeName=")
	builder.WriteString(e.EventSubTypeName)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", e.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(e.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", e.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(e.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", e.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(e.ShedName)
	builder.WriteString(", ")
	builder.WriteString("times=")
	builder.WriteString(fmt.Sprintf("%v", e.Times))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", e.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}

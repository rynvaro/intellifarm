// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/event"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// EventType holds the value of the "eventType" field.
	EventType string `json:"eventType,omitempty"`
	// EventName holds the value of the "eventName" field.
	EventName string `json:"eventName,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // earNumber
		&sql.NullString{}, // eventType
		&sql.NullString{}, // eventName
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(values ...interface{}) error {
	if m, n := len(values), len(event.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[0])
	} else if value.Valid {
		e.EarNumber = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field eventType", values[1])
	} else if value.Valid {
		e.EventType = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field eventName", values[2])
	} else if value.Valid {
		e.EventName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[3])
	} else if value.Valid {
		e.TenantId = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[4])
	} else if value.Valid {
		e.TenantName = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[5])
	} else if value.Valid {
		e.CreatedAt = value.Int64
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[6])
	} else if value.Valid {
		e.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Event.
// Note that, you need to call Event.Unwrap() before calling this method, if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", earNumber=")
	builder.WriteString(e.EarNumber)
	builder.WriteString(", eventType=")
	builder.WriteString(e.EventType)
	builder.WriteString(", eventName=")
	builder.WriteString(e.EventName)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", e.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(e.TenantName)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", e.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}

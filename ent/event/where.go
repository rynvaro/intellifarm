// Code generated by entc, DO NOT EDIT.

package event

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EarNumber applies equality check predicate on the "earNumber" field. It's identical to EarNumberEQ.
func EarNumber(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EventTypeId applies equality check predicate on the "eventTypeId" field. It's identical to EventTypeIdEQ.
func EventTypeId(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventTypeId), v))
	})
}

// EventTypeName applies equality check predicate on the "eventTypeName" field. It's identical to EventTypeNameEQ.
func EventTypeName(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventTypeName), v))
	})
}

// EventSubTypeId applies equality check predicate on the "eventSubTypeId" field. It's identical to EventSubTypeIdEQ.
func EventSubTypeId(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventSubTypeId), v))
	})
}

// EventSubTypeName applies equality check predicate on the "eventSubTypeName" field. It's identical to EventSubTypeNameEQ.
func EventSubTypeName(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventSubTypeName), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// FarmId applies equality check predicate on the "farmId" field. It's identical to FarmIdEQ.
func FarmId(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmName applies equality check predicate on the "farmName" field. It's identical to FarmNameEQ.
func FarmName(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// ShedId applies equality check predicate on the "shedId" field. It's identical to ShedIdEQ.
func ShedId(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedId), v))
	})
}

// ShedName applies equality check predicate on the "shedName" field. It's identical to ShedNameEQ.
func ShedName(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// Times applies equality check predicate on the "times" field. It's identical to TimesEQ.
func Times(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// EarNumberEQ applies the EQ predicate on the "earNumber" field.
func EarNumberEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberNEQ applies the NEQ predicate on the "earNumber" field.
func EarNumberNEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberIn applies the In predicate on the "earNumber" field.
func EarNumberIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEarNumber), v...))
	})
}

// EarNumberNotIn applies the NotIn predicate on the "earNumber" field.
func EarNumberNotIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEarNumber), v...))
	})
}

// EarNumberGT applies the GT predicate on the "earNumber" field.
func EarNumberGT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEarNumber), v))
	})
}

// EarNumberGTE applies the GTE predicate on the "earNumber" field.
func EarNumberGTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberLT applies the LT predicate on the "earNumber" field.
func EarNumberLT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEarNumber), v))
	})
}

// EarNumberLTE applies the LTE predicate on the "earNumber" field.
func EarNumberLTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberContains applies the Contains predicate on the "earNumber" field.
func EarNumberContains(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasPrefix applies the HasPrefix predicate on the "earNumber" field.
func EarNumberHasPrefix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasSuffix applies the HasSuffix predicate on the "earNumber" field.
func EarNumberHasSuffix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEarNumber), v))
	})
}

// EarNumberEqualFold applies the EqualFold predicate on the "earNumber" field.
func EarNumberEqualFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEarNumber), v))
	})
}

// EarNumberContainsFold applies the ContainsFold predicate on the "earNumber" field.
func EarNumberContainsFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEarNumber), v))
	})
}

// EventTypeIdEQ applies the EQ predicate on the "eventTypeId" field.
func EventTypeIdEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventTypeId), v))
	})
}

// EventTypeIdNEQ applies the NEQ predicate on the "eventTypeId" field.
func EventTypeIdNEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventTypeId), v))
	})
}

// EventTypeIdIn applies the In predicate on the "eventTypeId" field.
func EventTypeIdIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEventTypeId), v...))
	})
}

// EventTypeIdNotIn applies the NotIn predicate on the "eventTypeId" field.
func EventTypeIdNotIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEventTypeId), v...))
	})
}

// EventTypeIdGT applies the GT predicate on the "eventTypeId" field.
func EventTypeIdGT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventTypeId), v))
	})
}

// EventTypeIdGTE applies the GTE predicate on the "eventTypeId" field.
func EventTypeIdGTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventTypeId), v))
	})
}

// EventTypeIdLT applies the LT predicate on the "eventTypeId" field.
func EventTypeIdLT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventTypeId), v))
	})
}

// EventTypeIdLTE applies the LTE predicate on the "eventTypeId" field.
func EventTypeIdLTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventTypeId), v))
	})
}

// EventTypeIdIsNil applies the IsNil predicate on the "eventTypeId" field.
func EventTypeIdIsNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEventTypeId)))
	})
}

// EventTypeIdNotNil applies the NotNil predicate on the "eventTypeId" field.
func EventTypeIdNotNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEventTypeId)))
	})
}

// EventTypeNameEQ applies the EQ predicate on the "eventTypeName" field.
func EventTypeNameEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameNEQ applies the NEQ predicate on the "eventTypeName" field.
func EventTypeNameNEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameIn applies the In predicate on the "eventTypeName" field.
func EventTypeNameIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEventTypeName), v...))
	})
}

// EventTypeNameNotIn applies the NotIn predicate on the "eventTypeName" field.
func EventTypeNameNotIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEventTypeName), v...))
	})
}

// EventTypeNameGT applies the GT predicate on the "eventTypeName" field.
func EventTypeNameGT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameGTE applies the GTE predicate on the "eventTypeName" field.
func EventTypeNameGTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameLT applies the LT predicate on the "eventTypeName" field.
func EventTypeNameLT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameLTE applies the LTE predicate on the "eventTypeName" field.
func EventTypeNameLTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameContains applies the Contains predicate on the "eventTypeName" field.
func EventTypeNameContains(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameHasPrefix applies the HasPrefix predicate on the "eventTypeName" field.
func EventTypeNameHasPrefix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameHasSuffix applies the HasSuffix predicate on the "eventTypeName" field.
func EventTypeNameHasSuffix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameEqualFold applies the EqualFold predicate on the "eventTypeName" field.
func EventTypeNameEqualFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEventTypeName), v))
	})
}

// EventTypeNameContainsFold applies the ContainsFold predicate on the "eventTypeName" field.
func EventTypeNameContainsFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEventTypeName), v))
	})
}

// EventSubTypeIdEQ applies the EQ predicate on the "eventSubTypeId" field.
func EventSubTypeIdEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventSubTypeId), v))
	})
}

// EventSubTypeIdNEQ applies the NEQ predicate on the "eventSubTypeId" field.
func EventSubTypeIdNEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventSubTypeId), v))
	})
}

// EventSubTypeIdIn applies the In predicate on the "eventSubTypeId" field.
func EventSubTypeIdIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEventSubTypeId), v...))
	})
}

// EventSubTypeIdNotIn applies the NotIn predicate on the "eventSubTypeId" field.
func EventSubTypeIdNotIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEventSubTypeId), v...))
	})
}

// EventSubTypeIdGT applies the GT predicate on the "eventSubTypeId" field.
func EventSubTypeIdGT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventSubTypeId), v))
	})
}

// EventSubTypeIdGTE applies the GTE predicate on the "eventSubTypeId" field.
func EventSubTypeIdGTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventSubTypeId), v))
	})
}

// EventSubTypeIdLT applies the LT predicate on the "eventSubTypeId" field.
func EventSubTypeIdLT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventSubTypeId), v))
	})
}

// EventSubTypeIdLTE applies the LTE predicate on the "eventSubTypeId" field.
func EventSubTypeIdLTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventSubTypeId), v))
	})
}

// EventSubTypeIdIsNil applies the IsNil predicate on the "eventSubTypeId" field.
func EventSubTypeIdIsNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEventSubTypeId)))
	})
}

// EventSubTypeIdNotNil applies the NotNil predicate on the "eventSubTypeId" field.
func EventSubTypeIdNotNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEventSubTypeId)))
	})
}

// EventSubTypeNameEQ applies the EQ predicate on the "eventSubTypeName" field.
func EventSubTypeNameEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameNEQ applies the NEQ predicate on the "eventSubTypeName" field.
func EventSubTypeNameNEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameIn applies the In predicate on the "eventSubTypeName" field.
func EventSubTypeNameIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEventSubTypeName), v...))
	})
}

// EventSubTypeNameNotIn applies the NotIn predicate on the "eventSubTypeName" field.
func EventSubTypeNameNotIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEventSubTypeName), v...))
	})
}

// EventSubTypeNameGT applies the GT predicate on the "eventSubTypeName" field.
func EventSubTypeNameGT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameGTE applies the GTE predicate on the "eventSubTypeName" field.
func EventSubTypeNameGTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameLT applies the LT predicate on the "eventSubTypeName" field.
func EventSubTypeNameLT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameLTE applies the LTE predicate on the "eventSubTypeName" field.
func EventSubTypeNameLTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameContains applies the Contains predicate on the "eventSubTypeName" field.
func EventSubTypeNameContains(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameHasPrefix applies the HasPrefix predicate on the "eventSubTypeName" field.
func EventSubTypeNameHasPrefix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameHasSuffix applies the HasSuffix predicate on the "eventSubTypeName" field.
func EventSubTypeNameHasSuffix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameEqualFold applies the EqualFold predicate on the "eventSubTypeName" field.
func EventSubTypeNameEqualFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEventSubTypeName), v))
	})
}

// EventSubTypeNameContainsFold applies the ContainsFold predicate on the "eventSubTypeName" field.
func EventSubTypeNameContainsFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEventSubTypeName), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// FarmIdEQ applies the EQ predicate on the "farmId" field.
func FarmIdEQ(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmIdNEQ applies the NEQ predicate on the "farmId" field.
func FarmIdNEQ(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmId), v))
	})
}

// FarmIdIn applies the In predicate on the "farmId" field.
func FarmIdIn(vs ...int64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFarmId), v...))
	})
}

// FarmIdNotIn applies the NotIn predicate on the "farmId" field.
func FarmIdNotIn(vs ...int64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFarmId), v...))
	})
}

// FarmIdGT applies the GT predicate on the "farmId" field.
func FarmIdGT(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmId), v))
	})
}

// FarmIdGTE applies the GTE predicate on the "farmId" field.
func FarmIdGTE(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmId), v))
	})
}

// FarmIdLT applies the LT predicate on the "farmId" field.
func FarmIdLT(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmId), v))
	})
}

// FarmIdLTE applies the LTE predicate on the "farmId" field.
func FarmIdLTE(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmId), v))
	})
}

// FarmNameEQ applies the EQ predicate on the "farmName" field.
func FarmNameEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// FarmNameNEQ applies the NEQ predicate on the "farmName" field.
func FarmNameNEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmName), v))
	})
}

// FarmNameIn applies the In predicate on the "farmName" field.
func FarmNameIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFarmName), v...))
	})
}

// FarmNameNotIn applies the NotIn predicate on the "farmName" field.
func FarmNameNotIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFarmName), v...))
	})
}

// FarmNameGT applies the GT predicate on the "farmName" field.
func FarmNameGT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmName), v))
	})
}

// FarmNameGTE applies the GTE predicate on the "farmName" field.
func FarmNameGTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmName), v))
	})
}

// FarmNameLT applies the LT predicate on the "farmName" field.
func FarmNameLT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmName), v))
	})
}

// FarmNameLTE applies the LTE predicate on the "farmName" field.
func FarmNameLTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmName), v))
	})
}

// FarmNameContains applies the Contains predicate on the "farmName" field.
func FarmNameContains(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFarmName), v))
	})
}

// FarmNameHasPrefix applies the HasPrefix predicate on the "farmName" field.
func FarmNameHasPrefix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFarmName), v))
	})
}

// FarmNameHasSuffix applies the HasSuffix predicate on the "farmName" field.
func FarmNameHasSuffix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFarmName), v))
	})
}

// FarmNameEqualFold applies the EqualFold predicate on the "farmName" field.
func FarmNameEqualFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFarmName), v))
	})
}

// FarmNameContainsFold applies the ContainsFold predicate on the "farmName" field.
func FarmNameContainsFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFarmName), v))
	})
}

// ShedIdEQ applies the EQ predicate on the "shedId" field.
func ShedIdEQ(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedId), v))
	})
}

// ShedIdNEQ applies the NEQ predicate on the "shedId" field.
func ShedIdNEQ(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedId), v))
	})
}

// ShedIdIn applies the In predicate on the "shedId" field.
func ShedIdIn(vs ...int64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShedId), v...))
	})
}

// ShedIdNotIn applies the NotIn predicate on the "shedId" field.
func ShedIdNotIn(vs ...int64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShedId), v...))
	})
}

// ShedIdGT applies the GT predicate on the "shedId" field.
func ShedIdGT(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedId), v))
	})
}

// ShedIdGTE applies the GTE predicate on the "shedId" field.
func ShedIdGTE(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedId), v))
	})
}

// ShedIdLT applies the LT predicate on the "shedId" field.
func ShedIdLT(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedId), v))
	})
}

// ShedIdLTE applies the LTE predicate on the "shedId" field.
func ShedIdLTE(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedId), v))
	})
}

// ShedIdIsNil applies the IsNil predicate on the "shedId" field.
func ShedIdIsNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShedId)))
	})
}

// ShedIdNotNil applies the NotNil predicate on the "shedId" field.
func ShedIdNotNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShedId)))
	})
}

// ShedNameEQ applies the EQ predicate on the "shedName" field.
func ShedNameEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// ShedNameNEQ applies the NEQ predicate on the "shedName" field.
func ShedNameNEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedName), v))
	})
}

// ShedNameIn applies the In predicate on the "shedName" field.
func ShedNameIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShedName), v...))
	})
}

// ShedNameNotIn applies the NotIn predicate on the "shedName" field.
func ShedNameNotIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShedName), v...))
	})
}

// ShedNameGT applies the GT predicate on the "shedName" field.
func ShedNameGT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedName), v))
	})
}

// ShedNameGTE applies the GTE predicate on the "shedName" field.
func ShedNameGTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedName), v))
	})
}

// ShedNameLT applies the LT predicate on the "shedName" field.
func ShedNameLT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedName), v))
	})
}

// ShedNameLTE applies the LTE predicate on the "shedName" field.
func ShedNameLTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedName), v))
	})
}

// ShedNameContains applies the Contains predicate on the "shedName" field.
func ShedNameContains(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedName), v))
	})
}

// ShedNameHasPrefix applies the HasPrefix predicate on the "shedName" field.
func ShedNameHasPrefix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedName), v))
	})
}

// ShedNameHasSuffix applies the HasSuffix predicate on the "shedName" field.
func ShedNameHasSuffix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedName), v))
	})
}

// ShedNameIsNil applies the IsNil predicate on the "shedName" field.
func ShedNameIsNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShedName)))
	})
}

// ShedNameNotNil applies the NotNil predicate on the "shedName" field.
func ShedNameNotNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShedName)))
	})
}

// ShedNameEqualFold applies the EqualFold predicate on the "shedName" field.
func ShedNameEqualFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedName), v))
	})
}

// ShedNameContainsFold applies the ContainsFold predicate on the "shedName" field.
func ShedNameContainsFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedName), v))
	})
}

// TimesEQ applies the EQ predicate on the "times" field.
func TimesEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// TimesNEQ applies the NEQ predicate on the "times" field.
func TimesNEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimes), v))
	})
}

// TimesIn applies the In predicate on the "times" field.
func TimesIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimes), v...))
	})
}

// TimesNotIn applies the NotIn predicate on the "times" field.
func TimesNotIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimes), v...))
	})
}

// TimesGT applies the GT predicate on the "times" field.
func TimesGT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimes), v))
	})
}

// TimesGTE applies the GTE predicate on the "times" field.
func TimesGTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimes), v))
	})
}

// TimesLT applies the LT predicate on the "times" field.
func TimesLT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimes), v))
	})
}

// TimesLTE applies the LTE predicate on the "times" field.
func TimesLTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimes), v))
	})
}

// TimesIsNil applies the IsNil predicate on the "times" field.
func TimesIsNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimes)))
	})
}

// TimesNotNil applies the NotNil predicate on the "times" field.
func TimesNotNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimes)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		p(s.Not())
	})
}

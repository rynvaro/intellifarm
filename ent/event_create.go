// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/event"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
}

// SetEarNumber sets the earNumber field.
func (ec *EventCreate) SetEarNumber(s string) *EventCreate {
	ec.mutation.SetEarNumber(s)
	return ec
}

// SetEventTypeId sets the eventTypeId field.
func (ec *EventCreate) SetEventTypeId(i int) *EventCreate {
	ec.mutation.SetEventTypeId(i)
	return ec
}

// SetNillableEventTypeId sets the eventTypeId field if the given value is not nil.
func (ec *EventCreate) SetNillableEventTypeId(i *int) *EventCreate {
	if i != nil {
		ec.SetEventTypeId(*i)
	}
	return ec
}

// SetEventTypeName sets the eventTypeName field.
func (ec *EventCreate) SetEventTypeName(s string) *EventCreate {
	ec.mutation.SetEventTypeName(s)
	return ec
}

// SetEventSubTypeId sets the eventSubTypeId field.
func (ec *EventCreate) SetEventSubTypeId(i int) *EventCreate {
	ec.mutation.SetEventSubTypeId(i)
	return ec
}

// SetNillableEventSubTypeId sets the eventSubTypeId field if the given value is not nil.
func (ec *EventCreate) SetNillableEventSubTypeId(i *int) *EventCreate {
	if i != nil {
		ec.SetEventSubTypeId(*i)
	}
	return ec
}

// SetEventSubTypeName sets the eventSubTypeName field.
func (ec *EventCreate) SetEventSubTypeName(s string) *EventCreate {
	ec.mutation.SetEventSubTypeName(s)
	return ec
}

// SetTenantId sets the tenantId field.
func (ec *EventCreate) SetTenantId(i int64) *EventCreate {
	ec.mutation.SetTenantId(i)
	return ec
}

// SetTenantName sets the tenantName field.
func (ec *EventCreate) SetTenantName(s string) *EventCreate {
	ec.mutation.SetTenantName(s)
	return ec
}

// SetFarmId sets the farmId field.
func (ec *EventCreate) SetFarmId(i int64) *EventCreate {
	ec.mutation.SetFarmId(i)
	return ec
}

// SetFarmName sets the farmName field.
func (ec *EventCreate) SetFarmName(s string) *EventCreate {
	ec.mutation.SetFarmName(s)
	return ec
}

// SetShedId sets the shedId field.
func (ec *EventCreate) SetShedId(i int64) *EventCreate {
	ec.mutation.SetShedId(i)
	return ec
}

// SetNillableShedId sets the shedId field if the given value is not nil.
func (ec *EventCreate) SetNillableShedId(i *int64) *EventCreate {
	if i != nil {
		ec.SetShedId(*i)
	}
	return ec
}

// SetShedName sets the shedName field.
func (ec *EventCreate) SetShedName(s string) *EventCreate {
	ec.mutation.SetShedName(s)
	return ec
}

// SetNillableShedName sets the shedName field if the given value is not nil.
func (ec *EventCreate) SetNillableShedName(s *string) *EventCreate {
	if s != nil {
		ec.SetShedName(*s)
	}
	return ec
}

// SetTimes sets the times field.
func (ec *EventCreate) SetTimes(i int) *EventCreate {
	ec.mutation.SetTimes(i)
	return ec
}

// SetNillableTimes sets the times field if the given value is not nil.
func (ec *EventCreate) SetNillableTimes(i *int) *EventCreate {
	if i != nil {
		ec.SetTimes(*i)
	}
	return ec
}

// SetCreatedAt sets the createdAt field.
func (ec *EventCreate) SetCreatedAt(i int64) *EventCreate {
	ec.mutation.SetCreatedAt(i)
	return ec
}

// SetDeleted sets the deleted field.
func (ec *EventCreate) SetDeleted(i int) *EventCreate {
	ec.mutation.SetDeleted(i)
	return ec
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	var (
		err  error
		node *Event
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() {
	if _, ok := ec.mutation.Times(); !ok {
		v := event.DefaultTimes
		ec.mutation.SetTimes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if _, ok := ec.mutation.EventTypeName(); !ok {
		return &ValidationError{Name: "eventTypeName", err: errors.New("ent: missing required field \"eventTypeName\"")}
	}
	if _, ok := ec.mutation.EventSubTypeName(); !ok {
		return &ValidationError{Name: "eventSubTypeName", err: errors.New("ent: missing required field \"eventSubTypeName\"")}
	}
	if _, ok := ec.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := ec.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := ec.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New("ent: missing required field \"farmId\"")}
	}
	if _, ok := ec.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New("ent: missing required field \"farmName\"")}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := ec.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: event.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: event.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := ec.mutation.EventTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: event.FieldEventTypeId,
		})
		_node.EventTypeId = value
	}
	if value, ok := ec.mutation.EventTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldEventTypeName,
		})
		_node.EventTypeName = value
	}
	if value, ok := ec.mutation.EventSubTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: event.FieldEventSubTypeId,
		})
		_node.EventSubTypeId = value
	}
	if value, ok := ec.mutation.EventSubTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldEventSubTypeName,
		})
		_node.EventSubTypeName = value
	}
	if value, ok := ec.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: event.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := ec.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := ec.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: event.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := ec.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := ec.mutation.ShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: event.FieldShedId,
		})
		_node.ShedId = value
	}
	if value, ok := ec.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := ec.mutation.Times(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: event.FieldTimes,
		})
		_node.Times = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: event.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: event.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// EventCreateBulk is the builder for creating a bulk of Event entities.
type EventCreateBulk struct {
	config
	builders []*EventCreate
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

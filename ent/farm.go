// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/farm"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Farm is the model entity for the Farm schema.
type Farm struct {
	config `form:"-" json:"-" required:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛场名称
	Name string `json:"name,omitempty" form:"name" required:"true"`
	// 牛场编号
	Code string `json:"code,omitempty" form:"code" required:"true"`
	// 建场日期
	ConstructionDate string `json:"constructionDate,omitempty" form:"constructionDate"`
	// 饲养规模
	FeedingScale int64 `json:"feedingScale,omitempty" form:"feedingScale"`
	// 联系人
	ContactUser string `json:"contactUser,omitempty" form:"contactUser"`
	// 联系电话
	ContactPhone string `json:"contactPhone,omitempty" form:"contactPhone"`
	// 联系地址
	ContactAddress string `json:"contactAddress,omitempty" form:"contactAddress"`
	// 建筑面积（m²）
	Square int64 `json:"square,omitempty" form:"square"`
	// 畜舍输了（栋）
	ShedCount int64 `json:"shedCount,omitempty" form:"shedCount"`
	// 牛场类型ID
	CategoryId int64 `json:"categoryId,omitempty" form:"categoryId" required:"true"`
	// 牛场类型
	CategoryName string `json:"categoryName,omitempty" form:"categoryName" required:"true"`
	// 生产品种ID
	VarietyId int64 `json:"varietyId,omitempty" form:"variety" required:"true"`
	// 生产品种
	VarietyName string `json:"varietyName,omitempty" form:"varietyName" required:"true"`
	// 地区编码
	DistrictCode string `json:"districtCode,omitempty" form:"districtCode" required:"true"`
	// 地区
	DistrictName string `json:"districtName,omitempty" form:"districtName" required:"true"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注信息
	Remarks string `json:"remarks,omitempty" form:"remarks"`
	// 插入时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Farm) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case farm.FieldID, farm.FieldFeedingScale, farm.FieldSquare, farm.FieldShedCount, farm.FieldCategoryId, farm.FieldVarietyId, farm.FieldTenantId, farm.FieldCreatedAt, farm.FieldUpdatedAt, farm.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case farm.FieldName, farm.FieldCode, farm.FieldConstructionDate, farm.FieldContactUser, farm.FieldContactPhone, farm.FieldContactAddress, farm.FieldCategoryName, farm.FieldVarietyName, farm.FieldDistrictCode, farm.FieldDistrictName, farm.FieldTenantName, farm.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Farm", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Farm fields.
func (f *Farm) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case farm.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case farm.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case farm.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				f.Code = value.String
			}
		case farm.FieldConstructionDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field constructionDate", values[i])
			} else if value.Valid {
				f.ConstructionDate = value.String
			}
		case farm.FieldFeedingScale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feedingScale", values[i])
			} else if value.Valid {
				f.FeedingScale = value.Int64
			}
		case farm.FieldContactUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contactUser", values[i])
			} else if value.Valid {
				f.ContactUser = value.String
			}
		case farm.FieldContactPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contactPhone", values[i])
			} else if value.Valid {
				f.ContactPhone = value.String
			}
		case farm.FieldContactAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contactAddress", values[i])
			} else if value.Valid {
				f.ContactAddress = value.String
			}
		case farm.FieldSquare:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field square", values[i])
			} else if value.Valid {
				f.Square = value.Int64
			}
		case farm.FieldShedCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedCount", values[i])
			} else if value.Valid {
				f.ShedCount = value.Int64
			}
		case farm.FieldCategoryId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field categoryId", values[i])
			} else if value.Valid {
				f.CategoryId = value.Int64
			}
		case farm.FieldCategoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categoryName", values[i])
			} else if value.Valid {
				f.CategoryName = value.String
			}
		case farm.FieldVarietyId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field varietyId", values[i])
			} else if value.Valid {
				f.VarietyId = value.Int64
			}
		case farm.FieldVarietyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field varietyName", values[i])
			} else if value.Valid {
				f.VarietyName = value.String
			}
		case farm.FieldDistrictCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field districtCode", values[i])
			} else if value.Valid {
				f.DistrictCode = value.String
			}
		case farm.FieldDistrictName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field districtName", values[i])
			} else if value.Valid {
				f.DistrictName = value.String
			}
		case farm.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				f.TenantId = value.Int64
			}
		case farm.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				f.TenantName = value.String
			}
		case farm.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				f.Remarks = value.String
			}
		case farm.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Int64
			}
		case farm.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Int64
			}
		case farm.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				f.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Farm.
// Note that you need to call Farm.Unwrap() before calling this method if this Farm
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Farm) Update() *FarmUpdateOne {
	return (&FarmClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Farm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Farm) Unwrap() *Farm {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Farm is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Farm) String() string {
	var builder strings.Builder
	builder.WriteString("Farm(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(f.Code)
	builder.WriteString(", ")
	builder.WriteString("constructionDate=")
	builder.WriteString(f.ConstructionDate)
	builder.WriteString(", ")
	builder.WriteString("feedingScale=")
	builder.WriteString(fmt.Sprintf("%v", f.FeedingScale))
	builder.WriteString(", ")
	builder.WriteString("contactUser=")
	builder.WriteString(f.ContactUser)
	builder.WriteString(", ")
	builder.WriteString("contactPhone=")
	builder.WriteString(f.ContactPhone)
	builder.WriteString(", ")
	builder.WriteString("contactAddress=")
	builder.WriteString(f.ContactAddress)
	builder.WriteString(", ")
	builder.WriteString("square=")
	builder.WriteString(fmt.Sprintf("%v", f.Square))
	builder.WriteString(", ")
	builder.WriteString("shedCount=")
	builder.WriteString(fmt.Sprintf("%v", f.ShedCount))
	builder.WriteString(", ")
	builder.WriteString("categoryId=")
	builder.WriteString(fmt.Sprintf("%v", f.CategoryId))
	builder.WriteString(", ")
	builder.WriteString("categoryName=")
	builder.WriteString(f.CategoryName)
	builder.WriteString(", ")
	builder.WriteString("varietyId=")
	builder.WriteString(fmt.Sprintf("%v", f.VarietyId))
	builder.WriteString(", ")
	builder.WriteString("varietyName=")
	builder.WriteString(f.VarietyName)
	builder.WriteString(", ")
	builder.WriteString("districtCode=")
	builder.WriteString(f.DistrictCode)
	builder.WriteString(", ")
	builder.WriteString("districtName=")
	builder.WriteString(f.DistrictName)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", f.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(f.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(f.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", f.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", f.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", f.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Farms is a parsable slice of Farm.
type Farms []*Farm

func (f Farms) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}

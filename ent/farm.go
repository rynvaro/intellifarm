// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/farm"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Farm is the model entity for the Farm schema.
type Farm struct {
	config `form:"-" json:"-" required:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" form:"name" required:"true"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty" form:"code" required:"true"`
	// ConstructionDate holds the value of the "constructionDate" field.
	ConstructionDate string `json:"constructionDate,omitempty" form:"constructionDate"`
	// FeedingScale holds the value of the "feedingScale" field.
	FeedingScale int64 `json:"feedingScale,omitempty" form:"feedingScale"`
	// ContactUser holds the value of the "contactUser" field.
	ContactUser string `json:"contactUser,omitempty" form:"contactUser"`
	// ContactPhone holds the value of the "contactPhone" field.
	ContactPhone string `json:"contactPhone,omitempty" form:"contactPhone"`
	// ContactAddress holds the value of the "contactAddress" field.
	ContactAddress string `json:"contactAddress,omitempty" form:"contactAddress"`
	// Square holds the value of the "square" field.
	Square int64 `json:"square,omitempty" form:"square"`
	// ShedCount holds the value of the "shedCount" field.
	ShedCount int64 `json:"shedCount,omitempty" form:"shedCount"`
	// CategoryId holds the value of the "categoryId" field.
	CategoryId int64 `json:"categoryId,omitempty" form:"categoryId" required:"true"`
	// CategoryName holds the value of the "categoryName" field.
	CategoryName string `json:"categoryName,omitempty" form:"categoryName" required:"true"`
	// VarietyId holds the value of the "varietyId" field.
	VarietyId int64 `json:"varietyId,omitempty" form:"variety" required:"true"`
	// VarietyName holds the value of the "varietyName" field.
	VarietyName string `json:"varietyName,omitempty" form:"varietyName" required:"true"`
	// DistrictCode holds the value of the "districtCode" field.
	DistrictCode string `json:"districtCode,omitempty" form:"districtCode" required:"true"`
	// DistrictName holds the value of the "districtName" field.
	DistrictName string `json:"districtName,omitempty" form:"districtName" required:"true"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty" form:"remarks"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Farm) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // code
		&sql.NullString{}, // constructionDate
		&sql.NullInt64{},  // feedingScale
		&sql.NullString{}, // contactUser
		&sql.NullString{}, // contactPhone
		&sql.NullString{}, // contactAddress
		&sql.NullInt64{},  // square
		&sql.NullInt64{},  // shedCount
		&sql.NullInt64{},  // categoryId
		&sql.NullString{}, // categoryName
		&sql.NullInt64{},  // varietyId
		&sql.NullString{}, // varietyName
		&sql.NullString{}, // districtCode
		&sql.NullString{}, // districtName
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Farm fields.
func (f *Farm) assignValues(values ...interface{}) error {
	if m, n := len(values), len(farm.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		f.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[1])
	} else if value.Valid {
		f.Code = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field constructionDate", values[2])
	} else if value.Valid {
		f.ConstructionDate = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field feedingScale", values[3])
	} else if value.Valid {
		f.FeedingScale = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field contactUser", values[4])
	} else if value.Valid {
		f.ContactUser = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field contactPhone", values[5])
	} else if value.Valid {
		f.ContactPhone = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field contactAddress", values[6])
	} else if value.Valid {
		f.ContactAddress = value.String
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field square", values[7])
	} else if value.Valid {
		f.Square = value.Int64
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field shedCount", values[8])
	} else if value.Valid {
		f.ShedCount = value.Int64
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field categoryId", values[9])
	} else if value.Valid {
		f.CategoryId = value.Int64
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field categoryName", values[10])
	} else if value.Valid {
		f.CategoryName = value.String
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field varietyId", values[11])
	} else if value.Valid {
		f.VarietyId = value.Int64
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field varietyName", values[12])
	} else if value.Valid {
		f.VarietyName = value.String
	}
	if value, ok := values[13].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field districtCode", values[13])
	} else if value.Valid {
		f.DistrictCode = value.String
	}
	if value, ok := values[14].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field districtName", values[14])
	} else if value.Valid {
		f.DistrictName = value.String
	}
	if value, ok := values[15].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[15])
	} else if value.Valid {
		f.TenantId = value.Int64
	}
	if value, ok := values[16].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[16])
	} else if value.Valid {
		f.TenantName = value.String
	}
	if value, ok := values[17].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[17])
	} else if value.Valid {
		f.Remarks = value.String
	}
	if value, ok := values[18].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[18])
	} else if value.Valid {
		f.CreatedAt = value.Int64
	}
	if value, ok := values[19].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[19])
	} else if value.Valid {
		f.UpdatedAt = value.Int64
	}
	if value, ok := values[20].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[20])
	} else if value.Valid {
		f.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Farm.
// Note that, you need to call Farm.Unwrap() before calling this method, if this Farm
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Farm) Update() *FarmUpdateOne {
	return (&FarmClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *Farm) Unwrap() *Farm {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Farm is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Farm) String() string {
	var builder strings.Builder
	builder.WriteString("Farm(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", code=")
	builder.WriteString(f.Code)
	builder.WriteString(", constructionDate=")
	builder.WriteString(f.ConstructionDate)
	builder.WriteString(", feedingScale=")
	builder.WriteString(fmt.Sprintf("%v", f.FeedingScale))
	builder.WriteString(", contactUser=")
	builder.WriteString(f.ContactUser)
	builder.WriteString(", contactPhone=")
	builder.WriteString(f.ContactPhone)
	builder.WriteString(", contactAddress=")
	builder.WriteString(f.ContactAddress)
	builder.WriteString(", square=")
	builder.WriteString(fmt.Sprintf("%v", f.Square))
	builder.WriteString(", shedCount=")
	builder.WriteString(fmt.Sprintf("%v", f.ShedCount))
	builder.WriteString(", categoryId=")
	builder.WriteString(fmt.Sprintf("%v", f.CategoryId))
	builder.WriteString(", categoryName=")
	builder.WriteString(f.CategoryName)
	builder.WriteString(", varietyId=")
	builder.WriteString(fmt.Sprintf("%v", f.VarietyId))
	builder.WriteString(", varietyName=")
	builder.WriteString(f.VarietyName)
	builder.WriteString(", districtCode=")
	builder.WriteString(f.DistrictCode)
	builder.WriteString(", districtName=")
	builder.WriteString(f.DistrictName)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", f.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(f.TenantName)
	builder.WriteString(", remarks=")
	builder.WriteString(f.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", f.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", f.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", f.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Farms is a parsable slice of Farm.
type Farms []*Farm

func (f Farms) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}

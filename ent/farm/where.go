// Code generated by entc, DO NOT EDIT.

package farm

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// ConstructionDate applies equality check predicate on the "constructionDate" field. It's identical to ConstructionDateEQ.
func ConstructionDate(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConstructionDate), v))
	})
}

// FeedingScale applies equality check predicate on the "feedingScale" field. It's identical to FeedingScaleEQ.
func FeedingScale(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedingScale), v))
	})
}

// ContactUser applies equality check predicate on the "contactUser" field. It's identical to ContactUserEQ.
func ContactUser(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactUser), v))
	})
}

// ContactPhone applies equality check predicate on the "contactPhone" field. It's identical to ContactPhoneEQ.
func ContactPhone(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactPhone), v))
	})
}

// ContactAddress applies equality check predicate on the "contactAddress" field. It's identical to ContactAddressEQ.
func ContactAddress(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactAddress), v))
	})
}

// Square applies equality check predicate on the "square" field. It's identical to SquareEQ.
func Square(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSquare), v))
	})
}

// ShedCount applies equality check predicate on the "shedCount" field. It's identical to ShedCountEQ.
func ShedCount(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedCount), v))
	})
}

// CategoryId applies equality check predicate on the "categoryId" field. It's identical to CategoryIdEQ.
func CategoryId(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryId), v))
	})
}

// CategoryName applies equality check predicate on the "categoryName" field. It's identical to CategoryNameEQ.
func CategoryName(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryName), v))
	})
}

// VarietyId applies equality check predicate on the "varietyId" field. It's identical to VarietyIdEQ.
func VarietyId(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVarietyId), v))
	})
}

// VarietyName applies equality check predicate on the "varietyName" field. It's identical to VarietyNameEQ.
func VarietyName(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVarietyName), v))
	})
}

// DistrictCode applies equality check predicate on the "districtCode" field. It's identical to DistrictCodeEQ.
func DistrictCode(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictCode), v))
	})
}

// DistrictName applies equality check predicate on the "districtName" field. It's identical to DistrictNameEQ.
func DistrictName(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// ConstructionDateEQ applies the EQ predicate on the "constructionDate" field.
func ConstructionDateEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateNEQ applies the NEQ predicate on the "constructionDate" field.
func ConstructionDateNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateIn applies the In predicate on the "constructionDate" field.
func ConstructionDateIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConstructionDate), v...))
	})
}

// ConstructionDateNotIn applies the NotIn predicate on the "constructionDate" field.
func ConstructionDateNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConstructionDate), v...))
	})
}

// ConstructionDateGT applies the GT predicate on the "constructionDate" field.
func ConstructionDateGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateGTE applies the GTE predicate on the "constructionDate" field.
func ConstructionDateGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateLT applies the LT predicate on the "constructionDate" field.
func ConstructionDateLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateLTE applies the LTE predicate on the "constructionDate" field.
func ConstructionDateLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateContains applies the Contains predicate on the "constructionDate" field.
func ConstructionDateContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateHasPrefix applies the HasPrefix predicate on the "constructionDate" field.
func ConstructionDateHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateHasSuffix applies the HasSuffix predicate on the "constructionDate" field.
func ConstructionDateHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateEqualFold applies the EqualFold predicate on the "constructionDate" field.
func ConstructionDateEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConstructionDate), v))
	})
}

// ConstructionDateContainsFold applies the ContainsFold predicate on the "constructionDate" field.
func ConstructionDateContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConstructionDate), v))
	})
}

// FeedingScaleEQ applies the EQ predicate on the "feedingScale" field.
func FeedingScaleEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedingScale), v))
	})
}

// FeedingScaleNEQ applies the NEQ predicate on the "feedingScale" field.
func FeedingScaleNEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedingScale), v))
	})
}

// FeedingScaleIn applies the In predicate on the "feedingScale" field.
func FeedingScaleIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeedingScale), v...))
	})
}

// FeedingScaleNotIn applies the NotIn predicate on the "feedingScale" field.
func FeedingScaleNotIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeedingScale), v...))
	})
}

// FeedingScaleGT applies the GT predicate on the "feedingScale" field.
func FeedingScaleGT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedingScale), v))
	})
}

// FeedingScaleGTE applies the GTE predicate on the "feedingScale" field.
func FeedingScaleGTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedingScale), v))
	})
}

// FeedingScaleLT applies the LT predicate on the "feedingScale" field.
func FeedingScaleLT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedingScale), v))
	})
}

// FeedingScaleLTE applies the LTE predicate on the "feedingScale" field.
func FeedingScaleLTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedingScale), v))
	})
}

// ContactUserEQ applies the EQ predicate on the "contactUser" field.
func ContactUserEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactUser), v))
	})
}

// ContactUserNEQ applies the NEQ predicate on the "contactUser" field.
func ContactUserNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactUser), v))
	})
}

// ContactUserIn applies the In predicate on the "contactUser" field.
func ContactUserIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContactUser), v...))
	})
}

// ContactUserNotIn applies the NotIn predicate on the "contactUser" field.
func ContactUserNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContactUser), v...))
	})
}

// ContactUserGT applies the GT predicate on the "contactUser" field.
func ContactUserGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactUser), v))
	})
}

// ContactUserGTE applies the GTE predicate on the "contactUser" field.
func ContactUserGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactUser), v))
	})
}

// ContactUserLT applies the LT predicate on the "contactUser" field.
func ContactUserLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactUser), v))
	})
}

// ContactUserLTE applies the LTE predicate on the "contactUser" field.
func ContactUserLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactUser), v))
	})
}

// ContactUserContains applies the Contains predicate on the "contactUser" field.
func ContactUserContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactUser), v))
	})
}

// ContactUserHasPrefix applies the HasPrefix predicate on the "contactUser" field.
func ContactUserHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactUser), v))
	})
}

// ContactUserHasSuffix applies the HasSuffix predicate on the "contactUser" field.
func ContactUserHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactUser), v))
	})
}

// ContactUserEqualFold applies the EqualFold predicate on the "contactUser" field.
func ContactUserEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactUser), v))
	})
}

// ContactUserContainsFold applies the ContainsFold predicate on the "contactUser" field.
func ContactUserContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactUser), v))
	})
}

// ContactPhoneEQ applies the EQ predicate on the "contactPhone" field.
func ContactPhoneEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneNEQ applies the NEQ predicate on the "contactPhone" field.
func ContactPhoneNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneIn applies the In predicate on the "contactPhone" field.
func ContactPhoneIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContactPhone), v...))
	})
}

// ContactPhoneNotIn applies the NotIn predicate on the "contactPhone" field.
func ContactPhoneNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContactPhone), v...))
	})
}

// ContactPhoneGT applies the GT predicate on the "contactPhone" field.
func ContactPhoneGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneGTE applies the GTE predicate on the "contactPhone" field.
func ContactPhoneGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneLT applies the LT predicate on the "contactPhone" field.
func ContactPhoneLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneLTE applies the LTE predicate on the "contactPhone" field.
func ContactPhoneLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneContains applies the Contains predicate on the "contactPhone" field.
func ContactPhoneContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneHasPrefix applies the HasPrefix predicate on the "contactPhone" field.
func ContactPhoneHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneHasSuffix applies the HasSuffix predicate on the "contactPhone" field.
func ContactPhoneHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneEqualFold applies the EqualFold predicate on the "contactPhone" field.
func ContactPhoneEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneContainsFold applies the ContainsFold predicate on the "contactPhone" field.
func ContactPhoneContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactPhone), v))
	})
}

// ContactAddressEQ applies the EQ predicate on the "contactAddress" field.
func ContactAddressEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactAddress), v))
	})
}

// ContactAddressNEQ applies the NEQ predicate on the "contactAddress" field.
func ContactAddressNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactAddress), v))
	})
}

// ContactAddressIn applies the In predicate on the "contactAddress" field.
func ContactAddressIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContactAddress), v...))
	})
}

// ContactAddressNotIn applies the NotIn predicate on the "contactAddress" field.
func ContactAddressNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContactAddress), v...))
	})
}

// ContactAddressGT applies the GT predicate on the "contactAddress" field.
func ContactAddressGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactAddress), v))
	})
}

// ContactAddressGTE applies the GTE predicate on the "contactAddress" field.
func ContactAddressGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactAddress), v))
	})
}

// ContactAddressLT applies the LT predicate on the "contactAddress" field.
func ContactAddressLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactAddress), v))
	})
}

// ContactAddressLTE applies the LTE predicate on the "contactAddress" field.
func ContactAddressLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactAddress), v))
	})
}

// ContactAddressContains applies the Contains predicate on the "contactAddress" field.
func ContactAddressContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactAddress), v))
	})
}

// ContactAddressHasPrefix applies the HasPrefix predicate on the "contactAddress" field.
func ContactAddressHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactAddress), v))
	})
}

// ContactAddressHasSuffix applies the HasSuffix predicate on the "contactAddress" field.
func ContactAddressHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactAddress), v))
	})
}

// ContactAddressEqualFold applies the EqualFold predicate on the "contactAddress" field.
func ContactAddressEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactAddress), v))
	})
}

// ContactAddressContainsFold applies the ContainsFold predicate on the "contactAddress" field.
func ContactAddressContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactAddress), v))
	})
}

// SquareEQ applies the EQ predicate on the "square" field.
func SquareEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSquare), v))
	})
}

// SquareNEQ applies the NEQ predicate on the "square" field.
func SquareNEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSquare), v))
	})
}

// SquareIn applies the In predicate on the "square" field.
func SquareIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSquare), v...))
	})
}

// SquareNotIn applies the NotIn predicate on the "square" field.
func SquareNotIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSquare), v...))
	})
}

// SquareGT applies the GT predicate on the "square" field.
func SquareGT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSquare), v))
	})
}

// SquareGTE applies the GTE predicate on the "square" field.
func SquareGTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSquare), v))
	})
}

// SquareLT applies the LT predicate on the "square" field.
func SquareLT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSquare), v))
	})
}

// SquareLTE applies the LTE predicate on the "square" field.
func SquareLTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSquare), v))
	})
}

// ShedCountEQ applies the EQ predicate on the "shedCount" field.
func ShedCountEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedCount), v))
	})
}

// ShedCountNEQ applies the NEQ predicate on the "shedCount" field.
func ShedCountNEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedCount), v))
	})
}

// ShedCountIn applies the In predicate on the "shedCount" field.
func ShedCountIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShedCount), v...))
	})
}

// ShedCountNotIn applies the NotIn predicate on the "shedCount" field.
func ShedCountNotIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShedCount), v...))
	})
}

// ShedCountGT applies the GT predicate on the "shedCount" field.
func ShedCountGT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedCount), v))
	})
}

// ShedCountGTE applies the GTE predicate on the "shedCount" field.
func ShedCountGTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedCount), v))
	})
}

// ShedCountLT applies the LT predicate on the "shedCount" field.
func ShedCountLT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedCount), v))
	})
}

// ShedCountLTE applies the LTE predicate on the "shedCount" field.
func ShedCountLTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedCount), v))
	})
}

// CategoryIdEQ applies the EQ predicate on the "categoryId" field.
func CategoryIdEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryId), v))
	})
}

// CategoryIdNEQ applies the NEQ predicate on the "categoryId" field.
func CategoryIdNEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryId), v))
	})
}

// CategoryIdIn applies the In predicate on the "categoryId" field.
func CategoryIdIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCategoryId), v...))
	})
}

// CategoryIdNotIn applies the NotIn predicate on the "categoryId" field.
func CategoryIdNotIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCategoryId), v...))
	})
}

// CategoryIdGT applies the GT predicate on the "categoryId" field.
func CategoryIdGT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryId), v))
	})
}

// CategoryIdGTE applies the GTE predicate on the "categoryId" field.
func CategoryIdGTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryId), v))
	})
}

// CategoryIdLT applies the LT predicate on the "categoryId" field.
func CategoryIdLT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryId), v))
	})
}

// CategoryIdLTE applies the LTE predicate on the "categoryId" field.
func CategoryIdLTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryId), v))
	})
}

// CategoryNameEQ applies the EQ predicate on the "categoryName" field.
func CategoryNameEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryName), v))
	})
}

// CategoryNameNEQ applies the NEQ predicate on the "categoryName" field.
func CategoryNameNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryName), v))
	})
}

// CategoryNameIn applies the In predicate on the "categoryName" field.
func CategoryNameIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCategoryName), v...))
	})
}

// CategoryNameNotIn applies the NotIn predicate on the "categoryName" field.
func CategoryNameNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCategoryName), v...))
	})
}

// CategoryNameGT applies the GT predicate on the "categoryName" field.
func CategoryNameGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryName), v))
	})
}

// CategoryNameGTE applies the GTE predicate on the "categoryName" field.
func CategoryNameGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryName), v))
	})
}

// CategoryNameLT applies the LT predicate on the "categoryName" field.
func CategoryNameLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryName), v))
	})
}

// CategoryNameLTE applies the LTE predicate on the "categoryName" field.
func CategoryNameLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryName), v))
	})
}

// CategoryNameContains applies the Contains predicate on the "categoryName" field.
func CategoryNameContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCategoryName), v))
	})
}

// CategoryNameHasPrefix applies the HasPrefix predicate on the "categoryName" field.
func CategoryNameHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCategoryName), v))
	})
}

// CategoryNameHasSuffix applies the HasSuffix predicate on the "categoryName" field.
func CategoryNameHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCategoryName), v))
	})
}

// CategoryNameEqualFold applies the EqualFold predicate on the "categoryName" field.
func CategoryNameEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCategoryName), v))
	})
}

// CategoryNameContainsFold applies the ContainsFold predicate on the "categoryName" field.
func CategoryNameContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCategoryName), v))
	})
}

// VarietyIdEQ applies the EQ predicate on the "varietyId" field.
func VarietyIdEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVarietyId), v))
	})
}

// VarietyIdNEQ applies the NEQ predicate on the "varietyId" field.
func VarietyIdNEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVarietyId), v))
	})
}

// VarietyIdIn applies the In predicate on the "varietyId" field.
func VarietyIdIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVarietyId), v...))
	})
}

// VarietyIdNotIn applies the NotIn predicate on the "varietyId" field.
func VarietyIdNotIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVarietyId), v...))
	})
}

// VarietyIdGT applies the GT predicate on the "varietyId" field.
func VarietyIdGT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVarietyId), v))
	})
}

// VarietyIdGTE applies the GTE predicate on the "varietyId" field.
func VarietyIdGTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVarietyId), v))
	})
}

// VarietyIdLT applies the LT predicate on the "varietyId" field.
func VarietyIdLT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVarietyId), v))
	})
}

// VarietyIdLTE applies the LTE predicate on the "varietyId" field.
func VarietyIdLTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVarietyId), v))
	})
}

// VarietyNameEQ applies the EQ predicate on the "varietyName" field.
func VarietyNameEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVarietyName), v))
	})
}

// VarietyNameNEQ applies the NEQ predicate on the "varietyName" field.
func VarietyNameNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVarietyName), v))
	})
}

// VarietyNameIn applies the In predicate on the "varietyName" field.
func VarietyNameIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVarietyName), v...))
	})
}

// VarietyNameNotIn applies the NotIn predicate on the "varietyName" field.
func VarietyNameNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVarietyName), v...))
	})
}

// VarietyNameGT applies the GT predicate on the "varietyName" field.
func VarietyNameGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVarietyName), v))
	})
}

// VarietyNameGTE applies the GTE predicate on the "varietyName" field.
func VarietyNameGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVarietyName), v))
	})
}

// VarietyNameLT applies the LT predicate on the "varietyName" field.
func VarietyNameLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVarietyName), v))
	})
}

// VarietyNameLTE applies the LTE predicate on the "varietyName" field.
func VarietyNameLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVarietyName), v))
	})
}

// VarietyNameContains applies the Contains predicate on the "varietyName" field.
func VarietyNameContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVarietyName), v))
	})
}

// VarietyNameHasPrefix applies the HasPrefix predicate on the "varietyName" field.
func VarietyNameHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVarietyName), v))
	})
}

// VarietyNameHasSuffix applies the HasSuffix predicate on the "varietyName" field.
func VarietyNameHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVarietyName), v))
	})
}

// VarietyNameEqualFold applies the EqualFold predicate on the "varietyName" field.
func VarietyNameEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVarietyName), v))
	})
}

// VarietyNameContainsFold applies the ContainsFold predicate on the "varietyName" field.
func VarietyNameContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVarietyName), v))
	})
}

// DistrictCodeEQ applies the EQ predicate on the "districtCode" field.
func DistrictCodeEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeNEQ applies the NEQ predicate on the "districtCode" field.
func DistrictCodeNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeIn applies the In predicate on the "districtCode" field.
func DistrictCodeIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrictCode), v...))
	})
}

// DistrictCodeNotIn applies the NotIn predicate on the "districtCode" field.
func DistrictCodeNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrictCode), v...))
	})
}

// DistrictCodeGT applies the GT predicate on the "districtCode" field.
func DistrictCodeGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeGTE applies the GTE predicate on the "districtCode" field.
func DistrictCodeGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeLT applies the LT predicate on the "districtCode" field.
func DistrictCodeLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeLTE applies the LTE predicate on the "districtCode" field.
func DistrictCodeLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeContains applies the Contains predicate on the "districtCode" field.
func DistrictCodeContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeHasPrefix applies the HasPrefix predicate on the "districtCode" field.
func DistrictCodeHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeHasSuffix applies the HasSuffix predicate on the "districtCode" field.
func DistrictCodeHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeEqualFold applies the EqualFold predicate on the "districtCode" field.
func DistrictCodeEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrictCode), v))
	})
}

// DistrictCodeContainsFold applies the ContainsFold predicate on the "districtCode" field.
func DistrictCodeContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrictCode), v))
	})
}

// DistrictNameEQ applies the EQ predicate on the "districtName" field.
func DistrictNameEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictName), v))
	})
}

// DistrictNameNEQ applies the NEQ predicate on the "districtName" field.
func DistrictNameNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrictName), v))
	})
}

// DistrictNameIn applies the In predicate on the "districtName" field.
func DistrictNameIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrictName), v...))
	})
}

// DistrictNameNotIn applies the NotIn predicate on the "districtName" field.
func DistrictNameNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrictName), v...))
	})
}

// DistrictNameGT applies the GT predicate on the "districtName" field.
func DistrictNameGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrictName), v))
	})
}

// DistrictNameGTE applies the GTE predicate on the "districtName" field.
func DistrictNameGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrictName), v))
	})
}

// DistrictNameLT applies the LT predicate on the "districtName" field.
func DistrictNameLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrictName), v))
	})
}

// DistrictNameLTE applies the LTE predicate on the "districtName" field.
func DistrictNameLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrictName), v))
	})
}

// DistrictNameContains applies the Contains predicate on the "districtName" field.
func DistrictNameContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrictName), v))
	})
}

// DistrictNameHasPrefix applies the HasPrefix predicate on the "districtName" field.
func DistrictNameHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrictName), v))
	})
}

// DistrictNameHasSuffix applies the HasSuffix predicate on the "districtName" field.
func DistrictNameHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrictName), v))
	})
}

// DistrictNameEqualFold applies the EqualFold predicate on the "districtName" field.
func DistrictNameEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrictName), v))
	})
}

// DistrictNameContainsFold applies the ContainsFold predicate on the "districtName" field.
func DistrictNameContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrictName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.Farm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Farm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Farm) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Farm) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Farm) predicate.Farm {
	return predicate.Farm(func(s *sql.Selector) {
		p(s.Not())
	})
}

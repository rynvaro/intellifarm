// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/farm"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// FarmCreate is the builder for creating a Farm entity.
type FarmCreate struct {
	config
	mutation *FarmMutation
	hooks    []Hook
}

// SetName sets the name field.
func (fc *FarmCreate) SetName(s string) *FarmCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetCode sets the code field.
func (fc *FarmCreate) SetCode(s string) *FarmCreate {
	fc.mutation.SetCode(s)
	return fc
}

// SetConstructionDate sets the constructionDate field.
func (fc *FarmCreate) SetConstructionDate(s string) *FarmCreate {
	fc.mutation.SetConstructionDate(s)
	return fc
}

// SetFeedingScale sets the feedingScale field.
func (fc *FarmCreate) SetFeedingScale(i int64) *FarmCreate {
	fc.mutation.SetFeedingScale(i)
	return fc
}

// SetContactUser sets the contactUser field.
func (fc *FarmCreate) SetContactUser(s string) *FarmCreate {
	fc.mutation.SetContactUser(s)
	return fc
}

// SetContactPhone sets the contactPhone field.
func (fc *FarmCreate) SetContactPhone(s string) *FarmCreate {
	fc.mutation.SetContactPhone(s)
	return fc
}

// SetContactAddress sets the contactAddress field.
func (fc *FarmCreate) SetContactAddress(s string) *FarmCreate {
	fc.mutation.SetContactAddress(s)
	return fc
}

// SetSquare sets the square field.
func (fc *FarmCreate) SetSquare(i int64) *FarmCreate {
	fc.mutation.SetSquare(i)
	return fc
}

// SetShedCount sets the shedCount field.
func (fc *FarmCreate) SetShedCount(i int64) *FarmCreate {
	fc.mutation.SetShedCount(i)
	return fc
}

// SetCategoryId sets the categoryId field.
func (fc *FarmCreate) SetCategoryId(i int64) *FarmCreate {
	fc.mutation.SetCategoryId(i)
	return fc
}

// SetCategoryName sets the categoryName field.
func (fc *FarmCreate) SetCategoryName(s string) *FarmCreate {
	fc.mutation.SetCategoryName(s)
	return fc
}

// SetVarietyId sets the varietyId field.
func (fc *FarmCreate) SetVarietyId(i int64) *FarmCreate {
	fc.mutation.SetVarietyId(i)
	return fc
}

// SetVarietyName sets the varietyName field.
func (fc *FarmCreate) SetVarietyName(s string) *FarmCreate {
	fc.mutation.SetVarietyName(s)
	return fc
}

// SetDistrictCode sets the districtCode field.
func (fc *FarmCreate) SetDistrictCode(s string) *FarmCreate {
	fc.mutation.SetDistrictCode(s)
	return fc
}

// SetDistrictName sets the districtName field.
func (fc *FarmCreate) SetDistrictName(s string) *FarmCreate {
	fc.mutation.SetDistrictName(s)
	return fc
}

// SetRemarks sets the remarks field.
func (fc *FarmCreate) SetRemarks(s string) *FarmCreate {
	fc.mutation.SetRemarks(s)
	return fc
}

// SetCreatedAt sets the createdAt field.
func (fc *FarmCreate) SetCreatedAt(i int64) *FarmCreate {
	fc.mutation.SetCreatedAt(i)
	return fc
}

// SetUpdatedAt sets the updatedAt field.
func (fc *FarmCreate) SetUpdatedAt(i int64) *FarmCreate {
	fc.mutation.SetUpdatedAt(i)
	return fc
}

// SetDeleted sets the deleted field.
func (fc *FarmCreate) SetDeleted(i int) *FarmCreate {
	fc.mutation.SetDeleted(i)
	return fc
}

// SetNillableDeleted sets the deleted field if the given value is not nil.
func (fc *FarmCreate) SetNillableDeleted(i *int) *FarmCreate {
	if i != nil {
		fc.SetDeleted(*i)
	}
	return fc
}

// Mutation returns the FarmMutation object of the builder.
func (fc *FarmCreate) Mutation() *FarmMutation {
	return fc.mutation
}

// Save creates the Farm in the database.
func (fc *FarmCreate) Save(ctx context.Context) (*Farm, error) {
	var (
		err  error
		node *Farm
	)
	fc.defaults()
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FarmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			node, err = fc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FarmCreate) SaveX(ctx context.Context) *Farm {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (fc *FarmCreate) defaults() {
	if _, ok := fc.mutation.Deleted(); !ok {
		v := farm.DefaultDeleted
		fc.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FarmCreate) check() error {
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := fc.mutation.Name(); ok {
		if err := farm.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := fc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if v, ok := fc.mutation.Code(); ok {
		if err := farm.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if _, ok := fc.mutation.ConstructionDate(); !ok {
		return &ValidationError{Name: "constructionDate", err: errors.New("ent: missing required field \"constructionDate\"")}
	}
	if _, ok := fc.mutation.FeedingScale(); !ok {
		return &ValidationError{Name: "feedingScale", err: errors.New("ent: missing required field \"feedingScale\"")}
	}
	if _, ok := fc.mutation.ContactUser(); !ok {
		return &ValidationError{Name: "contactUser", err: errors.New("ent: missing required field \"contactUser\"")}
	}
	if _, ok := fc.mutation.ContactPhone(); !ok {
		return &ValidationError{Name: "contactPhone", err: errors.New("ent: missing required field \"contactPhone\"")}
	}
	if _, ok := fc.mutation.ContactAddress(); !ok {
		return &ValidationError{Name: "contactAddress", err: errors.New("ent: missing required field \"contactAddress\"")}
	}
	if _, ok := fc.mutation.Square(); !ok {
		return &ValidationError{Name: "square", err: errors.New("ent: missing required field \"square\"")}
	}
	if _, ok := fc.mutation.ShedCount(); !ok {
		return &ValidationError{Name: "shedCount", err: errors.New("ent: missing required field \"shedCount\"")}
	}
	if _, ok := fc.mutation.CategoryId(); !ok {
		return &ValidationError{Name: "categoryId", err: errors.New("ent: missing required field \"categoryId\"")}
	}
	if _, ok := fc.mutation.CategoryName(); !ok {
		return &ValidationError{Name: "categoryName", err: errors.New("ent: missing required field \"categoryName\"")}
	}
	if _, ok := fc.mutation.VarietyId(); !ok {
		return &ValidationError{Name: "varietyId", err: errors.New("ent: missing required field \"varietyId\"")}
	}
	if _, ok := fc.mutation.VarietyName(); !ok {
		return &ValidationError{Name: "varietyName", err: errors.New("ent: missing required field \"varietyName\"")}
	}
	if _, ok := fc.mutation.DistrictCode(); !ok {
		return &ValidationError{Name: "districtCode", err: errors.New("ent: missing required field \"districtCode\"")}
	}
	if _, ok := fc.mutation.DistrictName(); !ok {
		return &ValidationError{Name: "districtName", err: errors.New("ent: missing required field \"districtName\"")}
	}
	if _, ok := fc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := fc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (fc *FarmCreate) sqlSave(ctx context.Context) (*Farm, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (fc *FarmCreate) createSpec() (*Farm, *sqlgraph.CreateSpec) {
	var (
		_node = &Farm{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: farm.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: farm.FieldID,
			},
		}
	)
	if value, ok := fc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldName,
		})
		_node.Name = value
	}
	if value, ok := fc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := fc.mutation.ConstructionDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldConstructionDate,
		})
		_node.ConstructionDate = value
	}
	if value, ok := fc.mutation.FeedingScale(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldFeedingScale,
		})
		_node.FeedingScale = value
	}
	if value, ok := fc.mutation.ContactUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldContactUser,
		})
		_node.ContactUser = value
	}
	if value, ok := fc.mutation.ContactPhone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldContactPhone,
		})
		_node.ContactPhone = value
	}
	if value, ok := fc.mutation.ContactAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldContactAddress,
		})
		_node.ContactAddress = value
	}
	if value, ok := fc.mutation.Square(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldSquare,
		})
		_node.Square = value
	}
	if value, ok := fc.mutation.ShedCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldShedCount,
		})
		_node.ShedCount = value
	}
	if value, ok := fc.mutation.CategoryId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCategoryId,
		})
		_node.CategoryId = value
	}
	if value, ok := fc.mutation.CategoryName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldCategoryName,
		})
		_node.CategoryName = value
	}
	if value, ok := fc.mutation.VarietyId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldVarietyId,
		})
		_node.VarietyId = value
	}
	if value, ok := fc.mutation.VarietyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldVarietyName,
		})
		_node.VarietyName = value
	}
	if value, ok := fc.mutation.DistrictCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldDistrictCode,
		})
		_node.DistrictCode = value
	}
	if value, ok := fc.mutation.DistrictName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldDistrictName,
		})
		_node.DistrictName = value
	}
	if value, ok := fc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: farm.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// FarmCreateBulk is the builder for creating a bulk of Farm entities.
type FarmCreateBulk struct {
	config
	builders []*FarmCreate
}

// Save creates the Farm entities in the database.
func (fcb *FarmCreateBulk) Save(ctx context.Context) ([]*Farm, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Farm, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FarmMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (fcb *FarmCreateBulk) SaveX(ctx context.Context) []*Farm {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

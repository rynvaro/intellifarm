// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/farm"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FarmUpdate is the builder for updating Farm entities.
type FarmUpdate struct {
	config
	hooks    []Hook
	mutation *FarmMutation
}

// Where appends a list predicates to the FarmUpdate builder.
func (fu *FarmUpdate) Where(ps ...predicate.Farm) *FarmUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FarmUpdate) SetName(s string) *FarmUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetCode sets the "code" field.
func (fu *FarmUpdate) SetCode(s string) *FarmUpdate {
	fu.mutation.SetCode(s)
	return fu
}

// SetConstructionDate sets the "constructionDate" field.
func (fu *FarmUpdate) SetConstructionDate(s string) *FarmUpdate {
	fu.mutation.SetConstructionDate(s)
	return fu
}

// SetFeedingScale sets the "feedingScale" field.
func (fu *FarmUpdate) SetFeedingScale(i int64) *FarmUpdate {
	fu.mutation.ResetFeedingScale()
	fu.mutation.SetFeedingScale(i)
	return fu
}

// AddFeedingScale adds i to the "feedingScale" field.
func (fu *FarmUpdate) AddFeedingScale(i int64) *FarmUpdate {
	fu.mutation.AddFeedingScale(i)
	return fu
}

// SetContactUser sets the "contactUser" field.
func (fu *FarmUpdate) SetContactUser(s string) *FarmUpdate {
	fu.mutation.SetContactUser(s)
	return fu
}

// SetContactPhone sets the "contactPhone" field.
func (fu *FarmUpdate) SetContactPhone(s string) *FarmUpdate {
	fu.mutation.SetContactPhone(s)
	return fu
}

// SetContactAddress sets the "contactAddress" field.
func (fu *FarmUpdate) SetContactAddress(s string) *FarmUpdate {
	fu.mutation.SetContactAddress(s)
	return fu
}

// SetSquare sets the "square" field.
func (fu *FarmUpdate) SetSquare(i int64) *FarmUpdate {
	fu.mutation.ResetSquare()
	fu.mutation.SetSquare(i)
	return fu
}

// AddSquare adds i to the "square" field.
func (fu *FarmUpdate) AddSquare(i int64) *FarmUpdate {
	fu.mutation.AddSquare(i)
	return fu
}

// SetShedCount sets the "shedCount" field.
func (fu *FarmUpdate) SetShedCount(i int64) *FarmUpdate {
	fu.mutation.ResetShedCount()
	fu.mutation.SetShedCount(i)
	return fu
}

// AddShedCount adds i to the "shedCount" field.
func (fu *FarmUpdate) AddShedCount(i int64) *FarmUpdate {
	fu.mutation.AddShedCount(i)
	return fu
}

// SetCategoryId sets the "categoryId" field.
func (fu *FarmUpdate) SetCategoryId(i int64) *FarmUpdate {
	fu.mutation.ResetCategoryId()
	fu.mutation.SetCategoryId(i)
	return fu
}

// AddCategoryId adds i to the "categoryId" field.
func (fu *FarmUpdate) AddCategoryId(i int64) *FarmUpdate {
	fu.mutation.AddCategoryId(i)
	return fu
}

// SetCategoryName sets the "categoryName" field.
func (fu *FarmUpdate) SetCategoryName(s string) *FarmUpdate {
	fu.mutation.SetCategoryName(s)
	return fu
}

// SetVarietyId sets the "varietyId" field.
func (fu *FarmUpdate) SetVarietyId(i int64) *FarmUpdate {
	fu.mutation.ResetVarietyId()
	fu.mutation.SetVarietyId(i)
	return fu
}

// AddVarietyId adds i to the "varietyId" field.
func (fu *FarmUpdate) AddVarietyId(i int64) *FarmUpdate {
	fu.mutation.AddVarietyId(i)
	return fu
}

// SetVarietyName sets the "varietyName" field.
func (fu *FarmUpdate) SetVarietyName(s string) *FarmUpdate {
	fu.mutation.SetVarietyName(s)
	return fu
}

// SetDistrictCode sets the "districtCode" field.
func (fu *FarmUpdate) SetDistrictCode(s string) *FarmUpdate {
	fu.mutation.SetDistrictCode(s)
	return fu
}

// SetDistrictName sets the "districtName" field.
func (fu *FarmUpdate) SetDistrictName(s string) *FarmUpdate {
	fu.mutation.SetDistrictName(s)
	return fu
}

// SetTenantId sets the "tenantId" field.
func (fu *FarmUpdate) SetTenantId(i int64) *FarmUpdate {
	fu.mutation.ResetTenantId()
	fu.mutation.SetTenantId(i)
	return fu
}

// AddTenantId adds i to the "tenantId" field.
func (fu *FarmUpdate) AddTenantId(i int64) *FarmUpdate {
	fu.mutation.AddTenantId(i)
	return fu
}

// SetTenantName sets the "tenantName" field.
func (fu *FarmUpdate) SetTenantName(s string) *FarmUpdate {
	fu.mutation.SetTenantName(s)
	return fu
}

// SetRemarks sets the "remarks" field.
func (fu *FarmUpdate) SetRemarks(s string) *FarmUpdate {
	fu.mutation.SetRemarks(s)
	return fu
}

// SetCreatedAt sets the "createdAt" field.
func (fu *FarmUpdate) SetCreatedAt(i int64) *FarmUpdate {
	fu.mutation.ResetCreatedAt()
	fu.mutation.SetCreatedAt(i)
	return fu
}

// AddCreatedAt adds i to the "createdAt" field.
func (fu *FarmUpdate) AddCreatedAt(i int64) *FarmUpdate {
	fu.mutation.AddCreatedAt(i)
	return fu
}

// SetUpdatedAt sets the "updatedAt" field.
func (fu *FarmUpdate) SetUpdatedAt(i int64) *FarmUpdate {
	fu.mutation.ResetUpdatedAt()
	fu.mutation.SetUpdatedAt(i)
	return fu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (fu *FarmUpdate) AddUpdatedAt(i int64) *FarmUpdate {
	fu.mutation.AddUpdatedAt(i)
	return fu
}

// SetDeleted sets the "deleted" field.
func (fu *FarmUpdate) SetDeleted(i int) *FarmUpdate {
	fu.mutation.ResetDeleted()
	fu.mutation.SetDeleted(i)
	return fu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (fu *FarmUpdate) SetNillableDeleted(i *int) *FarmUpdate {
	if i != nil {
		fu.SetDeleted(*i)
	}
	return fu
}

// AddDeleted adds i to the "deleted" field.
func (fu *FarmUpdate) AddDeleted(i int) *FarmUpdate {
	fu.mutation.AddDeleted(i)
	return fu
}

// Mutation returns the FarmMutation object of the builder.
func (fu *FarmUpdate) Mutation() *FarmMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FarmUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FarmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FarmUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FarmUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FarmUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FarmUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := farm.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Farm.name": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Code(); ok {
		if err := farm.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Farm.code": %w`, err)}
		}
	}
	return nil
}

func (fu *FarmUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   farm.Table,
			Columns: farm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: farm.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldName,
		})
	}
	if value, ok := fu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldCode,
		})
	}
	if value, ok := fu.mutation.ConstructionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldConstructionDate,
		})
	}
	if value, ok := fu.mutation.FeedingScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldFeedingScale,
		})
	}
	if value, ok := fu.mutation.AddedFeedingScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldFeedingScale,
		})
	}
	if value, ok := fu.mutation.ContactUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldContactUser,
		})
	}
	if value, ok := fu.mutation.ContactPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldContactPhone,
		})
	}
	if value, ok := fu.mutation.ContactAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldContactAddress,
		})
	}
	if value, ok := fu.mutation.Square(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldSquare,
		})
	}
	if value, ok := fu.mutation.AddedSquare(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldSquare,
		})
	}
	if value, ok := fu.mutation.ShedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldShedCount,
		})
	}
	if value, ok := fu.mutation.AddedShedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldShedCount,
		})
	}
	if value, ok := fu.mutation.CategoryId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCategoryId,
		})
	}
	if value, ok := fu.mutation.AddedCategoryId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCategoryId,
		})
	}
	if value, ok := fu.mutation.CategoryName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldCategoryName,
		})
	}
	if value, ok := fu.mutation.VarietyId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldVarietyId,
		})
	}
	if value, ok := fu.mutation.AddedVarietyId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldVarietyId,
		})
	}
	if value, ok := fu.mutation.VarietyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldVarietyName,
		})
	}
	if value, ok := fu.mutation.DistrictCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldDistrictCode,
		})
	}
	if value, ok := fu.mutation.DistrictName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldDistrictName,
		})
	}
	if value, ok := fu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldTenantId,
		})
	}
	if value, ok := fu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldTenantId,
		})
	}
	if value, ok := fu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldTenantName,
		})
	}
	if value, ok := fu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldRemarks,
		})
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCreatedAt,
		})
	}
	if value, ok := fu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCreatedAt,
		})
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldUpdatedAt,
		})
	}
	if value, ok := fu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldUpdatedAt,
		})
	}
	if value, ok := fu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: farm.FieldDeleted,
		})
	}
	if value, ok := fu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: farm.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{farm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FarmUpdateOne is the builder for updating a single Farm entity.
type FarmUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FarmMutation
}

// SetName sets the "name" field.
func (fuo *FarmUpdateOne) SetName(s string) *FarmUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetCode sets the "code" field.
func (fuo *FarmUpdateOne) SetCode(s string) *FarmUpdateOne {
	fuo.mutation.SetCode(s)
	return fuo
}

// SetConstructionDate sets the "constructionDate" field.
func (fuo *FarmUpdateOne) SetConstructionDate(s string) *FarmUpdateOne {
	fuo.mutation.SetConstructionDate(s)
	return fuo
}

// SetFeedingScale sets the "feedingScale" field.
func (fuo *FarmUpdateOne) SetFeedingScale(i int64) *FarmUpdateOne {
	fuo.mutation.ResetFeedingScale()
	fuo.mutation.SetFeedingScale(i)
	return fuo
}

// AddFeedingScale adds i to the "feedingScale" field.
func (fuo *FarmUpdateOne) AddFeedingScale(i int64) *FarmUpdateOne {
	fuo.mutation.AddFeedingScale(i)
	return fuo
}

// SetContactUser sets the "contactUser" field.
func (fuo *FarmUpdateOne) SetContactUser(s string) *FarmUpdateOne {
	fuo.mutation.SetContactUser(s)
	return fuo
}

// SetContactPhone sets the "contactPhone" field.
func (fuo *FarmUpdateOne) SetContactPhone(s string) *FarmUpdateOne {
	fuo.mutation.SetContactPhone(s)
	return fuo
}

// SetContactAddress sets the "contactAddress" field.
func (fuo *FarmUpdateOne) SetContactAddress(s string) *FarmUpdateOne {
	fuo.mutation.SetContactAddress(s)
	return fuo
}

// SetSquare sets the "square" field.
func (fuo *FarmUpdateOne) SetSquare(i int64) *FarmUpdateOne {
	fuo.mutation.ResetSquare()
	fuo.mutation.SetSquare(i)
	return fuo
}

// AddSquare adds i to the "square" field.
func (fuo *FarmUpdateOne) AddSquare(i int64) *FarmUpdateOne {
	fuo.mutation.AddSquare(i)
	return fuo
}

// SetShedCount sets the "shedCount" field.
func (fuo *FarmUpdateOne) SetShedCount(i int64) *FarmUpdateOne {
	fuo.mutation.ResetShedCount()
	fuo.mutation.SetShedCount(i)
	return fuo
}

// AddShedCount adds i to the "shedCount" field.
func (fuo *FarmUpdateOne) AddShedCount(i int64) *FarmUpdateOne {
	fuo.mutation.AddShedCount(i)
	return fuo
}

// SetCategoryId sets the "categoryId" field.
func (fuo *FarmUpdateOne) SetCategoryId(i int64) *FarmUpdateOne {
	fuo.mutation.ResetCategoryId()
	fuo.mutation.SetCategoryId(i)
	return fuo
}

// AddCategoryId adds i to the "categoryId" field.
func (fuo *FarmUpdateOne) AddCategoryId(i int64) *FarmUpdateOne {
	fuo.mutation.AddCategoryId(i)
	return fuo
}

// SetCategoryName sets the "categoryName" field.
func (fuo *FarmUpdateOne) SetCategoryName(s string) *FarmUpdateOne {
	fuo.mutation.SetCategoryName(s)
	return fuo
}

// SetVarietyId sets the "varietyId" field.
func (fuo *FarmUpdateOne) SetVarietyId(i int64) *FarmUpdateOne {
	fuo.mutation.ResetVarietyId()
	fuo.mutation.SetVarietyId(i)
	return fuo
}

// AddVarietyId adds i to the "varietyId" field.
func (fuo *FarmUpdateOne) AddVarietyId(i int64) *FarmUpdateOne {
	fuo.mutation.AddVarietyId(i)
	return fuo
}

// SetVarietyName sets the "varietyName" field.
func (fuo *FarmUpdateOne) SetVarietyName(s string) *FarmUpdateOne {
	fuo.mutation.SetVarietyName(s)
	return fuo
}

// SetDistrictCode sets the "districtCode" field.
func (fuo *FarmUpdateOne) SetDistrictCode(s string) *FarmUpdateOne {
	fuo.mutation.SetDistrictCode(s)
	return fuo
}

// SetDistrictName sets the "districtName" field.
func (fuo *FarmUpdateOne) SetDistrictName(s string) *FarmUpdateOne {
	fuo.mutation.SetDistrictName(s)
	return fuo
}

// SetTenantId sets the "tenantId" field.
func (fuo *FarmUpdateOne) SetTenantId(i int64) *FarmUpdateOne {
	fuo.mutation.ResetTenantId()
	fuo.mutation.SetTenantId(i)
	return fuo
}

// AddTenantId adds i to the "tenantId" field.
func (fuo *FarmUpdateOne) AddTenantId(i int64) *FarmUpdateOne {
	fuo.mutation.AddTenantId(i)
	return fuo
}

// SetTenantName sets the "tenantName" field.
func (fuo *FarmUpdateOne) SetTenantName(s string) *FarmUpdateOne {
	fuo.mutation.SetTenantName(s)
	return fuo
}

// SetRemarks sets the "remarks" field.
func (fuo *FarmUpdateOne) SetRemarks(s string) *FarmUpdateOne {
	fuo.mutation.SetRemarks(s)
	return fuo
}

// SetCreatedAt sets the "createdAt" field.
func (fuo *FarmUpdateOne) SetCreatedAt(i int64) *FarmUpdateOne {
	fuo.mutation.ResetCreatedAt()
	fuo.mutation.SetCreatedAt(i)
	return fuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (fuo *FarmUpdateOne) AddCreatedAt(i int64) *FarmUpdateOne {
	fuo.mutation.AddCreatedAt(i)
	return fuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (fuo *FarmUpdateOne) SetUpdatedAt(i int64) *FarmUpdateOne {
	fuo.mutation.ResetUpdatedAt()
	fuo.mutation.SetUpdatedAt(i)
	return fuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (fuo *FarmUpdateOne) AddUpdatedAt(i int64) *FarmUpdateOne {
	fuo.mutation.AddUpdatedAt(i)
	return fuo
}

// SetDeleted sets the "deleted" field.
func (fuo *FarmUpdateOne) SetDeleted(i int) *FarmUpdateOne {
	fuo.mutation.ResetDeleted()
	fuo.mutation.SetDeleted(i)
	return fuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (fuo *FarmUpdateOne) SetNillableDeleted(i *int) *FarmUpdateOne {
	if i != nil {
		fuo.SetDeleted(*i)
	}
	return fuo
}

// AddDeleted adds i to the "deleted" field.
func (fuo *FarmUpdateOne) AddDeleted(i int) *FarmUpdateOne {
	fuo.mutation.AddDeleted(i)
	return fuo
}

// Mutation returns the FarmMutation object of the builder.
func (fuo *FarmUpdateOne) Mutation() *FarmMutation {
	return fuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FarmUpdateOne) Select(field string, fields ...string) *FarmUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Farm entity.
func (fuo *FarmUpdateOne) Save(ctx context.Context) (*Farm, error) {
	var (
		err  error
		node *Farm
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FarmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Farm)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FarmMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FarmUpdateOne) SaveX(ctx context.Context) *Farm {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FarmUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FarmUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FarmUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := farm.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Farm.name": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Code(); ok {
		if err := farm.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Farm.code": %w`, err)}
		}
	}
	return nil
}

func (fuo *FarmUpdateOne) sqlSave(ctx context.Context) (_node *Farm, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   farm.Table,
			Columns: farm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: farm.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Farm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, farm.FieldID)
		for _, f := range fields {
			if !farm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != farm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldName,
		})
	}
	if value, ok := fuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldCode,
		})
	}
	if value, ok := fuo.mutation.ConstructionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldConstructionDate,
		})
	}
	if value, ok := fuo.mutation.FeedingScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldFeedingScale,
		})
	}
	if value, ok := fuo.mutation.AddedFeedingScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldFeedingScale,
		})
	}
	if value, ok := fuo.mutation.ContactUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldContactUser,
		})
	}
	if value, ok := fuo.mutation.ContactPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldContactPhone,
		})
	}
	if value, ok := fuo.mutation.ContactAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldContactAddress,
		})
	}
	if value, ok := fuo.mutation.Square(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldSquare,
		})
	}
	if value, ok := fuo.mutation.AddedSquare(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldSquare,
		})
	}
	if value, ok := fuo.mutation.ShedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldShedCount,
		})
	}
	if value, ok := fuo.mutation.AddedShedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldShedCount,
		})
	}
	if value, ok := fuo.mutation.CategoryId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCategoryId,
		})
	}
	if value, ok := fuo.mutation.AddedCategoryId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCategoryId,
		})
	}
	if value, ok := fuo.mutation.CategoryName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldCategoryName,
		})
	}
	if value, ok := fuo.mutation.VarietyId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldVarietyId,
		})
	}
	if value, ok := fuo.mutation.AddedVarietyId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldVarietyId,
		})
	}
	if value, ok := fuo.mutation.VarietyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldVarietyName,
		})
	}
	if value, ok := fuo.mutation.DistrictCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldDistrictCode,
		})
	}
	if value, ok := fuo.mutation.DistrictName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldDistrictName,
		})
	}
	if value, ok := fuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldTenantId,
		})
	}
	if value, ok := fuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldTenantId,
		})
	}
	if value, ok := fuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldTenantName,
		})
	}
	if value, ok := fuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: farm.FieldRemarks,
		})
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCreatedAt,
		})
	}
	if value, ok := fuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldCreatedAt,
		})
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldUpdatedAt,
		})
	}
	if value, ok := fuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: farm.FieldUpdatedAt,
		})
	}
	if value, ok := fuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: farm.FieldDeleted,
		})
	}
	if value, ok := fuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: farm.FieldDeleted,
		})
	}
	_node = &Farm{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{farm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

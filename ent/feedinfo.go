// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/feedinfo"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// FeedInfo is the model entity for the FeedInfo schema.
type FeedInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 编码
	Code string `json:"code,omitempty"`
	// 水分比重
	Moisture float32 `json:"moisture,omitempty"`
	// 干物质比重
	DryMatter float32 `json:"dryMatter,omitempty"`
	// 中性洗涤纤维
	Ndf float32 `json:"ndf,omitempty"`
	// 酸性洗涤纤维
	Adf float32 `json:"adf,omitempty"`
	// 有效中性洗涤纤维
	Endf float32 `json:"endf,omitempty"`
	// 乳酸
	LacticAcid float32 `json:"lacticAcid,omitempty"`
	// 糖 (WSC）
	Wsc float32 `json:"wsc,omitempty"`
	// 淀粉（B1）
	Starch float32 `json:"starch,omitempty"`
	// 可溶性纤维（B2）
	SolubleFiber float32 `json:"solubleFiber,omitempty"`
	// 总蛋白
	TotalProtein float32 `json:"totalProtein,omitempty"`
	// 可溶性蛋白
	SolubleProtein float32 `json:"solubleProtein,omitempty"`
	// 瘤胃降解蛋白 3倍水平
	Rdp float32 `json:"rdp,omitempty"`
	// 代谢能
	Me float32 `json:"me,omitempty"`
	// 泌乳净能 3倍NRC
	Nel float32 `json:"nel,omitempty"`
	// 粗脂肪
	CrudeFat float32 `json:"crudeFat,omitempty"`
	// 总脂肪酸
	TotalFttyAcid float32 `json:"totalFttyAcid,omitempty"`
	// 灰分
	Ash float32 `json:"ash,omitempty"`
	// 钙
	Ca float32 `json:"ca,omitempty"`
	// 磷
	P float32 `json:"p,omitempty"`
	// 镁
	Mg float32 `json:"mg,omitempty"`
	// 钾
	K float32 `json:"k,omitempty"`
	// 锰 - 总
	Mn float32 `json:"mn,omitempty"`
	// 铜 - 总
	Cu float32 `json:"cu,omitempty"`
	// 铁 - 总
	Fe float32 `json:"fe,omitempty"`
	// 锌 - 总
	Zn float32 `json:"zn,omitempty"`
	// 蛋氨酸
	Methionine float32 `json:"methionine,omitempty"`
	// 赖氨酸
	Lysine float32 `json:"lysine,omitempty"`
	// 维生素 A
	VitaminA float32 `json:"vitaminA,omitempty"`
	// 维生素 D3
	VitaminD3 float32 `json:"vitaminD3,omitempty"`
	// 维生素 E
	VitaminE float32 `json:"vitaminE,omitempty"`
	// 胆碱
	Choline float32 `json:"choline,omitempty"`
	// 生物素
	Biotin float32 `json:"biotin,omitempty"`
	// 描述
	Description string `json:"description,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedinfo.FieldMoisture, feedinfo.FieldDryMatter, feedinfo.FieldNdf, feedinfo.FieldAdf, feedinfo.FieldEndf, feedinfo.FieldLacticAcid, feedinfo.FieldWsc, feedinfo.FieldStarch, feedinfo.FieldSolubleFiber, feedinfo.FieldTotalProtein, feedinfo.FieldSolubleProtein, feedinfo.FieldRdp, feedinfo.FieldMe, feedinfo.FieldNel, feedinfo.FieldCrudeFat, feedinfo.FieldTotalFttyAcid, feedinfo.FieldAsh, feedinfo.FieldCa, feedinfo.FieldP, feedinfo.FieldMg, feedinfo.FieldK, feedinfo.FieldMn, feedinfo.FieldCu, feedinfo.FieldFe, feedinfo.FieldZn, feedinfo.FieldMethionine, feedinfo.FieldLysine, feedinfo.FieldVitaminA, feedinfo.FieldVitaminD3, feedinfo.FieldVitaminE, feedinfo.FieldCholine, feedinfo.FieldBiotin:
			values[i] = new(sql.NullFloat64)
		case feedinfo.FieldID, feedinfo.FieldTenantId, feedinfo.FieldFarmId, feedinfo.FieldCreatedAt, feedinfo.FieldUpdatedAt, feedinfo.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case feedinfo.FieldName, feedinfo.FieldCode, feedinfo.FieldDescription, feedinfo.FieldTenantName, feedinfo.FieldFarmName, feedinfo.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FeedInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedInfo fields.
func (fi *FeedInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int(value.Int64)
		case feedinfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fi.Name = value.String
			}
		case feedinfo.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				fi.Code = value.String
			}
		case feedinfo.FieldMoisture:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field moisture", values[i])
			} else if value.Valid {
				fi.Moisture = float32(value.Float64)
			}
		case feedinfo.FieldDryMatter:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field dryMatter", values[i])
			} else if value.Valid {
				fi.DryMatter = float32(value.Float64)
			}
		case feedinfo.FieldNdf:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ndf", values[i])
			} else if value.Valid {
				fi.Ndf = float32(value.Float64)
			}
		case feedinfo.FieldAdf:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field adf", values[i])
			} else if value.Valid {
				fi.Adf = float32(value.Float64)
			}
		case feedinfo.FieldEndf:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field endf", values[i])
			} else if value.Valid {
				fi.Endf = float32(value.Float64)
			}
		case feedinfo.FieldLacticAcid:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lacticAcid", values[i])
			} else if value.Valid {
				fi.LacticAcid = float32(value.Float64)
			}
		case feedinfo.FieldWsc:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field wsc", values[i])
			} else if value.Valid {
				fi.Wsc = float32(value.Float64)
			}
		case feedinfo.FieldStarch:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field starch", values[i])
			} else if value.Valid {
				fi.Starch = float32(value.Float64)
			}
		case feedinfo.FieldSolubleFiber:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field solubleFiber", values[i])
			} else if value.Valid {
				fi.SolubleFiber = float32(value.Float64)
			}
		case feedinfo.FieldTotalProtein:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field totalProtein", values[i])
			} else if value.Valid {
				fi.TotalProtein = float32(value.Float64)
			}
		case feedinfo.FieldSolubleProtein:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field solubleProtein", values[i])
			} else if value.Valid {
				fi.SolubleProtein = float32(value.Float64)
			}
		case feedinfo.FieldRdp:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rdp", values[i])
			} else if value.Valid {
				fi.Rdp = float32(value.Float64)
			}
		case feedinfo.FieldMe:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field me", values[i])
			} else if value.Valid {
				fi.Me = float32(value.Float64)
			}
		case feedinfo.FieldNel:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field nel", values[i])
			} else if value.Valid {
				fi.Nel = float32(value.Float64)
			}
		case feedinfo.FieldCrudeFat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field crudeFat", values[i])
			} else if value.Valid {
				fi.CrudeFat = float32(value.Float64)
			}
		case feedinfo.FieldTotalFttyAcid:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field totalFttyAcid", values[i])
			} else if value.Valid {
				fi.TotalFttyAcid = float32(value.Float64)
			}
		case feedinfo.FieldAsh:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ash", values[i])
			} else if value.Valid {
				fi.Ash = float32(value.Float64)
			}
		case feedinfo.FieldCa:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ca", values[i])
			} else if value.Valid {
				fi.Ca = float32(value.Float64)
			}
		case feedinfo.FieldP:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field p", values[i])
			} else if value.Valid {
				fi.P = float32(value.Float64)
			}
		case feedinfo.FieldMg:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field mg", values[i])
			} else if value.Valid {
				fi.Mg = float32(value.Float64)
			}
		case feedinfo.FieldK:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field k", values[i])
			} else if value.Valid {
				fi.K = float32(value.Float64)
			}
		case feedinfo.FieldMn:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field mn", values[i])
			} else if value.Valid {
				fi.Mn = float32(value.Float64)
			}
		case feedinfo.FieldCu:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cu", values[i])
			} else if value.Valid {
				fi.Cu = float32(value.Float64)
			}
		case feedinfo.FieldFe:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fe", values[i])
			} else if value.Valid {
				fi.Fe = float32(value.Float64)
			}
		case feedinfo.FieldZn:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field zn", values[i])
			} else if value.Valid {
				fi.Zn = float32(value.Float64)
			}
		case feedinfo.FieldMethionine:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field methionine", values[i])
			} else if value.Valid {
				fi.Methionine = float32(value.Float64)
			}
		case feedinfo.FieldLysine:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lysine", values[i])
			} else if value.Valid {
				fi.Lysine = float32(value.Float64)
			}
		case feedinfo.FieldVitaminA:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field vitaminA", values[i])
			} else if value.Valid {
				fi.VitaminA = float32(value.Float64)
			}
		case feedinfo.FieldVitaminD3:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field vitaminD3", values[i])
			} else if value.Valid {
				fi.VitaminD3 = float32(value.Float64)
			}
		case feedinfo.FieldVitaminE:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field vitaminE", values[i])
			} else if value.Valid {
				fi.VitaminE = float32(value.Float64)
			}
		case feedinfo.FieldCholine:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field choline", values[i])
			} else if value.Valid {
				fi.Choline = float32(value.Float64)
			}
		case feedinfo.FieldBiotin:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field biotin", values[i])
			} else if value.Valid {
				fi.Biotin = float32(value.Float64)
			}
		case feedinfo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fi.Description = value.String
			}
		case feedinfo.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				fi.TenantId = value.Int64
			}
		case feedinfo.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				fi.TenantName = value.String
			}
		case feedinfo.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				fi.FarmId = value.Int64
			}
		case feedinfo.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				fi.FarmName = value.String
			}
		case feedinfo.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				fi.Remarks = value.String
			}
		case feedinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				fi.CreatedAt = value.Int64
			}
		case feedinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				fi.UpdatedAt = value.Int64
			}
		case feedinfo.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				fi.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FeedInfo.
// Note that you need to call FeedInfo.Unwrap() before calling this method if this FeedInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FeedInfo) Update() *FeedInfoUpdateOne {
	return (&FeedInfoClient{config: fi.config}).UpdateOne(fi)
}

// Unwrap unwraps the FeedInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FeedInfo) Unwrap() *FeedInfo {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedInfo is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FeedInfo) String() string {
	var builder strings.Builder
	builder.WriteString("FeedInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("name=")
	builder.WriteString(fi.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(fi.Code)
	builder.WriteString(", ")
	builder.WriteString("moisture=")
	builder.WriteString(fmt.Sprintf("%v", fi.Moisture))
	builder.WriteString(", ")
	builder.WriteString("dryMatter=")
	builder.WriteString(fmt.Sprintf("%v", fi.DryMatter))
	builder.WriteString(", ")
	builder.WriteString("ndf=")
	builder.WriteString(fmt.Sprintf("%v", fi.Ndf))
	builder.WriteString(", ")
	builder.WriteString("adf=")
	builder.WriteString(fmt.Sprintf("%v", fi.Adf))
	builder.WriteString(", ")
	builder.WriteString("endf=")
	builder.WriteString(fmt.Sprintf("%v", fi.Endf))
	builder.WriteString(", ")
	builder.WriteString("lacticAcid=")
	builder.WriteString(fmt.Sprintf("%v", fi.LacticAcid))
	builder.WriteString(", ")
	builder.WriteString("wsc=")
	builder.WriteString(fmt.Sprintf("%v", fi.Wsc))
	builder.WriteString(", ")
	builder.WriteString("starch=")
	builder.WriteString(fmt.Sprintf("%v", fi.Starch))
	builder.WriteString(", ")
	builder.WriteString("solubleFiber=")
	builder.WriteString(fmt.Sprintf("%v", fi.SolubleFiber))
	builder.WriteString(", ")
	builder.WriteString("totalProtein=")
	builder.WriteString(fmt.Sprintf("%v", fi.TotalProtein))
	builder.WriteString(", ")
	builder.WriteString("solubleProtein=")
	builder.WriteString(fmt.Sprintf("%v", fi.SolubleProtein))
	builder.WriteString(", ")
	builder.WriteString("rdp=")
	builder.WriteString(fmt.Sprintf("%v", fi.Rdp))
	builder.WriteString(", ")
	builder.WriteString("me=")
	builder.WriteString(fmt.Sprintf("%v", fi.Me))
	builder.WriteString(", ")
	builder.WriteString("nel=")
	builder.WriteString(fmt.Sprintf("%v", fi.Nel))
	builder.WriteString(", ")
	builder.WriteString("crudeFat=")
	builder.WriteString(fmt.Sprintf("%v", fi.CrudeFat))
	builder.WriteString(", ")
	builder.WriteString("totalFttyAcid=")
	builder.WriteString(fmt.Sprintf("%v", fi.TotalFttyAcid))
	builder.WriteString(", ")
	builder.WriteString("ash=")
	builder.WriteString(fmt.Sprintf("%v", fi.Ash))
	builder.WriteString(", ")
	builder.WriteString("ca=")
	builder.WriteString(fmt.Sprintf("%v", fi.Ca))
	builder.WriteString(", ")
	builder.WriteString("p=")
	builder.WriteString(fmt.Sprintf("%v", fi.P))
	builder.WriteString(", ")
	builder.WriteString("mg=")
	builder.WriteString(fmt.Sprintf("%v", fi.Mg))
	builder.WriteString(", ")
	builder.WriteString("k=")
	builder.WriteString(fmt.Sprintf("%v", fi.K))
	builder.WriteString(", ")
	builder.WriteString("mn=")
	builder.WriteString(fmt.Sprintf("%v", fi.Mn))
	builder.WriteString(", ")
	builder.WriteString("cu=")
	builder.WriteString(fmt.Sprintf("%v", fi.Cu))
	builder.WriteString(", ")
	builder.WriteString("fe=")
	builder.WriteString(fmt.Sprintf("%v", fi.Fe))
	builder.WriteString(", ")
	builder.WriteString("zn=")
	builder.WriteString(fmt.Sprintf("%v", fi.Zn))
	builder.WriteString(", ")
	builder.WriteString("methionine=")
	builder.WriteString(fmt.Sprintf("%v", fi.Methionine))
	builder.WriteString(", ")
	builder.WriteString("lysine=")
	builder.WriteString(fmt.Sprintf("%v", fi.Lysine))
	builder.WriteString(", ")
	builder.WriteString("vitaminA=")
	builder.WriteString(fmt.Sprintf("%v", fi.VitaminA))
	builder.WriteString(", ")
	builder.WriteString("vitaminD3=")
	builder.WriteString(fmt.Sprintf("%v", fi.VitaminD3))
	builder.WriteString(", ")
	builder.WriteString("vitaminE=")
	builder.WriteString(fmt.Sprintf("%v", fi.VitaminE))
	builder.WriteString(", ")
	builder.WriteString("choline=")
	builder.WriteString(fmt.Sprintf("%v", fi.Choline))
	builder.WriteString(", ")
	builder.WriteString("biotin=")
	builder.WriteString(fmt.Sprintf("%v", fi.Biotin))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fi.Description)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", fi.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(fi.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", fi.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(fi.FarmName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(fi.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", fi.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", fi.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", fi.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// FeedInfos is a parsable slice of FeedInfo.
type FeedInfos []*FeedInfo

func (fi FeedInfos) config(cfg config) {
	for _i := range fi {
		fi[_i].config = cfg
	}
}

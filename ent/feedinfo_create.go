// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/feedinfo"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// FeedInfoCreate is the builder for creating a FeedInfo entity.
type FeedInfoCreate struct {
	config
	mutation *FeedInfoMutation
	hooks    []Hook
}

// SetName sets the name field.
func (fic *FeedInfoCreate) SetName(s string) *FeedInfoCreate {
	fic.mutation.SetName(s)
	return fic
}

// SetCode sets the code field.
func (fic *FeedInfoCreate) SetCode(s string) *FeedInfoCreate {
	fic.mutation.SetCode(s)
	return fic
}

// SetMoisture sets the moisture field.
func (fic *FeedInfoCreate) SetMoisture(f float32) *FeedInfoCreate {
	fic.mutation.SetMoisture(f)
	return fic
}

// SetDryMatter sets the dryMatter field.
func (fic *FeedInfoCreate) SetDryMatter(f float32) *FeedInfoCreate {
	fic.mutation.SetDryMatter(f)
	return fic
}

// SetNdf sets the ndf field.
func (fic *FeedInfoCreate) SetNdf(f float32) *FeedInfoCreate {
	fic.mutation.SetNdf(f)
	return fic
}

// SetAdf sets the adf field.
func (fic *FeedInfoCreate) SetAdf(f float32) *FeedInfoCreate {
	fic.mutation.SetAdf(f)
	return fic
}

// SetEndf sets the endf field.
func (fic *FeedInfoCreate) SetEndf(f float32) *FeedInfoCreate {
	fic.mutation.SetEndf(f)
	return fic
}

// SetLacticAcid sets the lacticAcid field.
func (fic *FeedInfoCreate) SetLacticAcid(f float32) *FeedInfoCreate {
	fic.mutation.SetLacticAcid(f)
	return fic
}

// SetWsc sets the wsc field.
func (fic *FeedInfoCreate) SetWsc(f float32) *FeedInfoCreate {
	fic.mutation.SetWsc(f)
	return fic
}

// SetStarch sets the starch field.
func (fic *FeedInfoCreate) SetStarch(f float32) *FeedInfoCreate {
	fic.mutation.SetStarch(f)
	return fic
}

// SetSolubleFiber sets the solubleFiber field.
func (fic *FeedInfoCreate) SetSolubleFiber(f float32) *FeedInfoCreate {
	fic.mutation.SetSolubleFiber(f)
	return fic
}

// SetTotalProtein sets the totalProtein field.
func (fic *FeedInfoCreate) SetTotalProtein(f float32) *FeedInfoCreate {
	fic.mutation.SetTotalProtein(f)
	return fic
}

// SetSolubleProtein sets the solubleProtein field.
func (fic *FeedInfoCreate) SetSolubleProtein(f float32) *FeedInfoCreate {
	fic.mutation.SetSolubleProtein(f)
	return fic
}

// SetRdp sets the rdp field.
func (fic *FeedInfoCreate) SetRdp(f float32) *FeedInfoCreate {
	fic.mutation.SetRdp(f)
	return fic
}

// SetMe sets the me field.
func (fic *FeedInfoCreate) SetMe(f float32) *FeedInfoCreate {
	fic.mutation.SetMe(f)
	return fic
}

// SetNel sets the nel field.
func (fic *FeedInfoCreate) SetNel(f float32) *FeedInfoCreate {
	fic.mutation.SetNel(f)
	return fic
}

// SetCrudeFat sets the crudeFat field.
func (fic *FeedInfoCreate) SetCrudeFat(f float32) *FeedInfoCreate {
	fic.mutation.SetCrudeFat(f)
	return fic
}

// SetTotalFttyAcid sets the totalFttyAcid field.
func (fic *FeedInfoCreate) SetTotalFttyAcid(f float32) *FeedInfoCreate {
	fic.mutation.SetTotalFttyAcid(f)
	return fic
}

// SetAsh sets the ash field.
func (fic *FeedInfoCreate) SetAsh(f float32) *FeedInfoCreate {
	fic.mutation.SetAsh(f)
	return fic
}

// SetCa sets the ca field.
func (fic *FeedInfoCreate) SetCa(f float32) *FeedInfoCreate {
	fic.mutation.SetCa(f)
	return fic
}

// SetP sets the p field.
func (fic *FeedInfoCreate) SetP(f float32) *FeedInfoCreate {
	fic.mutation.SetP(f)
	return fic
}

// SetMg sets the mg field.
func (fic *FeedInfoCreate) SetMg(f float32) *FeedInfoCreate {
	fic.mutation.SetMg(f)
	return fic
}

// SetK sets the k field.
func (fic *FeedInfoCreate) SetK(f float32) *FeedInfoCreate {
	fic.mutation.SetK(f)
	return fic
}

// SetMn sets the mn field.
func (fic *FeedInfoCreate) SetMn(f float32) *FeedInfoCreate {
	fic.mutation.SetMn(f)
	return fic
}

// SetCu sets the cu field.
func (fic *FeedInfoCreate) SetCu(f float32) *FeedInfoCreate {
	fic.mutation.SetCu(f)
	return fic
}

// SetFe sets the fe field.
func (fic *FeedInfoCreate) SetFe(f float32) *FeedInfoCreate {
	fic.mutation.SetFe(f)
	return fic
}

// SetZn sets the zn field.
func (fic *FeedInfoCreate) SetZn(f float32) *FeedInfoCreate {
	fic.mutation.SetZn(f)
	return fic
}

// SetMethionine sets the methionine field.
func (fic *FeedInfoCreate) SetMethionine(f float32) *FeedInfoCreate {
	fic.mutation.SetMethionine(f)
	return fic
}

// SetLysine sets the lysine field.
func (fic *FeedInfoCreate) SetLysine(f float32) *FeedInfoCreate {
	fic.mutation.SetLysine(f)
	return fic
}

// SetVitaminA sets the vitaminA field.
func (fic *FeedInfoCreate) SetVitaminA(f float32) *FeedInfoCreate {
	fic.mutation.SetVitaminA(f)
	return fic
}

// SetVitaminD3 sets the vitaminD3 field.
func (fic *FeedInfoCreate) SetVitaminD3(f float32) *FeedInfoCreate {
	fic.mutation.SetVitaminD3(f)
	return fic
}

// SetVitaminE sets the vitaminE field.
func (fic *FeedInfoCreate) SetVitaminE(f float32) *FeedInfoCreate {
	fic.mutation.SetVitaminE(f)
	return fic
}

// SetCholine sets the choline field.
func (fic *FeedInfoCreate) SetCholine(f float32) *FeedInfoCreate {
	fic.mutation.SetCholine(f)
	return fic
}

// SetBiotin sets the biotin field.
func (fic *FeedInfoCreate) SetBiotin(f float32) *FeedInfoCreate {
	fic.mutation.SetBiotin(f)
	return fic
}

// SetDescription sets the description field.
func (fic *FeedInfoCreate) SetDescription(s string) *FeedInfoCreate {
	fic.mutation.SetDescription(s)
	return fic
}

// SetNillableDescription sets the description field if the given value is not nil.
func (fic *FeedInfoCreate) SetNillableDescription(s *string) *FeedInfoCreate {
	if s != nil {
		fic.SetDescription(*s)
	}
	return fic
}

// SetTenantId sets the tenantId field.
func (fic *FeedInfoCreate) SetTenantId(i int64) *FeedInfoCreate {
	fic.mutation.SetTenantId(i)
	return fic
}

// SetNillableTenantId sets the tenantId field if the given value is not nil.
func (fic *FeedInfoCreate) SetNillableTenantId(i *int64) *FeedInfoCreate {
	if i != nil {
		fic.SetTenantId(*i)
	}
	return fic
}

// SetTenantName sets the tenantName field.
func (fic *FeedInfoCreate) SetTenantName(s string) *FeedInfoCreate {
	fic.mutation.SetTenantName(s)
	return fic
}

// SetNillableTenantName sets the tenantName field if the given value is not nil.
func (fic *FeedInfoCreate) SetNillableTenantName(s *string) *FeedInfoCreate {
	if s != nil {
		fic.SetTenantName(*s)
	}
	return fic
}

// SetFarmId sets the farmId field.
func (fic *FeedInfoCreate) SetFarmId(i int64) *FeedInfoCreate {
	fic.mutation.SetFarmId(i)
	return fic
}

// SetNillableFarmId sets the farmId field if the given value is not nil.
func (fic *FeedInfoCreate) SetNillableFarmId(i *int64) *FeedInfoCreate {
	if i != nil {
		fic.SetFarmId(*i)
	}
	return fic
}

// SetFarmName sets the farmName field.
func (fic *FeedInfoCreate) SetFarmName(s string) *FeedInfoCreate {
	fic.mutation.SetFarmName(s)
	return fic
}

// SetNillableFarmName sets the farmName field if the given value is not nil.
func (fic *FeedInfoCreate) SetNillableFarmName(s *string) *FeedInfoCreate {
	if s != nil {
		fic.SetFarmName(*s)
	}
	return fic
}

// SetRemarks sets the remarks field.
func (fic *FeedInfoCreate) SetRemarks(s string) *FeedInfoCreate {
	fic.mutation.SetRemarks(s)
	return fic
}

// SetNillableRemarks sets the remarks field if the given value is not nil.
func (fic *FeedInfoCreate) SetNillableRemarks(s *string) *FeedInfoCreate {
	if s != nil {
		fic.SetRemarks(*s)
	}
	return fic
}

// SetCreatedAt sets the createdAt field.
func (fic *FeedInfoCreate) SetCreatedAt(i int64) *FeedInfoCreate {
	fic.mutation.SetCreatedAt(i)
	return fic
}

// SetNillableCreatedAt sets the createdAt field if the given value is not nil.
func (fic *FeedInfoCreate) SetNillableCreatedAt(i *int64) *FeedInfoCreate {
	if i != nil {
		fic.SetCreatedAt(*i)
	}
	return fic
}

// SetUpdatedAt sets the updatedAt field.
func (fic *FeedInfoCreate) SetUpdatedAt(i int64) *FeedInfoCreate {
	fic.mutation.SetUpdatedAt(i)
	return fic
}

// SetNillableUpdatedAt sets the updatedAt field if the given value is not nil.
func (fic *FeedInfoCreate) SetNillableUpdatedAt(i *int64) *FeedInfoCreate {
	if i != nil {
		fic.SetUpdatedAt(*i)
	}
	return fic
}

// SetDeleted sets the deleted field.
func (fic *FeedInfoCreate) SetDeleted(i int) *FeedInfoCreate {
	fic.mutation.SetDeleted(i)
	return fic
}

// SetNillableDeleted sets the deleted field if the given value is not nil.
func (fic *FeedInfoCreate) SetNillableDeleted(i *int) *FeedInfoCreate {
	if i != nil {
		fic.SetDeleted(*i)
	}
	return fic
}

// Mutation returns the FeedInfoMutation object of the builder.
func (fic *FeedInfoCreate) Mutation() *FeedInfoMutation {
	return fic.mutation
}

// Save creates the FeedInfo in the database.
func (fic *FeedInfoCreate) Save(ctx context.Context) (*FeedInfo, error) {
	var (
		err  error
		node *FeedInfo
	)
	fic.defaults()
	if len(fic.hooks) == 0 {
		if err = fic.check(); err != nil {
			return nil, err
		}
		node, err = fic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fic.check(); err != nil {
				return nil, err
			}
			fic.mutation = mutation
			node, err = fic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fic.hooks) - 1; i >= 0; i-- {
			mut = fic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FeedInfoCreate) SaveX(ctx context.Context) *FeedInfo {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (fic *FeedInfoCreate) defaults() {
	if _, ok := fic.mutation.CreatedAt(); !ok {
		v := feedinfo.DefaultCreatedAt
		fic.mutation.SetCreatedAt(v)
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		v := feedinfo.DefaultUpdatedAt
		fic.mutation.SetUpdatedAt(v)
	}
	if _, ok := fic.mutation.Deleted(); !ok {
		v := feedinfo.DefaultDeleted
		fic.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FeedInfoCreate) check() error {
	if _, ok := fic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := fic.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := fic.mutation.Moisture(); !ok {
		return &ValidationError{Name: "moisture", err: errors.New("ent: missing required field \"moisture\"")}
	}
	if _, ok := fic.mutation.DryMatter(); !ok {
		return &ValidationError{Name: "dryMatter", err: errors.New("ent: missing required field \"dryMatter\"")}
	}
	if _, ok := fic.mutation.Ndf(); !ok {
		return &ValidationError{Name: "ndf", err: errors.New("ent: missing required field \"ndf\"")}
	}
	if _, ok := fic.mutation.Adf(); !ok {
		return &ValidationError{Name: "adf", err: errors.New("ent: missing required field \"adf\"")}
	}
	if _, ok := fic.mutation.Endf(); !ok {
		return &ValidationError{Name: "endf", err: errors.New("ent: missing required field \"endf\"")}
	}
	if _, ok := fic.mutation.LacticAcid(); !ok {
		return &ValidationError{Name: "lacticAcid", err: errors.New("ent: missing required field \"lacticAcid\"")}
	}
	if _, ok := fic.mutation.Wsc(); !ok {
		return &ValidationError{Name: "wsc", err: errors.New("ent: missing required field \"wsc\"")}
	}
	if _, ok := fic.mutation.Starch(); !ok {
		return &ValidationError{Name: "starch", err: errors.New("ent: missing required field \"starch\"")}
	}
	if _, ok := fic.mutation.SolubleFiber(); !ok {
		return &ValidationError{Name: "solubleFiber", err: errors.New("ent: missing required field \"solubleFiber\"")}
	}
	if _, ok := fic.mutation.TotalProtein(); !ok {
		return &ValidationError{Name: "totalProtein", err: errors.New("ent: missing required field \"totalProtein\"")}
	}
	if _, ok := fic.mutation.SolubleProtein(); !ok {
		return &ValidationError{Name: "solubleProtein", err: errors.New("ent: missing required field \"solubleProtein\"")}
	}
	if _, ok := fic.mutation.Rdp(); !ok {
		return &ValidationError{Name: "rdp", err: errors.New("ent: missing required field \"rdp\"")}
	}
	if _, ok := fic.mutation.Me(); !ok {
		return &ValidationError{Name: "me", err: errors.New("ent: missing required field \"me\"")}
	}
	if _, ok := fic.mutation.Nel(); !ok {
		return &ValidationError{Name: "nel", err: errors.New("ent: missing required field \"nel\"")}
	}
	if _, ok := fic.mutation.CrudeFat(); !ok {
		return &ValidationError{Name: "crudeFat", err: errors.New("ent: missing required field \"crudeFat\"")}
	}
	if _, ok := fic.mutation.TotalFttyAcid(); !ok {
		return &ValidationError{Name: "totalFttyAcid", err: errors.New("ent: missing required field \"totalFttyAcid\"")}
	}
	if _, ok := fic.mutation.Ash(); !ok {
		return &ValidationError{Name: "ash", err: errors.New("ent: missing required field \"ash\"")}
	}
	if _, ok := fic.mutation.Ca(); !ok {
		return &ValidationError{Name: "ca", err: errors.New("ent: missing required field \"ca\"")}
	}
	if _, ok := fic.mutation.P(); !ok {
		return &ValidationError{Name: "p", err: errors.New("ent: missing required field \"p\"")}
	}
	if _, ok := fic.mutation.Mg(); !ok {
		return &ValidationError{Name: "mg", err: errors.New("ent: missing required field \"mg\"")}
	}
	if _, ok := fic.mutation.K(); !ok {
		return &ValidationError{Name: "k", err: errors.New("ent: missing required field \"k\"")}
	}
	if _, ok := fic.mutation.Mn(); !ok {
		return &ValidationError{Name: "mn", err: errors.New("ent: missing required field \"mn\"")}
	}
	if _, ok := fic.mutation.Cu(); !ok {
		return &ValidationError{Name: "cu", err: errors.New("ent: missing required field \"cu\"")}
	}
	if _, ok := fic.mutation.Fe(); !ok {
		return &ValidationError{Name: "fe", err: errors.New("ent: missing required field \"fe\"")}
	}
	if _, ok := fic.mutation.Zn(); !ok {
		return &ValidationError{Name: "zn", err: errors.New("ent: missing required field \"zn\"")}
	}
	if _, ok := fic.mutation.Methionine(); !ok {
		return &ValidationError{Name: "methionine", err: errors.New("ent: missing required field \"methionine\"")}
	}
	if _, ok := fic.mutation.Lysine(); !ok {
		return &ValidationError{Name: "lysine", err: errors.New("ent: missing required field \"lysine\"")}
	}
	if _, ok := fic.mutation.VitaminA(); !ok {
		return &ValidationError{Name: "vitaminA", err: errors.New("ent: missing required field \"vitaminA\"")}
	}
	if _, ok := fic.mutation.VitaminD3(); !ok {
		return &ValidationError{Name: "vitaminD3", err: errors.New("ent: missing required field \"vitaminD3\"")}
	}
	if _, ok := fic.mutation.VitaminE(); !ok {
		return &ValidationError{Name: "vitaminE", err: errors.New("ent: missing required field \"vitaminE\"")}
	}
	if _, ok := fic.mutation.Choline(); !ok {
		return &ValidationError{Name: "choline", err: errors.New("ent: missing required field \"choline\"")}
	}
	if _, ok := fic.mutation.Biotin(); !ok {
		return &ValidationError{Name: "biotin", err: errors.New("ent: missing required field \"biotin\"")}
	}
	return nil
}

func (fic *FeedInfoCreate) sqlSave(ctx context.Context) (*FeedInfo, error) {
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (fic *FeedInfoCreate) createSpec() (*FeedInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &FeedInfo{config: fic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feedinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: feedinfo.FieldID,
			},
		}
	)
	if value, ok := fic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := fic.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := fic.mutation.Moisture(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldMoisture,
		})
		_node.Moisture = value
	}
	if value, ok := fic.mutation.DryMatter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldDryMatter,
		})
		_node.DryMatter = value
	}
	if value, ok := fic.mutation.Ndf(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldNdf,
		})
		_node.Ndf = value
	}
	if value, ok := fic.mutation.Adf(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldAdf,
		})
		_node.Adf = value
	}
	if value, ok := fic.mutation.Endf(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldEndf,
		})
		_node.Endf = value
	}
	if value, ok := fic.mutation.LacticAcid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldLacticAcid,
		})
		_node.LacticAcid = value
	}
	if value, ok := fic.mutation.Wsc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldWsc,
		})
		_node.Wsc = value
	}
	if value, ok := fic.mutation.Starch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldStarch,
		})
		_node.Starch = value
	}
	if value, ok := fic.mutation.SolubleFiber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldSolubleFiber,
		})
		_node.SolubleFiber = value
	}
	if value, ok := fic.mutation.TotalProtein(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldTotalProtein,
		})
		_node.TotalProtein = value
	}
	if value, ok := fic.mutation.SolubleProtein(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldSolubleProtein,
		})
		_node.SolubleProtein = value
	}
	if value, ok := fic.mutation.Rdp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldRdp,
		})
		_node.Rdp = value
	}
	if value, ok := fic.mutation.Me(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldMe,
		})
		_node.Me = value
	}
	if value, ok := fic.mutation.Nel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldNel,
		})
		_node.Nel = value
	}
	if value, ok := fic.mutation.CrudeFat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldCrudeFat,
		})
		_node.CrudeFat = value
	}
	if value, ok := fic.mutation.TotalFttyAcid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldTotalFttyAcid,
		})
		_node.TotalFttyAcid = value
	}
	if value, ok := fic.mutation.Ash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldAsh,
		})
		_node.Ash = value
	}
	if value, ok := fic.mutation.Ca(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldCa,
		})
		_node.Ca = value
	}
	if value, ok := fic.mutation.P(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldP,
		})
		_node.P = value
	}
	if value, ok := fic.mutation.Mg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldMg,
		})
		_node.Mg = value
	}
	if value, ok := fic.mutation.K(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldK,
		})
		_node.K = value
	}
	if value, ok := fic.mutation.Mn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldMn,
		})
		_node.Mn = value
	}
	if value, ok := fic.mutation.Cu(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldCu,
		})
		_node.Cu = value
	}
	if value, ok := fic.mutation.Fe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldFe,
		})
		_node.Fe = value
	}
	if value, ok := fic.mutation.Zn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldZn,
		})
		_node.Zn = value
	}
	if value, ok := fic.mutation.Methionine(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldMethionine,
		})
		_node.Methionine = value
	}
	if value, ok := fic.mutation.Lysine(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldLysine,
		})
		_node.Lysine = value
	}
	if value, ok := fic.mutation.VitaminA(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldVitaminA,
		})
		_node.VitaminA = value
	}
	if value, ok := fic.mutation.VitaminD3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldVitaminD3,
		})
		_node.VitaminD3 = value
	}
	if value, ok := fic.mutation.VitaminE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldVitaminE,
		})
		_node.VitaminE = value
	}
	if value, ok := fic.mutation.Choline(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldCholine,
		})
		_node.Choline = value
	}
	if value, ok := fic.mutation.Biotin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: feedinfo.FieldBiotin,
		})
		_node.Biotin = value
	}
	if value, ok := fic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := fic.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := fic.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := fic.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := fic.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := fic.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := fic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fic.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedinfo.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// FeedInfoCreateBulk is the builder for creating a bulk of FeedInfo entities.
type FeedInfoCreateBulk struct {
	config
	builders []*FeedInfoCreate
}

// Save creates the FeedInfo entities in the database.
func (ficb *FeedInfoCreateBulk) Save(ctx context.Context) ([]*FeedInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FeedInfo, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ficb *FeedInfoCreateBulk) SaveX(ctx context.Context) []*FeedInfo {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

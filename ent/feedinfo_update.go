// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/feedinfo"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// FeedInfoUpdate is the builder for updating FeedInfo entities.
type FeedInfoUpdate struct {
	config
	hooks      []Hook
	mutation   *FeedInfoMutation
	predicates []predicate.FeedInfo
}

// Where adds a new predicate for the builder.
func (fiu *FeedInfoUpdate) Where(ps ...predicate.FeedInfo) *FeedInfoUpdate {
	fiu.predicates = append(fiu.predicates, ps...)
	return fiu
}

// SetName sets the name field.
func (fiu *FeedInfoUpdate) SetName(s string) *FeedInfoUpdate {
	fiu.mutation.SetName(s)
	return fiu
}

// SetCode sets the code field.
func (fiu *FeedInfoUpdate) SetCode(s string) *FeedInfoUpdate {
	fiu.mutation.SetCode(s)
	return fiu
}

// SetType sets the type field.
func (fiu *FeedInfoUpdate) SetType(s string) *FeedInfoUpdate {
	fiu.mutation.SetType(s)
	return fiu
}

// SetDescription sets the description field.
func (fiu *FeedInfoUpdate) SetDescription(s string) *FeedInfoUpdate {
	fiu.mutation.SetDescription(s)
	return fiu
}

// SetTenantId sets the tenantId field.
func (fiu *FeedInfoUpdate) SetTenantId(i int64) *FeedInfoUpdate {
	fiu.mutation.ResetTenantId()
	fiu.mutation.SetTenantId(i)
	return fiu
}

// AddTenantId adds i to tenantId.
func (fiu *FeedInfoUpdate) AddTenantId(i int64) *FeedInfoUpdate {
	fiu.mutation.AddTenantId(i)
	return fiu
}

// SetTenantName sets the tenantName field.
func (fiu *FeedInfoUpdate) SetTenantName(s string) *FeedInfoUpdate {
	fiu.mutation.SetTenantName(s)
	return fiu
}

// SetRemarks sets the remarks field.
func (fiu *FeedInfoUpdate) SetRemarks(s string) *FeedInfoUpdate {
	fiu.mutation.SetRemarks(s)
	return fiu
}

// SetCreatedAt sets the createdAt field.
func (fiu *FeedInfoUpdate) SetCreatedAt(i int64) *FeedInfoUpdate {
	fiu.mutation.ResetCreatedAt()
	fiu.mutation.SetCreatedAt(i)
	return fiu
}

// AddCreatedAt adds i to createdAt.
func (fiu *FeedInfoUpdate) AddCreatedAt(i int64) *FeedInfoUpdate {
	fiu.mutation.AddCreatedAt(i)
	return fiu
}

// SetUpdatedAt sets the updatedAt field.
func (fiu *FeedInfoUpdate) SetUpdatedAt(i int64) *FeedInfoUpdate {
	fiu.mutation.ResetUpdatedAt()
	fiu.mutation.SetUpdatedAt(i)
	return fiu
}

// AddUpdatedAt adds i to updatedAt.
func (fiu *FeedInfoUpdate) AddUpdatedAt(i int64) *FeedInfoUpdate {
	fiu.mutation.AddUpdatedAt(i)
	return fiu
}

// SetDeleted sets the deleted field.
func (fiu *FeedInfoUpdate) SetDeleted(i int) *FeedInfoUpdate {
	fiu.mutation.ResetDeleted()
	fiu.mutation.SetDeleted(i)
	return fiu
}

// AddDeleted adds i to deleted.
func (fiu *FeedInfoUpdate) AddDeleted(i int) *FeedInfoUpdate {
	fiu.mutation.AddDeleted(i)
	return fiu
}

// Mutation returns the FeedInfoMutation object of the builder.
func (fiu *FeedInfoUpdate) Mutation() *FeedInfoMutation {
	return fiu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fiu *FeedInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fiu.hooks) == 0 {
		affected, err = fiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fiu.mutation = mutation
			affected, err = fiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fiu.hooks) - 1; i >= 0; i-- {
			mut = fiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FeedInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FeedInfoUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FeedInfoUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fiu *FeedInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feedinfo.Table,
			Columns: feedinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: feedinfo.FieldID,
			},
		},
	}
	if ps := fiu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldName,
		})
	}
	if value, ok := fiu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldCode,
		})
	}
	if value, ok := fiu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldType,
		})
	}
	if value, ok := fiu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldDescription,
		})
	}
	if value, ok := fiu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldTenantId,
		})
	}
	if value, ok := fiu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldTenantId,
		})
	}
	if value, ok := fiu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldTenantName,
		})
	}
	if value, ok := fiu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldRemarks,
		})
	}
	if value, ok := fiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldCreatedAt,
		})
	}
	if value, ok := fiu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldCreatedAt,
		})
	}
	if value, ok := fiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldUpdatedAt,
		})
	}
	if value, ok := fiu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldUpdatedAt,
		})
	}
	if value, ok := fiu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedinfo.FieldDeleted,
		})
	}
	if value, ok := fiu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedinfo.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FeedInfoUpdateOne is the builder for updating a single FeedInfo entity.
type FeedInfoUpdateOne struct {
	config
	hooks    []Hook
	mutation *FeedInfoMutation
}

// SetName sets the name field.
func (fiuo *FeedInfoUpdateOne) SetName(s string) *FeedInfoUpdateOne {
	fiuo.mutation.SetName(s)
	return fiuo
}

// SetCode sets the code field.
func (fiuo *FeedInfoUpdateOne) SetCode(s string) *FeedInfoUpdateOne {
	fiuo.mutation.SetCode(s)
	return fiuo
}

// SetType sets the type field.
func (fiuo *FeedInfoUpdateOne) SetType(s string) *FeedInfoUpdateOne {
	fiuo.mutation.SetType(s)
	return fiuo
}

// SetDescription sets the description field.
func (fiuo *FeedInfoUpdateOne) SetDescription(s string) *FeedInfoUpdateOne {
	fiuo.mutation.SetDescription(s)
	return fiuo
}

// SetTenantId sets the tenantId field.
func (fiuo *FeedInfoUpdateOne) SetTenantId(i int64) *FeedInfoUpdateOne {
	fiuo.mutation.ResetTenantId()
	fiuo.mutation.SetTenantId(i)
	return fiuo
}

// AddTenantId adds i to tenantId.
func (fiuo *FeedInfoUpdateOne) AddTenantId(i int64) *FeedInfoUpdateOne {
	fiuo.mutation.AddTenantId(i)
	return fiuo
}

// SetTenantName sets the tenantName field.
func (fiuo *FeedInfoUpdateOne) SetTenantName(s string) *FeedInfoUpdateOne {
	fiuo.mutation.SetTenantName(s)
	return fiuo
}

// SetRemarks sets the remarks field.
func (fiuo *FeedInfoUpdateOne) SetRemarks(s string) *FeedInfoUpdateOne {
	fiuo.mutation.SetRemarks(s)
	return fiuo
}

// SetCreatedAt sets the createdAt field.
func (fiuo *FeedInfoUpdateOne) SetCreatedAt(i int64) *FeedInfoUpdateOne {
	fiuo.mutation.ResetCreatedAt()
	fiuo.mutation.SetCreatedAt(i)
	return fiuo
}

// AddCreatedAt adds i to createdAt.
func (fiuo *FeedInfoUpdateOne) AddCreatedAt(i int64) *FeedInfoUpdateOne {
	fiuo.mutation.AddCreatedAt(i)
	return fiuo
}

// SetUpdatedAt sets the updatedAt field.
func (fiuo *FeedInfoUpdateOne) SetUpdatedAt(i int64) *FeedInfoUpdateOne {
	fiuo.mutation.ResetUpdatedAt()
	fiuo.mutation.SetUpdatedAt(i)
	return fiuo
}

// AddUpdatedAt adds i to updatedAt.
func (fiuo *FeedInfoUpdateOne) AddUpdatedAt(i int64) *FeedInfoUpdateOne {
	fiuo.mutation.AddUpdatedAt(i)
	return fiuo
}

// SetDeleted sets the deleted field.
func (fiuo *FeedInfoUpdateOne) SetDeleted(i int) *FeedInfoUpdateOne {
	fiuo.mutation.ResetDeleted()
	fiuo.mutation.SetDeleted(i)
	return fiuo
}

// AddDeleted adds i to deleted.
func (fiuo *FeedInfoUpdateOne) AddDeleted(i int) *FeedInfoUpdateOne {
	fiuo.mutation.AddDeleted(i)
	return fiuo
}

// Mutation returns the FeedInfoMutation object of the builder.
func (fiuo *FeedInfoUpdateOne) Mutation() *FeedInfoMutation {
	return fiuo.mutation
}

// Save executes the query and returns the updated entity.
func (fiuo *FeedInfoUpdateOne) Save(ctx context.Context) (*FeedInfo, error) {
	var (
		err  error
		node *FeedInfo
	)
	if len(fiuo.hooks) == 0 {
		node, err = fiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fiuo.mutation = mutation
			node, err = fiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fiuo.hooks) - 1; i >= 0; i-- {
			mut = fiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FeedInfoUpdateOne) SaveX(ctx context.Context) *FeedInfo {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FeedInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FeedInfoUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fiuo *FeedInfoUpdateOne) sqlSave(ctx context.Context) (_node *FeedInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feedinfo.Table,
			Columns: feedinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: feedinfo.FieldID,
			},
		},
	}
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FeedInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fiuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldName,
		})
	}
	if value, ok := fiuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldCode,
		})
	}
	if value, ok := fiuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldType,
		})
	}
	if value, ok := fiuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldDescription,
		})
	}
	if value, ok := fiuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldTenantId,
		})
	}
	if value, ok := fiuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldTenantId,
		})
	}
	if value, ok := fiuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldTenantName,
		})
	}
	if value, ok := fiuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedinfo.FieldRemarks,
		})
	}
	if value, ok := fiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldCreatedAt,
		})
	}
	if value, ok := fiuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldCreatedAt,
		})
	}
	if value, ok := fiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldUpdatedAt,
		})
	}
	if value, ok := fiuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedinfo.FieldUpdatedAt,
		})
	}
	if value, ok := fiuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedinfo.FieldDeleted,
		})
	}
	if value, ok := fiuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedinfo.FieldDeleted,
		})
	}
	_node = &FeedInfo{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

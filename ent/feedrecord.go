// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/feedrecord"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// FeedRecord is the model entity for the FeedRecord schema.
type FeedRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// Date holds the value of the "date" field.
	Date int64 `json:"date,omitempty"`
	// RationCode holds the value of the "rationCode" field.
	RationCode string `json:"rationCode,omitempty"`
	// RationName holds the value of the "rationName" field.
	RationName string `json:"rationName,omitempty"`
	// RationAmount holds the value of the "rationAmount" field.
	RationAmount int64 `json:"rationAmount,omitempty"`
	// Count holds the value of the "count" field.
	Count int64 `json:"count,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedRecord) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // shedName
		&sql.NullInt64{},  // date
		&sql.NullString{}, // rationCode
		&sql.NullString{}, // rationName
		&sql.NullInt64{},  // rationAmount
		&sql.NullInt64{},  // count
		&sql.NullString{}, // userName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedRecord fields.
func (fr *FeedRecord) assignValues(values ...interface{}) error {
	if m, n := len(values), len(feedrecord.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	fr.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		fr.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[1])
	} else if value.Valid {
		fr.ShedName = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[2])
	} else if value.Valid {
		fr.Date = value.Int64
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field rationCode", values[3])
	} else if value.Valid {
		fr.RationCode = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field rationName", values[4])
	} else if value.Valid {
		fr.RationName = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field rationAmount", values[5])
	} else if value.Valid {
		fr.RationAmount = value.Int64
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field count", values[6])
	} else if value.Valid {
		fr.Count = value.Int64
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[7])
	} else if value.Valid {
		fr.UserName = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[8])
	} else if value.Valid {
		fr.Remarks = value.String
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[9])
	} else if value.Valid {
		fr.CreatedAt = value.Int64
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[10])
	} else if value.Valid {
		fr.UpdatedAt = value.Int64
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[11])
	} else if value.Valid {
		fr.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this FeedRecord.
// Note that, you need to call FeedRecord.Unwrap() before calling this method, if this FeedRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FeedRecord) Update() *FeedRecordUpdateOne {
	return (&FeedRecordClient{config: fr.config}).UpdateOne(fr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (fr *FeedRecord) Unwrap() *FeedRecord {
	tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedRecord is not a transactional entity")
	}
	fr.config.driver = tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FeedRecord) String() string {
	var builder strings.Builder
	builder.WriteString("FeedRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", fr.ID))
	builder.WriteString(", name=")
	builder.WriteString(fr.Name)
	builder.WriteString(", shedName=")
	builder.WriteString(fr.ShedName)
	builder.WriteString(", date=")
	builder.WriteString(fmt.Sprintf("%v", fr.Date))
	builder.WriteString(", rationCode=")
	builder.WriteString(fr.RationCode)
	builder.WriteString(", rationName=")
	builder.WriteString(fr.RationName)
	builder.WriteString(", rationAmount=")
	builder.WriteString(fmt.Sprintf("%v", fr.RationAmount))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", fr.Count))
	builder.WriteString(", userName=")
	builder.WriteString(fr.UserName)
	builder.WriteString(", remarks=")
	builder.WriteString(fr.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", fr.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", fr.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", fr.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// FeedRecords is a parsable slice of FeedRecord.
type FeedRecords []*FeedRecord

func (fr FeedRecords) config(cfg config) {
	for _i := range fr {
		fr[_i].config = cfg
	}
}

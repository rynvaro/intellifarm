// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/feedrecord"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// FeedRecordCreate is the builder for creating a FeedRecord entity.
type FeedRecordCreate struct {
	config
	mutation *FeedRecordMutation
	hooks    []Hook
}

// SetName sets the name field.
func (frc *FeedRecordCreate) SetName(s string) *FeedRecordCreate {
	frc.mutation.SetName(s)
	return frc
}

// SetNillableName sets the name field if the given value is not nil.
func (frc *FeedRecordCreate) SetNillableName(s *string) *FeedRecordCreate {
	if s != nil {
		frc.SetName(*s)
	}
	return frc
}

// SetShedName sets the shedName field.
func (frc *FeedRecordCreate) SetShedName(s string) *FeedRecordCreate {
	frc.mutation.SetShedName(s)
	return frc
}

// SetDate sets the date field.
func (frc *FeedRecordCreate) SetDate(i int64) *FeedRecordCreate {
	frc.mutation.SetDate(i)
	return frc
}

// SetRationCode sets the rationCode field.
func (frc *FeedRecordCreate) SetRationCode(s string) *FeedRecordCreate {
	frc.mutation.SetRationCode(s)
	return frc
}

// SetRationName sets the rationName field.
func (frc *FeedRecordCreate) SetRationName(s string) *FeedRecordCreate {
	frc.mutation.SetRationName(s)
	return frc
}

// SetRationAmount sets the rationAmount field.
func (frc *FeedRecordCreate) SetRationAmount(i int64) *FeedRecordCreate {
	frc.mutation.SetRationAmount(i)
	return frc
}

// SetCount sets the count field.
func (frc *FeedRecordCreate) SetCount(i int64) *FeedRecordCreate {
	frc.mutation.SetCount(i)
	return frc
}

// SetUserName sets the userName field.
func (frc *FeedRecordCreate) SetUserName(s string) *FeedRecordCreate {
	frc.mutation.SetUserName(s)
	return frc
}

// SetRemarks sets the remarks field.
func (frc *FeedRecordCreate) SetRemarks(s string) *FeedRecordCreate {
	frc.mutation.SetRemarks(s)
	return frc
}

// SetCreatedAt sets the createdAt field.
func (frc *FeedRecordCreate) SetCreatedAt(i int64) *FeedRecordCreate {
	frc.mutation.SetCreatedAt(i)
	return frc
}

// SetUpdatedAt sets the updatedAt field.
func (frc *FeedRecordCreate) SetUpdatedAt(i int64) *FeedRecordCreate {
	frc.mutation.SetUpdatedAt(i)
	return frc
}

// SetDeleted sets the deleted field.
func (frc *FeedRecordCreate) SetDeleted(i int) *FeedRecordCreate {
	frc.mutation.SetDeleted(i)
	return frc
}

// Mutation returns the FeedRecordMutation object of the builder.
func (frc *FeedRecordCreate) Mutation() *FeedRecordMutation {
	return frc.mutation
}

// Save creates the FeedRecord in the database.
func (frc *FeedRecordCreate) Save(ctx context.Context) (*FeedRecord, error) {
	var (
		err  error
		node *FeedRecord
	)
	if len(frc.hooks) == 0 {
		if err = frc.check(); err != nil {
			return nil, err
		}
		node, err = frc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = frc.check(); err != nil {
				return nil, err
			}
			frc.mutation = mutation
			node, err = frc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(frc.hooks) - 1; i >= 0; i-- {
			mut = frc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, frc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FeedRecordCreate) SaveX(ctx context.Context) *FeedRecord {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (frc *FeedRecordCreate) check() error {
	if _, ok := frc.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New("ent: missing required field \"shedName\"")}
	}
	if _, ok := frc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := frc.mutation.RationCode(); !ok {
		return &ValidationError{Name: "rationCode", err: errors.New("ent: missing required field \"rationCode\"")}
	}
	if _, ok := frc.mutation.RationName(); !ok {
		return &ValidationError{Name: "rationName", err: errors.New("ent: missing required field \"rationName\"")}
	}
	if _, ok := frc.mutation.RationAmount(); !ok {
		return &ValidationError{Name: "rationAmount", err: errors.New("ent: missing required field \"rationAmount\"")}
	}
	if _, ok := frc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New("ent: missing required field \"count\"")}
	}
	if _, ok := frc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := frc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := frc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := frc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := frc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (frc *FeedRecordCreate) sqlSave(ctx context.Context) (*FeedRecord, error) {
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (frc *FeedRecordCreate) createSpec() (*FeedRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &FeedRecord{config: frc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feedrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: feedrecord.FieldID,
			},
		}
	)
	if value, ok := frc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldName,
		})
		_node.Name = value
	}
	if value, ok := frc.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := frc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := frc.mutation.RationCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldRationCode,
		})
		_node.RationCode = value
	}
	if value, ok := frc.mutation.RationName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldRationName,
		})
		_node.RationName = value
	}
	if value, ok := frc.mutation.RationAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldRationAmount,
		})
		_node.RationAmount = value
	}
	if value, ok := frc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := frc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := frc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := frc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := frc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := frc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedrecord.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// FeedRecordCreateBulk is the builder for creating a bulk of FeedRecord entities.
type FeedRecordCreateBulk struct {
	config
	builders []*FeedRecordCreate
}

// Save creates the FeedRecord entities in the database.
func (frcb *FeedRecordCreateBulk) Save(ctx context.Context) ([]*FeedRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FeedRecord, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (frcb *FeedRecordCreateBulk) SaveX(ctx context.Context) []*FeedRecord {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

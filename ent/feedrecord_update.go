// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/feedrecord"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// FeedRecordUpdate is the builder for updating FeedRecord entities.
type FeedRecordUpdate struct {
	config
	hooks      []Hook
	mutation   *FeedRecordMutation
	predicates []predicate.FeedRecord
}

// Where adds a new predicate for the builder.
func (fru *FeedRecordUpdate) Where(ps ...predicate.FeedRecord) *FeedRecordUpdate {
	fru.predicates = append(fru.predicates, ps...)
	return fru
}

// SetName sets the name field.
func (fru *FeedRecordUpdate) SetName(s string) *FeedRecordUpdate {
	fru.mutation.SetName(s)
	return fru
}

// SetNillableName sets the name field if the given value is not nil.
func (fru *FeedRecordUpdate) SetNillableName(s *string) *FeedRecordUpdate {
	if s != nil {
		fru.SetName(*s)
	}
	return fru
}

// ClearName clears the value of name.
func (fru *FeedRecordUpdate) ClearName() *FeedRecordUpdate {
	fru.mutation.ClearName()
	return fru
}

// SetShedName sets the shedName field.
func (fru *FeedRecordUpdate) SetShedName(s string) *FeedRecordUpdate {
	fru.mutation.SetShedName(s)
	return fru
}

// SetDate sets the date field.
func (fru *FeedRecordUpdate) SetDate(i int64) *FeedRecordUpdate {
	fru.mutation.ResetDate()
	fru.mutation.SetDate(i)
	return fru
}

// AddDate adds i to date.
func (fru *FeedRecordUpdate) AddDate(i int64) *FeedRecordUpdate {
	fru.mutation.AddDate(i)
	return fru
}

// SetRationCode sets the rationCode field.
func (fru *FeedRecordUpdate) SetRationCode(s string) *FeedRecordUpdate {
	fru.mutation.SetRationCode(s)
	return fru
}

// SetRationName sets the rationName field.
func (fru *FeedRecordUpdate) SetRationName(s string) *FeedRecordUpdate {
	fru.mutation.SetRationName(s)
	return fru
}

// SetRationAmount sets the rationAmount field.
func (fru *FeedRecordUpdate) SetRationAmount(i int64) *FeedRecordUpdate {
	fru.mutation.ResetRationAmount()
	fru.mutation.SetRationAmount(i)
	return fru
}

// AddRationAmount adds i to rationAmount.
func (fru *FeedRecordUpdate) AddRationAmount(i int64) *FeedRecordUpdate {
	fru.mutation.AddRationAmount(i)
	return fru
}

// SetCount sets the count field.
func (fru *FeedRecordUpdate) SetCount(i int64) *FeedRecordUpdate {
	fru.mutation.ResetCount()
	fru.mutation.SetCount(i)
	return fru
}

// AddCount adds i to count.
func (fru *FeedRecordUpdate) AddCount(i int64) *FeedRecordUpdate {
	fru.mutation.AddCount(i)
	return fru
}

// SetUserName sets the userName field.
func (fru *FeedRecordUpdate) SetUserName(s string) *FeedRecordUpdate {
	fru.mutation.SetUserName(s)
	return fru
}

// SetRemarks sets the remarks field.
func (fru *FeedRecordUpdate) SetRemarks(s string) *FeedRecordUpdate {
	fru.mutation.SetRemarks(s)
	return fru
}

// SetCreatedAt sets the createdAt field.
func (fru *FeedRecordUpdate) SetCreatedAt(i int64) *FeedRecordUpdate {
	fru.mutation.ResetCreatedAt()
	fru.mutation.SetCreatedAt(i)
	return fru
}

// AddCreatedAt adds i to createdAt.
func (fru *FeedRecordUpdate) AddCreatedAt(i int64) *FeedRecordUpdate {
	fru.mutation.AddCreatedAt(i)
	return fru
}

// SetUpdatedAt sets the updatedAt field.
func (fru *FeedRecordUpdate) SetUpdatedAt(i int64) *FeedRecordUpdate {
	fru.mutation.ResetUpdatedAt()
	fru.mutation.SetUpdatedAt(i)
	return fru
}

// AddUpdatedAt adds i to updatedAt.
func (fru *FeedRecordUpdate) AddUpdatedAt(i int64) *FeedRecordUpdate {
	fru.mutation.AddUpdatedAt(i)
	return fru
}

// SetDeleted sets the deleted field.
func (fru *FeedRecordUpdate) SetDeleted(i int) *FeedRecordUpdate {
	fru.mutation.ResetDeleted()
	fru.mutation.SetDeleted(i)
	return fru
}

// AddDeleted adds i to deleted.
func (fru *FeedRecordUpdate) AddDeleted(i int) *FeedRecordUpdate {
	fru.mutation.AddDeleted(i)
	return fru
}

// Mutation returns the FeedRecordMutation object of the builder.
func (fru *FeedRecordUpdate) Mutation() *FeedRecordMutation {
	return fru.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fru *FeedRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fru.hooks) == 0 {
		affected, err = fru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fru.mutation = mutation
			affected, err = fru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fru.hooks) - 1; i >= 0; i-- {
			mut = fru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FeedRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FeedRecordUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FeedRecordUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fru *FeedRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feedrecord.Table,
			Columns: feedrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: feedrecord.FieldID,
			},
		},
	}
	if ps := fru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldName,
		})
	}
	if fru.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feedrecord.FieldName,
		})
	}
	if value, ok := fru.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldShedName,
		})
	}
	if value, ok := fru.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldDate,
		})
	}
	if value, ok := fru.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldDate,
		})
	}
	if value, ok := fru.mutation.RationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldRationCode,
		})
	}
	if value, ok := fru.mutation.RationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldRationName,
		})
	}
	if value, ok := fru.mutation.RationAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldRationAmount,
		})
	}
	if value, ok := fru.mutation.AddedRationAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldRationAmount,
		})
	}
	if value, ok := fru.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCount,
		})
	}
	if value, ok := fru.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCount,
		})
	}
	if value, ok := fru.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldUserName,
		})
	}
	if value, ok := fru.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldRemarks,
		})
	}
	if value, ok := fru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCreatedAt,
		})
	}
	if value, ok := fru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCreatedAt,
		})
	}
	if value, ok := fru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldUpdatedAt,
		})
	}
	if value, ok := fru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldUpdatedAt,
		})
	}
	if value, ok := fru.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedrecord.FieldDeleted,
		})
	}
	if value, ok := fru.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedrecord.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FeedRecordUpdateOne is the builder for updating a single FeedRecord entity.
type FeedRecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *FeedRecordMutation
}

// SetName sets the name field.
func (fruo *FeedRecordUpdateOne) SetName(s string) *FeedRecordUpdateOne {
	fruo.mutation.SetName(s)
	return fruo
}

// SetNillableName sets the name field if the given value is not nil.
func (fruo *FeedRecordUpdateOne) SetNillableName(s *string) *FeedRecordUpdateOne {
	if s != nil {
		fruo.SetName(*s)
	}
	return fruo
}

// ClearName clears the value of name.
func (fruo *FeedRecordUpdateOne) ClearName() *FeedRecordUpdateOne {
	fruo.mutation.ClearName()
	return fruo
}

// SetShedName sets the shedName field.
func (fruo *FeedRecordUpdateOne) SetShedName(s string) *FeedRecordUpdateOne {
	fruo.mutation.SetShedName(s)
	return fruo
}

// SetDate sets the date field.
func (fruo *FeedRecordUpdateOne) SetDate(i int64) *FeedRecordUpdateOne {
	fruo.mutation.ResetDate()
	fruo.mutation.SetDate(i)
	return fruo
}

// AddDate adds i to date.
func (fruo *FeedRecordUpdateOne) AddDate(i int64) *FeedRecordUpdateOne {
	fruo.mutation.AddDate(i)
	return fruo
}

// SetRationCode sets the rationCode field.
func (fruo *FeedRecordUpdateOne) SetRationCode(s string) *FeedRecordUpdateOne {
	fruo.mutation.SetRationCode(s)
	return fruo
}

// SetRationName sets the rationName field.
func (fruo *FeedRecordUpdateOne) SetRationName(s string) *FeedRecordUpdateOne {
	fruo.mutation.SetRationName(s)
	return fruo
}

// SetRationAmount sets the rationAmount field.
func (fruo *FeedRecordUpdateOne) SetRationAmount(i int64) *FeedRecordUpdateOne {
	fruo.mutation.ResetRationAmount()
	fruo.mutation.SetRationAmount(i)
	return fruo
}

// AddRationAmount adds i to rationAmount.
func (fruo *FeedRecordUpdateOne) AddRationAmount(i int64) *FeedRecordUpdateOne {
	fruo.mutation.AddRationAmount(i)
	return fruo
}

// SetCount sets the count field.
func (fruo *FeedRecordUpdateOne) SetCount(i int64) *FeedRecordUpdateOne {
	fruo.mutation.ResetCount()
	fruo.mutation.SetCount(i)
	return fruo
}

// AddCount adds i to count.
func (fruo *FeedRecordUpdateOne) AddCount(i int64) *FeedRecordUpdateOne {
	fruo.mutation.AddCount(i)
	return fruo
}

// SetUserName sets the userName field.
func (fruo *FeedRecordUpdateOne) SetUserName(s string) *FeedRecordUpdateOne {
	fruo.mutation.SetUserName(s)
	return fruo
}

// SetRemarks sets the remarks field.
func (fruo *FeedRecordUpdateOne) SetRemarks(s string) *FeedRecordUpdateOne {
	fruo.mutation.SetRemarks(s)
	return fruo
}

// SetCreatedAt sets the createdAt field.
func (fruo *FeedRecordUpdateOne) SetCreatedAt(i int64) *FeedRecordUpdateOne {
	fruo.mutation.ResetCreatedAt()
	fruo.mutation.SetCreatedAt(i)
	return fruo
}

// AddCreatedAt adds i to createdAt.
func (fruo *FeedRecordUpdateOne) AddCreatedAt(i int64) *FeedRecordUpdateOne {
	fruo.mutation.AddCreatedAt(i)
	return fruo
}

// SetUpdatedAt sets the updatedAt field.
func (fruo *FeedRecordUpdateOne) SetUpdatedAt(i int64) *FeedRecordUpdateOne {
	fruo.mutation.ResetUpdatedAt()
	fruo.mutation.SetUpdatedAt(i)
	return fruo
}

// AddUpdatedAt adds i to updatedAt.
func (fruo *FeedRecordUpdateOne) AddUpdatedAt(i int64) *FeedRecordUpdateOne {
	fruo.mutation.AddUpdatedAt(i)
	return fruo
}

// SetDeleted sets the deleted field.
func (fruo *FeedRecordUpdateOne) SetDeleted(i int) *FeedRecordUpdateOne {
	fruo.mutation.ResetDeleted()
	fruo.mutation.SetDeleted(i)
	return fruo
}

// AddDeleted adds i to deleted.
func (fruo *FeedRecordUpdateOne) AddDeleted(i int) *FeedRecordUpdateOne {
	fruo.mutation.AddDeleted(i)
	return fruo
}

// Mutation returns the FeedRecordMutation object of the builder.
func (fruo *FeedRecordUpdateOne) Mutation() *FeedRecordMutation {
	return fruo.mutation
}

// Save executes the query and returns the updated entity.
func (fruo *FeedRecordUpdateOne) Save(ctx context.Context) (*FeedRecord, error) {
	var (
		err  error
		node *FeedRecord
	)
	if len(fruo.hooks) == 0 {
		node, err = fruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fruo.mutation = mutation
			node, err = fruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fruo.hooks) - 1; i >= 0; i-- {
			mut = fruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FeedRecordUpdateOne) SaveX(ctx context.Context) *FeedRecord {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FeedRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FeedRecordUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fruo *FeedRecordUpdateOne) sqlSave(ctx context.Context) (_node *FeedRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feedrecord.Table,
			Columns: feedrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: feedrecord.FieldID,
			},
		},
	}
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FeedRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldName,
		})
	}
	if fruo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feedrecord.FieldName,
		})
	}
	if value, ok := fruo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldShedName,
		})
	}
	if value, ok := fruo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldDate,
		})
	}
	if value, ok := fruo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldDate,
		})
	}
	if value, ok := fruo.mutation.RationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldRationCode,
		})
	}
	if value, ok := fruo.mutation.RationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldRationName,
		})
	}
	if value, ok := fruo.mutation.RationAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldRationAmount,
		})
	}
	if value, ok := fruo.mutation.AddedRationAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldRationAmount,
		})
	}
	if value, ok := fruo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCount,
		})
	}
	if value, ok := fruo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCount,
		})
	}
	if value, ok := fruo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldUserName,
		})
	}
	if value, ok := fruo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedrecord.FieldRemarks,
		})
	}
	if value, ok := fruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCreatedAt,
		})
	}
	if value, ok := fruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldCreatedAt,
		})
	}
	if value, ok := fruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldUpdatedAt,
		})
	}
	if value, ok := fruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: feedrecord.FieldUpdatedAt,
		})
	}
	if value, ok := fruo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedrecord.FieldDeleted,
		})
	}
	if value, ok := fruo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: feedrecord.FieldDeleted,
		})
	}
	_node = &FeedRecord{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

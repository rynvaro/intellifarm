// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/frozensemeninfo"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// FrozenSemenInfo is the model entity for the FrozenSemenInfo schema.
type FrozenSemenInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 编码
	Code string `json:"code,omitempty"`
	// 类型
	Type string `json:"type,omitempty"`
	// 国际注册号
	RegCode string `json:"regCode,omitempty"`
	// 公牛号
	BullNumber string `json:"bullNumber,omitempty"`
	// 出生日期
	Birthday int64 `json:"birthday,omitempty"`
	// 来源
	From string `json:"from,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FrozenSemenInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case frozensemeninfo.FieldID, frozensemeninfo.FieldBirthday, frozensemeninfo.FieldTenantId, frozensemeninfo.FieldCreatedAt, frozensemeninfo.FieldUpdatedAt, frozensemeninfo.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case frozensemeninfo.FieldName, frozensemeninfo.FieldCode, frozensemeninfo.FieldType, frozensemeninfo.FieldRegCode, frozensemeninfo.FieldBullNumber, frozensemeninfo.FieldFrom, frozensemeninfo.FieldTenantName, frozensemeninfo.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FrozenSemenInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FrozenSemenInfo fields.
func (fsi *FrozenSemenInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case frozensemeninfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fsi.ID = int(value.Int64)
		case frozensemeninfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fsi.Name = value.String
			}
		case frozensemeninfo.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				fsi.Code = value.String
			}
		case frozensemeninfo.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				fsi.Type = value.String
			}
		case frozensemeninfo.FieldRegCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field regCode", values[i])
			} else if value.Valid {
				fsi.RegCode = value.String
			}
		case frozensemeninfo.FieldBullNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bullNumber", values[i])
			} else if value.Valid {
				fsi.BullNumber = value.String
			}
		case frozensemeninfo.FieldBirthday:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				fsi.Birthday = value.Int64
			}
		case frozensemeninfo.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				fsi.From = value.String
			}
		case frozensemeninfo.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				fsi.TenantId = value.Int64
			}
		case frozensemeninfo.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				fsi.TenantName = value.String
			}
		case frozensemeninfo.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				fsi.Remarks = value.String
			}
		case frozensemeninfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				fsi.CreatedAt = value.Int64
			}
		case frozensemeninfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				fsi.UpdatedAt = value.Int64
			}
		case frozensemeninfo.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				fsi.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FrozenSemenInfo.
// Note that you need to call FrozenSemenInfo.Unwrap() before calling this method if this FrozenSemenInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (fsi *FrozenSemenInfo) Update() *FrozenSemenInfoUpdateOne {
	return (&FrozenSemenInfoClient{config: fsi.config}).UpdateOne(fsi)
}

// Unwrap unwraps the FrozenSemenInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fsi *FrozenSemenInfo) Unwrap() *FrozenSemenInfo {
	_tx, ok := fsi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FrozenSemenInfo is not a transactional entity")
	}
	fsi.config.driver = _tx.drv
	return fsi
}

// String implements the fmt.Stringer.
func (fsi *FrozenSemenInfo) String() string {
	var builder strings.Builder
	builder.WriteString("FrozenSemenInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fsi.ID))
	builder.WriteString("name=")
	builder.WriteString(fsi.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(fsi.Code)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fsi.Type)
	builder.WriteString(", ")
	builder.WriteString("regCode=")
	builder.WriteString(fsi.RegCode)
	builder.WriteString(", ")
	builder.WriteString("bullNumber=")
	builder.WriteString(fsi.BullNumber)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(fmt.Sprintf("%v", fsi.Birthday))
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(fsi.From)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", fsi.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(fsi.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(fsi.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", fsi.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", fsi.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", fsi.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// FrozenSemenInfos is a parsable slice of FrozenSemenInfo.
type FrozenSemenInfos []*FrozenSemenInfo

func (fsi FrozenSemenInfos) config(cfg config) {
	for _i := range fsi {
		fsi[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/frozensemeninfo"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// FrozenSemenInfoCreate is the builder for creating a FrozenSemenInfo entity.
type FrozenSemenInfoCreate struct {
	config
	mutation *FrozenSemenInfoMutation
	hooks    []Hook
}

// SetName sets the name field.
func (fsic *FrozenSemenInfoCreate) SetName(s string) *FrozenSemenInfoCreate {
	fsic.mutation.SetName(s)
	return fsic
}

// SetNillableName sets the name field if the given value is not nil.
func (fsic *FrozenSemenInfoCreate) SetNillableName(s *string) *FrozenSemenInfoCreate {
	if s != nil {
		fsic.SetName(*s)
	}
	return fsic
}

// SetCode sets the code field.
func (fsic *FrozenSemenInfoCreate) SetCode(s string) *FrozenSemenInfoCreate {
	fsic.mutation.SetCode(s)
	return fsic
}

// SetType sets the type field.
func (fsic *FrozenSemenInfoCreate) SetType(s string) *FrozenSemenInfoCreate {
	fsic.mutation.SetType(s)
	return fsic
}

// SetRegCode sets the regCode field.
func (fsic *FrozenSemenInfoCreate) SetRegCode(s string) *FrozenSemenInfoCreate {
	fsic.mutation.SetRegCode(s)
	return fsic
}

// SetBullNumber sets the bullNumber field.
func (fsic *FrozenSemenInfoCreate) SetBullNumber(s string) *FrozenSemenInfoCreate {
	fsic.mutation.SetBullNumber(s)
	return fsic
}

// SetBirthday sets the birthday field.
func (fsic *FrozenSemenInfoCreate) SetBirthday(i int64) *FrozenSemenInfoCreate {
	fsic.mutation.SetBirthday(i)
	return fsic
}

// SetFrom sets the from field.
func (fsic *FrozenSemenInfoCreate) SetFrom(s string) *FrozenSemenInfoCreate {
	fsic.mutation.SetFrom(s)
	return fsic
}

// SetTenantId sets the tenantId field.
func (fsic *FrozenSemenInfoCreate) SetTenantId(i int64) *FrozenSemenInfoCreate {
	fsic.mutation.SetTenantId(i)
	return fsic
}

// SetTenantName sets the tenantName field.
func (fsic *FrozenSemenInfoCreate) SetTenantName(s string) *FrozenSemenInfoCreate {
	fsic.mutation.SetTenantName(s)
	return fsic
}

// SetRemarks sets the remarks field.
func (fsic *FrozenSemenInfoCreate) SetRemarks(s string) *FrozenSemenInfoCreate {
	fsic.mutation.SetRemarks(s)
	return fsic
}

// SetCreatedAt sets the createdAt field.
func (fsic *FrozenSemenInfoCreate) SetCreatedAt(i int64) *FrozenSemenInfoCreate {
	fsic.mutation.SetCreatedAt(i)
	return fsic
}

// SetUpdatedAt sets the updatedAt field.
func (fsic *FrozenSemenInfoCreate) SetUpdatedAt(i int64) *FrozenSemenInfoCreate {
	fsic.mutation.SetUpdatedAt(i)
	return fsic
}

// SetDeleted sets the deleted field.
func (fsic *FrozenSemenInfoCreate) SetDeleted(i int) *FrozenSemenInfoCreate {
	fsic.mutation.SetDeleted(i)
	return fsic
}

// Mutation returns the FrozenSemenInfoMutation object of the builder.
func (fsic *FrozenSemenInfoCreate) Mutation() *FrozenSemenInfoMutation {
	return fsic.mutation
}

// Save creates the FrozenSemenInfo in the database.
func (fsic *FrozenSemenInfoCreate) Save(ctx context.Context) (*FrozenSemenInfo, error) {
	var (
		err  error
		node *FrozenSemenInfo
	)
	if len(fsic.hooks) == 0 {
		if err = fsic.check(); err != nil {
			return nil, err
		}
		node, err = fsic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrozenSemenInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fsic.check(); err != nil {
				return nil, err
			}
			fsic.mutation = mutation
			node, err = fsic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fsic.hooks) - 1; i >= 0; i-- {
			mut = fsic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fsic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fsic *FrozenSemenInfoCreate) SaveX(ctx context.Context) *FrozenSemenInfo {
	v, err := fsic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (fsic *FrozenSemenInfoCreate) check() error {
	if _, ok := fsic.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := fsic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := fsic.mutation.RegCode(); !ok {
		return &ValidationError{Name: "regCode", err: errors.New("ent: missing required field \"regCode\"")}
	}
	if _, ok := fsic.mutation.BullNumber(); !ok {
		return &ValidationError{Name: "bullNumber", err: errors.New("ent: missing required field \"bullNumber\"")}
	}
	if _, ok := fsic.mutation.Birthday(); !ok {
		return &ValidationError{Name: "birthday", err: errors.New("ent: missing required field \"birthday\"")}
	}
	if _, ok := fsic.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New("ent: missing required field \"from\"")}
	}
	if _, ok := fsic.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := fsic.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := fsic.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := fsic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := fsic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := fsic.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (fsic *FrozenSemenInfoCreate) sqlSave(ctx context.Context) (*FrozenSemenInfo, error) {
	_node, _spec := fsic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (fsic *FrozenSemenInfoCreate) createSpec() (*FrozenSemenInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &FrozenSemenInfo{config: fsic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: frozensemeninfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: frozensemeninfo.FieldID,
			},
		}
	)
	if value, ok := fsic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := fsic.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := fsic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldType,
		})
		_node.Type = value
	}
	if value, ok := fsic.mutation.RegCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldRegCode,
		})
		_node.RegCode = value
	}
	if value, ok := fsic.mutation.BullNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldBullNumber,
		})
		_node.BullNumber = value
	}
	if value, ok := fsic.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldBirthday,
		})
		_node.Birthday = value
	}
	if value, ok := fsic.mutation.From(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldFrom,
		})
		_node.From = value
	}
	if value, ok := fsic.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := fsic.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := fsic.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := fsic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fsic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fsic.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: frozensemeninfo.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// FrozenSemenInfoCreateBulk is the builder for creating a bulk of FrozenSemenInfo entities.
type FrozenSemenInfoCreateBulk struct {
	config
	builders []*FrozenSemenInfoCreate
}

// Save creates the FrozenSemenInfo entities in the database.
func (fsicb *FrozenSemenInfoCreateBulk) Save(ctx context.Context) ([]*FrozenSemenInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fsicb.builders))
	nodes := make([]*FrozenSemenInfo, len(fsicb.builders))
	mutators := make([]Mutator, len(fsicb.builders))
	for i := range fsicb.builders {
		func(i int, root context.Context) {
			builder := fsicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FrozenSemenInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fsicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fsicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fsicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (fsicb *FrozenSemenInfoCreateBulk) SaveX(ctx context.Context) []*FrozenSemenInfo {
	v, err := fsicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

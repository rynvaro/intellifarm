// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/frozensemeninfo"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// FrozenSemenInfoQuery is the builder for querying FrozenSemenInfo entities.
type FrozenSemenInfoQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.FrozenSemenInfo
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (fsiq *FrozenSemenInfoQuery) Where(ps ...predicate.FrozenSemenInfo) *FrozenSemenInfoQuery {
	fsiq.predicates = append(fsiq.predicates, ps...)
	return fsiq
}

// Limit adds a limit step to the query.
func (fsiq *FrozenSemenInfoQuery) Limit(limit int) *FrozenSemenInfoQuery {
	fsiq.limit = &limit
	return fsiq
}

// Offset adds an offset step to the query.
func (fsiq *FrozenSemenInfoQuery) Offset(offset int) *FrozenSemenInfoQuery {
	fsiq.offset = &offset
	return fsiq
}

// Order adds an order step to the query.
func (fsiq *FrozenSemenInfoQuery) Order(o ...OrderFunc) *FrozenSemenInfoQuery {
	fsiq.order = append(fsiq.order, o...)
	return fsiq
}

// First returns the first FrozenSemenInfo entity in the query. Returns *NotFoundError when no frozensemeninfo was found.
func (fsiq *FrozenSemenInfoQuery) First(ctx context.Context) (*FrozenSemenInfo, error) {
	nodes, err := fsiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{frozensemeninfo.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fsiq *FrozenSemenInfoQuery) FirstX(ctx context.Context) *FrozenSemenInfo {
	node, err := fsiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FrozenSemenInfo id in the query. Returns *NotFoundError when no id was found.
func (fsiq *FrozenSemenInfoQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = fsiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{frozensemeninfo.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (fsiq *FrozenSemenInfoQuery) FirstXID(ctx context.Context) int64 {
	id, err := fsiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only FrozenSemenInfo entity in the query, returns an error if not exactly one entity was returned.
func (fsiq *FrozenSemenInfoQuery) Only(ctx context.Context) (*FrozenSemenInfo, error) {
	nodes, err := fsiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{frozensemeninfo.Label}
	default:
		return nil, &NotSingularError{frozensemeninfo.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fsiq *FrozenSemenInfoQuery) OnlyX(ctx context.Context) *FrozenSemenInfo {
	node, err := fsiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only FrozenSemenInfo id in the query, returns an error if not exactly one id was returned.
func (fsiq *FrozenSemenInfoQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = fsiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{frozensemeninfo.Label}
	default:
		err = &NotSingularError{frozensemeninfo.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fsiq *FrozenSemenInfoQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := fsiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FrozenSemenInfos.
func (fsiq *FrozenSemenInfoQuery) All(ctx context.Context) ([]*FrozenSemenInfo, error) {
	if err := fsiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return fsiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (fsiq *FrozenSemenInfoQuery) AllX(ctx context.Context) []*FrozenSemenInfo {
	nodes, err := fsiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FrozenSemenInfo ids.
func (fsiq *FrozenSemenInfoQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := fsiq.Select(frozensemeninfo.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fsiq *FrozenSemenInfoQuery) IDsX(ctx context.Context) []int64 {
	ids, err := fsiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fsiq *FrozenSemenInfoQuery) Count(ctx context.Context) (int, error) {
	if err := fsiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return fsiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (fsiq *FrozenSemenInfoQuery) CountX(ctx context.Context) int {
	count, err := fsiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fsiq *FrozenSemenInfoQuery) Exist(ctx context.Context) (bool, error) {
	if err := fsiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return fsiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (fsiq *FrozenSemenInfoQuery) ExistX(ctx context.Context) bool {
	exist, err := fsiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fsiq *FrozenSemenInfoQuery) Clone() *FrozenSemenInfoQuery {
	return &FrozenSemenInfoQuery{
		config:     fsiq.config,
		limit:      fsiq.limit,
		offset:     fsiq.offset,
		order:      append([]OrderFunc{}, fsiq.order...),
		unique:     append([]string{}, fsiq.unique...),
		predicates: append([]predicate.FrozenSemenInfo{}, fsiq.predicates...),
		// clone intermediate query.
		sql:  fsiq.sql.Clone(),
		path: fsiq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FrozenSemenInfo.Query().
//		GroupBy(frozensemeninfo.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (fsiq *FrozenSemenInfoQuery) GroupBy(field string, fields ...string) *FrozenSemenInfoGroupBy {
	group := &FrozenSemenInfoGroupBy{config: fsiq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := fsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return fsiq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.FrozenSemenInfo.Query().
//		Select(frozensemeninfo.FieldName).
//		Scan(ctx, &v)
//
func (fsiq *FrozenSemenInfoQuery) Select(field string, fields ...string) *FrozenSemenInfoSelect {
	selector := &FrozenSemenInfoSelect{config: fsiq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := fsiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return fsiq.sqlQuery(), nil
	}
	return selector
}

func (fsiq *FrozenSemenInfoQuery) prepareQuery(ctx context.Context) error {
	if fsiq.path != nil {
		prev, err := fsiq.path(ctx)
		if err != nil {
			return err
		}
		fsiq.sql = prev
	}
	return nil
}

func (fsiq *FrozenSemenInfoQuery) sqlAll(ctx context.Context) ([]*FrozenSemenInfo, error) {
	var (
		nodes = []*FrozenSemenInfo{}
		_spec = fsiq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &FrozenSemenInfo{config: fsiq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, fsiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (fsiq *FrozenSemenInfoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fsiq.querySpec()
	return sqlgraph.CountNodes(ctx, fsiq.driver, _spec)
}

func (fsiq *FrozenSemenInfoQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := fsiq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (fsiq *FrozenSemenInfoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   frozensemeninfo.Table,
			Columns: frozensemeninfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: frozensemeninfo.FieldID,
			},
		},
		From:   fsiq.sql,
		Unique: true,
	}
	if ps := fsiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fsiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fsiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fsiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, frozensemeninfo.ValidColumn)
			}
		}
	}
	return _spec
}

func (fsiq *FrozenSemenInfoQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(fsiq.driver.Dialect())
	t1 := builder.Table(frozensemeninfo.Table)
	selector := builder.Select(t1.Columns(frozensemeninfo.Columns...)...).From(t1)
	if fsiq.sql != nil {
		selector = fsiq.sql
		selector.Select(selector.Columns(frozensemeninfo.Columns...)...)
	}
	for _, p := range fsiq.predicates {
		p(selector)
	}
	for _, p := range fsiq.order {
		p(selector, frozensemeninfo.ValidColumn)
	}
	if offset := fsiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fsiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FrozenSemenInfoGroupBy is the builder for group-by FrozenSemenInfo entities.
type FrozenSemenInfoGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fsigb *FrozenSemenInfoGroupBy) Aggregate(fns ...AggregateFunc) *FrozenSemenInfoGroupBy {
	fsigb.fns = append(fsigb.fns, fns...)
	return fsigb
}

// Scan applies the group-by query and scan the result into the given value.
func (fsigb *FrozenSemenInfoGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := fsigb.path(ctx)
	if err != nil {
		return err
	}
	fsigb.sql = query
	return fsigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fsigb *FrozenSemenInfoGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := fsigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (fsigb *FrozenSemenInfoGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(fsigb.fields) > 1 {
		return nil, errors.New("ent: FrozenSemenInfoGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := fsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fsigb *FrozenSemenInfoGroupBy) StringsX(ctx context.Context) []string {
	v, err := fsigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (fsigb *FrozenSemenInfoGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fsigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{frozensemeninfo.Label}
	default:
		err = fmt.Errorf("ent: FrozenSemenInfoGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fsigb *FrozenSemenInfoGroupBy) StringX(ctx context.Context) string {
	v, err := fsigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (fsigb *FrozenSemenInfoGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(fsigb.fields) > 1 {
		return nil, errors.New("ent: FrozenSemenInfoGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := fsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fsigb *FrozenSemenInfoGroupBy) IntsX(ctx context.Context) []int {
	v, err := fsigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (fsigb *FrozenSemenInfoGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fsigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{frozensemeninfo.Label}
	default:
		err = fmt.Errorf("ent: FrozenSemenInfoGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fsigb *FrozenSemenInfoGroupBy) IntX(ctx context.Context) int {
	v, err := fsigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (fsigb *FrozenSemenInfoGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(fsigb.fields) > 1 {
		return nil, errors.New("ent: FrozenSemenInfoGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := fsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fsigb *FrozenSemenInfoGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := fsigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (fsigb *FrozenSemenInfoGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fsigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{frozensemeninfo.Label}
	default:
		err = fmt.Errorf("ent: FrozenSemenInfoGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fsigb *FrozenSemenInfoGroupBy) Float64X(ctx context.Context) float64 {
	v, err := fsigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (fsigb *FrozenSemenInfoGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(fsigb.fields) > 1 {
		return nil, errors.New("ent: FrozenSemenInfoGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := fsigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fsigb *FrozenSemenInfoGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := fsigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (fsigb *FrozenSemenInfoGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fsigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{frozensemeninfo.Label}
	default:
		err = fmt.Errorf("ent: FrozenSemenInfoGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fsigb *FrozenSemenInfoGroupBy) BoolX(ctx context.Context) bool {
	v, err := fsigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fsigb *FrozenSemenInfoGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range fsigb.fields {
		if !frozensemeninfo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := fsigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fsigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fsigb *FrozenSemenInfoGroupBy) sqlQuery() *sql.Selector {
	selector := fsigb.sql
	columns := make([]string, 0, len(fsigb.fields)+len(fsigb.fns))
	columns = append(columns, fsigb.fields...)
	for _, fn := range fsigb.fns {
		columns = append(columns, fn(selector, frozensemeninfo.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(fsigb.fields...)
}

// FrozenSemenInfoSelect is the builder for select fields of FrozenSemenInfo entities.
type FrozenSemenInfoSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (fsis *FrozenSemenInfoSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := fsis.path(ctx)
	if err != nil {
		return err
	}
	fsis.sql = query
	return fsis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fsis *FrozenSemenInfoSelect) ScanX(ctx context.Context, v interface{}) {
	if err := fsis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (fsis *FrozenSemenInfoSelect) Strings(ctx context.Context) ([]string, error) {
	if len(fsis.fields) > 1 {
		return nil, errors.New("ent: FrozenSemenInfoSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := fsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fsis *FrozenSemenInfoSelect) StringsX(ctx context.Context) []string {
	v, err := fsis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (fsis *FrozenSemenInfoSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fsis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{frozensemeninfo.Label}
	default:
		err = fmt.Errorf("ent: FrozenSemenInfoSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fsis *FrozenSemenInfoSelect) StringX(ctx context.Context) string {
	v, err := fsis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (fsis *FrozenSemenInfoSelect) Ints(ctx context.Context) ([]int, error) {
	if len(fsis.fields) > 1 {
		return nil, errors.New("ent: FrozenSemenInfoSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := fsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fsis *FrozenSemenInfoSelect) IntsX(ctx context.Context) []int {
	v, err := fsis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (fsis *FrozenSemenInfoSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fsis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{frozensemeninfo.Label}
	default:
		err = fmt.Errorf("ent: FrozenSemenInfoSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fsis *FrozenSemenInfoSelect) IntX(ctx context.Context) int {
	v, err := fsis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (fsis *FrozenSemenInfoSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(fsis.fields) > 1 {
		return nil, errors.New("ent: FrozenSemenInfoSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := fsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fsis *FrozenSemenInfoSelect) Float64sX(ctx context.Context) []float64 {
	v, err := fsis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (fsis *FrozenSemenInfoSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fsis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{frozensemeninfo.Label}
	default:
		err = fmt.Errorf("ent: FrozenSemenInfoSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fsis *FrozenSemenInfoSelect) Float64X(ctx context.Context) float64 {
	v, err := fsis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (fsis *FrozenSemenInfoSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(fsis.fields) > 1 {
		return nil, errors.New("ent: FrozenSemenInfoSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := fsis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fsis *FrozenSemenInfoSelect) BoolsX(ctx context.Context) []bool {
	v, err := fsis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (fsis *FrozenSemenInfoSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fsis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{frozensemeninfo.Label}
	default:
		err = fmt.Errorf("ent: FrozenSemenInfoSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fsis *FrozenSemenInfoSelect) BoolX(ctx context.Context) bool {
	v, err := fsis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fsis *FrozenSemenInfoSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range fsis.fields {
		if !frozensemeninfo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := fsis.sqlQuery().Query()
	if err := fsis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fsis *FrozenSemenInfoSelect) sqlQuery() sql.Querier {
	selector := fsis.sql
	selector.Select(selector.Columns(fsis.fields...)...)
	return selector
}

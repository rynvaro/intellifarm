// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/frozensemeninfo"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// FrozenSemenInfoUpdate is the builder for updating FrozenSemenInfo entities.
type FrozenSemenInfoUpdate struct {
	config
	hooks      []Hook
	mutation   *FrozenSemenInfoMutation
	predicates []predicate.FrozenSemenInfo
}

// Where adds a new predicate for the builder.
func (fsiu *FrozenSemenInfoUpdate) Where(ps ...predicate.FrozenSemenInfo) *FrozenSemenInfoUpdate {
	fsiu.predicates = append(fsiu.predicates, ps...)
	return fsiu
}

// SetName sets the name field.
func (fsiu *FrozenSemenInfoUpdate) SetName(s string) *FrozenSemenInfoUpdate {
	fsiu.mutation.SetName(s)
	return fsiu
}

// SetNillableName sets the name field if the given value is not nil.
func (fsiu *FrozenSemenInfoUpdate) SetNillableName(s *string) *FrozenSemenInfoUpdate {
	if s != nil {
		fsiu.SetName(*s)
	}
	return fsiu
}

// ClearName clears the value of name.
func (fsiu *FrozenSemenInfoUpdate) ClearName() *FrozenSemenInfoUpdate {
	fsiu.mutation.ClearName()
	return fsiu
}

// SetCode sets the code field.
func (fsiu *FrozenSemenInfoUpdate) SetCode(s string) *FrozenSemenInfoUpdate {
	fsiu.mutation.SetCode(s)
	return fsiu
}

// SetType sets the type field.
func (fsiu *FrozenSemenInfoUpdate) SetType(s string) *FrozenSemenInfoUpdate {
	fsiu.mutation.SetType(s)
	return fsiu
}

// SetRegCode sets the regCode field.
func (fsiu *FrozenSemenInfoUpdate) SetRegCode(s string) *FrozenSemenInfoUpdate {
	fsiu.mutation.SetRegCode(s)
	return fsiu
}

// SetBullNumber sets the bullNumber field.
func (fsiu *FrozenSemenInfoUpdate) SetBullNumber(s string) *FrozenSemenInfoUpdate {
	fsiu.mutation.SetBullNumber(s)
	return fsiu
}

// SetBirthday sets the birthday field.
func (fsiu *FrozenSemenInfoUpdate) SetBirthday(i int64) *FrozenSemenInfoUpdate {
	fsiu.mutation.ResetBirthday()
	fsiu.mutation.SetBirthday(i)
	return fsiu
}

// AddBirthday adds i to birthday.
func (fsiu *FrozenSemenInfoUpdate) AddBirthday(i int64) *FrozenSemenInfoUpdate {
	fsiu.mutation.AddBirthday(i)
	return fsiu
}

// SetFrom sets the from field.
func (fsiu *FrozenSemenInfoUpdate) SetFrom(s string) *FrozenSemenInfoUpdate {
	fsiu.mutation.SetFrom(s)
	return fsiu
}

// SetTenantId sets the tenantId field.
func (fsiu *FrozenSemenInfoUpdate) SetTenantId(i int64) *FrozenSemenInfoUpdate {
	fsiu.mutation.ResetTenantId()
	fsiu.mutation.SetTenantId(i)
	return fsiu
}

// AddTenantId adds i to tenantId.
func (fsiu *FrozenSemenInfoUpdate) AddTenantId(i int64) *FrozenSemenInfoUpdate {
	fsiu.mutation.AddTenantId(i)
	return fsiu
}

// SetTenantName sets the tenantName field.
func (fsiu *FrozenSemenInfoUpdate) SetTenantName(s string) *FrozenSemenInfoUpdate {
	fsiu.mutation.SetTenantName(s)
	return fsiu
}

// SetRemarks sets the remarks field.
func (fsiu *FrozenSemenInfoUpdate) SetRemarks(s string) *FrozenSemenInfoUpdate {
	fsiu.mutation.SetRemarks(s)
	return fsiu
}

// SetCreatedAt sets the createdAt field.
func (fsiu *FrozenSemenInfoUpdate) SetCreatedAt(i int64) *FrozenSemenInfoUpdate {
	fsiu.mutation.ResetCreatedAt()
	fsiu.mutation.SetCreatedAt(i)
	return fsiu
}

// AddCreatedAt adds i to createdAt.
func (fsiu *FrozenSemenInfoUpdate) AddCreatedAt(i int64) *FrozenSemenInfoUpdate {
	fsiu.mutation.AddCreatedAt(i)
	return fsiu
}

// SetUpdatedAt sets the updatedAt field.
func (fsiu *FrozenSemenInfoUpdate) SetUpdatedAt(i int64) *FrozenSemenInfoUpdate {
	fsiu.mutation.ResetUpdatedAt()
	fsiu.mutation.SetUpdatedAt(i)
	return fsiu
}

// AddUpdatedAt adds i to updatedAt.
func (fsiu *FrozenSemenInfoUpdate) AddUpdatedAt(i int64) *FrozenSemenInfoUpdate {
	fsiu.mutation.AddUpdatedAt(i)
	return fsiu
}

// SetDeleted sets the deleted field.
func (fsiu *FrozenSemenInfoUpdate) SetDeleted(i int) *FrozenSemenInfoUpdate {
	fsiu.mutation.ResetDeleted()
	fsiu.mutation.SetDeleted(i)
	return fsiu
}

// AddDeleted adds i to deleted.
func (fsiu *FrozenSemenInfoUpdate) AddDeleted(i int) *FrozenSemenInfoUpdate {
	fsiu.mutation.AddDeleted(i)
	return fsiu
}

// Mutation returns the FrozenSemenInfoMutation object of the builder.
func (fsiu *FrozenSemenInfoUpdate) Mutation() *FrozenSemenInfoMutation {
	return fsiu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fsiu *FrozenSemenInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fsiu.hooks) == 0 {
		affected, err = fsiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrozenSemenInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fsiu.mutation = mutation
			affected, err = fsiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fsiu.hooks) - 1; i >= 0; i-- {
			mut = fsiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fsiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fsiu *FrozenSemenInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := fsiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsiu *FrozenSemenInfoUpdate) Exec(ctx context.Context) error {
	_, err := fsiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsiu *FrozenSemenInfoUpdate) ExecX(ctx context.Context) {
	if err := fsiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fsiu *FrozenSemenInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   frozensemeninfo.Table,
			Columns: frozensemeninfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: frozensemeninfo.FieldID,
			},
		},
	}
	if ps := fsiu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsiu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldName,
		})
	}
	if fsiu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frozensemeninfo.FieldName,
		})
	}
	if value, ok := fsiu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldCode,
		})
	}
	if value, ok := fsiu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldType,
		})
	}
	if value, ok := fsiu.mutation.RegCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldRegCode,
		})
	}
	if value, ok := fsiu.mutation.BullNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldBullNumber,
		})
	}
	if value, ok := fsiu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldBirthday,
		})
	}
	if value, ok := fsiu.mutation.AddedBirthday(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldBirthday,
		})
	}
	if value, ok := fsiu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldFrom,
		})
	}
	if value, ok := fsiu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldTenantId,
		})
	}
	if value, ok := fsiu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldTenantId,
		})
	}
	if value, ok := fsiu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldTenantName,
		})
	}
	if value, ok := fsiu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldRemarks,
		})
	}
	if value, ok := fsiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldCreatedAt,
		})
	}
	if value, ok := fsiu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldCreatedAt,
		})
	}
	if value, ok := fsiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldUpdatedAt,
		})
	}
	if value, ok := fsiu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldUpdatedAt,
		})
	}
	if value, ok := fsiu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: frozensemeninfo.FieldDeleted,
		})
	}
	if value, ok := fsiu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: frozensemeninfo.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frozensemeninfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FrozenSemenInfoUpdateOne is the builder for updating a single FrozenSemenInfo entity.
type FrozenSemenInfoUpdateOne struct {
	config
	hooks    []Hook
	mutation *FrozenSemenInfoMutation
}

// SetName sets the name field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetName(s string) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.SetName(s)
	return fsiuo
}

// SetNillableName sets the name field if the given value is not nil.
func (fsiuo *FrozenSemenInfoUpdateOne) SetNillableName(s *string) *FrozenSemenInfoUpdateOne {
	if s != nil {
		fsiuo.SetName(*s)
	}
	return fsiuo
}

// ClearName clears the value of name.
func (fsiuo *FrozenSemenInfoUpdateOne) ClearName() *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.ClearName()
	return fsiuo
}

// SetCode sets the code field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetCode(s string) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.SetCode(s)
	return fsiuo
}

// SetType sets the type field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetType(s string) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.SetType(s)
	return fsiuo
}

// SetRegCode sets the regCode field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetRegCode(s string) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.SetRegCode(s)
	return fsiuo
}

// SetBullNumber sets the bullNumber field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetBullNumber(s string) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.SetBullNumber(s)
	return fsiuo
}

// SetBirthday sets the birthday field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetBirthday(i int64) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.ResetBirthday()
	fsiuo.mutation.SetBirthday(i)
	return fsiuo
}

// AddBirthday adds i to birthday.
func (fsiuo *FrozenSemenInfoUpdateOne) AddBirthday(i int64) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.AddBirthday(i)
	return fsiuo
}

// SetFrom sets the from field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetFrom(s string) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.SetFrom(s)
	return fsiuo
}

// SetTenantId sets the tenantId field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetTenantId(i int64) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.ResetTenantId()
	fsiuo.mutation.SetTenantId(i)
	return fsiuo
}

// AddTenantId adds i to tenantId.
func (fsiuo *FrozenSemenInfoUpdateOne) AddTenantId(i int64) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.AddTenantId(i)
	return fsiuo
}

// SetTenantName sets the tenantName field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetTenantName(s string) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.SetTenantName(s)
	return fsiuo
}

// SetRemarks sets the remarks field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetRemarks(s string) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.SetRemarks(s)
	return fsiuo
}

// SetCreatedAt sets the createdAt field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetCreatedAt(i int64) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.ResetCreatedAt()
	fsiuo.mutation.SetCreatedAt(i)
	return fsiuo
}

// AddCreatedAt adds i to createdAt.
func (fsiuo *FrozenSemenInfoUpdateOne) AddCreatedAt(i int64) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.AddCreatedAt(i)
	return fsiuo
}

// SetUpdatedAt sets the updatedAt field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetUpdatedAt(i int64) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.ResetUpdatedAt()
	fsiuo.mutation.SetUpdatedAt(i)
	return fsiuo
}

// AddUpdatedAt adds i to updatedAt.
func (fsiuo *FrozenSemenInfoUpdateOne) AddUpdatedAt(i int64) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.AddUpdatedAt(i)
	return fsiuo
}

// SetDeleted sets the deleted field.
func (fsiuo *FrozenSemenInfoUpdateOne) SetDeleted(i int) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.ResetDeleted()
	fsiuo.mutation.SetDeleted(i)
	return fsiuo
}

// AddDeleted adds i to deleted.
func (fsiuo *FrozenSemenInfoUpdateOne) AddDeleted(i int) *FrozenSemenInfoUpdateOne {
	fsiuo.mutation.AddDeleted(i)
	return fsiuo
}

// Mutation returns the FrozenSemenInfoMutation object of the builder.
func (fsiuo *FrozenSemenInfoUpdateOne) Mutation() *FrozenSemenInfoMutation {
	return fsiuo.mutation
}

// Save executes the query and returns the updated entity.
func (fsiuo *FrozenSemenInfoUpdateOne) Save(ctx context.Context) (*FrozenSemenInfo, error) {
	var (
		err  error
		node *FrozenSemenInfo
	)
	if len(fsiuo.hooks) == 0 {
		node, err = fsiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrozenSemenInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fsiuo.mutation = mutation
			node, err = fsiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fsiuo.hooks) - 1; i >= 0; i-- {
			mut = fsiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fsiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fsiuo *FrozenSemenInfoUpdateOne) SaveX(ctx context.Context) *FrozenSemenInfo {
	node, err := fsiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsiuo *FrozenSemenInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := fsiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsiuo *FrozenSemenInfoUpdateOne) ExecX(ctx context.Context) {
	if err := fsiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fsiuo *FrozenSemenInfoUpdateOne) sqlSave(ctx context.Context) (_node *FrozenSemenInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   frozensemeninfo.Table,
			Columns: frozensemeninfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: frozensemeninfo.FieldID,
			},
		},
	}
	id, ok := fsiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FrozenSemenInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fsiuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldName,
		})
	}
	if fsiuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frozensemeninfo.FieldName,
		})
	}
	if value, ok := fsiuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldCode,
		})
	}
	if value, ok := fsiuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldType,
		})
	}
	if value, ok := fsiuo.mutation.RegCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldRegCode,
		})
	}
	if value, ok := fsiuo.mutation.BullNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldBullNumber,
		})
	}
	if value, ok := fsiuo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldBirthday,
		})
	}
	if value, ok := fsiuo.mutation.AddedBirthday(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldBirthday,
		})
	}
	if value, ok := fsiuo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldFrom,
		})
	}
	if value, ok := fsiuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldTenantId,
		})
	}
	if value, ok := fsiuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldTenantId,
		})
	}
	if value, ok := fsiuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldTenantName,
		})
	}
	if value, ok := fsiuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frozensemeninfo.FieldRemarks,
		})
	}
	if value, ok := fsiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldCreatedAt,
		})
	}
	if value, ok := fsiuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldCreatedAt,
		})
	}
	if value, ok := fsiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldUpdatedAt,
		})
	}
	if value, ok := fsiuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: frozensemeninfo.FieldUpdatedAt,
		})
	}
	if value, ok := fsiuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: frozensemeninfo.FieldDeleted,
		})
	}
	if value, ok := fsiuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: frozensemeninfo.FieldDeleted,
		})
	}
	_node = &FrozenSemenInfo{config: fsiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fsiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frozensemeninfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

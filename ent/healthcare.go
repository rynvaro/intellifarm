// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/healthcare"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// HealthCare is the model entity for the HealthCare schema.
type HealthCare struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CattleId holds the value of the "cattleId" field.
	CattleId int64 `json:"cattleId,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// ShedId holds the value of the "shedId" field.
	ShedId int64 `json:"shedId,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// Date holds the value of the "date" field.
	Date int64 `json:"date,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// VetName holds the value of the "vetName" field.
	VetName string `json:"vetName,omitempty"`
	// HoofArea holds the value of the "hoofArea" field.
	HoofArea string `json:"hoofArea,omitempty"`
	// HornMethod holds the value of the "hornMethod" field.
	HornMethod string `json:"hornMethod,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HealthCare) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // cattleId
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullInt64{},  // farmId
		&sql.NullString{}, // farmName
		&sql.NullInt64{},  // shedId
		&sql.NullString{}, // shedName
		&sql.NullString{}, // earNumber
		&sql.NullInt64{},  // date
		&sql.NullString{}, // reason
		&sql.NullString{}, // method
		&sql.NullString{}, // vetName
		&sql.NullString{}, // hoofArea
		&sql.NullString{}, // hornMethod
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
		&sql.NullString{}, // remarks
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HealthCare fields.
func (hc *HealthCare) assignValues(values ...interface{}) error {
	if m, n := len(values), len(healthcare.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	hc.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field cattleId", values[0])
	} else if value.Valid {
		hc.CattleId = value.Int64
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[1])
	} else if value.Valid {
		hc.TenantId = value.Int64
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[2])
	} else if value.Valid {
		hc.TenantName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[3])
	} else if value.Valid {
		hc.FarmId = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[4])
	} else if value.Valid {
		hc.FarmName = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field shedId", values[5])
	} else if value.Valid {
		hc.ShedId = value.Int64
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[6])
	} else if value.Valid {
		hc.ShedName = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[7])
	} else if value.Valid {
		hc.EarNumber = value.String
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[8])
	} else if value.Valid {
		hc.Date = value.Int64
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reason", values[9])
	} else if value.Valid {
		hc.Reason = value.String
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field method", values[10])
	} else if value.Valid {
		hc.Method = value.String
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field vetName", values[11])
	} else if value.Valid {
		hc.VetName = value.String
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field hoofArea", values[12])
	} else if value.Valid {
		hc.HoofArea = value.String
	}
	if value, ok := values[13].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field hornMethod", values[13])
	} else if value.Valid {
		hc.HornMethod = value.String
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[14])
	} else if value.Valid {
		hc.CreatedAt = value.Int64
	}
	if value, ok := values[15].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[15])
	} else if value.Valid {
		hc.UpdatedAt = value.Int64
	}
	if value, ok := values[16].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[16])
	} else if value.Valid {
		hc.Deleted = int(value.Int64)
	}
	if value, ok := values[17].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[17])
	} else if value.Valid {
		hc.Remarks = value.String
	}
	return nil
}

// Update returns a builder for updating this HealthCare.
// Note that, you need to call HealthCare.Unwrap() before calling this method, if this HealthCare
// was returned from a transaction, and the transaction was committed or rolled back.
func (hc *HealthCare) Update() *HealthCareUpdateOne {
	return (&HealthCareClient{config: hc.config}).UpdateOne(hc)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (hc *HealthCare) Unwrap() *HealthCare {
	tx, ok := hc.config.driver.(*txDriver)
	if !ok {
		panic("ent: HealthCare is not a transactional entity")
	}
	hc.config.driver = tx.drv
	return hc
}

// String implements the fmt.Stringer.
func (hc *HealthCare) String() string {
	var builder strings.Builder
	builder.WriteString("HealthCare(")
	builder.WriteString(fmt.Sprintf("id=%v", hc.ID))
	builder.WriteString(", cattleId=")
	builder.WriteString(fmt.Sprintf("%v", hc.CattleId))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", hc.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(hc.TenantName)
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", hc.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(hc.FarmName)
	builder.WriteString(", shedId=")
	builder.WriteString(fmt.Sprintf("%v", hc.ShedId))
	builder.WriteString(", shedName=")
	builder.WriteString(hc.ShedName)
	builder.WriteString(", earNumber=")
	builder.WriteString(hc.EarNumber)
	builder.WriteString(", date=")
	builder.WriteString(fmt.Sprintf("%v", hc.Date))
	builder.WriteString(", reason=")
	builder.WriteString(hc.Reason)
	builder.WriteString(", method=")
	builder.WriteString(hc.Method)
	builder.WriteString(", vetName=")
	builder.WriteString(hc.VetName)
	builder.WriteString(", hoofArea=")
	builder.WriteString(hc.HoofArea)
	builder.WriteString(", hornMethod=")
	builder.WriteString(hc.HornMethod)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", hc.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", hc.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", hc.Deleted))
	builder.WriteString(", remarks=")
	builder.WriteString(hc.Remarks)
	builder.WriteByte(')')
	return builder.String()
}

// HealthCares is a parsable slice of HealthCare.
type HealthCares []*HealthCare

func (hc HealthCares) config(cfg config) {
	for _i := range hc {
		hc[_i].config = cfg
	}
}

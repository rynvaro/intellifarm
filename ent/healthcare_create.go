// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/healthcare"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// HealthCareCreate is the builder for creating a HealthCare entity.
type HealthCareCreate struct {
	config
	mutation *HealthCareMutation
	hooks    []Hook
}

// SetCattleId sets the cattleId field.
func (hcc *HealthCareCreate) SetCattleId(i int64) *HealthCareCreate {
	hcc.mutation.SetCattleId(i)
	return hcc
}

// SetTenantId sets the tenantId field.
func (hcc *HealthCareCreate) SetTenantId(i int64) *HealthCareCreate {
	hcc.mutation.SetTenantId(i)
	return hcc
}

// SetTenantName sets the tenantName field.
func (hcc *HealthCareCreate) SetTenantName(s string) *HealthCareCreate {
	hcc.mutation.SetTenantName(s)
	return hcc
}

// SetFarmId sets the farmId field.
func (hcc *HealthCareCreate) SetFarmId(i int64) *HealthCareCreate {
	hcc.mutation.SetFarmId(i)
	return hcc
}

// SetFarmName sets the farmName field.
func (hcc *HealthCareCreate) SetFarmName(s string) *HealthCareCreate {
	hcc.mutation.SetFarmName(s)
	return hcc
}

// SetShedId sets the shedId field.
func (hcc *HealthCareCreate) SetShedId(i int64) *HealthCareCreate {
	hcc.mutation.SetShedId(i)
	return hcc
}

// SetShedName sets the shedName field.
func (hcc *HealthCareCreate) SetShedName(s string) *HealthCareCreate {
	hcc.mutation.SetShedName(s)
	return hcc
}

// SetEarNumber sets the earNumber field.
func (hcc *HealthCareCreate) SetEarNumber(s string) *HealthCareCreate {
	hcc.mutation.SetEarNumber(s)
	return hcc
}

// SetDate sets the date field.
func (hcc *HealthCareCreate) SetDate(i int64) *HealthCareCreate {
	hcc.mutation.SetDate(i)
	return hcc
}

// SetReason sets the reason field.
func (hcc *HealthCareCreate) SetReason(s string) *HealthCareCreate {
	hcc.mutation.SetReason(s)
	return hcc
}

// SetMethod sets the method field.
func (hcc *HealthCareCreate) SetMethod(s string) *HealthCareCreate {
	hcc.mutation.SetMethod(s)
	return hcc
}

// SetVetName sets the vetName field.
func (hcc *HealthCareCreate) SetVetName(s string) *HealthCareCreate {
	hcc.mutation.SetVetName(s)
	return hcc
}

// SetHoofArea sets the hoofArea field.
func (hcc *HealthCareCreate) SetHoofArea(s string) *HealthCareCreate {
	hcc.mutation.SetHoofArea(s)
	return hcc
}

// SetHornMethod sets the hornMethod field.
func (hcc *HealthCareCreate) SetHornMethod(s string) *HealthCareCreate {
	hcc.mutation.SetHornMethod(s)
	return hcc
}

// SetCreatedAt sets the createdAt field.
func (hcc *HealthCareCreate) SetCreatedAt(i int64) *HealthCareCreate {
	hcc.mutation.SetCreatedAt(i)
	return hcc
}

// SetUpdatedAt sets the updatedAt field.
func (hcc *HealthCareCreate) SetUpdatedAt(i int64) *HealthCareCreate {
	hcc.mutation.SetUpdatedAt(i)
	return hcc
}

// SetDeleted sets the deleted field.
func (hcc *HealthCareCreate) SetDeleted(i int) *HealthCareCreate {
	hcc.mutation.SetDeleted(i)
	return hcc
}

// SetRemarks sets the remarks field.
func (hcc *HealthCareCreate) SetRemarks(s string) *HealthCareCreate {
	hcc.mutation.SetRemarks(s)
	return hcc
}

// Mutation returns the HealthCareMutation object of the builder.
func (hcc *HealthCareCreate) Mutation() *HealthCareMutation {
	return hcc.mutation
}

// Save creates the HealthCare in the database.
func (hcc *HealthCareCreate) Save(ctx context.Context) (*HealthCare, error) {
	var (
		err  error
		node *HealthCare
	)
	if len(hcc.hooks) == 0 {
		if err = hcc.check(); err != nil {
			return nil, err
		}
		node, err = hcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HealthCareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hcc.check(); err != nil {
				return nil, err
			}
			hcc.mutation = mutation
			node, err = hcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hcc.hooks) - 1; i >= 0; i-- {
			mut = hcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hcc *HealthCareCreate) SaveX(ctx context.Context) *HealthCare {
	v, err := hcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (hcc *HealthCareCreate) check() error {
	if _, ok := hcc.mutation.CattleId(); !ok {
		return &ValidationError{Name: "cattleId", err: errors.New("ent: missing required field \"cattleId\"")}
	}
	if _, ok := hcc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := hcc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := hcc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New("ent: missing required field \"farmId\"")}
	}
	if _, ok := hcc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New("ent: missing required field \"farmName\"")}
	}
	if _, ok := hcc.mutation.ShedId(); !ok {
		return &ValidationError{Name: "shedId", err: errors.New("ent: missing required field \"shedId\"")}
	}
	if _, ok := hcc.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New("ent: missing required field \"shedName\"")}
	}
	if _, ok := hcc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if _, ok := hcc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := hcc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New("ent: missing required field \"reason\"")}
	}
	if _, ok := hcc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New("ent: missing required field \"method\"")}
	}
	if _, ok := hcc.mutation.VetName(); !ok {
		return &ValidationError{Name: "vetName", err: errors.New("ent: missing required field \"vetName\"")}
	}
	if _, ok := hcc.mutation.HoofArea(); !ok {
		return &ValidationError{Name: "hoofArea", err: errors.New("ent: missing required field \"hoofArea\"")}
	}
	if _, ok := hcc.mutation.HornMethod(); !ok {
		return &ValidationError{Name: "hornMethod", err: errors.New("ent: missing required field \"hornMethod\"")}
	}
	if _, ok := hcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := hcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := hcc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	if _, ok := hcc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	return nil
}

func (hcc *HealthCareCreate) sqlSave(ctx context.Context) (*HealthCare, error) {
	_node, _spec := hcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (hcc *HealthCareCreate) createSpec() (*HealthCare, *sqlgraph.CreateSpec) {
	var (
		_node = &HealthCare{config: hcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: healthcare.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: healthcare.FieldID,
			},
		}
	)
	if value, ok := hcc.mutation.CattleId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCattleId,
		})
		_node.CattleId = value
	}
	if value, ok := hcc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := hcc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := hcc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := hcc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := hcc.mutation.ShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldShedId,
		})
		_node.ShedId = value
	}
	if value, ok := hcc.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := hcc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := hcc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := hcc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := hcc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := hcc.mutation.VetName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldVetName,
		})
		_node.VetName = value
	}
	if value, ok := hcc.mutation.HoofArea(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldHoofArea,
		})
		_node.HoofArea = value
	}
	if value, ok := hcc.mutation.HornMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldHornMethod,
		})
		_node.HornMethod = value
	}
	if value, ok := hcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := hcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := hcc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: healthcare.FieldDeleted,
		})
		_node.Deleted = value
	}
	if value, ok := hcc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldRemarks,
		})
		_node.Remarks = value
	}
	return _node, _spec
}

// HealthCareCreateBulk is the builder for creating a bulk of HealthCare entities.
type HealthCareCreateBulk struct {
	config
	builders []*HealthCareCreate
}

// Save creates the HealthCare entities in the database.
func (hccb *HealthCareCreateBulk) Save(ctx context.Context) ([]*HealthCare, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hccb.builders))
	nodes := make([]*HealthCare, len(hccb.builders))
	mutators := make([]Mutator, len(hccb.builders))
	for i := range hccb.builders {
		func(i int, root context.Context) {
			builder := hccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HealthCareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (hccb *HealthCareCreateBulk) SaveX(ctx context.Context) []*HealthCare {
	v, err := hccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/healthcare"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HealthCareUpdate is the builder for updating HealthCare entities.
type HealthCareUpdate struct {
	config
	hooks    []Hook
	mutation *HealthCareMutation
}

// Where appends a list predicates to the HealthCareUpdate builder.
func (hcu *HealthCareUpdate) Where(ps ...predicate.HealthCare) *HealthCareUpdate {
	hcu.mutation.Where(ps...)
	return hcu
}

// SetCattleId sets the "cattleId" field.
func (hcu *HealthCareUpdate) SetCattleId(i int64) *HealthCareUpdate {
	hcu.mutation.ResetCattleId()
	hcu.mutation.SetCattleId(i)
	return hcu
}

// AddCattleId adds i to the "cattleId" field.
func (hcu *HealthCareUpdate) AddCattleId(i int64) *HealthCareUpdate {
	hcu.mutation.AddCattleId(i)
	return hcu
}

// SetTenantId sets the "tenantId" field.
func (hcu *HealthCareUpdate) SetTenantId(i int64) *HealthCareUpdate {
	hcu.mutation.ResetTenantId()
	hcu.mutation.SetTenantId(i)
	return hcu
}

// AddTenantId adds i to the "tenantId" field.
func (hcu *HealthCareUpdate) AddTenantId(i int64) *HealthCareUpdate {
	hcu.mutation.AddTenantId(i)
	return hcu
}

// SetTenantName sets the "tenantName" field.
func (hcu *HealthCareUpdate) SetTenantName(s string) *HealthCareUpdate {
	hcu.mutation.SetTenantName(s)
	return hcu
}

// SetFarmId sets the "farmId" field.
func (hcu *HealthCareUpdate) SetFarmId(i int64) *HealthCareUpdate {
	hcu.mutation.ResetFarmId()
	hcu.mutation.SetFarmId(i)
	return hcu
}

// AddFarmId adds i to the "farmId" field.
func (hcu *HealthCareUpdate) AddFarmId(i int64) *HealthCareUpdate {
	hcu.mutation.AddFarmId(i)
	return hcu
}

// SetFarmName sets the "farmName" field.
func (hcu *HealthCareUpdate) SetFarmName(s string) *HealthCareUpdate {
	hcu.mutation.SetFarmName(s)
	return hcu
}

// SetShedId sets the "shedId" field.
func (hcu *HealthCareUpdate) SetShedId(i int64) *HealthCareUpdate {
	hcu.mutation.ResetShedId()
	hcu.mutation.SetShedId(i)
	return hcu
}

// AddShedId adds i to the "shedId" field.
func (hcu *HealthCareUpdate) AddShedId(i int64) *HealthCareUpdate {
	hcu.mutation.AddShedId(i)
	return hcu
}

// SetShedName sets the "shedName" field.
func (hcu *HealthCareUpdate) SetShedName(s string) *HealthCareUpdate {
	hcu.mutation.SetShedName(s)
	return hcu
}

// SetEarNumber sets the "earNumber" field.
func (hcu *HealthCareUpdate) SetEarNumber(s string) *HealthCareUpdate {
	hcu.mutation.SetEarNumber(s)
	return hcu
}

// SetDate sets the "date" field.
func (hcu *HealthCareUpdate) SetDate(i int64) *HealthCareUpdate {
	hcu.mutation.ResetDate()
	hcu.mutation.SetDate(i)
	return hcu
}

// AddDate adds i to the "date" field.
func (hcu *HealthCareUpdate) AddDate(i int64) *HealthCareUpdate {
	hcu.mutation.AddDate(i)
	return hcu
}

// SetReason sets the "reason" field.
func (hcu *HealthCareUpdate) SetReason(s string) *HealthCareUpdate {
	hcu.mutation.SetReason(s)
	return hcu
}

// SetMethod sets the "method" field.
func (hcu *HealthCareUpdate) SetMethod(s string) *HealthCareUpdate {
	hcu.mutation.SetMethod(s)
	return hcu
}

// SetVetName sets the "vetName" field.
func (hcu *HealthCareUpdate) SetVetName(s string) *HealthCareUpdate {
	hcu.mutation.SetVetName(s)
	return hcu
}

// SetHoofArea sets the "hoofArea" field.
func (hcu *HealthCareUpdate) SetHoofArea(s string) *HealthCareUpdate {
	hcu.mutation.SetHoofArea(s)
	return hcu
}

// SetHornMethod sets the "hornMethod" field.
func (hcu *HealthCareUpdate) SetHornMethod(s string) *HealthCareUpdate {
	hcu.mutation.SetHornMethod(s)
	return hcu
}

// SetCreatedAt sets the "createdAt" field.
func (hcu *HealthCareUpdate) SetCreatedAt(i int64) *HealthCareUpdate {
	hcu.mutation.ResetCreatedAt()
	hcu.mutation.SetCreatedAt(i)
	return hcu
}

// AddCreatedAt adds i to the "createdAt" field.
func (hcu *HealthCareUpdate) AddCreatedAt(i int64) *HealthCareUpdate {
	hcu.mutation.AddCreatedAt(i)
	return hcu
}

// SetUpdatedAt sets the "updatedAt" field.
func (hcu *HealthCareUpdate) SetUpdatedAt(i int64) *HealthCareUpdate {
	hcu.mutation.ResetUpdatedAt()
	hcu.mutation.SetUpdatedAt(i)
	return hcu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (hcu *HealthCareUpdate) AddUpdatedAt(i int64) *HealthCareUpdate {
	hcu.mutation.AddUpdatedAt(i)
	return hcu
}

// SetDeleted sets the "deleted" field.
func (hcu *HealthCareUpdate) SetDeleted(i int) *HealthCareUpdate {
	hcu.mutation.ResetDeleted()
	hcu.mutation.SetDeleted(i)
	return hcu
}

// AddDeleted adds i to the "deleted" field.
func (hcu *HealthCareUpdate) AddDeleted(i int) *HealthCareUpdate {
	hcu.mutation.AddDeleted(i)
	return hcu
}

// SetRemarks sets the "remarks" field.
func (hcu *HealthCareUpdate) SetRemarks(s string) *HealthCareUpdate {
	hcu.mutation.SetRemarks(s)
	return hcu
}

// Mutation returns the HealthCareMutation object of the builder.
func (hcu *HealthCareUpdate) Mutation() *HealthCareMutation {
	return hcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hcu *HealthCareUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hcu.hooks) == 0 {
		affected, err = hcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HealthCareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hcu.mutation = mutation
			affected, err = hcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hcu.hooks) - 1; i >= 0; i-- {
			if hcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hcu *HealthCareUpdate) SaveX(ctx context.Context) int {
	affected, err := hcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hcu *HealthCareUpdate) Exec(ctx context.Context) error {
	_, err := hcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcu *HealthCareUpdate) ExecX(ctx context.Context) {
	if err := hcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hcu *HealthCareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   healthcare.Table,
			Columns: healthcare.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: healthcare.FieldID,
			},
		},
	}
	if ps := hcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hcu.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCattleId,
		})
	}
	if value, ok := hcu.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCattleId,
		})
	}
	if value, ok := hcu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldTenantId,
		})
	}
	if value, ok := hcu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldTenantId,
		})
	}
	if value, ok := hcu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldTenantName,
		})
	}
	if value, ok := hcu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldFarmId,
		})
	}
	if value, ok := hcu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldFarmId,
		})
	}
	if value, ok := hcu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldFarmName,
		})
	}
	if value, ok := hcu.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldShedId,
		})
	}
	if value, ok := hcu.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldShedId,
		})
	}
	if value, ok := hcu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldShedName,
		})
	}
	if value, ok := hcu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldEarNumber,
		})
	}
	if value, ok := hcu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldDate,
		})
	}
	if value, ok := hcu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldDate,
		})
	}
	if value, ok := hcu.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldReason,
		})
	}
	if value, ok := hcu.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldMethod,
		})
	}
	if value, ok := hcu.mutation.VetName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldVetName,
		})
	}
	if value, ok := hcu.mutation.HoofArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldHoofArea,
		})
	}
	if value, ok := hcu.mutation.HornMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldHornMethod,
		})
	}
	if value, ok := hcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCreatedAt,
		})
	}
	if value, ok := hcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCreatedAt,
		})
	}
	if value, ok := hcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldUpdatedAt,
		})
	}
	if value, ok := hcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldUpdatedAt,
		})
	}
	if value, ok := hcu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: healthcare.FieldDeleted,
		})
	}
	if value, ok := hcu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: healthcare.FieldDeleted,
		})
	}
	if value, ok := hcu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldRemarks,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{healthcare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HealthCareUpdateOne is the builder for updating a single HealthCare entity.
type HealthCareUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HealthCareMutation
}

// SetCattleId sets the "cattleId" field.
func (hcuo *HealthCareUpdateOne) SetCattleId(i int64) *HealthCareUpdateOne {
	hcuo.mutation.ResetCattleId()
	hcuo.mutation.SetCattleId(i)
	return hcuo
}

// AddCattleId adds i to the "cattleId" field.
func (hcuo *HealthCareUpdateOne) AddCattleId(i int64) *HealthCareUpdateOne {
	hcuo.mutation.AddCattleId(i)
	return hcuo
}

// SetTenantId sets the "tenantId" field.
func (hcuo *HealthCareUpdateOne) SetTenantId(i int64) *HealthCareUpdateOne {
	hcuo.mutation.ResetTenantId()
	hcuo.mutation.SetTenantId(i)
	return hcuo
}

// AddTenantId adds i to the "tenantId" field.
func (hcuo *HealthCareUpdateOne) AddTenantId(i int64) *HealthCareUpdateOne {
	hcuo.mutation.AddTenantId(i)
	return hcuo
}

// SetTenantName sets the "tenantName" field.
func (hcuo *HealthCareUpdateOne) SetTenantName(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetTenantName(s)
	return hcuo
}

// SetFarmId sets the "farmId" field.
func (hcuo *HealthCareUpdateOne) SetFarmId(i int64) *HealthCareUpdateOne {
	hcuo.mutation.ResetFarmId()
	hcuo.mutation.SetFarmId(i)
	return hcuo
}

// AddFarmId adds i to the "farmId" field.
func (hcuo *HealthCareUpdateOne) AddFarmId(i int64) *HealthCareUpdateOne {
	hcuo.mutation.AddFarmId(i)
	return hcuo
}

// SetFarmName sets the "farmName" field.
func (hcuo *HealthCareUpdateOne) SetFarmName(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetFarmName(s)
	return hcuo
}

// SetShedId sets the "shedId" field.
func (hcuo *HealthCareUpdateOne) SetShedId(i int64) *HealthCareUpdateOne {
	hcuo.mutation.ResetShedId()
	hcuo.mutation.SetShedId(i)
	return hcuo
}

// AddShedId adds i to the "shedId" field.
func (hcuo *HealthCareUpdateOne) AddShedId(i int64) *HealthCareUpdateOne {
	hcuo.mutation.AddShedId(i)
	return hcuo
}

// SetShedName sets the "shedName" field.
func (hcuo *HealthCareUpdateOne) SetShedName(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetShedName(s)
	return hcuo
}

// SetEarNumber sets the "earNumber" field.
func (hcuo *HealthCareUpdateOne) SetEarNumber(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetEarNumber(s)
	return hcuo
}

// SetDate sets the "date" field.
func (hcuo *HealthCareUpdateOne) SetDate(i int64) *HealthCareUpdateOne {
	hcuo.mutation.ResetDate()
	hcuo.mutation.SetDate(i)
	return hcuo
}

// AddDate adds i to the "date" field.
func (hcuo *HealthCareUpdateOne) AddDate(i int64) *HealthCareUpdateOne {
	hcuo.mutation.AddDate(i)
	return hcuo
}

// SetReason sets the "reason" field.
func (hcuo *HealthCareUpdateOne) SetReason(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetReason(s)
	return hcuo
}

// SetMethod sets the "method" field.
func (hcuo *HealthCareUpdateOne) SetMethod(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetMethod(s)
	return hcuo
}

// SetVetName sets the "vetName" field.
func (hcuo *HealthCareUpdateOne) SetVetName(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetVetName(s)
	return hcuo
}

// SetHoofArea sets the "hoofArea" field.
func (hcuo *HealthCareUpdateOne) SetHoofArea(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetHoofArea(s)
	return hcuo
}

// SetHornMethod sets the "hornMethod" field.
func (hcuo *HealthCareUpdateOne) SetHornMethod(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetHornMethod(s)
	return hcuo
}

// SetCreatedAt sets the "createdAt" field.
func (hcuo *HealthCareUpdateOne) SetCreatedAt(i int64) *HealthCareUpdateOne {
	hcuo.mutation.ResetCreatedAt()
	hcuo.mutation.SetCreatedAt(i)
	return hcuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (hcuo *HealthCareUpdateOne) AddCreatedAt(i int64) *HealthCareUpdateOne {
	hcuo.mutation.AddCreatedAt(i)
	return hcuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (hcuo *HealthCareUpdateOne) SetUpdatedAt(i int64) *HealthCareUpdateOne {
	hcuo.mutation.ResetUpdatedAt()
	hcuo.mutation.SetUpdatedAt(i)
	return hcuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (hcuo *HealthCareUpdateOne) AddUpdatedAt(i int64) *HealthCareUpdateOne {
	hcuo.mutation.AddUpdatedAt(i)
	return hcuo
}

// SetDeleted sets the "deleted" field.
func (hcuo *HealthCareUpdateOne) SetDeleted(i int) *HealthCareUpdateOne {
	hcuo.mutation.ResetDeleted()
	hcuo.mutation.SetDeleted(i)
	return hcuo
}

// AddDeleted adds i to the "deleted" field.
func (hcuo *HealthCareUpdateOne) AddDeleted(i int) *HealthCareUpdateOne {
	hcuo.mutation.AddDeleted(i)
	return hcuo
}

// SetRemarks sets the "remarks" field.
func (hcuo *HealthCareUpdateOne) SetRemarks(s string) *HealthCareUpdateOne {
	hcuo.mutation.SetRemarks(s)
	return hcuo
}

// Mutation returns the HealthCareMutation object of the builder.
func (hcuo *HealthCareUpdateOne) Mutation() *HealthCareMutation {
	return hcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hcuo *HealthCareUpdateOne) Select(field string, fields ...string) *HealthCareUpdateOne {
	hcuo.fields = append([]string{field}, fields...)
	return hcuo
}

// Save executes the query and returns the updated HealthCare entity.
func (hcuo *HealthCareUpdateOne) Save(ctx context.Context) (*HealthCare, error) {
	var (
		err  error
		node *HealthCare
	)
	if len(hcuo.hooks) == 0 {
		node, err = hcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HealthCareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hcuo.mutation = mutation
			node, err = hcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hcuo.hooks) - 1; i >= 0; i-- {
			if hcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HealthCare)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HealthCareMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hcuo *HealthCareUpdateOne) SaveX(ctx context.Context) *HealthCare {
	node, err := hcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hcuo *HealthCareUpdateOne) Exec(ctx context.Context) error {
	_, err := hcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcuo *HealthCareUpdateOne) ExecX(ctx context.Context) {
	if err := hcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hcuo *HealthCareUpdateOne) sqlSave(ctx context.Context) (_node *HealthCare, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   healthcare.Table,
			Columns: healthcare.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: healthcare.FieldID,
			},
		},
	}
	id, ok := hcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HealthCare.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, healthcare.FieldID)
		for _, f := range fields {
			if !healthcare.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != healthcare.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hcuo.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCattleId,
		})
	}
	if value, ok := hcuo.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCattleId,
		})
	}
	if value, ok := hcuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldTenantId,
		})
	}
	if value, ok := hcuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldTenantId,
		})
	}
	if value, ok := hcuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldTenantName,
		})
	}
	if value, ok := hcuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldFarmId,
		})
	}
	if value, ok := hcuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldFarmId,
		})
	}
	if value, ok := hcuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldFarmName,
		})
	}
	if value, ok := hcuo.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldShedId,
		})
	}
	if value, ok := hcuo.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldShedId,
		})
	}
	if value, ok := hcuo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldShedName,
		})
	}
	if value, ok := hcuo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldEarNumber,
		})
	}
	if value, ok := hcuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldDate,
		})
	}
	if value, ok := hcuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldDate,
		})
	}
	if value, ok := hcuo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldReason,
		})
	}
	if value, ok := hcuo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldMethod,
		})
	}
	if value, ok := hcuo.mutation.VetName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldVetName,
		})
	}
	if value, ok := hcuo.mutation.HoofArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldHoofArea,
		})
	}
	if value, ok := hcuo.mutation.HornMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldHornMethod,
		})
	}
	if value, ok := hcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCreatedAt,
		})
	}
	if value, ok := hcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldCreatedAt,
		})
	}
	if value, ok := hcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldUpdatedAt,
		})
	}
	if value, ok := hcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: healthcare.FieldUpdatedAt,
		})
	}
	if value, ok := hcuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: healthcare.FieldDeleted,
		})
	}
	if value, ok := hcuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: healthcare.FieldDeleted,
		})
	}
	if value, ok := hcuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: healthcare.FieldRemarks,
		})
	}
	_node = &HealthCare{config: hcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{healthcare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

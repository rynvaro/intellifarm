// Code generated by entc, DO NOT EDIT.

package hook

import (
	"cattleai/ent"
	"context"
	"fmt"
)

// The APIFunc type is an adapter to allow the use of ordinary
// function as API mutator.
type APIFunc func(context.Context, *ent.APIMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f APIFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.APIMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.APIMutation", m)
	}
	return f(ctx, mv)
}

// The AbortionFunc type is an adapter to allow the use of ordinary
// function as Abortion mutator.
type AbortionFunc func(context.Context, *ent.AbortionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AbortionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AbortionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AbortionMutation", m)
	}
	return f(ctx, mv)
}

// The AbortionReasonFunc type is an adapter to allow the use of ordinary
// function as AbortionReason mutator.
type AbortionReasonFunc func(context.Context, *ent.AbortionReasonMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AbortionReasonFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AbortionReasonMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AbortionReasonMutation", m)
	}
	return f(ctx, mv)
}

// The AbortionTypeFunc type is an adapter to allow the use of ordinary
// function as AbortionType mutator.
type AbortionTypeFunc func(context.Context, *ent.AbortionTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AbortionTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AbortionTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AbortionTypeMutation", m)
	}
	return f(ctx, mv)
}

// The BirthSurroundingFunc type is an adapter to allow the use of ordinary
// function as BirthSurrounding mutator.
type BirthSurroundingFunc func(context.Context, *ent.BirthSurroundingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BirthSurroundingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BirthSurroundingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BirthSurroundingMutation", m)
	}
	return f(ctx, mv)
}

// The BreathRateFunc type is an adapter to allow the use of ordinary
// function as BreathRate mutator.
type BreathRateFunc func(context.Context, *ent.BreathRateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BreathRateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BreathRateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BreathRateMutation", m)
	}
	return f(ctx, mv)
}

// The BreedingFunc type is an adapter to allow the use of ordinary
// function as Breeding mutator.
type BreedingFunc func(context.Context, *ent.BreedingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BreedingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BreedingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BreedingMutation", m)
	}
	return f(ctx, mv)
}

// The BreedingTypeFunc type is an adapter to allow the use of ordinary
// function as BreedingType mutator.
type BreedingTypeFunc func(context.Context, *ent.BreedingTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BreedingTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BreedingTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BreedingTypeMutation", m)
	}
	return f(ctx, mv)
}

// The CalveFunc type is an adapter to allow the use of ordinary
// function as Calve mutator.
type CalveFunc func(context.Context, *ent.CalveMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CalveFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CalveMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CalveMutation", m)
	}
	return f(ctx, mv)
}

// The CalveCountFunc type is an adapter to allow the use of ordinary
// function as CalveCount mutator.
type CalveCountFunc func(context.Context, *ent.CalveCountMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CalveCountFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CalveCountMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CalveCountMutation", m)
	}
	return f(ctx, mv)
}

// The CalveTypeFunc type is an adapter to allow the use of ordinary
// function as CalveType mutator.
type CalveTypeFunc func(context.Context, *ent.CalveTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CalveTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CalveTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CalveTypeMutation", m)
	}
	return f(ctx, mv)
}

// The CategoryFunc type is an adapter to allow the use of ordinary
// function as Category mutator.
type CategoryFunc func(context.Context, *ent.CategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CategoryMutation", m)
	}
	return f(ctx, mv)
}

// The CattleFunc type is an adapter to allow the use of ordinary
// function as Cattle mutator.
type CattleFunc func(context.Context, *ent.CattleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleMutation", m)
	}
	return f(ctx, mv)
}

// The CattleBreedFunc type is an adapter to allow the use of ordinary
// function as CattleBreed mutator.
type CattleBreedFunc func(context.Context, *ent.CattleBreedMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleBreedFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleBreedMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleBreedMutation", m)
	}
	return f(ctx, mv)
}

// The CattleCateFunc type is an adapter to allow the use of ordinary
// function as CattleCate mutator.
type CattleCateFunc func(context.Context, *ent.CattleCateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleCateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleCateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleCateMutation", m)
	}
	return f(ctx, mv)
}

// The CattleDieFunc type is an adapter to allow the use of ordinary
// function as CattleDie mutator.
type CattleDieFunc func(context.Context, *ent.CattleDieMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleDieFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleDieMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleDieMutation", m)
	}
	return f(ctx, mv)
}

// The CattleGenderFunc type is an adapter to allow the use of ordinary
// function as CattleGender mutator.
type CattleGenderFunc func(context.Context, *ent.CattleGenderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleGenderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleGenderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleGenderMutation", m)
	}
	return f(ctx, mv)
}

// The CattleGroupFunc type is an adapter to allow the use of ordinary
// function as CattleGroup mutator.
type CattleGroupFunc func(context.Context, *ent.CattleGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleGroupMutation", m)
	}
	return f(ctx, mv)
}

// The CattleGrowFunc type is an adapter to allow the use of ordinary
// function as CattleGrow mutator.
type CattleGrowFunc func(context.Context, *ent.CattleGrowMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleGrowFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleGrowMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleGrowMutation", m)
	}
	return f(ctx, mv)
}

// The CattleGrowsDataFunc type is an adapter to allow the use of ordinary
// function as CattleGrowsData mutator.
type CattleGrowsDataFunc func(context.Context, *ent.CattleGrowsDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleGrowsDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleGrowsDataMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleGrowsDataMutation", m)
	}
	return f(ctx, mv)
}

// The CattleGrowsRateFunc type is an adapter to allow the use of ordinary
// function as CattleGrowsRate mutator.
type CattleGrowsRateFunc func(context.Context, *ent.CattleGrowsRateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleGrowsRateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleGrowsRateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleGrowsRateMutation", m)
	}
	return f(ctx, mv)
}

// The CattleHairColorFunc type is an adapter to allow the use of ordinary
// function as CattleHairColor mutator.
type CattleHairColorFunc func(context.Context, *ent.CattleHairColorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleHairColorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleHairColorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleHairColorMutation", m)
	}
	return f(ctx, mv)
}

// The CattleInFunc type is an adapter to allow the use of ordinary
// function as CattleIn mutator.
type CattleInFunc func(context.Context, *ent.CattleInMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleInFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleInMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleInMutation", m)
	}
	return f(ctx, mv)
}

// The CattleJoinedTypeFunc type is an adapter to allow the use of ordinary
// function as CattleJoinedType mutator.
type CattleJoinedTypeFunc func(context.Context, *ent.CattleJoinedTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleJoinedTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleJoinedTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleJoinedTypeMutation", m)
	}
	return f(ctx, mv)
}

// The CattleMoveFunc type is an adapter to allow the use of ordinary
// function as CattleMove mutator.
type CattleMoveFunc func(context.Context, *ent.CattleMoveMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleMoveFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleMoveMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleMoveMutation", m)
	}
	return f(ctx, mv)
}

// The CattleMoveReasonFunc type is an adapter to allow the use of ordinary
// function as CattleMoveReason mutator.
type CattleMoveReasonFunc func(context.Context, *ent.CattleMoveReasonMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleMoveReasonFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleMoveReasonMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleMoveReasonMutation", m)
	}
	return f(ctx, mv)
}

// The CattleOutFunc type is an adapter to allow the use of ordinary
// function as CattleOut mutator.
type CattleOutFunc func(context.Context, *ent.CattleOutMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleOutFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleOutMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleOutMutation", m)
	}
	return f(ctx, mv)
}

// The CattleOwnerFunc type is an adapter to allow the use of ordinary
// function as CattleOwner mutator.
type CattleOwnerFunc func(context.Context, *ent.CattleOwnerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleOwnerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleOwnerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleOwnerMutation", m)
	}
	return f(ctx, mv)
}

// The CattleTypeFunc type is an adapter to allow the use of ordinary
// function as CattleType mutator.
type CattleTypeFunc func(context.Context, *ent.CattleTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ChangeFunc type is an adapter to allow the use of ordinary
// function as Change mutator.
type ChangeFunc func(context.Context, *ent.ChangeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ChangeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ChangeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ChangeMutation", m)
	}
	return f(ctx, mv)
}

// The ConcentrateFunc type is an adapter to allow the use of ordinary
// function as Concentrate mutator.
type ConcentrateFunc func(context.Context, *ent.ConcentrateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConcentrateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConcentrateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConcentrateMutation", m)
	}
	return f(ctx, mv)
}

// The ConcentrateFormulaFunc type is an adapter to allow the use of ordinary
// function as ConcentrateFormula mutator.
type ConcentrateFormulaFunc func(context.Context, *ent.ConcentrateFormulaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConcentrateFormulaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConcentrateFormulaMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConcentrateFormulaMutation", m)
	}
	return f(ctx, mv)
}

// The ConcentrateProcessFunc type is an adapter to allow the use of ordinary
// function as ConcentrateProcess mutator.
type ConcentrateProcessFunc func(context.Context, *ent.ConcentrateProcessMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConcentrateProcessFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConcentrateProcessMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConcentrateProcessMutation", m)
	}
	return f(ctx, mv)
}

// The ConfFunc type is an adapter to allow the use of ordinary
// function as Conf mutator.
type ConfFunc func(context.Context, *ent.ConfMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConfFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConfMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConfMutation", m)
	}
	return f(ctx, mv)
}

// The CustomerFunc type is an adapter to allow the use of ordinary
// function as Customer mutator.
type CustomerFunc func(context.Context, *ent.CustomerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CustomerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomerMutation", m)
	}
	return f(ctx, mv)
}

// The DiseaseInfoFunc type is an adapter to allow the use of ordinary
// function as DiseaseInfo mutator.
type DiseaseInfoFunc func(context.Context, *ent.DiseaseInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DiseaseInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DiseaseInfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DiseaseInfoMutation", m)
	}
	return f(ctx, mv)
}

// The DisinfectFunc type is an adapter to allow the use of ordinary
// function as Disinfect mutator.
type DisinfectFunc func(context.Context, *ent.DisinfectMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DisinfectFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DisinfectMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DisinfectMutation", m)
	}
	return f(ctx, mv)
}

// The DispenceFunc type is an adapter to allow the use of ordinary
// function as Dispence mutator.
type DispenceFunc func(context.Context, *ent.DispenceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DispenceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DispenceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DispenceMutation", m)
	}
	return f(ctx, mv)
}

// The DutyFunc type is an adapter to allow the use of ordinary
// function as Duty mutator.
type DutyFunc func(context.Context, *ent.DutyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DutyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DutyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DutyMutation", m)
	}
	return f(ctx, mv)
}

// The EpidemicFunc type is an adapter to allow the use of ordinary
// function as Epidemic mutator.
type EpidemicFunc func(context.Context, *ent.EpidemicMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EpidemicFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EpidemicMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EpidemicMutation", m)
	}
	return f(ctx, mv)
}

// The EpidemicTypeFunc type is an adapter to allow the use of ordinary
// function as EpidemicType mutator.
type EpidemicTypeFunc func(context.Context, *ent.EpidemicTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EpidemicTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EpidemicTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EpidemicTypeMutation", m)
	}
	return f(ctx, mv)
}

// The EstrusFunc type is an adapter to allow the use of ordinary
// function as Estrus mutator.
type EstrusFunc func(context.Context, *ent.EstrusMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EstrusFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EstrusMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EstrusMutation", m)
	}
	return f(ctx, mv)
}

// The EstrusTypeFunc type is an adapter to allow the use of ordinary
// function as EstrusType mutator.
type EstrusTypeFunc func(context.Context, *ent.EstrusTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EstrusTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EstrusTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EstrusTypeMutation", m)
	}
	return f(ctx, mv)
}

// The EventFunc type is an adapter to allow the use of ordinary
// function as Event mutator.
type EventFunc func(context.Context, *ent.EventMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EventFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EventMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EventMutation", m)
	}
	return f(ctx, mv)
}

// The FarmFunc type is an adapter to allow the use of ordinary
// function as Farm mutator.
type FarmFunc func(context.Context, *ent.FarmMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FarmFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FarmMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FarmMutation", m)
	}
	return f(ctx, mv)
}

// The FeedGroupFunc type is an adapter to allow the use of ordinary
// function as FeedGroup mutator.
type FeedGroupFunc func(context.Context, *ent.FeedGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeedGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FeedGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeedGroupMutation", m)
	}
	return f(ctx, mv)
}

// The FeedInfoFunc type is an adapter to allow the use of ordinary
// function as FeedInfo mutator.
type FeedInfoFunc func(context.Context, *ent.FeedInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeedInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FeedInfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeedInfoMutation", m)
	}
	return f(ctx, mv)
}

// The FeedRecordFunc type is an adapter to allow the use of ordinary
// function as FeedRecord mutator.
type FeedRecordFunc func(context.Context, *ent.FeedRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeedRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FeedRecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeedRecordMutation", m)
	}
	return f(ctx, mv)
}

// The FrozenSemenInfoFunc type is an adapter to allow the use of ordinary
// function as FrozenSemenInfo mutator.
type FrozenSemenInfoFunc func(context.Context, *ent.FrozenSemenInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FrozenSemenInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FrozenSemenInfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FrozenSemenInfoMutation", m)
	}
	return f(ctx, mv)
}

// The HairStateFunc type is an adapter to allow the use of ordinary
// function as HairState mutator.
type HairStateFunc func(context.Context, *ent.HairStateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HairStateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.HairStateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HairStateMutation", m)
	}
	return f(ctx, mv)
}

// The HealthCareFunc type is an adapter to allow the use of ordinary
// function as HealthCare mutator.
type HealthCareFunc func(context.Context, *ent.HealthCareMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HealthCareFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.HealthCareMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HealthCareMutation", m)
	}
	return f(ctx, mv)
}

// The ImmunityFunc type is an adapter to allow the use of ordinary
// function as Immunity mutator.
type ImmunityFunc func(context.Context, *ent.ImmunityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ImmunityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ImmunityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ImmunityMutation", m)
	}
	return f(ctx, mv)
}

// The InspectionFunc type is an adapter to allow the use of ordinary
// function as Inspection mutator.
type InspectionFunc func(context.Context, *ent.InspectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InspectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.InspectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InspectionMutation", m)
	}
	return f(ctx, mv)
}

// The InventoryFlowFunc type is an adapter to allow the use of ordinary
// function as InventoryFlow mutator.
type InventoryFlowFunc func(context.Context, *ent.InventoryFlowMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InventoryFlowFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.InventoryFlowMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InventoryFlowMutation", m)
	}
	return f(ctx, mv)
}

// The MaterialFunc type is an adapter to allow the use of ordinary
// function as Material mutator.
type MaterialFunc func(context.Context, *ent.MaterialMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MaterialFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MaterialMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MaterialMutation", m)
	}
	return f(ctx, mv)
}

// The MaterialTestFunc type is an adapter to allow the use of ordinary
// function as MaterialTest mutator.
type MaterialTestFunc func(context.Context, *ent.MaterialTestMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MaterialTestFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MaterialTestMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MaterialTestMutation", m)
	}
	return f(ctx, mv)
}

// The MedicineFunc type is an adapter to allow the use of ordinary
// function as Medicine mutator.
type MedicineFunc func(context.Context, *ent.MedicineMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MedicineFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MedicineMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MedicineMutation", m)
	}
	return f(ctx, mv)
}

// The OperationFunc type is an adapter to allow the use of ordinary
// function as Operation mutator.
type OperationFunc func(context.Context, *ent.OperationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OperationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OperationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OperationMutation", m)
	}
	return f(ctx, mv)
}

// The PositionFunc type is an adapter to allow the use of ordinary
// function as Position mutator.
type PositionFunc func(context.Context, *ent.PositionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PositionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PositionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PositionMutation", m)
	}
	return f(ctx, mv)
}

// The PositionApiFunc type is an adapter to allow the use of ordinary
// function as PositionApi mutator.
type PositionApiFunc func(context.Context, *ent.PositionApiMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PositionApiFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PositionApiMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PositionApiMutation", m)
	}
	return f(ctx, mv)
}

// The PregnancyTestFunc type is an adapter to allow the use of ordinary
// function as PregnancyTest mutator.
type PregnancyTestFunc func(context.Context, *ent.PregnancyTestMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PregnancyTestFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PregnancyTestMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PregnancyTestMutation", m)
	}
	return f(ctx, mv)
}

// The PregnancyTestMethodFunc type is an adapter to allow the use of ordinary
// function as PregnancyTestMethod mutator.
type PregnancyTestMethodFunc func(context.Context, *ent.PregnancyTestMethodMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PregnancyTestMethodFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PregnancyTestMethodMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PregnancyTestMethodMutation", m)
	}
	return f(ctx, mv)
}

// The PregnancyTestResultFunc type is an adapter to allow the use of ordinary
// function as PregnancyTestResult mutator.
type PregnancyTestResultFunc func(context.Context, *ent.PregnancyTestResultMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PregnancyTestResultFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PregnancyTestResultMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PregnancyTestResultMutation", m)
	}
	return f(ctx, mv)
}

// The PregnancyTestTypeFunc type is an adapter to allow the use of ordinary
// function as PregnancyTestType mutator.
type PregnancyTestTypeFunc func(context.Context, *ent.PregnancyTestTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PregnancyTestTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PregnancyTestTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PregnancyTestTypeMutation", m)
	}
	return f(ctx, mv)
}

// The RationFunc type is an adapter to allow the use of ordinary
// function as Ration mutator.
type RationFunc func(context.Context, *ent.RationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RationMutation", m)
	}
	return f(ctx, mv)
}

// The RationFormulaFunc type is an adapter to allow the use of ordinary
// function as RationFormula mutator.
type RationFormulaFunc func(context.Context, *ent.RationFormulaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RationFormulaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RationFormulaMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RationFormulaMutation", m)
	}
	return f(ctx, mv)
}

// The RationProcessFunc type is an adapter to allow the use of ordinary
// function as RationProcess mutator.
type RationProcessFunc func(context.Context, *ent.RationProcessMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RationProcessFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RationProcessMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RationProcessMutation", m)
	}
	return f(ctx, mv)
}

// The ReproductionParametersFunc type is an adapter to allow the use of ordinary
// function as ReproductionParameters mutator.
type ReproductionParametersFunc func(context.Context, *ent.ReproductionParametersMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReproductionParametersFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReproductionParametersMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReproductionParametersMutation", m)
	}
	return f(ctx, mv)
}

// The ReproductiveStateFunc type is an adapter to allow the use of ordinary
// function as ReproductiveState mutator.
type ReproductiveStateFunc func(context.Context, *ent.ReproductiveStateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReproductiveStateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReproductiveStateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReproductiveStateMutation", m)
	}
	return f(ctx, mv)
}

// The SemenFrozenTypeFunc type is an adapter to allow the use of ordinary
// function as SemenFrozenType mutator.
type SemenFrozenTypeFunc func(context.Context, *ent.SemenFrozenTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SemenFrozenTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SemenFrozenTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SemenFrozenTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ShedFunc type is an adapter to allow the use of ordinary
// function as Shed mutator.
type ShedFunc func(context.Context, *ent.ShedMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShedFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShedMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShedMutation", m)
	}
	return f(ctx, mv)
}

// The ShedCategoryFunc type is an adapter to allow the use of ordinary
// function as ShedCategory mutator.
type ShedCategoryFunc func(context.Context, *ent.ShedCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShedCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShedCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShedCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The ShedSettingFunc type is an adapter to allow the use of ordinary
// function as ShedSetting mutator.
type ShedSettingFunc func(context.Context, *ent.ShedSettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShedSettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShedSettingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShedSettingMutation", m)
	}
	return f(ctx, mv)
}

// The ShedTransFunc type is an adapter to allow the use of ordinary
// function as ShedTrans mutator.
type ShedTransFunc func(context.Context, *ent.ShedTransMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShedTransFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShedTransMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShedTransMutation", m)
	}
	return f(ctx, mv)
}

// The ShedTypeFunc type is an adapter to allow the use of ordinary
// function as ShedType mutator.
type ShedTypeFunc func(context.Context, *ent.ShedTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShedTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShedTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShedTypeMutation", m)
	}
	return f(ctx, mv)
}

// The TenantFunc type is an adapter to allow the use of ordinary
// function as Tenant mutator.
type TenantFunc func(context.Context, *ent.TenantMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TenantFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TenantMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TenantMutation", m)
	}
	return f(ctx, mv)
}

// The TreatmentResultFunc type is an adapter to allow the use of ordinary
// function as TreatmentResult mutator.
type TreatmentResultFunc func(context.Context, *ent.TreatmentResultMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TreatmentResultFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TreatmentResultMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TreatmentResultMutation", m)
	}
	return f(ctx, mv)
}

// The TreatmentStateFunc type is an adapter to allow the use of ordinary
// function as TreatmentState mutator.
type TreatmentStateFunc func(context.Context, *ent.TreatmentStateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TreatmentStateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TreatmentStateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TreatmentStateMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// The VeterinaryDrugsInfoFunc type is an adapter to allow the use of ordinary
// function as VeterinaryDrugsInfo mutator.
type VeterinaryDrugsInfoFunc func(context.Context, *ent.VeterinaryDrugsInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VeterinaryDrugsInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VeterinaryDrugsInfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VeterinaryDrugsInfoMutation", m)
	}
	return f(ctx, mv)
}

// The WarehouseSettingFunc type is an adapter to allow the use of ordinary
// function as WarehouseSetting mutator.
type WarehouseSettingFunc func(context.Context, *ent.WarehouseSettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WarehouseSettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WarehouseSettingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WarehouseSettingMutation", m)
	}
	return f(ctx, mv)
}

// The WhereaboutsFunc type is an adapter to allow the use of ordinary
// function as Whereabouts mutator.
type WhereaboutsFunc func(context.Context, *ent.WhereaboutsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WhereaboutsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WhereaboutsMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WhereaboutsMutation", m)
	}
	return f(ctx, mv)
}

// The WindDirectionFunc type is an adapter to allow the use of ordinary
// function as WindDirection mutator.
type WindDirectionFunc func(context.Context, *ent.WindDirectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WindDirectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WindDirectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WindDirectionMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(_ context.Context, m ent.Mutation) (ent.Value, error) {
			return nil, fmt.Errorf("%s operation is not allowed", m.Op())
		})
	}
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}

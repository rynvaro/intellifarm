// Code generated by entc, DO NOT EDIT.

package hook

import (
	"cattleai/ent"
	"context"
	"fmt"
)

// The BirthSurroundingFunc type is an adapter to allow the use of ordinary
// function as BirthSurrounding mutator.
type BirthSurroundingFunc func(context.Context, *ent.BirthSurroundingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BirthSurroundingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BirthSurroundingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BirthSurroundingMutation", m)
	}
	return f(ctx, mv)
}

// The BreathRateFunc type is an adapter to allow the use of ordinary
// function as BreathRate mutator.
type BreathRateFunc func(context.Context, *ent.BreathRateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BreathRateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BreathRateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BreathRateMutation", m)
	}
	return f(ctx, mv)
}

// The BreedingTypeFunc type is an adapter to allow the use of ordinary
// function as BreedingType mutator.
type BreedingTypeFunc func(context.Context, *ent.BreedingTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BreedingTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BreedingTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BreedingTypeMutation", m)
	}
	return f(ctx, mv)
}

// The CategoryFunc type is an adapter to allow the use of ordinary
// function as Category mutator.
type CategoryFunc func(context.Context, *ent.CategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CategoryMutation", m)
	}
	return f(ctx, mv)
}

// The CattleFunc type is an adapter to allow the use of ordinary
// function as Cattle mutator.
type CattleFunc func(context.Context, *ent.CattleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleMutation", m)
	}
	return f(ctx, mv)
}

// The CattleCateFunc type is an adapter to allow the use of ordinary
// function as CattleCate mutator.
type CattleCateFunc func(context.Context, *ent.CattleCateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleCateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleCateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleCateMutation", m)
	}
	return f(ctx, mv)
}

// The CattleGenderFunc type is an adapter to allow the use of ordinary
// function as CattleGender mutator.
type CattleGenderFunc func(context.Context, *ent.CattleGenderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleGenderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleGenderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleGenderMutation", m)
	}
	return f(ctx, mv)
}

// The CattleGrowsDataFunc type is an adapter to allow the use of ordinary
// function as CattleGrowsData mutator.
type CattleGrowsDataFunc func(context.Context, *ent.CattleGrowsDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleGrowsDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleGrowsDataMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleGrowsDataMutation", m)
	}
	return f(ctx, mv)
}

// The CattleGrowsRateFunc type is an adapter to allow the use of ordinary
// function as CattleGrowsRate mutator.
type CattleGrowsRateFunc func(context.Context, *ent.CattleGrowsRateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleGrowsRateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleGrowsRateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleGrowsRateMutation", m)
	}
	return f(ctx, mv)
}

// The CattleHairColorFunc type is an adapter to allow the use of ordinary
// function as CattleHairColor mutator.
type CattleHairColorFunc func(context.Context, *ent.CattleHairColorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleHairColorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleHairColorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleHairColorMutation", m)
	}
	return f(ctx, mv)
}

// The CattleJoinedTypeFunc type is an adapter to allow the use of ordinary
// function as CattleJoinedType mutator.
type CattleJoinedTypeFunc func(context.Context, *ent.CattleJoinedTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleJoinedTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleJoinedTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleJoinedTypeMutation", m)
	}
	return f(ctx, mv)
}

// The CattleOwnerFunc type is an adapter to allow the use of ordinary
// function as CattleOwner mutator.
type CattleOwnerFunc func(context.Context, *ent.CattleOwnerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleOwnerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleOwnerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleOwnerMutation", m)
	}
	return f(ctx, mv)
}

// The CattleTypeFunc type is an adapter to allow the use of ordinary
// function as CattleType mutator.
type CattleTypeFunc func(context.Context, *ent.CattleTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CattleTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CattleTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CattleTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ConfFunc type is an adapter to allow the use of ordinary
// function as Conf mutator.
type ConfFunc func(context.Context, *ent.ConfMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConfFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConfMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConfMutation", m)
	}
	return f(ctx, mv)
}

// The DutyFunc type is an adapter to allow the use of ordinary
// function as Duty mutator.
type DutyFunc func(context.Context, *ent.DutyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DutyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DutyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DutyMutation", m)
	}
	return f(ctx, mv)
}

// The FarmFunc type is an adapter to allow the use of ordinary
// function as Farm mutator.
type FarmFunc func(context.Context, *ent.FarmMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FarmFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FarmMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FarmMutation", m)
	}
	return f(ctx, mv)
}

// The HairStateFunc type is an adapter to allow the use of ordinary
// function as HairState mutator.
type HairStateFunc func(context.Context, *ent.HairStateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HairStateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.HairStateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HairStateMutation", m)
	}
	return f(ctx, mv)
}

// The PositionFunc type is an adapter to allow the use of ordinary
// function as Position mutator.
type PositionFunc func(context.Context, *ent.PositionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PositionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PositionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PositionMutation", m)
	}
	return f(ctx, mv)
}

// The ReproductiveStateFunc type is an adapter to allow the use of ordinary
// function as ReproductiveState mutator.
type ReproductiveStateFunc func(context.Context, *ent.ReproductiveStateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReproductiveStateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReproductiveStateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReproductiveStateMutation", m)
	}
	return f(ctx, mv)
}

// The ShedFunc type is an adapter to allow the use of ordinary
// function as Shed mutator.
type ShedFunc func(context.Context, *ent.ShedMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShedFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShedMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShedMutation", m)
	}
	return f(ctx, mv)
}

// The ShedCategoryFunc type is an adapter to allow the use of ordinary
// function as ShedCategory mutator.
type ShedCategoryFunc func(context.Context, *ent.ShedCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShedCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShedCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShedCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The ShedTypeFunc type is an adapter to allow the use of ordinary
// function as ShedType mutator.
type ShedTypeFunc func(context.Context, *ent.ShedTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShedTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShedTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShedTypeMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// The WindDirectionFunc type is an adapter to allow the use of ordinary
// function as WindDirection mutator.
type WindDirectionFunc func(context.Context, *ent.WindDirectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WindDirectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WindDirectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WindDirectionMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(_ context.Context, m ent.Mutation) (ent.Value, error) {
			return nil, fmt.Errorf("%s operation is not allowed", m.Op())
		})
	}
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}

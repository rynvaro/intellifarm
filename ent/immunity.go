// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/immunity"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Immunity is the model entity for the Immunity schema.
type Immunity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 日期
	Date int64 `json:"date,omitempty"`
	// 检疫项目ID
	ItemId int `json:"itemId,omitempty"`
	// 检疫项目
	ItemName string `json:"itemName,omitempty"`
	// 责任兽医
	UserName string `json:"userName,omitempty"`
	// 免疫用药
	Drug string `json:"drug,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Immunity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case immunity.FieldID, immunity.FieldCattleId, immunity.FieldTenantId, immunity.FieldFarmId, immunity.FieldShedId, immunity.FieldDate, immunity.FieldItemId, immunity.FieldCreatedAt, immunity.FieldUpdatedAt, immunity.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case immunity.FieldTenantName, immunity.FieldFarmName, immunity.FieldShedName, immunity.FieldName, immunity.FieldEarNumber, immunity.FieldItemName, immunity.FieldUserName, immunity.FieldDrug, immunity.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Immunity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Immunity fields.
func (i *Immunity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case immunity.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case immunity.FieldCattleId:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[j])
			} else if value.Valid {
				i.CattleId = value.Int64
			}
		case immunity.FieldTenantId:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[j])
			} else if value.Valid {
				i.TenantId = value.Int64
			}
		case immunity.FieldTenantName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[j])
			} else if value.Valid {
				i.TenantName = value.String
			}
		case immunity.FieldFarmId:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[j])
			} else if value.Valid {
				i.FarmId = value.Int64
			}
		case immunity.FieldFarmName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[j])
			} else if value.Valid {
				i.FarmName = value.String
			}
		case immunity.FieldShedId:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[j])
			} else if value.Valid {
				i.ShedId = value.Int64
			}
		case immunity.FieldShedName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[j])
			} else if value.Valid {
				i.ShedName = value.String
			}
		case immunity.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case immunity.FieldEarNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[j])
			} else if value.Valid {
				i.EarNumber = value.String
			}
		case immunity.FieldDate:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[j])
			} else if value.Valid {
				i.Date = value.Int64
			}
		case immunity.FieldItemId:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field itemId", values[j])
			} else if value.Valid {
				i.ItemId = int(value.Int64)
			}
		case immunity.FieldItemName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field itemName", values[j])
			} else if value.Valid {
				i.ItemName = value.String
			}
		case immunity.FieldUserName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[j])
			} else if value.Valid {
				i.UserName = value.String
			}
		case immunity.FieldDrug:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field drug", values[j])
			} else if value.Valid {
				i.Drug = value.String
			}
		case immunity.FieldRemarks:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[j])
			} else if value.Valid {
				i.Remarks = value.String
			}
		case immunity.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Int64
			}
		case immunity.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Int64
			}
		case immunity.FieldDeleted:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[j])
			} else if value.Valid {
				i.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Immunity.
// Note that you need to call Immunity.Unwrap() before calling this method if this Immunity
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Immunity) Update() *ImmunityUpdateOne {
	return (&ImmunityClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Immunity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Immunity) Unwrap() *Immunity {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Immunity is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Immunity) String() string {
	var builder strings.Builder
	builder.WriteString("Immunity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", i.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", i.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(i.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", i.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(i.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", i.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(i.ShedName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(i.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", i.Date))
	builder.WriteString(", ")
	builder.WriteString("itemId=")
	builder.WriteString(fmt.Sprintf("%v", i.ItemId))
	builder.WriteString(", ")
	builder.WriteString("itemName=")
	builder.WriteString(i.ItemName)
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(i.UserName)
	builder.WriteString(", ")
	builder.WriteString("drug=")
	builder.WriteString(i.Drug)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(i.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", i.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", i.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", i.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Immunities is a parsable slice of Immunity.
type Immunities []*Immunity

func (i Immunities) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/immunity"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ImmunityCreate is the builder for creating a Immunity entity.
type ImmunityCreate struct {
	config
	mutation *ImmunityMutation
	hooks    []Hook
}

// SetCattleId sets the cattleId field.
func (ic *ImmunityCreate) SetCattleId(i int64) *ImmunityCreate {
	ic.mutation.SetCattleId(i)
	return ic
}

// SetTenantId sets the tenantId field.
func (ic *ImmunityCreate) SetTenantId(i int64) *ImmunityCreate {
	ic.mutation.SetTenantId(i)
	return ic
}

// SetTenantName sets the tenantName field.
func (ic *ImmunityCreate) SetTenantName(s string) *ImmunityCreate {
	ic.mutation.SetTenantName(s)
	return ic
}

// SetFarmId sets the farmId field.
func (ic *ImmunityCreate) SetFarmId(i int64) *ImmunityCreate {
	ic.mutation.SetFarmId(i)
	return ic
}

// SetFarmName sets the farmName field.
func (ic *ImmunityCreate) SetFarmName(s string) *ImmunityCreate {
	ic.mutation.SetFarmName(s)
	return ic
}

// SetShedId sets the shedId field.
func (ic *ImmunityCreate) SetShedId(i int64) *ImmunityCreate {
	ic.mutation.SetShedId(i)
	return ic
}

// SetShedName sets the shedName field.
func (ic *ImmunityCreate) SetShedName(s string) *ImmunityCreate {
	ic.mutation.SetShedName(s)
	return ic
}

// SetName sets the name field.
func (ic *ImmunityCreate) SetName(s string) *ImmunityCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetEarNumber sets the earNumber field.
func (ic *ImmunityCreate) SetEarNumber(s string) *ImmunityCreate {
	ic.mutation.SetEarNumber(s)
	return ic
}

// SetDate sets the date field.
func (ic *ImmunityCreate) SetDate(i int64) *ImmunityCreate {
	ic.mutation.SetDate(i)
	return ic
}

// SetItemId sets the itemId field.
func (ic *ImmunityCreate) SetItemId(i int) *ImmunityCreate {
	ic.mutation.SetItemId(i)
	return ic
}

// SetItemName sets the itemName field.
func (ic *ImmunityCreate) SetItemName(s string) *ImmunityCreate {
	ic.mutation.SetItemName(s)
	return ic
}

// SetUserName sets the userName field.
func (ic *ImmunityCreate) SetUserName(s string) *ImmunityCreate {
	ic.mutation.SetUserName(s)
	return ic
}

// SetDrug sets the drug field.
func (ic *ImmunityCreate) SetDrug(s string) *ImmunityCreate {
	ic.mutation.SetDrug(s)
	return ic
}

// SetRemarks sets the remarks field.
func (ic *ImmunityCreate) SetRemarks(s string) *ImmunityCreate {
	ic.mutation.SetRemarks(s)
	return ic
}

// SetCreatedAt sets the createdAt field.
func (ic *ImmunityCreate) SetCreatedAt(i int64) *ImmunityCreate {
	ic.mutation.SetCreatedAt(i)
	return ic
}

// SetUpdatedAt sets the updatedAt field.
func (ic *ImmunityCreate) SetUpdatedAt(i int64) *ImmunityCreate {
	ic.mutation.SetUpdatedAt(i)
	return ic
}

// SetDeleted sets the deleted field.
func (ic *ImmunityCreate) SetDeleted(i int) *ImmunityCreate {
	ic.mutation.SetDeleted(i)
	return ic
}

// Mutation returns the ImmunityMutation object of the builder.
func (ic *ImmunityCreate) Mutation() *ImmunityMutation {
	return ic.mutation
}

// Save creates the Immunity in the database.
func (ic *ImmunityCreate) Save(ctx context.Context) (*Immunity, error) {
	var (
		err  error
		node *Immunity
	)
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImmunityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImmunityCreate) SaveX(ctx context.Context) *Immunity {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImmunityCreate) check() error {
	if _, ok := ic.mutation.CattleId(); !ok {
		return &ValidationError{Name: "cattleId", err: errors.New("ent: missing required field \"cattleId\"")}
	}
	if _, ok := ic.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := ic.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := ic.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New("ent: missing required field \"farmId\"")}
	}
	if _, ok := ic.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New("ent: missing required field \"farmName\"")}
	}
	if _, ok := ic.mutation.ShedId(); !ok {
		return &ValidationError{Name: "shedId", err: errors.New("ent: missing required field \"shedId\"")}
	}
	if _, ok := ic.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New("ent: missing required field \"shedName\"")}
	}
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := ic.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if _, ok := ic.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := ic.mutation.ItemId(); !ok {
		return &ValidationError{Name: "itemId", err: errors.New("ent: missing required field \"itemId\"")}
	}
	if _, ok := ic.mutation.ItemName(); !ok {
		return &ValidationError{Name: "itemName", err: errors.New("ent: missing required field \"itemName\"")}
	}
	if _, ok := ic.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := ic.mutation.Drug(); !ok {
		return &ValidationError{Name: "drug", err: errors.New("ent: missing required field \"drug\"")}
	}
	if _, ok := ic.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := ic.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (ic *ImmunityCreate) sqlSave(ctx context.Context) (*Immunity, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ic *ImmunityCreate) createSpec() (*Immunity, *sqlgraph.CreateSpec) {
	var (
		_node = &Immunity{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: immunity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: immunity.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.CattleId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCattleId,
		})
		_node.CattleId = value
	}
	if value, ok := ic.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := ic.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := ic.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := ic.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := ic.mutation.ShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldShedId,
		})
		_node.ShedId = value
	}
	if value, ok := ic.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ic.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := ic.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := ic.mutation.ItemId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldItemId,
		})
		_node.ItemId = value
	}
	if value, ok := ic.mutation.ItemName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldItemName,
		})
		_node.ItemName = value
	}
	if value, ok := ic.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := ic.mutation.Drug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldDrug,
		})
		_node.Drug = value
	}
	if value, ok := ic.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// ImmunityCreateBulk is the builder for creating a bulk of Immunity entities.
type ImmunityCreateBulk struct {
	config
	builders []*ImmunityCreate
}

// Save creates the Immunity entities in the database.
func (icb *ImmunityCreateBulk) Save(ctx context.Context) ([]*Immunity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Immunity, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImmunityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (icb *ImmunityCreateBulk) SaveX(ctx context.Context) []*Immunity {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

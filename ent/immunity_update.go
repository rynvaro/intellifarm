// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/immunity"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImmunityUpdate is the builder for updating Immunity entities.
type ImmunityUpdate struct {
	config
	hooks    []Hook
	mutation *ImmunityMutation
}

// Where appends a list predicates to the ImmunityUpdate builder.
func (iu *ImmunityUpdate) Where(ps ...predicate.Immunity) *ImmunityUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetCattleId sets the "cattleId" field.
func (iu *ImmunityUpdate) SetCattleId(i int64) *ImmunityUpdate {
	iu.mutation.ResetCattleId()
	iu.mutation.SetCattleId(i)
	return iu
}

// AddCattleId adds i to the "cattleId" field.
func (iu *ImmunityUpdate) AddCattleId(i int64) *ImmunityUpdate {
	iu.mutation.AddCattleId(i)
	return iu
}

// SetTenantId sets the "tenantId" field.
func (iu *ImmunityUpdate) SetTenantId(i int64) *ImmunityUpdate {
	iu.mutation.ResetTenantId()
	iu.mutation.SetTenantId(i)
	return iu
}

// AddTenantId adds i to the "tenantId" field.
func (iu *ImmunityUpdate) AddTenantId(i int64) *ImmunityUpdate {
	iu.mutation.AddTenantId(i)
	return iu
}

// SetTenantName sets the "tenantName" field.
func (iu *ImmunityUpdate) SetTenantName(s string) *ImmunityUpdate {
	iu.mutation.SetTenantName(s)
	return iu
}

// SetFarmId sets the "farmId" field.
func (iu *ImmunityUpdate) SetFarmId(i int64) *ImmunityUpdate {
	iu.mutation.ResetFarmId()
	iu.mutation.SetFarmId(i)
	return iu
}

// AddFarmId adds i to the "farmId" field.
func (iu *ImmunityUpdate) AddFarmId(i int64) *ImmunityUpdate {
	iu.mutation.AddFarmId(i)
	return iu
}

// SetFarmName sets the "farmName" field.
func (iu *ImmunityUpdate) SetFarmName(s string) *ImmunityUpdate {
	iu.mutation.SetFarmName(s)
	return iu
}

// SetShedId sets the "shedId" field.
func (iu *ImmunityUpdate) SetShedId(i int64) *ImmunityUpdate {
	iu.mutation.ResetShedId()
	iu.mutation.SetShedId(i)
	return iu
}

// AddShedId adds i to the "shedId" field.
func (iu *ImmunityUpdate) AddShedId(i int64) *ImmunityUpdate {
	iu.mutation.AddShedId(i)
	return iu
}

// SetShedName sets the "shedName" field.
func (iu *ImmunityUpdate) SetShedName(s string) *ImmunityUpdate {
	iu.mutation.SetShedName(s)
	return iu
}

// SetName sets the "name" field.
func (iu *ImmunityUpdate) SetName(s string) *ImmunityUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetEarNumber sets the "earNumber" field.
func (iu *ImmunityUpdate) SetEarNumber(s string) *ImmunityUpdate {
	iu.mutation.SetEarNumber(s)
	return iu
}

// SetDate sets the "date" field.
func (iu *ImmunityUpdate) SetDate(i int64) *ImmunityUpdate {
	iu.mutation.ResetDate()
	iu.mutation.SetDate(i)
	return iu
}

// AddDate adds i to the "date" field.
func (iu *ImmunityUpdate) AddDate(i int64) *ImmunityUpdate {
	iu.mutation.AddDate(i)
	return iu
}

// SetItemId sets the "itemId" field.
func (iu *ImmunityUpdate) SetItemId(i int) *ImmunityUpdate {
	iu.mutation.ResetItemId()
	iu.mutation.SetItemId(i)
	return iu
}

// AddItemId adds i to the "itemId" field.
func (iu *ImmunityUpdate) AddItemId(i int) *ImmunityUpdate {
	iu.mutation.AddItemId(i)
	return iu
}

// SetItemName sets the "itemName" field.
func (iu *ImmunityUpdate) SetItemName(s string) *ImmunityUpdate {
	iu.mutation.SetItemName(s)
	return iu
}

// SetUserName sets the "userName" field.
func (iu *ImmunityUpdate) SetUserName(s string) *ImmunityUpdate {
	iu.mutation.SetUserName(s)
	return iu
}

// SetDrug sets the "drug" field.
func (iu *ImmunityUpdate) SetDrug(s string) *ImmunityUpdate {
	iu.mutation.SetDrug(s)
	return iu
}

// SetRemarks sets the "remarks" field.
func (iu *ImmunityUpdate) SetRemarks(s string) *ImmunityUpdate {
	iu.mutation.SetRemarks(s)
	return iu
}

// SetCreatedAt sets the "createdAt" field.
func (iu *ImmunityUpdate) SetCreatedAt(i int64) *ImmunityUpdate {
	iu.mutation.ResetCreatedAt()
	iu.mutation.SetCreatedAt(i)
	return iu
}

// AddCreatedAt adds i to the "createdAt" field.
func (iu *ImmunityUpdate) AddCreatedAt(i int64) *ImmunityUpdate {
	iu.mutation.AddCreatedAt(i)
	return iu
}

// SetUpdatedAt sets the "updatedAt" field.
func (iu *ImmunityUpdate) SetUpdatedAt(i int64) *ImmunityUpdate {
	iu.mutation.ResetUpdatedAt()
	iu.mutation.SetUpdatedAt(i)
	return iu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (iu *ImmunityUpdate) AddUpdatedAt(i int64) *ImmunityUpdate {
	iu.mutation.AddUpdatedAt(i)
	return iu
}

// SetDeleted sets the "deleted" field.
func (iu *ImmunityUpdate) SetDeleted(i int) *ImmunityUpdate {
	iu.mutation.ResetDeleted()
	iu.mutation.SetDeleted(i)
	return iu
}

// AddDeleted adds i to the "deleted" field.
func (iu *ImmunityUpdate) AddDeleted(i int) *ImmunityUpdate {
	iu.mutation.AddDeleted(i)
	return iu
}

// Mutation returns the ImmunityMutation object of the builder.
func (iu *ImmunityUpdate) Mutation() *ImmunityMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImmunityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImmunityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImmunityUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImmunityUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImmunityUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ImmunityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   immunity.Table,
			Columns: immunity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: immunity.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCattleId,
		})
	}
	if value, ok := iu.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCattleId,
		})
	}
	if value, ok := iu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldTenantId,
		})
	}
	if value, ok := iu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldTenantId,
		})
	}
	if value, ok := iu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldTenantName,
		})
	}
	if value, ok := iu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldFarmId,
		})
	}
	if value, ok := iu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldFarmId,
		})
	}
	if value, ok := iu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldFarmName,
		})
	}
	if value, ok := iu.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldShedId,
		})
	}
	if value, ok := iu.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldShedId,
		})
	}
	if value, ok := iu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldShedName,
		})
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldName,
		})
	}
	if value, ok := iu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldEarNumber,
		})
	}
	if value, ok := iu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldDate,
		})
	}
	if value, ok := iu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldDate,
		})
	}
	if value, ok := iu.mutation.ItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldItemId,
		})
	}
	if value, ok := iu.mutation.AddedItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldItemId,
		})
	}
	if value, ok := iu.mutation.ItemName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldItemName,
		})
	}
	if value, ok := iu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldUserName,
		})
	}
	if value, ok := iu.mutation.Drug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldDrug,
		})
	}
	if value, ok := iu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldRemarks,
		})
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCreatedAt,
		})
	}
	if value, ok := iu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCreatedAt,
		})
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldUpdatedAt,
		})
	}
	if value, ok := iu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldUpdatedAt,
		})
	}
	if value, ok := iu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldDeleted,
		})
	}
	if value, ok := iu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{immunity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ImmunityUpdateOne is the builder for updating a single Immunity entity.
type ImmunityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImmunityMutation
}

// SetCattleId sets the "cattleId" field.
func (iuo *ImmunityUpdateOne) SetCattleId(i int64) *ImmunityUpdateOne {
	iuo.mutation.ResetCattleId()
	iuo.mutation.SetCattleId(i)
	return iuo
}

// AddCattleId adds i to the "cattleId" field.
func (iuo *ImmunityUpdateOne) AddCattleId(i int64) *ImmunityUpdateOne {
	iuo.mutation.AddCattleId(i)
	return iuo
}

// SetTenantId sets the "tenantId" field.
func (iuo *ImmunityUpdateOne) SetTenantId(i int64) *ImmunityUpdateOne {
	iuo.mutation.ResetTenantId()
	iuo.mutation.SetTenantId(i)
	return iuo
}

// AddTenantId adds i to the "tenantId" field.
func (iuo *ImmunityUpdateOne) AddTenantId(i int64) *ImmunityUpdateOne {
	iuo.mutation.AddTenantId(i)
	return iuo
}

// SetTenantName sets the "tenantName" field.
func (iuo *ImmunityUpdateOne) SetTenantName(s string) *ImmunityUpdateOne {
	iuo.mutation.SetTenantName(s)
	return iuo
}

// SetFarmId sets the "farmId" field.
func (iuo *ImmunityUpdateOne) SetFarmId(i int64) *ImmunityUpdateOne {
	iuo.mutation.ResetFarmId()
	iuo.mutation.SetFarmId(i)
	return iuo
}

// AddFarmId adds i to the "farmId" field.
func (iuo *ImmunityUpdateOne) AddFarmId(i int64) *ImmunityUpdateOne {
	iuo.mutation.AddFarmId(i)
	return iuo
}

// SetFarmName sets the "farmName" field.
func (iuo *ImmunityUpdateOne) SetFarmName(s string) *ImmunityUpdateOne {
	iuo.mutation.SetFarmName(s)
	return iuo
}

// SetShedId sets the "shedId" field.
func (iuo *ImmunityUpdateOne) SetShedId(i int64) *ImmunityUpdateOne {
	iuo.mutation.ResetShedId()
	iuo.mutation.SetShedId(i)
	return iuo
}

// AddShedId adds i to the "shedId" field.
func (iuo *ImmunityUpdateOne) AddShedId(i int64) *ImmunityUpdateOne {
	iuo.mutation.AddShedId(i)
	return iuo
}

// SetShedName sets the "shedName" field.
func (iuo *ImmunityUpdateOne) SetShedName(s string) *ImmunityUpdateOne {
	iuo.mutation.SetShedName(s)
	return iuo
}

// SetName sets the "name" field.
func (iuo *ImmunityUpdateOne) SetName(s string) *ImmunityUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetEarNumber sets the "earNumber" field.
func (iuo *ImmunityUpdateOne) SetEarNumber(s string) *ImmunityUpdateOne {
	iuo.mutation.SetEarNumber(s)
	return iuo
}

// SetDate sets the "date" field.
func (iuo *ImmunityUpdateOne) SetDate(i int64) *ImmunityUpdateOne {
	iuo.mutation.ResetDate()
	iuo.mutation.SetDate(i)
	return iuo
}

// AddDate adds i to the "date" field.
func (iuo *ImmunityUpdateOne) AddDate(i int64) *ImmunityUpdateOne {
	iuo.mutation.AddDate(i)
	return iuo
}

// SetItemId sets the "itemId" field.
func (iuo *ImmunityUpdateOne) SetItemId(i int) *ImmunityUpdateOne {
	iuo.mutation.ResetItemId()
	iuo.mutation.SetItemId(i)
	return iuo
}

// AddItemId adds i to the "itemId" field.
func (iuo *ImmunityUpdateOne) AddItemId(i int) *ImmunityUpdateOne {
	iuo.mutation.AddItemId(i)
	return iuo
}

// SetItemName sets the "itemName" field.
func (iuo *ImmunityUpdateOne) SetItemName(s string) *ImmunityUpdateOne {
	iuo.mutation.SetItemName(s)
	return iuo
}

// SetUserName sets the "userName" field.
func (iuo *ImmunityUpdateOne) SetUserName(s string) *ImmunityUpdateOne {
	iuo.mutation.SetUserName(s)
	return iuo
}

// SetDrug sets the "drug" field.
func (iuo *ImmunityUpdateOne) SetDrug(s string) *ImmunityUpdateOne {
	iuo.mutation.SetDrug(s)
	return iuo
}

// SetRemarks sets the "remarks" field.
func (iuo *ImmunityUpdateOne) SetRemarks(s string) *ImmunityUpdateOne {
	iuo.mutation.SetRemarks(s)
	return iuo
}

// SetCreatedAt sets the "createdAt" field.
func (iuo *ImmunityUpdateOne) SetCreatedAt(i int64) *ImmunityUpdateOne {
	iuo.mutation.ResetCreatedAt()
	iuo.mutation.SetCreatedAt(i)
	return iuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (iuo *ImmunityUpdateOne) AddCreatedAt(i int64) *ImmunityUpdateOne {
	iuo.mutation.AddCreatedAt(i)
	return iuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (iuo *ImmunityUpdateOne) SetUpdatedAt(i int64) *ImmunityUpdateOne {
	iuo.mutation.ResetUpdatedAt()
	iuo.mutation.SetUpdatedAt(i)
	return iuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (iuo *ImmunityUpdateOne) AddUpdatedAt(i int64) *ImmunityUpdateOne {
	iuo.mutation.AddUpdatedAt(i)
	return iuo
}

// SetDeleted sets the "deleted" field.
func (iuo *ImmunityUpdateOne) SetDeleted(i int) *ImmunityUpdateOne {
	iuo.mutation.ResetDeleted()
	iuo.mutation.SetDeleted(i)
	return iuo
}

// AddDeleted adds i to the "deleted" field.
func (iuo *ImmunityUpdateOne) AddDeleted(i int) *ImmunityUpdateOne {
	iuo.mutation.AddDeleted(i)
	return iuo
}

// Mutation returns the ImmunityMutation object of the builder.
func (iuo *ImmunityUpdateOne) Mutation() *ImmunityMutation {
	return iuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImmunityUpdateOne) Select(field string, fields ...string) *ImmunityUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Immunity entity.
func (iuo *ImmunityUpdateOne) Save(ctx context.Context) (*Immunity, error) {
	var (
		err  error
		node *Immunity
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImmunityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Immunity)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ImmunityMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImmunityUpdateOne) SaveX(ctx context.Context) *Immunity {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImmunityUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImmunityUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ImmunityUpdateOne) sqlSave(ctx context.Context) (_node *Immunity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   immunity.Table,
			Columns: immunity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: immunity.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Immunity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, immunity.FieldID)
		for _, f := range fields {
			if !immunity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != immunity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCattleId,
		})
	}
	if value, ok := iuo.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCattleId,
		})
	}
	if value, ok := iuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldTenantId,
		})
	}
	if value, ok := iuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldTenantId,
		})
	}
	if value, ok := iuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldTenantName,
		})
	}
	if value, ok := iuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldFarmId,
		})
	}
	if value, ok := iuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldFarmId,
		})
	}
	if value, ok := iuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldFarmName,
		})
	}
	if value, ok := iuo.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldShedId,
		})
	}
	if value, ok := iuo.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldShedId,
		})
	}
	if value, ok := iuo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldShedName,
		})
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldName,
		})
	}
	if value, ok := iuo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldEarNumber,
		})
	}
	if value, ok := iuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldDate,
		})
	}
	if value, ok := iuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldDate,
		})
	}
	if value, ok := iuo.mutation.ItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldItemId,
		})
	}
	if value, ok := iuo.mutation.AddedItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldItemId,
		})
	}
	if value, ok := iuo.mutation.ItemName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldItemName,
		})
	}
	if value, ok := iuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldUserName,
		})
	}
	if value, ok := iuo.mutation.Drug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldDrug,
		})
	}
	if value, ok := iuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: immunity.FieldRemarks,
		})
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCreatedAt,
		})
	}
	if value, ok := iuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldCreatedAt,
		})
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldUpdatedAt,
		})
	}
	if value, ok := iuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: immunity.FieldUpdatedAt,
		})
	}
	if value, ok := iuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldDeleted,
		})
	}
	if value, ok := iuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: immunity.FieldDeleted,
		})
	}
	_node = &Immunity{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{immunity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

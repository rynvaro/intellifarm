// Code generated by entc, DO NOT EDIT.

package inspection

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// EarNumber applies equality check predicate on the "earNumber" field. It's identical to EarNumberEQ.
func EarNumber(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// ShedName applies equality check predicate on the "shedName" field. It's identical to ShedNameEQ.
func ShedName(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// ItemId applies equality check predicate on the "itemId" field. It's identical to ItemIdEQ.
func ItemId(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemId), v))
	})
}

// ItemName applies equality check predicate on the "itemName" field. It's identical to ItemNameEQ.
func ItemName(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemName), v))
	})
}

// MethodId applies equality check predicate on the "methodId" field. It's identical to MethodIdEQ.
func MethodId(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethodId), v))
	})
}

// MethodName applies equality check predicate on the "methodName" field. It's identical to MethodNameEQ.
func MethodName(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethodName), v))
	})
}

// ById applies equality check predicate on the "byId" field. It's identical to ByIdEQ.
func ById(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldById), v))
	})
}

// ByName applies equality check predicate on the "byName" field. It's identical to ByNameEQ.
func ByName(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldByName), v))
	})
}

// ResultId applies equality check predicate on the "resultId" field. It's identical to ResultIdEQ.
func ResultId(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultId), v))
	})
}

// ResultName applies equality check predicate on the "resultName" field. It's identical to ResultNameEQ.
func ResultName(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultName), v))
	})
}

// HandleId applies equality check predicate on the "handleId" field. It's identical to HandleIdEQ.
func HandleId(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandleId), v))
	})
}

// HandleName applies equality check predicate on the "handleName" field. It's identical to HandleNameEQ.
func HandleName(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandleName), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EarNumberEQ applies the EQ predicate on the "earNumber" field.
func EarNumberEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberNEQ applies the NEQ predicate on the "earNumber" field.
func EarNumberNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberIn applies the In predicate on the "earNumber" field.
func EarNumberIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEarNumber), v...))
	})
}

// EarNumberNotIn applies the NotIn predicate on the "earNumber" field.
func EarNumberNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEarNumber), v...))
	})
}

// EarNumberGT applies the GT predicate on the "earNumber" field.
func EarNumberGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEarNumber), v))
	})
}

// EarNumberGTE applies the GTE predicate on the "earNumber" field.
func EarNumberGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberLT applies the LT predicate on the "earNumber" field.
func EarNumberLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEarNumber), v))
	})
}

// EarNumberLTE applies the LTE predicate on the "earNumber" field.
func EarNumberLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberContains applies the Contains predicate on the "earNumber" field.
func EarNumberContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasPrefix applies the HasPrefix predicate on the "earNumber" field.
func EarNumberHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasSuffix applies the HasSuffix predicate on the "earNumber" field.
func EarNumberHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEarNumber), v))
	})
}

// EarNumberEqualFold applies the EqualFold predicate on the "earNumber" field.
func EarNumberEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEarNumber), v))
	})
}

// EarNumberContainsFold applies the ContainsFold predicate on the "earNumber" field.
func EarNumberContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEarNumber), v))
	})
}

// ShedNameEQ applies the EQ predicate on the "shedName" field.
func ShedNameEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedName), v))
	})
}

// ShedNameNEQ applies the NEQ predicate on the "shedName" field.
func ShedNameNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedName), v))
	})
}

// ShedNameIn applies the In predicate on the "shedName" field.
func ShedNameIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShedName), v...))
	})
}

// ShedNameNotIn applies the NotIn predicate on the "shedName" field.
func ShedNameNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShedName), v...))
	})
}

// ShedNameGT applies the GT predicate on the "shedName" field.
func ShedNameGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedName), v))
	})
}

// ShedNameGTE applies the GTE predicate on the "shedName" field.
func ShedNameGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedName), v))
	})
}

// ShedNameLT applies the LT predicate on the "shedName" field.
func ShedNameLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedName), v))
	})
}

// ShedNameLTE applies the LTE predicate on the "shedName" field.
func ShedNameLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedName), v))
	})
}

// ShedNameContains applies the Contains predicate on the "shedName" field.
func ShedNameContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedName), v))
	})
}

// ShedNameHasPrefix applies the HasPrefix predicate on the "shedName" field.
func ShedNameHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedName), v))
	})
}

// ShedNameHasSuffix applies the HasSuffix predicate on the "shedName" field.
func ShedNameHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedName), v))
	})
}

// ShedNameEqualFold applies the EqualFold predicate on the "shedName" field.
func ShedNameEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedName), v))
	})
}

// ShedNameContainsFold applies the ContainsFold predicate on the "shedName" field.
func ShedNameContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedName), v))
	})
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// ItemIdEQ applies the EQ predicate on the "itemId" field.
func ItemIdEQ(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemId), v))
	})
}

// ItemIdNEQ applies the NEQ predicate on the "itemId" field.
func ItemIdNEQ(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemId), v))
	})
}

// ItemIdIn applies the In predicate on the "itemId" field.
func ItemIdIn(vs ...int) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldItemId), v...))
	})
}

// ItemIdNotIn applies the NotIn predicate on the "itemId" field.
func ItemIdNotIn(vs ...int) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldItemId), v...))
	})
}

// ItemIdGT applies the GT predicate on the "itemId" field.
func ItemIdGT(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemId), v))
	})
}

// ItemIdGTE applies the GTE predicate on the "itemId" field.
func ItemIdGTE(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemId), v))
	})
}

// ItemIdLT applies the LT predicate on the "itemId" field.
func ItemIdLT(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemId), v))
	})
}

// ItemIdLTE applies the LTE predicate on the "itemId" field.
func ItemIdLTE(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemId), v))
	})
}

// ItemNameEQ applies the EQ predicate on the "itemName" field.
func ItemNameEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemName), v))
	})
}

// ItemNameNEQ applies the NEQ predicate on the "itemName" field.
func ItemNameNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemName), v))
	})
}

// ItemNameIn applies the In predicate on the "itemName" field.
func ItemNameIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldItemName), v...))
	})
}

// ItemNameNotIn applies the NotIn predicate on the "itemName" field.
func ItemNameNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldItemName), v...))
	})
}

// ItemNameGT applies the GT predicate on the "itemName" field.
func ItemNameGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemName), v))
	})
}

// ItemNameGTE applies the GTE predicate on the "itemName" field.
func ItemNameGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemName), v))
	})
}

// ItemNameLT applies the LT predicate on the "itemName" field.
func ItemNameLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemName), v))
	})
}

// ItemNameLTE applies the LTE predicate on the "itemName" field.
func ItemNameLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemName), v))
	})
}

// ItemNameContains applies the Contains predicate on the "itemName" field.
func ItemNameContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemName), v))
	})
}

// ItemNameHasPrefix applies the HasPrefix predicate on the "itemName" field.
func ItemNameHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemName), v))
	})
}

// ItemNameHasSuffix applies the HasSuffix predicate on the "itemName" field.
func ItemNameHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemName), v))
	})
}

// ItemNameEqualFold applies the EqualFold predicate on the "itemName" field.
func ItemNameEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemName), v))
	})
}

// ItemNameContainsFold applies the ContainsFold predicate on the "itemName" field.
func ItemNameContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemName), v))
	})
}

// MethodIdEQ applies the EQ predicate on the "methodId" field.
func MethodIdEQ(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethodId), v))
	})
}

// MethodIdNEQ applies the NEQ predicate on the "methodId" field.
func MethodIdNEQ(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethodId), v))
	})
}

// MethodIdIn applies the In predicate on the "methodId" field.
func MethodIdIn(vs ...int) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMethodId), v...))
	})
}

// MethodIdNotIn applies the NotIn predicate on the "methodId" field.
func MethodIdNotIn(vs ...int) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMethodId), v...))
	})
}

// MethodIdGT applies the GT predicate on the "methodId" field.
func MethodIdGT(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethodId), v))
	})
}

// MethodIdGTE applies the GTE predicate on the "methodId" field.
func MethodIdGTE(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethodId), v))
	})
}

// MethodIdLT applies the LT predicate on the "methodId" field.
func MethodIdLT(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethodId), v))
	})
}

// MethodIdLTE applies the LTE predicate on the "methodId" field.
func MethodIdLTE(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethodId), v))
	})
}

// MethodNameEQ applies the EQ predicate on the "methodName" field.
func MethodNameEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethodName), v))
	})
}

// MethodNameNEQ applies the NEQ predicate on the "methodName" field.
func MethodNameNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethodName), v))
	})
}

// MethodNameIn applies the In predicate on the "methodName" field.
func MethodNameIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMethodName), v...))
	})
}

// MethodNameNotIn applies the NotIn predicate on the "methodName" field.
func MethodNameNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMethodName), v...))
	})
}

// MethodNameGT applies the GT predicate on the "methodName" field.
func MethodNameGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethodName), v))
	})
}

// MethodNameGTE applies the GTE predicate on the "methodName" field.
func MethodNameGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethodName), v))
	})
}

// MethodNameLT applies the LT predicate on the "methodName" field.
func MethodNameLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethodName), v))
	})
}

// MethodNameLTE applies the LTE predicate on the "methodName" field.
func MethodNameLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethodName), v))
	})
}

// MethodNameContains applies the Contains predicate on the "methodName" field.
func MethodNameContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethodName), v))
	})
}

// MethodNameHasPrefix applies the HasPrefix predicate on the "methodName" field.
func MethodNameHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethodName), v))
	})
}

// MethodNameHasSuffix applies the HasSuffix predicate on the "methodName" field.
func MethodNameHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethodName), v))
	})
}

// MethodNameEqualFold applies the EqualFold predicate on the "methodName" field.
func MethodNameEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethodName), v))
	})
}

// MethodNameContainsFold applies the ContainsFold predicate on the "methodName" field.
func MethodNameContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethodName), v))
	})
}

// ByIdEQ applies the EQ predicate on the "byId" field.
func ByIdEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldById), v))
	})
}

// ByIdNEQ applies the NEQ predicate on the "byId" field.
func ByIdNEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldById), v))
	})
}

// ByIdIn applies the In predicate on the "byId" field.
func ByIdIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldById), v...))
	})
}

// ByIdNotIn applies the NotIn predicate on the "byId" field.
func ByIdNotIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldById), v...))
	})
}

// ByIdGT applies the GT predicate on the "byId" field.
func ByIdGT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldById), v))
	})
}

// ByIdGTE applies the GTE predicate on the "byId" field.
func ByIdGTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldById), v))
	})
}

// ByIdLT applies the LT predicate on the "byId" field.
func ByIdLT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldById), v))
	})
}

// ByIdLTE applies the LTE predicate on the "byId" field.
func ByIdLTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldById), v))
	})
}

// ByNameEQ applies the EQ predicate on the "byName" field.
func ByNameEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldByName), v))
	})
}

// ByNameNEQ applies the NEQ predicate on the "byName" field.
func ByNameNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldByName), v))
	})
}

// ByNameIn applies the In predicate on the "byName" field.
func ByNameIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldByName), v...))
	})
}

// ByNameNotIn applies the NotIn predicate on the "byName" field.
func ByNameNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldByName), v...))
	})
}

// ByNameGT applies the GT predicate on the "byName" field.
func ByNameGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldByName), v))
	})
}

// ByNameGTE applies the GTE predicate on the "byName" field.
func ByNameGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldByName), v))
	})
}

// ByNameLT applies the LT predicate on the "byName" field.
func ByNameLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldByName), v))
	})
}

// ByNameLTE applies the LTE predicate on the "byName" field.
func ByNameLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldByName), v))
	})
}

// ByNameContains applies the Contains predicate on the "byName" field.
func ByNameContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldByName), v))
	})
}

// ByNameHasPrefix applies the HasPrefix predicate on the "byName" field.
func ByNameHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldByName), v))
	})
}

// ByNameHasSuffix applies the HasSuffix predicate on the "byName" field.
func ByNameHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldByName), v))
	})
}

// ByNameEqualFold applies the EqualFold predicate on the "byName" field.
func ByNameEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldByName), v))
	})
}

// ByNameContainsFold applies the ContainsFold predicate on the "byName" field.
func ByNameContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldByName), v))
	})
}

// ResultIdEQ applies the EQ predicate on the "resultId" field.
func ResultIdEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultId), v))
	})
}

// ResultIdNEQ applies the NEQ predicate on the "resultId" field.
func ResultIdNEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResultId), v))
	})
}

// ResultIdIn applies the In predicate on the "resultId" field.
func ResultIdIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResultId), v...))
	})
}

// ResultIdNotIn applies the NotIn predicate on the "resultId" field.
func ResultIdNotIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResultId), v...))
	})
}

// ResultIdGT applies the GT predicate on the "resultId" field.
func ResultIdGT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResultId), v))
	})
}

// ResultIdGTE applies the GTE predicate on the "resultId" field.
func ResultIdGTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResultId), v))
	})
}

// ResultIdLT applies the LT predicate on the "resultId" field.
func ResultIdLT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResultId), v))
	})
}

// ResultIdLTE applies the LTE predicate on the "resultId" field.
func ResultIdLTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResultId), v))
	})
}

// ResultNameEQ applies the EQ predicate on the "resultName" field.
func ResultNameEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultName), v))
	})
}

// ResultNameNEQ applies the NEQ predicate on the "resultName" field.
func ResultNameNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResultName), v))
	})
}

// ResultNameIn applies the In predicate on the "resultName" field.
func ResultNameIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResultName), v...))
	})
}

// ResultNameNotIn applies the NotIn predicate on the "resultName" field.
func ResultNameNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResultName), v...))
	})
}

// ResultNameGT applies the GT predicate on the "resultName" field.
func ResultNameGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResultName), v))
	})
}

// ResultNameGTE applies the GTE predicate on the "resultName" field.
func ResultNameGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResultName), v))
	})
}

// ResultNameLT applies the LT predicate on the "resultName" field.
func ResultNameLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResultName), v))
	})
}

// ResultNameLTE applies the LTE predicate on the "resultName" field.
func ResultNameLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResultName), v))
	})
}

// ResultNameContains applies the Contains predicate on the "resultName" field.
func ResultNameContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResultName), v))
	})
}

// ResultNameHasPrefix applies the HasPrefix predicate on the "resultName" field.
func ResultNameHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResultName), v))
	})
}

// ResultNameHasSuffix applies the HasSuffix predicate on the "resultName" field.
func ResultNameHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResultName), v))
	})
}

// ResultNameEqualFold applies the EqualFold predicate on the "resultName" field.
func ResultNameEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResultName), v))
	})
}

// ResultNameContainsFold applies the ContainsFold predicate on the "resultName" field.
func ResultNameContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResultName), v))
	})
}

// HandleIdEQ applies the EQ predicate on the "handleId" field.
func HandleIdEQ(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandleId), v))
	})
}

// HandleIdNEQ applies the NEQ predicate on the "handleId" field.
func HandleIdNEQ(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandleId), v))
	})
}

// HandleIdIn applies the In predicate on the "handleId" field.
func HandleIdIn(vs ...int) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHandleId), v...))
	})
}

// HandleIdNotIn applies the NotIn predicate on the "handleId" field.
func HandleIdNotIn(vs ...int) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHandleId), v...))
	})
}

// HandleIdGT applies the GT predicate on the "handleId" field.
func HandleIdGT(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandleId), v))
	})
}

// HandleIdGTE applies the GTE predicate on the "handleId" field.
func HandleIdGTE(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandleId), v))
	})
}

// HandleIdLT applies the LT predicate on the "handleId" field.
func HandleIdLT(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandleId), v))
	})
}

// HandleIdLTE applies the LTE predicate on the "handleId" field.
func HandleIdLTE(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandleId), v))
	})
}

// HandleNameEQ applies the EQ predicate on the "handleName" field.
func HandleNameEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandleName), v))
	})
}

// HandleNameNEQ applies the NEQ predicate on the "handleName" field.
func HandleNameNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandleName), v))
	})
}

// HandleNameIn applies the In predicate on the "handleName" field.
func HandleNameIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHandleName), v...))
	})
}

// HandleNameNotIn applies the NotIn predicate on the "handleName" field.
func HandleNameNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHandleName), v...))
	})
}

// HandleNameGT applies the GT predicate on the "handleName" field.
func HandleNameGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandleName), v))
	})
}

// HandleNameGTE applies the GTE predicate on the "handleName" field.
func HandleNameGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandleName), v))
	})
}

// HandleNameLT applies the LT predicate on the "handleName" field.
func HandleNameLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandleName), v))
	})
}

// HandleNameLTE applies the LTE predicate on the "handleName" field.
func HandleNameLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandleName), v))
	})
}

// HandleNameContains applies the Contains predicate on the "handleName" field.
func HandleNameContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHandleName), v))
	})
}

// HandleNameHasPrefix applies the HasPrefix predicate on the "handleName" field.
func HandleNameHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHandleName), v))
	})
}

// HandleNameHasSuffix applies the HasSuffix predicate on the "handleName" field.
func HandleNameHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHandleName), v))
	})
}

// HandleNameEqualFold applies the EqualFold predicate on the "handleName" field.
func HandleNameEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHandleName), v))
	})
}

// HandleNameContainsFold applies the ContainsFold predicate on the "handleName" field.
func HandleNameContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHandleName), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.Inspection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inspection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Inspection) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Inspection) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inspection) predicate.Inspection {
	return predicate.Inspection(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/inspection"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// InspectionCreate is the builder for creating a Inspection entity.
type InspectionCreate struct {
	config
	mutation *InspectionMutation
	hooks    []Hook
}

// SetName sets the name field.
func (ic *InspectionCreate) SetName(s string) *InspectionCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetEarNumber sets the earNumber field.
func (ic *InspectionCreate) SetEarNumber(s string) *InspectionCreate {
	ic.mutation.SetEarNumber(s)
	return ic
}

// SetShedName sets the shedName field.
func (ic *InspectionCreate) SetShedName(s string) *InspectionCreate {
	ic.mutation.SetShedName(s)
	return ic
}

// SetDate sets the date field.
func (ic *InspectionCreate) SetDate(i int64) *InspectionCreate {
	ic.mutation.SetDate(i)
	return ic
}

// SetItemId sets the itemId field.
func (ic *InspectionCreate) SetItemId(i int) *InspectionCreate {
	ic.mutation.SetItemId(i)
	return ic
}

// SetItemName sets the itemName field.
func (ic *InspectionCreate) SetItemName(s string) *InspectionCreate {
	ic.mutation.SetItemName(s)
	return ic
}

// SetMethodId sets the methodId field.
func (ic *InspectionCreate) SetMethodId(i int) *InspectionCreate {
	ic.mutation.SetMethodId(i)
	return ic
}

// SetMethodName sets the methodName field.
func (ic *InspectionCreate) SetMethodName(s string) *InspectionCreate {
	ic.mutation.SetMethodName(s)
	return ic
}

// SetById sets the byId field.
func (ic *InspectionCreate) SetById(i int64) *InspectionCreate {
	ic.mutation.SetById(i)
	return ic
}

// SetByName sets the byName field.
func (ic *InspectionCreate) SetByName(s string) *InspectionCreate {
	ic.mutation.SetByName(s)
	return ic
}

// SetResultId sets the resultId field.
func (ic *InspectionCreate) SetResultId(i int64) *InspectionCreate {
	ic.mutation.SetResultId(i)
	return ic
}

// SetResultName sets the resultName field.
func (ic *InspectionCreate) SetResultName(s string) *InspectionCreate {
	ic.mutation.SetResultName(s)
	return ic
}

// SetHandleId sets the handleId field.
func (ic *InspectionCreate) SetHandleId(i int) *InspectionCreate {
	ic.mutation.SetHandleId(i)
	return ic
}

// SetHandleName sets the handleName field.
func (ic *InspectionCreate) SetHandleName(s string) *InspectionCreate {
	ic.mutation.SetHandleName(s)
	return ic
}

// SetRemarks sets the remarks field.
func (ic *InspectionCreate) SetRemarks(s string) *InspectionCreate {
	ic.mutation.SetRemarks(s)
	return ic
}

// SetCreatedAt sets the createdAt field.
func (ic *InspectionCreate) SetCreatedAt(i int64) *InspectionCreate {
	ic.mutation.SetCreatedAt(i)
	return ic
}

// SetUpdatedAt sets the updatedAt field.
func (ic *InspectionCreate) SetUpdatedAt(i int64) *InspectionCreate {
	ic.mutation.SetUpdatedAt(i)
	return ic
}

// SetDeleted sets the deleted field.
func (ic *InspectionCreate) SetDeleted(i int) *InspectionCreate {
	ic.mutation.SetDeleted(i)
	return ic
}

// Mutation returns the InspectionMutation object of the builder.
func (ic *InspectionCreate) Mutation() *InspectionMutation {
	return ic.mutation
}

// Save creates the Inspection in the database.
func (ic *InspectionCreate) Save(ctx context.Context) (*Inspection, error) {
	var (
		err  error
		node *Inspection
	)
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InspectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InspectionCreate) SaveX(ctx context.Context) *Inspection {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ic *InspectionCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := ic.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if _, ok := ic.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New("ent: missing required field \"shedName\"")}
	}
	if _, ok := ic.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := ic.mutation.ItemId(); !ok {
		return &ValidationError{Name: "itemId", err: errors.New("ent: missing required field \"itemId\"")}
	}
	if _, ok := ic.mutation.ItemName(); !ok {
		return &ValidationError{Name: "itemName", err: errors.New("ent: missing required field \"itemName\"")}
	}
	if _, ok := ic.mutation.MethodId(); !ok {
		return &ValidationError{Name: "methodId", err: errors.New("ent: missing required field \"methodId\"")}
	}
	if _, ok := ic.mutation.MethodName(); !ok {
		return &ValidationError{Name: "methodName", err: errors.New("ent: missing required field \"methodName\"")}
	}
	if _, ok := ic.mutation.ById(); !ok {
		return &ValidationError{Name: "byId", err: errors.New("ent: missing required field \"byId\"")}
	}
	if _, ok := ic.mutation.ByName(); !ok {
		return &ValidationError{Name: "byName", err: errors.New("ent: missing required field \"byName\"")}
	}
	if _, ok := ic.mutation.ResultId(); !ok {
		return &ValidationError{Name: "resultId", err: errors.New("ent: missing required field \"resultId\"")}
	}
	if _, ok := ic.mutation.ResultName(); !ok {
		return &ValidationError{Name: "resultName", err: errors.New("ent: missing required field \"resultName\"")}
	}
	if _, ok := ic.mutation.HandleId(); !ok {
		return &ValidationError{Name: "handleId", err: errors.New("ent: missing required field \"handleId\"")}
	}
	if _, ok := ic.mutation.HandleName(); !ok {
		return &ValidationError{Name: "handleName", err: errors.New("ent: missing required field \"handleName\"")}
	}
	if _, ok := ic.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := ic.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (ic *InspectionCreate) sqlSave(ctx context.Context) (*Inspection, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ic *InspectionCreate) createSpec() (*Inspection, *sqlgraph.CreateSpec) {
	var (
		_node = &Inspection{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inspection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inspection.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ic.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := ic.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := ic.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := ic.mutation.ItemId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldItemId,
		})
		_node.ItemId = value
	}
	if value, ok := ic.mutation.ItemName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldItemName,
		})
		_node.ItemName = value
	}
	if value, ok := ic.mutation.MethodId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldMethodId,
		})
		_node.MethodId = value
	}
	if value, ok := ic.mutation.MethodName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldMethodName,
		})
		_node.MethodName = value
	}
	if value, ok := ic.mutation.ById(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldById,
		})
		_node.ById = value
	}
	if value, ok := ic.mutation.ByName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldByName,
		})
		_node.ByName = value
	}
	if value, ok := ic.mutation.ResultId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldResultId,
		})
		_node.ResultId = value
	}
	if value, ok := ic.mutation.ResultName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldResultName,
		})
		_node.ResultName = value
	}
	if value, ok := ic.mutation.HandleId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldHandleId,
		})
		_node.HandleId = value
	}
	if value, ok := ic.mutation.HandleName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldHandleName,
		})
		_node.HandleName = value
	}
	if value, ok := ic.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// InspectionCreateBulk is the builder for creating a bulk of Inspection entities.
type InspectionCreateBulk struct {
	config
	builders []*InspectionCreate
}

// Save creates the Inspection entities in the database.
func (icb *InspectionCreateBulk) Save(ctx context.Context) ([]*Inspection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inspection, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InspectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (icb *InspectionCreateBulk) SaveX(ctx context.Context) []*Inspection {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

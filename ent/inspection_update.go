// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/inspection"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// InspectionUpdate is the builder for updating Inspection entities.
type InspectionUpdate struct {
	config
	hooks      []Hook
	mutation   *InspectionMutation
	predicates []predicate.Inspection
}

// Where adds a new predicate for the builder.
func (iu *InspectionUpdate) Where(ps ...predicate.Inspection) *InspectionUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetCattleId sets the cattleId field.
func (iu *InspectionUpdate) SetCattleId(i int64) *InspectionUpdate {
	iu.mutation.ResetCattleId()
	iu.mutation.SetCattleId(i)
	return iu
}

// AddCattleId adds i to cattleId.
func (iu *InspectionUpdate) AddCattleId(i int64) *InspectionUpdate {
	iu.mutation.AddCattleId(i)
	return iu
}

// SetTenantId sets the tenantId field.
func (iu *InspectionUpdate) SetTenantId(i int64) *InspectionUpdate {
	iu.mutation.ResetTenantId()
	iu.mutation.SetTenantId(i)
	return iu
}

// AddTenantId adds i to tenantId.
func (iu *InspectionUpdate) AddTenantId(i int64) *InspectionUpdate {
	iu.mutation.AddTenantId(i)
	return iu
}

// SetTenantName sets the tenantName field.
func (iu *InspectionUpdate) SetTenantName(s string) *InspectionUpdate {
	iu.mutation.SetTenantName(s)
	return iu
}

// SetFarmId sets the farmId field.
func (iu *InspectionUpdate) SetFarmId(i int64) *InspectionUpdate {
	iu.mutation.ResetFarmId()
	iu.mutation.SetFarmId(i)
	return iu
}

// AddFarmId adds i to farmId.
func (iu *InspectionUpdate) AddFarmId(i int64) *InspectionUpdate {
	iu.mutation.AddFarmId(i)
	return iu
}

// SetFarmName sets the farmName field.
func (iu *InspectionUpdate) SetFarmName(s string) *InspectionUpdate {
	iu.mutation.SetFarmName(s)
	return iu
}

// SetShedId sets the shedId field.
func (iu *InspectionUpdate) SetShedId(i int64) *InspectionUpdate {
	iu.mutation.ResetShedId()
	iu.mutation.SetShedId(i)
	return iu
}

// AddShedId adds i to shedId.
func (iu *InspectionUpdate) AddShedId(i int64) *InspectionUpdate {
	iu.mutation.AddShedId(i)
	return iu
}

// SetShedName sets the shedName field.
func (iu *InspectionUpdate) SetShedName(s string) *InspectionUpdate {
	iu.mutation.SetShedName(s)
	return iu
}

// SetName sets the name field.
func (iu *InspectionUpdate) SetName(s string) *InspectionUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetEarNumber sets the earNumber field.
func (iu *InspectionUpdate) SetEarNumber(s string) *InspectionUpdate {
	iu.mutation.SetEarNumber(s)
	return iu
}

// SetDate sets the date field.
func (iu *InspectionUpdate) SetDate(i int64) *InspectionUpdate {
	iu.mutation.ResetDate()
	iu.mutation.SetDate(i)
	return iu
}

// AddDate adds i to date.
func (iu *InspectionUpdate) AddDate(i int64) *InspectionUpdate {
	iu.mutation.AddDate(i)
	return iu
}

// SetItemId sets the itemId field.
func (iu *InspectionUpdate) SetItemId(i int) *InspectionUpdate {
	iu.mutation.ResetItemId()
	iu.mutation.SetItemId(i)
	return iu
}

// AddItemId adds i to itemId.
func (iu *InspectionUpdate) AddItemId(i int) *InspectionUpdate {
	iu.mutation.AddItemId(i)
	return iu
}

// SetItemName sets the itemName field.
func (iu *InspectionUpdate) SetItemName(s string) *InspectionUpdate {
	iu.mutation.SetItemName(s)
	return iu
}

// SetMethodId sets the methodId field.
func (iu *InspectionUpdate) SetMethodId(i int) *InspectionUpdate {
	iu.mutation.ResetMethodId()
	iu.mutation.SetMethodId(i)
	return iu
}

// AddMethodId adds i to methodId.
func (iu *InspectionUpdate) AddMethodId(i int) *InspectionUpdate {
	iu.mutation.AddMethodId(i)
	return iu
}

// SetMethodName sets the methodName field.
func (iu *InspectionUpdate) SetMethodName(s string) *InspectionUpdate {
	iu.mutation.SetMethodName(s)
	return iu
}

// SetById sets the byId field.
func (iu *InspectionUpdate) SetById(i int64) *InspectionUpdate {
	iu.mutation.ResetById()
	iu.mutation.SetById(i)
	return iu
}

// AddById adds i to byId.
func (iu *InspectionUpdate) AddById(i int64) *InspectionUpdate {
	iu.mutation.AddById(i)
	return iu
}

// SetByName sets the byName field.
func (iu *InspectionUpdate) SetByName(s string) *InspectionUpdate {
	iu.mutation.SetByName(s)
	return iu
}

// SetResultId sets the resultId field.
func (iu *InspectionUpdate) SetResultId(i int64) *InspectionUpdate {
	iu.mutation.ResetResultId()
	iu.mutation.SetResultId(i)
	return iu
}

// AddResultId adds i to resultId.
func (iu *InspectionUpdate) AddResultId(i int64) *InspectionUpdate {
	iu.mutation.AddResultId(i)
	return iu
}

// SetResultName sets the resultName field.
func (iu *InspectionUpdate) SetResultName(s string) *InspectionUpdate {
	iu.mutation.SetResultName(s)
	return iu
}

// SetHandleId sets the handleId field.
func (iu *InspectionUpdate) SetHandleId(i int) *InspectionUpdate {
	iu.mutation.ResetHandleId()
	iu.mutation.SetHandleId(i)
	return iu
}

// AddHandleId adds i to handleId.
func (iu *InspectionUpdate) AddHandleId(i int) *InspectionUpdate {
	iu.mutation.AddHandleId(i)
	return iu
}

// SetHandleName sets the handleName field.
func (iu *InspectionUpdate) SetHandleName(s string) *InspectionUpdate {
	iu.mutation.SetHandleName(s)
	return iu
}

// SetRemarks sets the remarks field.
func (iu *InspectionUpdate) SetRemarks(s string) *InspectionUpdate {
	iu.mutation.SetRemarks(s)
	return iu
}

// SetCreatedAt sets the createdAt field.
func (iu *InspectionUpdate) SetCreatedAt(i int64) *InspectionUpdate {
	iu.mutation.ResetCreatedAt()
	iu.mutation.SetCreatedAt(i)
	return iu
}

// AddCreatedAt adds i to createdAt.
func (iu *InspectionUpdate) AddCreatedAt(i int64) *InspectionUpdate {
	iu.mutation.AddCreatedAt(i)
	return iu
}

// SetUpdatedAt sets the updatedAt field.
func (iu *InspectionUpdate) SetUpdatedAt(i int64) *InspectionUpdate {
	iu.mutation.ResetUpdatedAt()
	iu.mutation.SetUpdatedAt(i)
	return iu
}

// AddUpdatedAt adds i to updatedAt.
func (iu *InspectionUpdate) AddUpdatedAt(i int64) *InspectionUpdate {
	iu.mutation.AddUpdatedAt(i)
	return iu
}

// SetDeleted sets the deleted field.
func (iu *InspectionUpdate) SetDeleted(i int) *InspectionUpdate {
	iu.mutation.ResetDeleted()
	iu.mutation.SetDeleted(i)
	return iu
}

// AddDeleted adds i to deleted.
func (iu *InspectionUpdate) AddDeleted(i int) *InspectionUpdate {
	iu.mutation.AddDeleted(i)
	return iu
}

// Mutation returns the InspectionMutation object of the builder.
func (iu *InspectionUpdate) Mutation() *InspectionMutation {
	return iu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *InspectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InspectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InspectionUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InspectionUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InspectionUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InspectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inspection.Table,
			Columns: inspection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inspection.FieldID,
			},
		},
	}
	if ps := iu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldCattleId,
		})
	}
	if value, ok := iu.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldCattleId,
		})
	}
	if value, ok := iu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldTenantId,
		})
	}
	if value, ok := iu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldTenantId,
		})
	}
	if value, ok := iu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldTenantName,
		})
	}
	if value, ok := iu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldFarmId,
		})
	}
	if value, ok := iu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldFarmId,
		})
	}
	if value, ok := iu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldFarmName,
		})
	}
	if value, ok := iu.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldShedId,
		})
	}
	if value, ok := iu.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldShedId,
		})
	}
	if value, ok := iu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldShedName,
		})
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldName,
		})
	}
	if value, ok := iu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldEarNumber,
		})
	}
	if value, ok := iu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldDate,
		})
	}
	if value, ok := iu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldDate,
		})
	}
	if value, ok := iu.mutation.ItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldItemId,
		})
	}
	if value, ok := iu.mutation.AddedItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldItemId,
		})
	}
	if value, ok := iu.mutation.ItemName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldItemName,
		})
	}
	if value, ok := iu.mutation.MethodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldMethodId,
		})
	}
	if value, ok := iu.mutation.AddedMethodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldMethodId,
		})
	}
	if value, ok := iu.mutation.MethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldMethodName,
		})
	}
	if value, ok := iu.mutation.ById(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldById,
		})
	}
	if value, ok := iu.mutation.AddedById(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldById,
		})
	}
	if value, ok := iu.mutation.ByName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldByName,
		})
	}
	if value, ok := iu.mutation.ResultId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldResultId,
		})
	}
	if value, ok := iu.mutation.AddedResultId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldResultId,
		})
	}
	if value, ok := iu.mutation.ResultName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldResultName,
		})
	}
	if value, ok := iu.mutation.HandleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldHandleId,
		})
	}
	if value, ok := iu.mutation.AddedHandleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldHandleId,
		})
	}
	if value, ok := iu.mutation.HandleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldHandleName,
		})
	}
	if value, ok := iu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldRemarks,
		})
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldCreatedAt,
		})
	}
	if value, ok := iu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldCreatedAt,
		})
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldUpdatedAt,
		})
	}
	if value, ok := iu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldUpdatedAt,
		})
	}
	if value, ok := iu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldDeleted,
		})
	}
	if value, ok := iu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inspection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InspectionUpdateOne is the builder for updating a single Inspection entity.
type InspectionUpdateOne struct {
	config
	hooks    []Hook
	mutation *InspectionMutation
}

// SetCattleId sets the cattleId field.
func (iuo *InspectionUpdateOne) SetCattleId(i int64) *InspectionUpdateOne {
	iuo.mutation.ResetCattleId()
	iuo.mutation.SetCattleId(i)
	return iuo
}

// AddCattleId adds i to cattleId.
func (iuo *InspectionUpdateOne) AddCattleId(i int64) *InspectionUpdateOne {
	iuo.mutation.AddCattleId(i)
	return iuo
}

// SetTenantId sets the tenantId field.
func (iuo *InspectionUpdateOne) SetTenantId(i int64) *InspectionUpdateOne {
	iuo.mutation.ResetTenantId()
	iuo.mutation.SetTenantId(i)
	return iuo
}

// AddTenantId adds i to tenantId.
func (iuo *InspectionUpdateOne) AddTenantId(i int64) *InspectionUpdateOne {
	iuo.mutation.AddTenantId(i)
	return iuo
}

// SetTenantName sets the tenantName field.
func (iuo *InspectionUpdateOne) SetTenantName(s string) *InspectionUpdateOne {
	iuo.mutation.SetTenantName(s)
	return iuo
}

// SetFarmId sets the farmId field.
func (iuo *InspectionUpdateOne) SetFarmId(i int64) *InspectionUpdateOne {
	iuo.mutation.ResetFarmId()
	iuo.mutation.SetFarmId(i)
	return iuo
}

// AddFarmId adds i to farmId.
func (iuo *InspectionUpdateOne) AddFarmId(i int64) *InspectionUpdateOne {
	iuo.mutation.AddFarmId(i)
	return iuo
}

// SetFarmName sets the farmName field.
func (iuo *InspectionUpdateOne) SetFarmName(s string) *InspectionUpdateOne {
	iuo.mutation.SetFarmName(s)
	return iuo
}

// SetShedId sets the shedId field.
func (iuo *InspectionUpdateOne) SetShedId(i int64) *InspectionUpdateOne {
	iuo.mutation.ResetShedId()
	iuo.mutation.SetShedId(i)
	return iuo
}

// AddShedId adds i to shedId.
func (iuo *InspectionUpdateOne) AddShedId(i int64) *InspectionUpdateOne {
	iuo.mutation.AddShedId(i)
	return iuo
}

// SetShedName sets the shedName field.
func (iuo *InspectionUpdateOne) SetShedName(s string) *InspectionUpdateOne {
	iuo.mutation.SetShedName(s)
	return iuo
}

// SetName sets the name field.
func (iuo *InspectionUpdateOne) SetName(s string) *InspectionUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetEarNumber sets the earNumber field.
func (iuo *InspectionUpdateOne) SetEarNumber(s string) *InspectionUpdateOne {
	iuo.mutation.SetEarNumber(s)
	return iuo
}

// SetDate sets the date field.
func (iuo *InspectionUpdateOne) SetDate(i int64) *InspectionUpdateOne {
	iuo.mutation.ResetDate()
	iuo.mutation.SetDate(i)
	return iuo
}

// AddDate adds i to date.
func (iuo *InspectionUpdateOne) AddDate(i int64) *InspectionUpdateOne {
	iuo.mutation.AddDate(i)
	return iuo
}

// SetItemId sets the itemId field.
func (iuo *InspectionUpdateOne) SetItemId(i int) *InspectionUpdateOne {
	iuo.mutation.ResetItemId()
	iuo.mutation.SetItemId(i)
	return iuo
}

// AddItemId adds i to itemId.
func (iuo *InspectionUpdateOne) AddItemId(i int) *InspectionUpdateOne {
	iuo.mutation.AddItemId(i)
	return iuo
}

// SetItemName sets the itemName field.
func (iuo *InspectionUpdateOne) SetItemName(s string) *InspectionUpdateOne {
	iuo.mutation.SetItemName(s)
	return iuo
}

// SetMethodId sets the methodId field.
func (iuo *InspectionUpdateOne) SetMethodId(i int) *InspectionUpdateOne {
	iuo.mutation.ResetMethodId()
	iuo.mutation.SetMethodId(i)
	return iuo
}

// AddMethodId adds i to methodId.
func (iuo *InspectionUpdateOne) AddMethodId(i int) *InspectionUpdateOne {
	iuo.mutation.AddMethodId(i)
	return iuo
}

// SetMethodName sets the methodName field.
func (iuo *InspectionUpdateOne) SetMethodName(s string) *InspectionUpdateOne {
	iuo.mutation.SetMethodName(s)
	return iuo
}

// SetById sets the byId field.
func (iuo *InspectionUpdateOne) SetById(i int64) *InspectionUpdateOne {
	iuo.mutation.ResetById()
	iuo.mutation.SetById(i)
	return iuo
}

// AddById adds i to byId.
func (iuo *InspectionUpdateOne) AddById(i int64) *InspectionUpdateOne {
	iuo.mutation.AddById(i)
	return iuo
}

// SetByName sets the byName field.
func (iuo *InspectionUpdateOne) SetByName(s string) *InspectionUpdateOne {
	iuo.mutation.SetByName(s)
	return iuo
}

// SetResultId sets the resultId field.
func (iuo *InspectionUpdateOne) SetResultId(i int64) *InspectionUpdateOne {
	iuo.mutation.ResetResultId()
	iuo.mutation.SetResultId(i)
	return iuo
}

// AddResultId adds i to resultId.
func (iuo *InspectionUpdateOne) AddResultId(i int64) *InspectionUpdateOne {
	iuo.mutation.AddResultId(i)
	return iuo
}

// SetResultName sets the resultName field.
func (iuo *InspectionUpdateOne) SetResultName(s string) *InspectionUpdateOne {
	iuo.mutation.SetResultName(s)
	return iuo
}

// SetHandleId sets the handleId field.
func (iuo *InspectionUpdateOne) SetHandleId(i int) *InspectionUpdateOne {
	iuo.mutation.ResetHandleId()
	iuo.mutation.SetHandleId(i)
	return iuo
}

// AddHandleId adds i to handleId.
func (iuo *InspectionUpdateOne) AddHandleId(i int) *InspectionUpdateOne {
	iuo.mutation.AddHandleId(i)
	return iuo
}

// SetHandleName sets the handleName field.
func (iuo *InspectionUpdateOne) SetHandleName(s string) *InspectionUpdateOne {
	iuo.mutation.SetHandleName(s)
	return iuo
}

// SetRemarks sets the remarks field.
func (iuo *InspectionUpdateOne) SetRemarks(s string) *InspectionUpdateOne {
	iuo.mutation.SetRemarks(s)
	return iuo
}

// SetCreatedAt sets the createdAt field.
func (iuo *InspectionUpdateOne) SetCreatedAt(i int64) *InspectionUpdateOne {
	iuo.mutation.ResetCreatedAt()
	iuo.mutation.SetCreatedAt(i)
	return iuo
}

// AddCreatedAt adds i to createdAt.
func (iuo *InspectionUpdateOne) AddCreatedAt(i int64) *InspectionUpdateOne {
	iuo.mutation.AddCreatedAt(i)
	return iuo
}

// SetUpdatedAt sets the updatedAt field.
func (iuo *InspectionUpdateOne) SetUpdatedAt(i int64) *InspectionUpdateOne {
	iuo.mutation.ResetUpdatedAt()
	iuo.mutation.SetUpdatedAt(i)
	return iuo
}

// AddUpdatedAt adds i to updatedAt.
func (iuo *InspectionUpdateOne) AddUpdatedAt(i int64) *InspectionUpdateOne {
	iuo.mutation.AddUpdatedAt(i)
	return iuo
}

// SetDeleted sets the deleted field.
func (iuo *InspectionUpdateOne) SetDeleted(i int) *InspectionUpdateOne {
	iuo.mutation.ResetDeleted()
	iuo.mutation.SetDeleted(i)
	return iuo
}

// AddDeleted adds i to deleted.
func (iuo *InspectionUpdateOne) AddDeleted(i int) *InspectionUpdateOne {
	iuo.mutation.AddDeleted(i)
	return iuo
}

// Mutation returns the InspectionMutation object of the builder.
func (iuo *InspectionUpdateOne) Mutation() *InspectionMutation {
	return iuo.mutation
}

// Save executes the query and returns the updated entity.
func (iuo *InspectionUpdateOne) Save(ctx context.Context) (*Inspection, error) {
	var (
		err  error
		node *Inspection
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InspectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InspectionUpdateOne) SaveX(ctx context.Context) *Inspection {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InspectionUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InspectionUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InspectionUpdateOne) sqlSave(ctx context.Context) (_node *Inspection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inspection.Table,
			Columns: inspection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inspection.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Inspection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := iuo.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldCattleId,
		})
	}
	if value, ok := iuo.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldCattleId,
		})
	}
	if value, ok := iuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldTenantId,
		})
	}
	if value, ok := iuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldTenantId,
		})
	}
	if value, ok := iuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldTenantName,
		})
	}
	if value, ok := iuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldFarmId,
		})
	}
	if value, ok := iuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldFarmId,
		})
	}
	if value, ok := iuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldFarmName,
		})
	}
	if value, ok := iuo.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldShedId,
		})
	}
	if value, ok := iuo.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldShedId,
		})
	}
	if value, ok := iuo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldShedName,
		})
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldName,
		})
	}
	if value, ok := iuo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldEarNumber,
		})
	}
	if value, ok := iuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldDate,
		})
	}
	if value, ok := iuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldDate,
		})
	}
	if value, ok := iuo.mutation.ItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldItemId,
		})
	}
	if value, ok := iuo.mutation.AddedItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldItemId,
		})
	}
	if value, ok := iuo.mutation.ItemName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldItemName,
		})
	}
	if value, ok := iuo.mutation.MethodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldMethodId,
		})
	}
	if value, ok := iuo.mutation.AddedMethodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldMethodId,
		})
	}
	if value, ok := iuo.mutation.MethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldMethodName,
		})
	}
	if value, ok := iuo.mutation.ById(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldById,
		})
	}
	if value, ok := iuo.mutation.AddedById(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldById,
		})
	}
	if value, ok := iuo.mutation.ByName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldByName,
		})
	}
	if value, ok := iuo.mutation.ResultId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldResultId,
		})
	}
	if value, ok := iuo.mutation.AddedResultId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldResultId,
		})
	}
	if value, ok := iuo.mutation.ResultName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldResultName,
		})
	}
	if value, ok := iuo.mutation.HandleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldHandleId,
		})
	}
	if value, ok := iuo.mutation.AddedHandleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldHandleId,
		})
	}
	if value, ok := iuo.mutation.HandleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldHandleName,
		})
	}
	if value, ok := iuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspection.FieldRemarks,
		})
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldCreatedAt,
		})
	}
	if value, ok := iuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldCreatedAt,
		})
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldUpdatedAt,
		})
	}
	if value, ok := iuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inspection.FieldUpdatedAt,
		})
	}
	if value, ok := iuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldDeleted,
		})
	}
	if value, ok := iuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inspection.FieldDeleted,
		})
	}
	_node = &Inspection{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inspection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

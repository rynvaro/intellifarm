// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/inventoryflow"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// InventoryFlow is the model entity for the InventoryFlow schema.
type InventoryFlow struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 基础资料物料Id
	SysMaterialId int64 `json:"sysMaterialId,omitempty"`
	// 物料Id
	MaterialId int64 `json:"materialId,omitempty"`
	// 物料名称
	MaterialName string `json:"materialName,omitempty"`
	// 物料编号
	MaterialCode string `json:"materialCode,omitempty"`
	// 单号
	SeqNumber string `json:"seqNumber,omitempty"`
	// 日期
	Date int64 `json:"date,omitempty"`
	// 1: 入库，2: 出库
	Type int `json:"type,omitempty"`
	// 状态
	Status string `json:"status,omitempty"`
	// 出入库的量
	Count int `json:"count,omitempty"`
	// 量的单位
	Unit string `json:"unit,omitempty"`
	// 出入库前的库存
	Before int64 `json:"before,omitempty"`
	// 出入库后的库存
	After int64 `json:"after,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 是否已上传检测报告
	IsChecked bool `json:"isChecked,omitempty"`
	// 检测报告文件地址
	ReportFileAddress string `json:"reportFileAddress,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InventoryFlow) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventoryflow.FieldIsChecked:
			values[i] = new(sql.NullBool)
		case inventoryflow.FieldID, inventoryflow.FieldSysMaterialId, inventoryflow.FieldMaterialId, inventoryflow.FieldDate, inventoryflow.FieldType, inventoryflow.FieldCount, inventoryflow.FieldBefore, inventoryflow.FieldAfter, inventoryflow.FieldTenantId, inventoryflow.FieldFarmId, inventoryflow.FieldCreatedAt, inventoryflow.FieldUpdatedAt, inventoryflow.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case inventoryflow.FieldMaterialName, inventoryflow.FieldMaterialCode, inventoryflow.FieldSeqNumber, inventoryflow.FieldStatus, inventoryflow.FieldUnit, inventoryflow.FieldUserName, inventoryflow.FieldTenantName, inventoryflow.FieldFarmName, inventoryflow.FieldRemarks, inventoryflow.FieldReportFileAddress:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type InventoryFlow", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InventoryFlow fields.
func (_if *InventoryFlow) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inventoryflow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_if.ID = int(value.Int64)
		case inventoryflow.FieldSysMaterialId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sysMaterialId", values[i])
			} else if value.Valid {
				_if.SysMaterialId = value.Int64
			}
		case inventoryflow.FieldMaterialId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field materialId", values[i])
			} else if value.Valid {
				_if.MaterialId = value.Int64
			}
		case inventoryflow.FieldMaterialName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field materialName", values[i])
			} else if value.Valid {
				_if.MaterialName = value.String
			}
		case inventoryflow.FieldMaterialCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field materialCode", values[i])
			} else if value.Valid {
				_if.MaterialCode = value.String
			}
		case inventoryflow.FieldSeqNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seqNumber", values[i])
			} else if value.Valid {
				_if.SeqNumber = value.String
			}
		case inventoryflow.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				_if.Date = value.Int64
			}
		case inventoryflow.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_if.Type = int(value.Int64)
			}
		case inventoryflow.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_if.Status = value.String
			}
		case inventoryflow.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				_if.Count = int(value.Int64)
			}
		case inventoryflow.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				_if.Unit = value.String
			}
		case inventoryflow.FieldBefore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field before", values[i])
			} else if value.Valid {
				_if.Before = value.Int64
			}
		case inventoryflow.FieldAfter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field after", values[i])
			} else if value.Valid {
				_if.After = value.Int64
			}
		case inventoryflow.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				_if.UserName = value.String
			}
		case inventoryflow.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				_if.TenantId = value.Int64
			}
		case inventoryflow.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				_if.TenantName = value.String
			}
		case inventoryflow.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				_if.FarmId = value.Int64
			}
		case inventoryflow.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				_if.FarmName = value.String
			}
		case inventoryflow.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				_if.Remarks = value.String
			}
		case inventoryflow.FieldIsChecked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isChecked", values[i])
			} else if value.Valid {
				_if.IsChecked = value.Bool
			}
		case inventoryflow.FieldReportFileAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reportFileAddress", values[i])
			} else if value.Valid {
				_if.ReportFileAddress = value.String
			}
		case inventoryflow.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				_if.CreatedAt = value.Int64
			}
		case inventoryflow.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				_if.UpdatedAt = value.Int64
			}
		case inventoryflow.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				_if.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this InventoryFlow.
// Note that you need to call InventoryFlow.Unwrap() before calling this method if this InventoryFlow
// was returned from a transaction, and the transaction was committed or rolled back.
func (_if *InventoryFlow) Update() *InventoryFlowUpdateOne {
	return (&InventoryFlowClient{config: _if.config}).UpdateOne(_if)
}

// Unwrap unwraps the InventoryFlow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_if *InventoryFlow) Unwrap() *InventoryFlow {
	_tx, ok := _if.config.driver.(*txDriver)
	if !ok {
		panic("ent: InventoryFlow is not a transactional entity")
	}
	_if.config.driver = _tx.drv
	return _if
}

// String implements the fmt.Stringer.
func (_if *InventoryFlow) String() string {
	var builder strings.Builder
	builder.WriteString("InventoryFlow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _if.ID))
	builder.WriteString("sysMaterialId=")
	builder.WriteString(fmt.Sprintf("%v", _if.SysMaterialId))
	builder.WriteString(", ")
	builder.WriteString("materialId=")
	builder.WriteString(fmt.Sprintf("%v", _if.MaterialId))
	builder.WriteString(", ")
	builder.WriteString("materialName=")
	builder.WriteString(_if.MaterialName)
	builder.WriteString(", ")
	builder.WriteString("materialCode=")
	builder.WriteString(_if.MaterialCode)
	builder.WriteString(", ")
	builder.WriteString("seqNumber=")
	builder.WriteString(_if.SeqNumber)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", _if.Date))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _if.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_if.Status)
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", _if.Count))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(_if.Unit)
	builder.WriteString(", ")
	builder.WriteString("before=")
	builder.WriteString(fmt.Sprintf("%v", _if.Before))
	builder.WriteString(", ")
	builder.WriteString("after=")
	builder.WriteString(fmt.Sprintf("%v", _if.After))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(_if.UserName)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", _if.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(_if.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", _if.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(_if.FarmName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(_if.Remarks)
	builder.WriteString(", ")
	builder.WriteString("isChecked=")
	builder.WriteString(fmt.Sprintf("%v", _if.IsChecked))
	builder.WriteString(", ")
	builder.WriteString("reportFileAddress=")
	builder.WriteString(_if.ReportFileAddress)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", _if.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", _if.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", _if.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// InventoryFlows is a parsable slice of InventoryFlow.
type InventoryFlows []*InventoryFlow

func (_if InventoryFlows) config(cfg config) {
	for _i := range _if {
		_if[_i].config = cfg
	}
}

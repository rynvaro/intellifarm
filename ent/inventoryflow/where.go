// Code generated by entc, DO NOT EDIT.

package inventoryflow

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SysMaterialId applies equality check predicate on the "sysMaterialId" field. It's identical to SysMaterialIdEQ.
func SysMaterialId(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSysMaterialId), v))
	})
}

// MaterialId applies equality check predicate on the "materialId" field. It's identical to MaterialIdEQ.
func MaterialId(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialId), v))
	})
}

// MaterialName applies equality check predicate on the "materialName" field. It's identical to MaterialNameEQ.
func MaterialName(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialName), v))
	})
}

// MaterialCode applies equality check predicate on the "materialCode" field. It's identical to MaterialCodeEQ.
func MaterialCode(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialCode), v))
	})
}

// SeqNumber applies equality check predicate on the "seqNumber" field. It's identical to SeqNumberEQ.
func SeqNumber(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeqNumber), v))
	})
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCount), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// Before applies equality check predicate on the "before" field. It's identical to BeforeEQ.
func Before(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBefore), v))
	})
}

// After applies equality check predicate on the "after" field. It's identical to AfterEQ.
func After(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAfter), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// FarmId applies equality check predicate on the "farmId" field. It's identical to FarmIdEQ.
func FarmId(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmName applies equality check predicate on the "farmName" field. It's identical to FarmNameEQ.
func FarmName(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// IsChecked applies equality check predicate on the "isChecked" field. It's identical to IsCheckedEQ.
func IsChecked(v bool) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsChecked), v))
	})
}

// ReportFileAddress applies equality check predicate on the "reportFileAddress" field. It's identical to ReportFileAddressEQ.
func ReportFileAddress(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportFileAddress), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// SysMaterialIdEQ applies the EQ predicate on the "sysMaterialId" field.
func SysMaterialIdEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSysMaterialId), v))
	})
}

// SysMaterialIdNEQ applies the NEQ predicate on the "sysMaterialId" field.
func SysMaterialIdNEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSysMaterialId), v))
	})
}

// SysMaterialIdIn applies the In predicate on the "sysMaterialId" field.
func SysMaterialIdIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSysMaterialId), v...))
	})
}

// SysMaterialIdNotIn applies the NotIn predicate on the "sysMaterialId" field.
func SysMaterialIdNotIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSysMaterialId), v...))
	})
}

// SysMaterialIdGT applies the GT predicate on the "sysMaterialId" field.
func SysMaterialIdGT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSysMaterialId), v))
	})
}

// SysMaterialIdGTE applies the GTE predicate on the "sysMaterialId" field.
func SysMaterialIdGTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSysMaterialId), v))
	})
}

// SysMaterialIdLT applies the LT predicate on the "sysMaterialId" field.
func SysMaterialIdLT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSysMaterialId), v))
	})
}

// SysMaterialIdLTE applies the LTE predicate on the "sysMaterialId" field.
func SysMaterialIdLTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSysMaterialId), v))
	})
}

// MaterialIdEQ applies the EQ predicate on the "materialId" field.
func MaterialIdEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialId), v))
	})
}

// MaterialIdNEQ applies the NEQ predicate on the "materialId" field.
func MaterialIdNEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialId), v))
	})
}

// MaterialIdIn applies the In predicate on the "materialId" field.
func MaterialIdIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialId), v...))
	})
}

// MaterialIdNotIn applies the NotIn predicate on the "materialId" field.
func MaterialIdNotIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialId), v...))
	})
}

// MaterialIdGT applies the GT predicate on the "materialId" field.
func MaterialIdGT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialId), v))
	})
}

// MaterialIdGTE applies the GTE predicate on the "materialId" field.
func MaterialIdGTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialId), v))
	})
}

// MaterialIdLT applies the LT predicate on the "materialId" field.
func MaterialIdLT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialId), v))
	})
}

// MaterialIdLTE applies the LTE predicate on the "materialId" field.
func MaterialIdLTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialId), v))
	})
}

// MaterialNameEQ applies the EQ predicate on the "materialName" field.
func MaterialNameEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialName), v))
	})
}

// MaterialNameNEQ applies the NEQ predicate on the "materialName" field.
func MaterialNameNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialName), v))
	})
}

// MaterialNameIn applies the In predicate on the "materialName" field.
func MaterialNameIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialName), v...))
	})
}

// MaterialNameNotIn applies the NotIn predicate on the "materialName" field.
func MaterialNameNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialName), v...))
	})
}

// MaterialNameGT applies the GT predicate on the "materialName" field.
func MaterialNameGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialName), v))
	})
}

// MaterialNameGTE applies the GTE predicate on the "materialName" field.
func MaterialNameGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialName), v))
	})
}

// MaterialNameLT applies the LT predicate on the "materialName" field.
func MaterialNameLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialName), v))
	})
}

// MaterialNameLTE applies the LTE predicate on the "materialName" field.
func MaterialNameLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialName), v))
	})
}

// MaterialNameContains applies the Contains predicate on the "materialName" field.
func MaterialNameContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaterialName), v))
	})
}

// MaterialNameHasPrefix applies the HasPrefix predicate on the "materialName" field.
func MaterialNameHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaterialName), v))
	})
}

// MaterialNameHasSuffix applies the HasSuffix predicate on the "materialName" field.
func MaterialNameHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaterialName), v))
	})
}

// MaterialNameEqualFold applies the EqualFold predicate on the "materialName" field.
func MaterialNameEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaterialName), v))
	})
}

// MaterialNameContainsFold applies the ContainsFold predicate on the "materialName" field.
func MaterialNameContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaterialName), v))
	})
}

// MaterialCodeEQ applies the EQ predicate on the "materialCode" field.
func MaterialCodeEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeNEQ applies the NEQ predicate on the "materialCode" field.
func MaterialCodeNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeIn applies the In predicate on the "materialCode" field.
func MaterialCodeIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialCode), v...))
	})
}

// MaterialCodeNotIn applies the NotIn predicate on the "materialCode" field.
func MaterialCodeNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialCode), v...))
	})
}

// MaterialCodeGT applies the GT predicate on the "materialCode" field.
func MaterialCodeGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeGTE applies the GTE predicate on the "materialCode" field.
func MaterialCodeGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeLT applies the LT predicate on the "materialCode" field.
func MaterialCodeLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeLTE applies the LTE predicate on the "materialCode" field.
func MaterialCodeLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeContains applies the Contains predicate on the "materialCode" field.
func MaterialCodeContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeHasPrefix applies the HasPrefix predicate on the "materialCode" field.
func MaterialCodeHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeHasSuffix applies the HasSuffix predicate on the "materialCode" field.
func MaterialCodeHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeEqualFold applies the EqualFold predicate on the "materialCode" field.
func MaterialCodeEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaterialCode), v))
	})
}

// MaterialCodeContainsFold applies the ContainsFold predicate on the "materialCode" field.
func MaterialCodeContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaterialCode), v))
	})
}

// SeqNumberEQ applies the EQ predicate on the "seqNumber" field.
func SeqNumberEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberNEQ applies the NEQ predicate on the "seqNumber" field.
func SeqNumberNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberIn applies the In predicate on the "seqNumber" field.
func SeqNumberIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeqNumber), v...))
	})
}

// SeqNumberNotIn applies the NotIn predicate on the "seqNumber" field.
func SeqNumberNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeqNumber), v...))
	})
}

// SeqNumberGT applies the GT predicate on the "seqNumber" field.
func SeqNumberGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberGTE applies the GTE predicate on the "seqNumber" field.
func SeqNumberGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberLT applies the LT predicate on the "seqNumber" field.
func SeqNumberLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberLTE applies the LTE predicate on the "seqNumber" field.
func SeqNumberLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberContains applies the Contains predicate on the "seqNumber" field.
func SeqNumberContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberHasPrefix applies the HasPrefix predicate on the "seqNumber" field.
func SeqNumberHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberHasSuffix applies the HasSuffix predicate on the "seqNumber" field.
func SeqNumberHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberEqualFold applies the EqualFold predicate on the "seqNumber" field.
func SeqNumberEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSeqNumber), v))
	})
}

// SeqNumberContainsFold applies the ContainsFold predicate on the "seqNumber" field.
func SeqNumberContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSeqNumber), v))
	})
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCount), v))
	})
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCount), v))
	})
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCount), v...))
	})
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCount), v...))
	})
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCount), v))
	})
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCount), v))
	})
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCount), v))
	})
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCount), v))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnit), v))
	})
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnit), v))
	})
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnit), v))
	})
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnit), v))
	})
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnit), v))
	})
}

// BeforeEQ applies the EQ predicate on the "before" field.
func BeforeEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBefore), v))
	})
}

// BeforeNEQ applies the NEQ predicate on the "before" field.
func BeforeNEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBefore), v))
	})
}

// BeforeIn applies the In predicate on the "before" field.
func BeforeIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBefore), v...))
	})
}

// BeforeNotIn applies the NotIn predicate on the "before" field.
func BeforeNotIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBefore), v...))
	})
}

// BeforeGT applies the GT predicate on the "before" field.
func BeforeGT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBefore), v))
	})
}

// BeforeGTE applies the GTE predicate on the "before" field.
func BeforeGTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBefore), v))
	})
}

// BeforeLT applies the LT predicate on the "before" field.
func BeforeLT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBefore), v))
	})
}

// BeforeLTE applies the LTE predicate on the "before" field.
func BeforeLTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBefore), v))
	})
}

// AfterEQ applies the EQ predicate on the "after" field.
func AfterEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAfter), v))
	})
}

// AfterNEQ applies the NEQ predicate on the "after" field.
func AfterNEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAfter), v))
	})
}

// AfterIn applies the In predicate on the "after" field.
func AfterIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAfter), v...))
	})
}

// AfterNotIn applies the NotIn predicate on the "after" field.
func AfterNotIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAfter), v...))
	})
}

// AfterGT applies the GT predicate on the "after" field.
func AfterGT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAfter), v))
	})
}

// AfterGTE applies the GTE predicate on the "after" field.
func AfterGTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAfter), v))
	})
}

// AfterLT applies the LT predicate on the "after" field.
func AfterLT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAfter), v))
	})
}

// AfterLTE applies the LTE predicate on the "after" field.
func AfterLTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAfter), v))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// FarmIdEQ applies the EQ predicate on the "farmId" field.
func FarmIdEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmIdNEQ applies the NEQ predicate on the "farmId" field.
func FarmIdNEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmId), v))
	})
}

// FarmIdIn applies the In predicate on the "farmId" field.
func FarmIdIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFarmId), v...))
	})
}

// FarmIdNotIn applies the NotIn predicate on the "farmId" field.
func FarmIdNotIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFarmId), v...))
	})
}

// FarmIdGT applies the GT predicate on the "farmId" field.
func FarmIdGT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmId), v))
	})
}

// FarmIdGTE applies the GTE predicate on the "farmId" field.
func FarmIdGTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmId), v))
	})
}

// FarmIdLT applies the LT predicate on the "farmId" field.
func FarmIdLT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmId), v))
	})
}

// FarmIdLTE applies the LTE predicate on the "farmId" field.
func FarmIdLTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmId), v))
	})
}

// FarmNameEQ applies the EQ predicate on the "farmName" field.
func FarmNameEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// FarmNameNEQ applies the NEQ predicate on the "farmName" field.
func FarmNameNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmName), v))
	})
}

// FarmNameIn applies the In predicate on the "farmName" field.
func FarmNameIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFarmName), v...))
	})
}

// FarmNameNotIn applies the NotIn predicate on the "farmName" field.
func FarmNameNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFarmName), v...))
	})
}

// FarmNameGT applies the GT predicate on the "farmName" field.
func FarmNameGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmName), v))
	})
}

// FarmNameGTE applies the GTE predicate on the "farmName" field.
func FarmNameGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmName), v))
	})
}

// FarmNameLT applies the LT predicate on the "farmName" field.
func FarmNameLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmName), v))
	})
}

// FarmNameLTE applies the LTE predicate on the "farmName" field.
func FarmNameLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmName), v))
	})
}

// FarmNameContains applies the Contains predicate on the "farmName" field.
func FarmNameContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFarmName), v))
	})
}

// FarmNameHasPrefix applies the HasPrefix predicate on the "farmName" field.
func FarmNameHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFarmName), v))
	})
}

// FarmNameHasSuffix applies the HasSuffix predicate on the "farmName" field.
func FarmNameHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFarmName), v))
	})
}

// FarmNameEqualFold applies the EqualFold predicate on the "farmName" field.
func FarmNameEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFarmName), v))
	})
}

// FarmNameContainsFold applies the ContainsFold predicate on the "farmName" field.
func FarmNameContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFarmName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// IsCheckedEQ applies the EQ predicate on the "isChecked" field.
func IsCheckedEQ(v bool) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsChecked), v))
	})
}

// IsCheckedNEQ applies the NEQ predicate on the "isChecked" field.
func IsCheckedNEQ(v bool) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsChecked), v))
	})
}

// ReportFileAddressEQ applies the EQ predicate on the "reportFileAddress" field.
func ReportFileAddressEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressNEQ applies the NEQ predicate on the "reportFileAddress" field.
func ReportFileAddressNEQ(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressIn applies the In predicate on the "reportFileAddress" field.
func ReportFileAddressIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReportFileAddress), v...))
	})
}

// ReportFileAddressNotIn applies the NotIn predicate on the "reportFileAddress" field.
func ReportFileAddressNotIn(vs ...string) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReportFileAddress), v...))
	})
}

// ReportFileAddressGT applies the GT predicate on the "reportFileAddress" field.
func ReportFileAddressGT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressGTE applies the GTE predicate on the "reportFileAddress" field.
func ReportFileAddressGTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressLT applies the LT predicate on the "reportFileAddress" field.
func ReportFileAddressLT(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressLTE applies the LTE predicate on the "reportFileAddress" field.
func ReportFileAddressLTE(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressContains applies the Contains predicate on the "reportFileAddress" field.
func ReportFileAddressContains(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressHasPrefix applies the HasPrefix predicate on the "reportFileAddress" field.
func ReportFileAddressHasPrefix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressHasSuffix applies the HasSuffix predicate on the "reportFileAddress" field.
func ReportFileAddressHasSuffix(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressEqualFold applies the EqualFold predicate on the "reportFileAddress" field.
func ReportFileAddressEqualFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReportFileAddress), v))
	})
}

// ReportFileAddressContainsFold applies the ContainsFold predicate on the "reportFileAddress" field.
func ReportFileAddressContainsFold(v string) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReportFileAddress), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.InventoryFlow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryFlow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.InventoryFlow) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.InventoryFlow) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InventoryFlow) predicate.InventoryFlow {
	return predicate.InventoryFlow(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/inventoryflow"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// InventoryFlowCreate is the builder for creating a InventoryFlow entity.
type InventoryFlowCreate struct {
	config
	mutation *InventoryFlowMutation
	hooks    []Hook
}

// SetSysMaterialId sets the sysMaterialId field.
func (ifc *InventoryFlowCreate) SetSysMaterialId(i int64) *InventoryFlowCreate {
	ifc.mutation.SetSysMaterialId(i)
	return ifc
}

// SetMaterialId sets the materialId field.
func (ifc *InventoryFlowCreate) SetMaterialId(i int64) *InventoryFlowCreate {
	ifc.mutation.SetMaterialId(i)
	return ifc
}

// SetMaterialName sets the materialName field.
func (ifc *InventoryFlowCreate) SetMaterialName(s string) *InventoryFlowCreate {
	ifc.mutation.SetMaterialName(s)
	return ifc
}

// SetMaterialCode sets the materialCode field.
func (ifc *InventoryFlowCreate) SetMaterialCode(s string) *InventoryFlowCreate {
	ifc.mutation.SetMaterialCode(s)
	return ifc
}

// SetSeqNumber sets the seqNumber field.
func (ifc *InventoryFlowCreate) SetSeqNumber(s string) *InventoryFlowCreate {
	ifc.mutation.SetSeqNumber(s)
	return ifc
}

// SetDate sets the date field.
func (ifc *InventoryFlowCreate) SetDate(i int64) *InventoryFlowCreate {
	ifc.mutation.SetDate(i)
	return ifc
}

// SetType sets the type field.
func (ifc *InventoryFlowCreate) SetType(i int) *InventoryFlowCreate {
	ifc.mutation.SetType(i)
	return ifc
}

// SetStatus sets the status field.
func (ifc *InventoryFlowCreate) SetStatus(s string) *InventoryFlowCreate {
	ifc.mutation.SetStatus(s)
	return ifc
}

// SetCount sets the count field.
func (ifc *InventoryFlowCreate) SetCount(i int) *InventoryFlowCreate {
	ifc.mutation.SetCount(i)
	return ifc
}

// SetUnit sets the unit field.
func (ifc *InventoryFlowCreate) SetUnit(s string) *InventoryFlowCreate {
	ifc.mutation.SetUnit(s)
	return ifc
}

// SetBefore sets the before field.
func (ifc *InventoryFlowCreate) SetBefore(i int64) *InventoryFlowCreate {
	ifc.mutation.SetBefore(i)
	return ifc
}

// SetAfter sets the after field.
func (ifc *InventoryFlowCreate) SetAfter(i int64) *InventoryFlowCreate {
	ifc.mutation.SetAfter(i)
	return ifc
}

// SetUserName sets the userName field.
func (ifc *InventoryFlowCreate) SetUserName(s string) *InventoryFlowCreate {
	ifc.mutation.SetUserName(s)
	return ifc
}

// SetTenantId sets the tenantId field.
func (ifc *InventoryFlowCreate) SetTenantId(i int64) *InventoryFlowCreate {
	ifc.mutation.SetTenantId(i)
	return ifc
}

// SetTenantName sets the tenantName field.
func (ifc *InventoryFlowCreate) SetTenantName(s string) *InventoryFlowCreate {
	ifc.mutation.SetTenantName(s)
	return ifc
}

// SetFarmId sets the farmId field.
func (ifc *InventoryFlowCreate) SetFarmId(i int64) *InventoryFlowCreate {
	ifc.mutation.SetFarmId(i)
	return ifc
}

// SetFarmName sets the farmName field.
func (ifc *InventoryFlowCreate) SetFarmName(s string) *InventoryFlowCreate {
	ifc.mutation.SetFarmName(s)
	return ifc
}

// SetRemarks sets the remarks field.
func (ifc *InventoryFlowCreate) SetRemarks(s string) *InventoryFlowCreate {
	ifc.mutation.SetRemarks(s)
	return ifc
}

// SetIsChecked sets the isChecked field.
func (ifc *InventoryFlowCreate) SetIsChecked(b bool) *InventoryFlowCreate {
	ifc.mutation.SetIsChecked(b)
	return ifc
}

// SetReportFileAddress sets the reportFileAddress field.
func (ifc *InventoryFlowCreate) SetReportFileAddress(s string) *InventoryFlowCreate {
	ifc.mutation.SetReportFileAddress(s)
	return ifc
}

// SetCreatedAt sets the createdAt field.
func (ifc *InventoryFlowCreate) SetCreatedAt(i int64) *InventoryFlowCreate {
	ifc.mutation.SetCreatedAt(i)
	return ifc
}

// SetUpdatedAt sets the updatedAt field.
func (ifc *InventoryFlowCreate) SetUpdatedAt(i int64) *InventoryFlowCreate {
	ifc.mutation.SetUpdatedAt(i)
	return ifc
}

// SetDeleted sets the deleted field.
func (ifc *InventoryFlowCreate) SetDeleted(i int) *InventoryFlowCreate {
	ifc.mutation.SetDeleted(i)
	return ifc
}

// Mutation returns the InventoryFlowMutation object of the builder.
func (ifc *InventoryFlowCreate) Mutation() *InventoryFlowMutation {
	return ifc.mutation
}

// Save creates the InventoryFlow in the database.
func (ifc *InventoryFlowCreate) Save(ctx context.Context) (*InventoryFlow, error) {
	var (
		err  error
		node *InventoryFlow
	)
	if len(ifc.hooks) == 0 {
		if err = ifc.check(); err != nil {
			return nil, err
		}
		node, err = ifc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InventoryFlowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ifc.check(); err != nil {
				return nil, err
			}
			ifc.mutation = mutation
			node, err = ifc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ifc.hooks) - 1; i >= 0; i-- {
			mut = ifc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ifc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ifc *InventoryFlowCreate) SaveX(ctx context.Context) *InventoryFlow {
	v, err := ifc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ifc *InventoryFlowCreate) check() error {
	if _, ok := ifc.mutation.SysMaterialId(); !ok {
		return &ValidationError{Name: "sysMaterialId", err: errors.New("ent: missing required field \"sysMaterialId\"")}
	}
	if _, ok := ifc.mutation.MaterialId(); !ok {
		return &ValidationError{Name: "materialId", err: errors.New("ent: missing required field \"materialId\"")}
	}
	if _, ok := ifc.mutation.MaterialName(); !ok {
		return &ValidationError{Name: "materialName", err: errors.New("ent: missing required field \"materialName\"")}
	}
	if _, ok := ifc.mutation.MaterialCode(); !ok {
		return &ValidationError{Name: "materialCode", err: errors.New("ent: missing required field \"materialCode\"")}
	}
	if _, ok := ifc.mutation.SeqNumber(); !ok {
		return &ValidationError{Name: "seqNumber", err: errors.New("ent: missing required field \"seqNumber\"")}
	}
	if _, ok := ifc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := ifc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := ifc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := ifc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New("ent: missing required field \"count\"")}
	}
	if _, ok := ifc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New("ent: missing required field \"unit\"")}
	}
	if _, ok := ifc.mutation.Before(); !ok {
		return &ValidationError{Name: "before", err: errors.New("ent: missing required field \"before\"")}
	}
	if _, ok := ifc.mutation.After(); !ok {
		return &ValidationError{Name: "after", err: errors.New("ent: missing required field \"after\"")}
	}
	if _, ok := ifc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := ifc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := ifc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := ifc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New("ent: missing required field \"farmId\"")}
	}
	if _, ok := ifc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New("ent: missing required field \"farmName\"")}
	}
	if _, ok := ifc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := ifc.mutation.IsChecked(); !ok {
		return &ValidationError{Name: "isChecked", err: errors.New("ent: missing required field \"isChecked\"")}
	}
	if _, ok := ifc.mutation.ReportFileAddress(); !ok {
		return &ValidationError{Name: "reportFileAddress", err: errors.New("ent: missing required field \"reportFileAddress\"")}
	}
	if _, ok := ifc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := ifc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := ifc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (ifc *InventoryFlowCreate) sqlSave(ctx context.Context) (*InventoryFlow, error) {
	_node, _spec := ifc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ifc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ifc *InventoryFlowCreate) createSpec() (*InventoryFlow, *sqlgraph.CreateSpec) {
	var (
		_node = &InventoryFlow{config: ifc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inventoryflow.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inventoryflow.FieldID,
			},
		}
	)
	if value, ok := ifc.mutation.SysMaterialId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inventoryflow.FieldSysMaterialId,
		})
		_node.SysMaterialId = value
	}
	if value, ok := ifc.mutation.MaterialId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inventoryflow.FieldMaterialId,
		})
		_node.MaterialId = value
	}
	if value, ok := ifc.mutation.MaterialName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldMaterialName,
		})
		_node.MaterialName = value
	}
	if value, ok := ifc.mutation.MaterialCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldMaterialCode,
		})
		_node.MaterialCode = value
	}
	if value, ok := ifc.mutation.SeqNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldSeqNumber,
		})
		_node.SeqNumber = value
	}
	if value, ok := ifc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inventoryflow.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := ifc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryflow.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ifc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ifc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryflow.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := ifc.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := ifc.mutation.Before(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inventoryflow.FieldBefore,
		})
		_node.Before = value
	}
	if value, ok := ifc.mutation.After(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inventoryflow.FieldAfter,
		})
		_node.After = value
	}
	if value, ok := ifc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := ifc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inventoryflow.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := ifc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := ifc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inventoryflow.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := ifc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := ifc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := ifc.mutation.IsChecked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: inventoryflow.FieldIsChecked,
		})
		_node.IsChecked = value
	}
	if value, ok := ifc.mutation.ReportFileAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryflow.FieldReportFileAddress,
		})
		_node.ReportFileAddress = value
	}
	if value, ok := ifc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inventoryflow.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ifc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: inventoryflow.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ifc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryflow.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// InventoryFlowCreateBulk is the builder for creating a bulk of InventoryFlow entities.
type InventoryFlowCreateBulk struct {
	config
	builders []*InventoryFlowCreate
}

// Save creates the InventoryFlow entities in the database.
func (ifcb *InventoryFlowCreateBulk) Save(ctx context.Context) ([]*InventoryFlow, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ifcb.builders))
	nodes := make([]*InventoryFlow, len(ifcb.builders))
	mutators := make([]Mutator, len(ifcb.builders))
	for i := range ifcb.builders {
		func(i int, root context.Context) {
			builder := ifcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryFlowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ifcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ifcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ifcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ifcb *InventoryFlowCreateBulk) SaveX(ctx context.Context) []*InventoryFlow {
	v, err := ifcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/material"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Material is the model entity for the Material schema.
type Material struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Category holds the value of the "category" field.
	Category int `json:"category,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// Inventory holds the value of the "inventory" field.
	Inventory int64 `json:"inventory,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Material) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // code
		&sql.NullInt64{},  // category
		&sql.NullString{}, // userName
		&sql.NullInt64{},  // inventory
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Material fields.
func (m *Material) assignValues(values ...interface{}) error {
	if m, n := len(values), len(material.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		m.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[1])
	} else if value.Valid {
		m.Code = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field category", values[2])
	} else if value.Valid {
		m.Category = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[3])
	} else if value.Valid {
		m.UserName = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field inventory", values[4])
	} else if value.Valid {
		m.Inventory = value.Int64
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[5])
	} else if value.Valid {
		m.TenantId = value.Int64
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[6])
	} else if value.Valid {
		m.TenantName = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[7])
	} else if value.Valid {
		m.Remarks = value.String
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[8])
	} else if value.Valid {
		m.CreatedAt = value.Int64
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[9])
	} else if value.Valid {
		m.UpdatedAt = value.Int64
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[10])
	} else if value.Valid {
		m.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Material.
// Note that, you need to call Material.Unwrap() before calling this method, if this Material
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Material) Update() *MaterialUpdateOne {
	return (&MaterialClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Material) Unwrap() *Material {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Material is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Material) String() string {
	var builder strings.Builder
	builder.WriteString("Material(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", code=")
	builder.WriteString(m.Code)
	builder.WriteString(", category=")
	builder.WriteString(fmt.Sprintf("%v", m.Category))
	builder.WriteString(", userName=")
	builder.WriteString(m.UserName)
	builder.WriteString(", inventory=")
	builder.WriteString(fmt.Sprintf("%v", m.Inventory))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", m.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(m.TenantName)
	builder.WriteString(", remarks=")
	builder.WriteString(m.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", m.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", m.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Materials is a parsable slice of Material.
type Materials []*Material

func (m Materials) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}

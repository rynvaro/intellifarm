// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/material"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// MaterialCreate is the builder for creating a Material entity.
type MaterialCreate struct {
	config
	mutation *MaterialMutation
	hooks    []Hook
}

// SetName sets the name field.
func (mc *MaterialCreate) SetName(s string) *MaterialCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetCode sets the code field.
func (mc *MaterialCreate) SetCode(s string) *MaterialCreate {
	mc.mutation.SetCode(s)
	return mc
}

// SetSeqNumber sets the seqNumber field.
func (mc *MaterialCreate) SetSeqNumber(s string) *MaterialCreate {
	mc.mutation.SetSeqNumber(s)
	return mc
}

// SetDate sets the date field.
func (mc *MaterialCreate) SetDate(i int64) *MaterialCreate {
	mc.mutation.SetDate(i)
	return mc
}

// SetType sets the type field.
func (mc *MaterialCreate) SetType(i int) *MaterialCreate {
	mc.mutation.SetType(i)
	return mc
}

// SetCount sets the count field.
func (mc *MaterialCreate) SetCount(i int) *MaterialCreate {
	mc.mutation.SetCount(i)
	return mc
}

// SetCategory sets the category field.
func (mc *MaterialCreate) SetCategory(i int) *MaterialCreate {
	mc.mutation.SetCategory(i)
	return mc
}

// SetStatus sets the status field.
func (mc *MaterialCreate) SetStatus(i int) *MaterialCreate {
	mc.mutation.SetStatus(i)
	return mc
}

// SetUserName sets the userName field.
func (mc *MaterialCreate) SetUserName(s string) *MaterialCreate {
	mc.mutation.SetUserName(s)
	return mc
}

// SetPayAt sets the payAt field.
func (mc *MaterialCreate) SetPayAt(i int64) *MaterialCreate {
	mc.mutation.SetPayAt(i)
	return mc
}

// SetRemarks sets the remarks field.
func (mc *MaterialCreate) SetRemarks(s string) *MaterialCreate {
	mc.mutation.SetRemarks(s)
	return mc
}

// SetCreatedAt sets the createdAt field.
func (mc *MaterialCreate) SetCreatedAt(i int64) *MaterialCreate {
	mc.mutation.SetCreatedAt(i)
	return mc
}

// SetUpdatedAt sets the updatedAt field.
func (mc *MaterialCreate) SetUpdatedAt(i int64) *MaterialCreate {
	mc.mutation.SetUpdatedAt(i)
	return mc
}

// SetDeleted sets the deleted field.
func (mc *MaterialCreate) SetDeleted(i int) *MaterialCreate {
	mc.mutation.SetDeleted(i)
	return mc
}

// Mutation returns the MaterialMutation object of the builder.
func (mc *MaterialCreate) Mutation() *MaterialMutation {
	return mc.mutation
}

// Save creates the Material in the database.
func (mc *MaterialCreate) Save(ctx context.Context) (*Material, error) {
	var (
		err  error
		node *Material
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MaterialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MaterialCreate) SaveX(ctx context.Context) *Material {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (mc *MaterialCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := mc.mutation.SeqNumber(); !ok {
		return &ValidationError{Name: "seqNumber", err: errors.New("ent: missing required field \"seqNumber\"")}
	}
	if _, ok := mc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := mc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New("ent: missing required field \"count\"")}
	}
	if _, ok := mc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New("ent: missing required field \"category\"")}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := mc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := mc.mutation.PayAt(); !ok {
		return &ValidationError{Name: "payAt", err: errors.New("ent: missing required field \"payAt\"")}
	}
	if _, ok := mc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := mc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (mc *MaterialCreate) sqlSave(ctx context.Context) (*Material, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (mc *MaterialCreate) createSpec() (*Material, *sqlgraph.CreateSpec) {
	var (
		_node = &Material{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: material.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: material.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := mc.mutation.SeqNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldSeqNumber,
		})
		_node.SeqNumber = value
	}
	if value, ok := mc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldType,
		})
		_node.Type = value
	}
	if value, ok := mc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := mc.mutation.Category(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCategory,
		})
		_node.Category = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := mc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := mc.mutation.PayAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldPayAt,
		})
		_node.PayAt = value
	}
	if value, ok := mc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// MaterialCreateBulk is the builder for creating a bulk of Material entities.
type MaterialCreateBulk struct {
	config
	builders []*MaterialCreate
}

// Save creates the Material entities in the database.
func (mcb *MaterialCreateBulk) Save(ctx context.Context) ([]*Material, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Material, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MaterialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mcb *MaterialCreateBulk) SaveX(ctx context.Context) []*Material {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

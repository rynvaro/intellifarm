// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/material"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MaterialCreate is the builder for creating a Material entity.
type MaterialCreate struct {
	config
	mutation *MaterialMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *MaterialCreate) SetName(s string) *MaterialCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetCode sets the "code" field.
func (mc *MaterialCreate) SetCode(s string) *MaterialCreate {
	mc.mutation.SetCode(s)
	return mc
}

// SetMaterialId sets the "materialId" field.
func (mc *MaterialCreate) SetMaterialId(i int64) *MaterialCreate {
	mc.mutation.SetMaterialId(i)
	return mc
}

// SetCategoryId sets the "categoryId" field.
func (mc *MaterialCreate) SetCategoryId(i int) *MaterialCreate {
	mc.mutation.SetCategoryId(i)
	return mc
}

// SetCategoryName sets the "categoryName" field.
func (mc *MaterialCreate) SetCategoryName(s string) *MaterialCreate {
	mc.mutation.SetCategoryName(s)
	return mc
}

// SetUserName sets the "userName" field.
func (mc *MaterialCreate) SetUserName(s string) *MaterialCreate {
	mc.mutation.SetUserName(s)
	return mc
}

// SetInventory sets the "inventory" field.
func (mc *MaterialCreate) SetInventory(i int64) *MaterialCreate {
	mc.mutation.SetInventory(i)
	return mc
}

// SetNillableInventory sets the "inventory" field if the given value is not nil.
func (mc *MaterialCreate) SetNillableInventory(i *int64) *MaterialCreate {
	if i != nil {
		mc.SetInventory(*i)
	}
	return mc
}

// SetTenantId sets the "tenantId" field.
func (mc *MaterialCreate) SetTenantId(i int64) *MaterialCreate {
	mc.mutation.SetTenantId(i)
	return mc
}

// SetTenantName sets the "tenantName" field.
func (mc *MaterialCreate) SetTenantName(s string) *MaterialCreate {
	mc.mutation.SetTenantName(s)
	return mc
}

// SetFarmId sets the "farmId" field.
func (mc *MaterialCreate) SetFarmId(i int64) *MaterialCreate {
	mc.mutation.SetFarmId(i)
	return mc
}

// SetFarmName sets the "farmName" field.
func (mc *MaterialCreate) SetFarmName(s string) *MaterialCreate {
	mc.mutation.SetFarmName(s)
	return mc
}

// SetRemarks sets the "remarks" field.
func (mc *MaterialCreate) SetRemarks(s string) *MaterialCreate {
	mc.mutation.SetRemarks(s)
	return mc
}

// SetCreatedAt sets the "createdAt" field.
func (mc *MaterialCreate) SetCreatedAt(i int64) *MaterialCreate {
	mc.mutation.SetCreatedAt(i)
	return mc
}

// SetUpdatedAt sets the "updatedAt" field.
func (mc *MaterialCreate) SetUpdatedAt(i int64) *MaterialCreate {
	mc.mutation.SetUpdatedAt(i)
	return mc
}

// SetDeleted sets the "deleted" field.
func (mc *MaterialCreate) SetDeleted(i int) *MaterialCreate {
	mc.mutation.SetDeleted(i)
	return mc
}

// Mutation returns the MaterialMutation object of the builder.
func (mc *MaterialCreate) Mutation() *MaterialMutation {
	return mc.mutation
}

// Save creates the Material in the database.
func (mc *MaterialCreate) Save(ctx context.Context) (*Material, error) {
	var (
		err  error
		node *Material
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MaterialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Material)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MaterialMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MaterialCreate) SaveX(ctx context.Context) *Material {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MaterialCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MaterialCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MaterialCreate) defaults() {
	if _, ok := mc.mutation.Inventory(); !ok {
		v := material.DefaultInventory
		mc.mutation.SetInventory(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MaterialCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Material.name"`)}
	}
	if _, ok := mc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Material.code"`)}
	}
	if _, ok := mc.mutation.MaterialId(); !ok {
		return &ValidationError{Name: "materialId", err: errors.New(`ent: missing required field "Material.materialId"`)}
	}
	if _, ok := mc.mutation.CategoryId(); !ok {
		return &ValidationError{Name: "categoryId", err: errors.New(`ent: missing required field "Material.categoryId"`)}
	}
	if _, ok := mc.mutation.CategoryName(); !ok {
		return &ValidationError{Name: "categoryName", err: errors.New(`ent: missing required field "Material.categoryName"`)}
	}
	if _, ok := mc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New(`ent: missing required field "Material.userName"`)}
	}
	if _, ok := mc.mutation.Inventory(); !ok {
		return &ValidationError{Name: "inventory", err: errors.New(`ent: missing required field "Material.inventory"`)}
	}
	if _, ok := mc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "Material.tenantId"`)}
	}
	if _, ok := mc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "Material.tenantName"`)}
	}
	if _, ok := mc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New(`ent: missing required field "Material.farmId"`)}
	}
	if _, ok := mc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New(`ent: missing required field "Material.farmName"`)}
	}
	if _, ok := mc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "Material.remarks"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Material.createdAt"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Material.updatedAt"`)}
	}
	if _, ok := mc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Material.deleted"`)}
	}
	return nil
}

func (mc *MaterialCreate) sqlSave(ctx context.Context) (*Material, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MaterialCreate) createSpec() (*Material, *sqlgraph.CreateSpec) {
	var (
		_node = &Material{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: material.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: material.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := mc.mutation.MaterialId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldMaterialId,
		})
		_node.MaterialId = value
	}
	if value, ok := mc.mutation.CategoryId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCategoryId,
		})
		_node.CategoryId = value
	}
	if value, ok := mc.mutation.CategoryName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldCategoryName,
		})
		_node.CategoryName = value
	}
	if value, ok := mc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := mc.mutation.Inventory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldInventory,
		})
		_node.Inventory = value
	}
	if value, ok := mc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := mc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := mc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := mc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := mc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// MaterialCreateBulk is the builder for creating many Material entities in bulk.
type MaterialCreateBulk struct {
	config
	builders []*MaterialCreate
}

// Save creates the Material entities in the database.
func (mcb *MaterialCreateBulk) Save(ctx context.Context) ([]*Material, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Material, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MaterialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MaterialCreateBulk) SaveX(ctx context.Context) []*Material {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MaterialCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MaterialCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

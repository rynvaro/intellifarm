// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/material"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// MaterialUpdate is the builder for updating Material entities.
type MaterialUpdate struct {
	config
	hooks      []Hook
	mutation   *MaterialMutation
	predicates []predicate.Material
}

// Where adds a new predicate for the builder.
func (mu *MaterialUpdate) Where(ps ...predicate.Material) *MaterialUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetName sets the name field.
func (mu *MaterialUpdate) SetName(s string) *MaterialUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetCode sets the code field.
func (mu *MaterialUpdate) SetCode(s string) *MaterialUpdate {
	mu.mutation.SetCode(s)
	return mu
}

// SetSeqNumber sets the seqNumber field.
func (mu *MaterialUpdate) SetSeqNumber(s string) *MaterialUpdate {
	mu.mutation.SetSeqNumber(s)
	return mu
}

// SetDate sets the date field.
func (mu *MaterialUpdate) SetDate(i int64) *MaterialUpdate {
	mu.mutation.ResetDate()
	mu.mutation.SetDate(i)
	return mu
}

// AddDate adds i to date.
func (mu *MaterialUpdate) AddDate(i int64) *MaterialUpdate {
	mu.mutation.AddDate(i)
	return mu
}

// SetType sets the type field.
func (mu *MaterialUpdate) SetType(i int) *MaterialUpdate {
	mu.mutation.ResetType()
	mu.mutation.SetType(i)
	return mu
}

// AddType adds i to type.
func (mu *MaterialUpdate) AddType(i int) *MaterialUpdate {
	mu.mutation.AddType(i)
	return mu
}

// SetCount sets the count field.
func (mu *MaterialUpdate) SetCount(i int) *MaterialUpdate {
	mu.mutation.ResetCount()
	mu.mutation.SetCount(i)
	return mu
}

// AddCount adds i to count.
func (mu *MaterialUpdate) AddCount(i int) *MaterialUpdate {
	mu.mutation.AddCount(i)
	return mu
}

// SetCategory sets the category field.
func (mu *MaterialUpdate) SetCategory(i int) *MaterialUpdate {
	mu.mutation.ResetCategory()
	mu.mutation.SetCategory(i)
	return mu
}

// AddCategory adds i to category.
func (mu *MaterialUpdate) AddCategory(i int) *MaterialUpdate {
	mu.mutation.AddCategory(i)
	return mu
}

// SetStatus sets the status field.
func (mu *MaterialUpdate) SetStatus(i int) *MaterialUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(i)
	return mu
}

// AddStatus adds i to status.
func (mu *MaterialUpdate) AddStatus(i int) *MaterialUpdate {
	mu.mutation.AddStatus(i)
	return mu
}

// SetUserName sets the userName field.
func (mu *MaterialUpdate) SetUserName(s string) *MaterialUpdate {
	mu.mutation.SetUserName(s)
	return mu
}

// SetPayAt sets the payAt field.
func (mu *MaterialUpdate) SetPayAt(i int64) *MaterialUpdate {
	mu.mutation.ResetPayAt()
	mu.mutation.SetPayAt(i)
	return mu
}

// AddPayAt adds i to payAt.
func (mu *MaterialUpdate) AddPayAt(i int64) *MaterialUpdate {
	mu.mutation.AddPayAt(i)
	return mu
}

// SetTenantId sets the tenantId field.
func (mu *MaterialUpdate) SetTenantId(i int64) *MaterialUpdate {
	mu.mutation.ResetTenantId()
	mu.mutation.SetTenantId(i)
	return mu
}

// AddTenantId adds i to tenantId.
func (mu *MaterialUpdate) AddTenantId(i int64) *MaterialUpdate {
	mu.mutation.AddTenantId(i)
	return mu
}

// SetTenantName sets the tenantName field.
func (mu *MaterialUpdate) SetTenantName(s string) *MaterialUpdate {
	mu.mutation.SetTenantName(s)
	return mu
}

// SetRemarks sets the remarks field.
func (mu *MaterialUpdate) SetRemarks(s string) *MaterialUpdate {
	mu.mutation.SetRemarks(s)
	return mu
}

// SetCreatedAt sets the createdAt field.
func (mu *MaterialUpdate) SetCreatedAt(i int64) *MaterialUpdate {
	mu.mutation.ResetCreatedAt()
	mu.mutation.SetCreatedAt(i)
	return mu
}

// AddCreatedAt adds i to createdAt.
func (mu *MaterialUpdate) AddCreatedAt(i int64) *MaterialUpdate {
	mu.mutation.AddCreatedAt(i)
	return mu
}

// SetUpdatedAt sets the updatedAt field.
func (mu *MaterialUpdate) SetUpdatedAt(i int64) *MaterialUpdate {
	mu.mutation.ResetUpdatedAt()
	mu.mutation.SetUpdatedAt(i)
	return mu
}

// AddUpdatedAt adds i to updatedAt.
func (mu *MaterialUpdate) AddUpdatedAt(i int64) *MaterialUpdate {
	mu.mutation.AddUpdatedAt(i)
	return mu
}

// SetDeleted sets the deleted field.
func (mu *MaterialUpdate) SetDeleted(i int) *MaterialUpdate {
	mu.mutation.ResetDeleted()
	mu.mutation.SetDeleted(i)
	return mu
}

// AddDeleted adds i to deleted.
func (mu *MaterialUpdate) AddDeleted(i int) *MaterialUpdate {
	mu.mutation.AddDeleted(i)
	return mu
}

// Mutation returns the MaterialMutation object of the builder.
func (mu *MaterialUpdate) Mutation() *MaterialMutation {
	return mu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MaterialUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MaterialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MaterialUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MaterialUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MaterialUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MaterialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   material.Table,
			Columns: material.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: material.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldName,
		})
	}
	if value, ok := mu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldCode,
		})
	}
	if value, ok := mu.mutation.SeqNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldSeqNumber,
		})
	}
	if value, ok := mu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldDate,
		})
	}
	if value, ok := mu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldDate,
		})
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldType,
		})
	}
	if value, ok := mu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldType,
		})
	}
	if value, ok := mu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCount,
		})
	}
	if value, ok := mu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCount,
		})
	}
	if value, ok := mu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCategory,
		})
	}
	if value, ok := mu.mutation.AddedCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCategory,
		})
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldStatus,
		})
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldStatus,
		})
	}
	if value, ok := mu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldUserName,
		})
	}
	if value, ok := mu.mutation.PayAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldPayAt,
		})
	}
	if value, ok := mu.mutation.AddedPayAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldPayAt,
		})
	}
	if value, ok := mu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldTenantId,
		})
	}
	if value, ok := mu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldTenantId,
		})
	}
	if value, ok := mu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldTenantName,
		})
	}
	if value, ok := mu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldRemarks,
		})
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldDeleted,
		})
	}
	if value, ok := mu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{material.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MaterialUpdateOne is the builder for updating a single Material entity.
type MaterialUpdateOne struct {
	config
	hooks    []Hook
	mutation *MaterialMutation
}

// SetName sets the name field.
func (muo *MaterialUpdateOne) SetName(s string) *MaterialUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetCode sets the code field.
func (muo *MaterialUpdateOne) SetCode(s string) *MaterialUpdateOne {
	muo.mutation.SetCode(s)
	return muo
}

// SetSeqNumber sets the seqNumber field.
func (muo *MaterialUpdateOne) SetSeqNumber(s string) *MaterialUpdateOne {
	muo.mutation.SetSeqNumber(s)
	return muo
}

// SetDate sets the date field.
func (muo *MaterialUpdateOne) SetDate(i int64) *MaterialUpdateOne {
	muo.mutation.ResetDate()
	muo.mutation.SetDate(i)
	return muo
}

// AddDate adds i to date.
func (muo *MaterialUpdateOne) AddDate(i int64) *MaterialUpdateOne {
	muo.mutation.AddDate(i)
	return muo
}

// SetType sets the type field.
func (muo *MaterialUpdateOne) SetType(i int) *MaterialUpdateOne {
	muo.mutation.ResetType()
	muo.mutation.SetType(i)
	return muo
}

// AddType adds i to type.
func (muo *MaterialUpdateOne) AddType(i int) *MaterialUpdateOne {
	muo.mutation.AddType(i)
	return muo
}

// SetCount sets the count field.
func (muo *MaterialUpdateOne) SetCount(i int) *MaterialUpdateOne {
	muo.mutation.ResetCount()
	muo.mutation.SetCount(i)
	return muo
}

// AddCount adds i to count.
func (muo *MaterialUpdateOne) AddCount(i int) *MaterialUpdateOne {
	muo.mutation.AddCount(i)
	return muo
}

// SetCategory sets the category field.
func (muo *MaterialUpdateOne) SetCategory(i int) *MaterialUpdateOne {
	muo.mutation.ResetCategory()
	muo.mutation.SetCategory(i)
	return muo
}

// AddCategory adds i to category.
func (muo *MaterialUpdateOne) AddCategory(i int) *MaterialUpdateOne {
	muo.mutation.AddCategory(i)
	return muo
}

// SetStatus sets the status field.
func (muo *MaterialUpdateOne) SetStatus(i int) *MaterialUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(i)
	return muo
}

// AddStatus adds i to status.
func (muo *MaterialUpdateOne) AddStatus(i int) *MaterialUpdateOne {
	muo.mutation.AddStatus(i)
	return muo
}

// SetUserName sets the userName field.
func (muo *MaterialUpdateOne) SetUserName(s string) *MaterialUpdateOne {
	muo.mutation.SetUserName(s)
	return muo
}

// SetPayAt sets the payAt field.
func (muo *MaterialUpdateOne) SetPayAt(i int64) *MaterialUpdateOne {
	muo.mutation.ResetPayAt()
	muo.mutation.SetPayAt(i)
	return muo
}

// AddPayAt adds i to payAt.
func (muo *MaterialUpdateOne) AddPayAt(i int64) *MaterialUpdateOne {
	muo.mutation.AddPayAt(i)
	return muo
}

// SetTenantId sets the tenantId field.
func (muo *MaterialUpdateOne) SetTenantId(i int64) *MaterialUpdateOne {
	muo.mutation.ResetTenantId()
	muo.mutation.SetTenantId(i)
	return muo
}

// AddTenantId adds i to tenantId.
func (muo *MaterialUpdateOne) AddTenantId(i int64) *MaterialUpdateOne {
	muo.mutation.AddTenantId(i)
	return muo
}

// SetTenantName sets the tenantName field.
func (muo *MaterialUpdateOne) SetTenantName(s string) *MaterialUpdateOne {
	muo.mutation.SetTenantName(s)
	return muo
}

// SetRemarks sets the remarks field.
func (muo *MaterialUpdateOne) SetRemarks(s string) *MaterialUpdateOne {
	muo.mutation.SetRemarks(s)
	return muo
}

// SetCreatedAt sets the createdAt field.
func (muo *MaterialUpdateOne) SetCreatedAt(i int64) *MaterialUpdateOne {
	muo.mutation.ResetCreatedAt()
	muo.mutation.SetCreatedAt(i)
	return muo
}

// AddCreatedAt adds i to createdAt.
func (muo *MaterialUpdateOne) AddCreatedAt(i int64) *MaterialUpdateOne {
	muo.mutation.AddCreatedAt(i)
	return muo
}

// SetUpdatedAt sets the updatedAt field.
func (muo *MaterialUpdateOne) SetUpdatedAt(i int64) *MaterialUpdateOne {
	muo.mutation.ResetUpdatedAt()
	muo.mutation.SetUpdatedAt(i)
	return muo
}

// AddUpdatedAt adds i to updatedAt.
func (muo *MaterialUpdateOne) AddUpdatedAt(i int64) *MaterialUpdateOne {
	muo.mutation.AddUpdatedAt(i)
	return muo
}

// SetDeleted sets the deleted field.
func (muo *MaterialUpdateOne) SetDeleted(i int) *MaterialUpdateOne {
	muo.mutation.ResetDeleted()
	muo.mutation.SetDeleted(i)
	return muo
}

// AddDeleted adds i to deleted.
func (muo *MaterialUpdateOne) AddDeleted(i int) *MaterialUpdateOne {
	muo.mutation.AddDeleted(i)
	return muo
}

// Mutation returns the MaterialMutation object of the builder.
func (muo *MaterialUpdateOne) Mutation() *MaterialMutation {
	return muo.mutation
}

// Save executes the query and returns the updated entity.
func (muo *MaterialUpdateOne) Save(ctx context.Context) (*Material, error) {
	var (
		err  error
		node *Material
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MaterialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MaterialUpdateOne) SaveX(ctx context.Context) *Material {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MaterialUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MaterialUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MaterialUpdateOne) sqlSave(ctx context.Context) (_node *Material, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   material.Table,
			Columns: material.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: material.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Material.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldName,
		})
	}
	if value, ok := muo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldCode,
		})
	}
	if value, ok := muo.mutation.SeqNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldSeqNumber,
		})
	}
	if value, ok := muo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldDate,
		})
	}
	if value, ok := muo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldDate,
		})
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldType,
		})
	}
	if value, ok := muo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldType,
		})
	}
	if value, ok := muo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCount,
		})
	}
	if value, ok := muo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCount,
		})
	}
	if value, ok := muo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCategory,
		})
	}
	if value, ok := muo.mutation.AddedCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldCategory,
		})
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldStatus,
		})
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldStatus,
		})
	}
	if value, ok := muo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldUserName,
		})
	}
	if value, ok := muo.mutation.PayAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldPayAt,
		})
	}
	if value, ok := muo.mutation.AddedPayAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldPayAt,
		})
	}
	if value, ok := muo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldTenantId,
		})
	}
	if value, ok := muo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldTenantId,
		})
	}
	if value, ok := muo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldTenantName,
		})
	}
	if value, ok := muo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: material.FieldRemarks,
		})
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: material.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldDeleted,
		})
	}
	if value, ok := muo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: material.FieldDeleted,
		})
	}
	_node = &Material{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{material.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

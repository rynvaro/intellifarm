// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/materialtest"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// MaterialTest is the model entity for the MaterialTest schema.
type MaterialTest struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// SeqNumber holds the value of the "seqNumber" field.
	SeqNumber string `json:"seqNumber,omitempty"`
	// AddSeqNumber holds the value of the "addSeqNumber" field.
	AddSeqNumber string `json:"addSeqNumber,omitempty"`
	// Date holds the value of the "date" field.
	Date int64 `json:"date,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Category holds the value of the "category" field.
	Category int `json:"category,omitempty"`
	// MaterialCategory holds the value of the "materialCategory" field.
	MaterialCategory int `json:"materialCategory,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MaterialTest) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // code
		&sql.NullString{}, // seqNumber
		&sql.NullString{}, // addSeqNumber
		&sql.NullInt64{},  // date
		&sql.NullInt64{},  // type
		&sql.NullInt64{},  // category
		&sql.NullInt64{},  // materialCategory
		&sql.NullString{}, // userName
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MaterialTest fields.
func (mt *MaterialTest) assignValues(values ...interface{}) error {
	if m, n := len(values), len(materialtest.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	mt.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		mt.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[1])
	} else if value.Valid {
		mt.Code = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field seqNumber", values[2])
	} else if value.Valid {
		mt.SeqNumber = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field addSeqNumber", values[3])
	} else if value.Valid {
		mt.AddSeqNumber = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[4])
	} else if value.Valid {
		mt.Date = value.Int64
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[5])
	} else if value.Valid {
		mt.Type = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field category", values[6])
	} else if value.Valid {
		mt.Category = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field materialCategory", values[7])
	} else if value.Valid {
		mt.MaterialCategory = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[8])
	} else if value.Valid {
		mt.UserName = value.String
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[9])
	} else if value.Valid {
		mt.TenantId = value.Int64
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[10])
	} else if value.Valid {
		mt.TenantName = value.String
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[11])
	} else if value.Valid {
		mt.Remarks = value.String
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[12])
	} else if value.Valid {
		mt.CreatedAt = value.Int64
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[13])
	} else if value.Valid {
		mt.UpdatedAt = value.Int64
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[14])
	} else if value.Valid {
		mt.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this MaterialTest.
// Note that, you need to call MaterialTest.Unwrap() before calling this method, if this MaterialTest
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MaterialTest) Update() *MaterialTestUpdateOne {
	return (&MaterialTestClient{config: mt.config}).UpdateOne(mt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (mt *MaterialTest) Unwrap() *MaterialTest {
	tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MaterialTest is not a transactional entity")
	}
	mt.config.driver = tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MaterialTest) String() string {
	var builder strings.Builder
	builder.WriteString("MaterialTest(")
	builder.WriteString(fmt.Sprintf("id=%v", mt.ID))
	builder.WriteString(", name=")
	builder.WriteString(mt.Name)
	builder.WriteString(", code=")
	builder.WriteString(mt.Code)
	builder.WriteString(", seqNumber=")
	builder.WriteString(mt.SeqNumber)
	builder.WriteString(", addSeqNumber=")
	builder.WriteString(mt.AddSeqNumber)
	builder.WriteString(", date=")
	builder.WriteString(fmt.Sprintf("%v", mt.Date))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", mt.Type))
	builder.WriteString(", category=")
	builder.WriteString(fmt.Sprintf("%v", mt.Category))
	builder.WriteString(", materialCategory=")
	builder.WriteString(fmt.Sprintf("%v", mt.MaterialCategory))
	builder.WriteString(", userName=")
	builder.WriteString(mt.UserName)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", mt.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(mt.TenantName)
	builder.WriteString(", remarks=")
	builder.WriteString(mt.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", mt.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", mt.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", mt.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// MaterialTests is a parsable slice of MaterialTest.
type MaterialTests []*MaterialTest

func (mt MaterialTests) config(cfg config) {
	for _i := range mt {
		mt[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/materialtest"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MaterialTestCreate is the builder for creating a MaterialTest entity.
type MaterialTestCreate struct {
	config
	mutation *MaterialTestMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mtc *MaterialTestCreate) SetName(s string) *MaterialTestCreate {
	mtc.mutation.SetName(s)
	return mtc
}

// SetCode sets the "code" field.
func (mtc *MaterialTestCreate) SetCode(s string) *MaterialTestCreate {
	mtc.mutation.SetCode(s)
	return mtc
}

// SetSeqNumber sets the "seqNumber" field.
func (mtc *MaterialTestCreate) SetSeqNumber(s string) *MaterialTestCreate {
	mtc.mutation.SetSeqNumber(s)
	return mtc
}

// SetAddSeqNumber sets the "addSeqNumber" field.
func (mtc *MaterialTestCreate) SetAddSeqNumber(s string) *MaterialTestCreate {
	mtc.mutation.SetAddSeqNumber(s)
	return mtc
}

// SetDate sets the "date" field.
func (mtc *MaterialTestCreate) SetDate(i int64) *MaterialTestCreate {
	mtc.mutation.SetDate(i)
	return mtc
}

// SetType sets the "type" field.
func (mtc *MaterialTestCreate) SetType(i int) *MaterialTestCreate {
	mtc.mutation.SetType(i)
	return mtc
}

// SetCategory sets the "category" field.
func (mtc *MaterialTestCreate) SetCategory(i int) *MaterialTestCreate {
	mtc.mutation.SetCategory(i)
	return mtc
}

// SetMaterialCategory sets the "materialCategory" field.
func (mtc *MaterialTestCreate) SetMaterialCategory(i int) *MaterialTestCreate {
	mtc.mutation.SetMaterialCategory(i)
	return mtc
}

// SetUserName sets the "userName" field.
func (mtc *MaterialTestCreate) SetUserName(s string) *MaterialTestCreate {
	mtc.mutation.SetUserName(s)
	return mtc
}

// SetTenantId sets the "tenantId" field.
func (mtc *MaterialTestCreate) SetTenantId(i int64) *MaterialTestCreate {
	mtc.mutation.SetTenantId(i)
	return mtc
}

// SetTenantName sets the "tenantName" field.
func (mtc *MaterialTestCreate) SetTenantName(s string) *MaterialTestCreate {
	mtc.mutation.SetTenantName(s)
	return mtc
}

// SetRemarks sets the "remarks" field.
func (mtc *MaterialTestCreate) SetRemarks(s string) *MaterialTestCreate {
	mtc.mutation.SetRemarks(s)
	return mtc
}

// SetCreatedAt sets the "createdAt" field.
func (mtc *MaterialTestCreate) SetCreatedAt(i int64) *MaterialTestCreate {
	mtc.mutation.SetCreatedAt(i)
	return mtc
}

// SetUpdatedAt sets the "updatedAt" field.
func (mtc *MaterialTestCreate) SetUpdatedAt(i int64) *MaterialTestCreate {
	mtc.mutation.SetUpdatedAt(i)
	return mtc
}

// SetDeleted sets the "deleted" field.
func (mtc *MaterialTestCreate) SetDeleted(i int) *MaterialTestCreate {
	mtc.mutation.SetDeleted(i)
	return mtc
}

// Mutation returns the MaterialTestMutation object of the builder.
func (mtc *MaterialTestCreate) Mutation() *MaterialTestMutation {
	return mtc.mutation
}

// Save creates the MaterialTest in the database.
func (mtc *MaterialTestCreate) Save(ctx context.Context) (*MaterialTest, error) {
	var (
		err  error
		node *MaterialTest
	)
	if len(mtc.hooks) == 0 {
		if err = mtc.check(); err != nil {
			return nil, err
		}
		node, err = mtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MaterialTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtc.check(); err != nil {
				return nil, err
			}
			mtc.mutation = mutation
			if node, err = mtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mtc.hooks) - 1; i >= 0; i-- {
			if mtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mtc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MaterialTest)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MaterialTestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MaterialTestCreate) SaveX(ctx context.Context) *MaterialTest {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtc *MaterialTestCreate) Exec(ctx context.Context) error {
	_, err := mtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtc *MaterialTestCreate) ExecX(ctx context.Context) {
	if err := mtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtc *MaterialTestCreate) check() error {
	if _, ok := mtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MaterialTest.name"`)}
	}
	if _, ok := mtc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "MaterialTest.code"`)}
	}
	if _, ok := mtc.mutation.SeqNumber(); !ok {
		return &ValidationError{Name: "seqNumber", err: errors.New(`ent: missing required field "MaterialTest.seqNumber"`)}
	}
	if _, ok := mtc.mutation.AddSeqNumber(); !ok {
		return &ValidationError{Name: "addSeqNumber", err: errors.New(`ent: missing required field "MaterialTest.addSeqNumber"`)}
	}
	if _, ok := mtc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "MaterialTest.date"`)}
	}
	if _, ok := mtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "MaterialTest.type"`)}
	}
	if _, ok := mtc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "MaterialTest.category"`)}
	}
	if _, ok := mtc.mutation.MaterialCategory(); !ok {
		return &ValidationError{Name: "materialCategory", err: errors.New(`ent: missing required field "MaterialTest.materialCategory"`)}
	}
	if _, ok := mtc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New(`ent: missing required field "MaterialTest.userName"`)}
	}
	if _, ok := mtc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "MaterialTest.tenantId"`)}
	}
	if _, ok := mtc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "MaterialTest.tenantName"`)}
	}
	if _, ok := mtc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "MaterialTest.remarks"`)}
	}
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "MaterialTest.createdAt"`)}
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "MaterialTest.updatedAt"`)}
	}
	if _, ok := mtc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "MaterialTest.deleted"`)}
	}
	return nil
}

func (mtc *MaterialTestCreate) sqlSave(ctx context.Context) (*MaterialTest, error) {
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mtc *MaterialTestCreate) createSpec() (*MaterialTest, *sqlgraph.CreateSpec) {
	var (
		_node = &MaterialTest{config: mtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: materialtest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: materialtest.FieldID,
			},
		}
	)
	if value, ok := mtc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mtc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := mtc.mutation.SeqNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldSeqNumber,
		})
		_node.SeqNumber = value
	}
	if value, ok := mtc.mutation.AddSeqNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldAddSeqNumber,
		})
		_node.AddSeqNumber = value
	}
	if value, ok := mtc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := mtc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldType,
		})
		_node.Type = value
	}
	if value, ok := mtc.mutation.Category(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldCategory,
		})
		_node.Category = value
	}
	if value, ok := mtc.mutation.MaterialCategory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldMaterialCategory,
		})
		_node.MaterialCategory = value
	}
	if value, ok := mtc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := mtc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := mtc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := mtc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := mtc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mtc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mtc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// MaterialTestCreateBulk is the builder for creating many MaterialTest entities in bulk.
type MaterialTestCreateBulk struct {
	config
	builders []*MaterialTestCreate
}

// Save creates the MaterialTest entities in the database.
func (mtcb *MaterialTestCreateBulk) Save(ctx context.Context) ([]*MaterialTest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*MaterialTest, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MaterialTestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mtcb *MaterialTestCreateBulk) SaveX(ctx context.Context) []*MaterialTest {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtcb *MaterialTestCreateBulk) Exec(ctx context.Context) error {
	_, err := mtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtcb *MaterialTestCreateBulk) ExecX(ctx context.Context) {
	if err := mtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

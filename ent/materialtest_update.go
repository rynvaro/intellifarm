// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/materialtest"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MaterialTestUpdate is the builder for updating MaterialTest entities.
type MaterialTestUpdate struct {
	config
	hooks    []Hook
	mutation *MaterialTestMutation
}

// Where appends a list predicates to the MaterialTestUpdate builder.
func (mtu *MaterialTestUpdate) Where(ps ...predicate.MaterialTest) *MaterialTestUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetName sets the "name" field.
func (mtu *MaterialTestUpdate) SetName(s string) *MaterialTestUpdate {
	mtu.mutation.SetName(s)
	return mtu
}

// SetCode sets the "code" field.
func (mtu *MaterialTestUpdate) SetCode(s string) *MaterialTestUpdate {
	mtu.mutation.SetCode(s)
	return mtu
}

// SetSeqNumber sets the "seqNumber" field.
func (mtu *MaterialTestUpdate) SetSeqNumber(s string) *MaterialTestUpdate {
	mtu.mutation.SetSeqNumber(s)
	return mtu
}

// SetAddSeqNumber sets the "addSeqNumber" field.
func (mtu *MaterialTestUpdate) SetAddSeqNumber(s string) *MaterialTestUpdate {
	mtu.mutation.SetAddSeqNumber(s)
	return mtu
}

// SetDate sets the "date" field.
func (mtu *MaterialTestUpdate) SetDate(i int64) *MaterialTestUpdate {
	mtu.mutation.ResetDate()
	mtu.mutation.SetDate(i)
	return mtu
}

// AddDate adds i to the "date" field.
func (mtu *MaterialTestUpdate) AddDate(i int64) *MaterialTestUpdate {
	mtu.mutation.AddDate(i)
	return mtu
}

// SetType sets the "type" field.
func (mtu *MaterialTestUpdate) SetType(i int) *MaterialTestUpdate {
	mtu.mutation.ResetType()
	mtu.mutation.SetType(i)
	return mtu
}

// AddType adds i to the "type" field.
func (mtu *MaterialTestUpdate) AddType(i int) *MaterialTestUpdate {
	mtu.mutation.AddType(i)
	return mtu
}

// SetCategory sets the "category" field.
func (mtu *MaterialTestUpdate) SetCategory(i int) *MaterialTestUpdate {
	mtu.mutation.ResetCategory()
	mtu.mutation.SetCategory(i)
	return mtu
}

// AddCategory adds i to the "category" field.
func (mtu *MaterialTestUpdate) AddCategory(i int) *MaterialTestUpdate {
	mtu.mutation.AddCategory(i)
	return mtu
}

// SetMaterialCategory sets the "materialCategory" field.
func (mtu *MaterialTestUpdate) SetMaterialCategory(i int) *MaterialTestUpdate {
	mtu.mutation.ResetMaterialCategory()
	mtu.mutation.SetMaterialCategory(i)
	return mtu
}

// AddMaterialCategory adds i to the "materialCategory" field.
func (mtu *MaterialTestUpdate) AddMaterialCategory(i int) *MaterialTestUpdate {
	mtu.mutation.AddMaterialCategory(i)
	return mtu
}

// SetUserName sets the "userName" field.
func (mtu *MaterialTestUpdate) SetUserName(s string) *MaterialTestUpdate {
	mtu.mutation.SetUserName(s)
	return mtu
}

// SetTenantId sets the "tenantId" field.
func (mtu *MaterialTestUpdate) SetTenantId(i int64) *MaterialTestUpdate {
	mtu.mutation.ResetTenantId()
	mtu.mutation.SetTenantId(i)
	return mtu
}

// AddTenantId adds i to the "tenantId" field.
func (mtu *MaterialTestUpdate) AddTenantId(i int64) *MaterialTestUpdate {
	mtu.mutation.AddTenantId(i)
	return mtu
}

// SetTenantName sets the "tenantName" field.
func (mtu *MaterialTestUpdate) SetTenantName(s string) *MaterialTestUpdate {
	mtu.mutation.SetTenantName(s)
	return mtu
}

// SetRemarks sets the "remarks" field.
func (mtu *MaterialTestUpdate) SetRemarks(s string) *MaterialTestUpdate {
	mtu.mutation.SetRemarks(s)
	return mtu
}

// SetCreatedAt sets the "createdAt" field.
func (mtu *MaterialTestUpdate) SetCreatedAt(i int64) *MaterialTestUpdate {
	mtu.mutation.ResetCreatedAt()
	mtu.mutation.SetCreatedAt(i)
	return mtu
}

// AddCreatedAt adds i to the "createdAt" field.
func (mtu *MaterialTestUpdate) AddCreatedAt(i int64) *MaterialTestUpdate {
	mtu.mutation.AddCreatedAt(i)
	return mtu
}

// SetUpdatedAt sets the "updatedAt" field.
func (mtu *MaterialTestUpdate) SetUpdatedAt(i int64) *MaterialTestUpdate {
	mtu.mutation.ResetUpdatedAt()
	mtu.mutation.SetUpdatedAt(i)
	return mtu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (mtu *MaterialTestUpdate) AddUpdatedAt(i int64) *MaterialTestUpdate {
	mtu.mutation.AddUpdatedAt(i)
	return mtu
}

// SetDeleted sets the "deleted" field.
func (mtu *MaterialTestUpdate) SetDeleted(i int) *MaterialTestUpdate {
	mtu.mutation.ResetDeleted()
	mtu.mutation.SetDeleted(i)
	return mtu
}

// AddDeleted adds i to the "deleted" field.
func (mtu *MaterialTestUpdate) AddDeleted(i int) *MaterialTestUpdate {
	mtu.mutation.AddDeleted(i)
	return mtu
}

// Mutation returns the MaterialTestMutation object of the builder.
func (mtu *MaterialTestUpdate) Mutation() *MaterialTestMutation {
	return mtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MaterialTestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mtu.hooks) == 0 {
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MaterialTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			if mtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MaterialTestUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MaterialTestUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MaterialTestUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtu *MaterialTestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   materialtest.Table,
			Columns: materialtest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: materialtest.FieldID,
			},
		},
	}
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldName,
		})
	}
	if value, ok := mtu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldCode,
		})
	}
	if value, ok := mtu.mutation.SeqNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldSeqNumber,
		})
	}
	if value, ok := mtu.mutation.AddSeqNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldAddSeqNumber,
		})
	}
	if value, ok := mtu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldDate,
		})
	}
	if value, ok := mtu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldDate,
		})
	}
	if value, ok := mtu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldType,
		})
	}
	if value, ok := mtu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldType,
		})
	}
	if value, ok := mtu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldCategory,
		})
	}
	if value, ok := mtu.mutation.AddedCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldCategory,
		})
	}
	if value, ok := mtu.mutation.MaterialCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldMaterialCategory,
		})
	}
	if value, ok := mtu.mutation.AddedMaterialCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldMaterialCategory,
		})
	}
	if value, ok := mtu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldUserName,
		})
	}
	if value, ok := mtu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldTenantId,
		})
	}
	if value, ok := mtu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldTenantId,
		})
	}
	if value, ok := mtu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldTenantName,
		})
	}
	if value, ok := mtu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldRemarks,
		})
	}
	if value, ok := mtu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldCreatedAt,
		})
	}
	if value, ok := mtu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldCreatedAt,
		})
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldUpdatedAt,
		})
	}
	if value, ok := mtu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldUpdatedAt,
		})
	}
	if value, ok := mtu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldDeleted,
		})
	}
	if value, ok := mtu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{materialtest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MaterialTestUpdateOne is the builder for updating a single MaterialTest entity.
type MaterialTestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MaterialTestMutation
}

// SetName sets the "name" field.
func (mtuo *MaterialTestUpdateOne) SetName(s string) *MaterialTestUpdateOne {
	mtuo.mutation.SetName(s)
	return mtuo
}

// SetCode sets the "code" field.
func (mtuo *MaterialTestUpdateOne) SetCode(s string) *MaterialTestUpdateOne {
	mtuo.mutation.SetCode(s)
	return mtuo
}

// SetSeqNumber sets the "seqNumber" field.
func (mtuo *MaterialTestUpdateOne) SetSeqNumber(s string) *MaterialTestUpdateOne {
	mtuo.mutation.SetSeqNumber(s)
	return mtuo
}

// SetAddSeqNumber sets the "addSeqNumber" field.
func (mtuo *MaterialTestUpdateOne) SetAddSeqNumber(s string) *MaterialTestUpdateOne {
	mtuo.mutation.SetAddSeqNumber(s)
	return mtuo
}

// SetDate sets the "date" field.
func (mtuo *MaterialTestUpdateOne) SetDate(i int64) *MaterialTestUpdateOne {
	mtuo.mutation.ResetDate()
	mtuo.mutation.SetDate(i)
	return mtuo
}

// AddDate adds i to the "date" field.
func (mtuo *MaterialTestUpdateOne) AddDate(i int64) *MaterialTestUpdateOne {
	mtuo.mutation.AddDate(i)
	return mtuo
}

// SetType sets the "type" field.
func (mtuo *MaterialTestUpdateOne) SetType(i int) *MaterialTestUpdateOne {
	mtuo.mutation.ResetType()
	mtuo.mutation.SetType(i)
	return mtuo
}

// AddType adds i to the "type" field.
func (mtuo *MaterialTestUpdateOne) AddType(i int) *MaterialTestUpdateOne {
	mtuo.mutation.AddType(i)
	return mtuo
}

// SetCategory sets the "category" field.
func (mtuo *MaterialTestUpdateOne) SetCategory(i int) *MaterialTestUpdateOne {
	mtuo.mutation.ResetCategory()
	mtuo.mutation.SetCategory(i)
	return mtuo
}

// AddCategory adds i to the "category" field.
func (mtuo *MaterialTestUpdateOne) AddCategory(i int) *MaterialTestUpdateOne {
	mtuo.mutation.AddCategory(i)
	return mtuo
}

// SetMaterialCategory sets the "materialCategory" field.
func (mtuo *MaterialTestUpdateOne) SetMaterialCategory(i int) *MaterialTestUpdateOne {
	mtuo.mutation.ResetMaterialCategory()
	mtuo.mutation.SetMaterialCategory(i)
	return mtuo
}

// AddMaterialCategory adds i to the "materialCategory" field.
func (mtuo *MaterialTestUpdateOne) AddMaterialCategory(i int) *MaterialTestUpdateOne {
	mtuo.mutation.AddMaterialCategory(i)
	return mtuo
}

// SetUserName sets the "userName" field.
func (mtuo *MaterialTestUpdateOne) SetUserName(s string) *MaterialTestUpdateOne {
	mtuo.mutation.SetUserName(s)
	return mtuo
}

// SetTenantId sets the "tenantId" field.
func (mtuo *MaterialTestUpdateOne) SetTenantId(i int64) *MaterialTestUpdateOne {
	mtuo.mutation.ResetTenantId()
	mtuo.mutation.SetTenantId(i)
	return mtuo
}

// AddTenantId adds i to the "tenantId" field.
func (mtuo *MaterialTestUpdateOne) AddTenantId(i int64) *MaterialTestUpdateOne {
	mtuo.mutation.AddTenantId(i)
	return mtuo
}

// SetTenantName sets the "tenantName" field.
func (mtuo *MaterialTestUpdateOne) SetTenantName(s string) *MaterialTestUpdateOne {
	mtuo.mutation.SetTenantName(s)
	return mtuo
}

// SetRemarks sets the "remarks" field.
func (mtuo *MaterialTestUpdateOne) SetRemarks(s string) *MaterialTestUpdateOne {
	mtuo.mutation.SetRemarks(s)
	return mtuo
}

// SetCreatedAt sets the "createdAt" field.
func (mtuo *MaterialTestUpdateOne) SetCreatedAt(i int64) *MaterialTestUpdateOne {
	mtuo.mutation.ResetCreatedAt()
	mtuo.mutation.SetCreatedAt(i)
	return mtuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (mtuo *MaterialTestUpdateOne) AddCreatedAt(i int64) *MaterialTestUpdateOne {
	mtuo.mutation.AddCreatedAt(i)
	return mtuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (mtuo *MaterialTestUpdateOne) SetUpdatedAt(i int64) *MaterialTestUpdateOne {
	mtuo.mutation.ResetUpdatedAt()
	mtuo.mutation.SetUpdatedAt(i)
	return mtuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (mtuo *MaterialTestUpdateOne) AddUpdatedAt(i int64) *MaterialTestUpdateOne {
	mtuo.mutation.AddUpdatedAt(i)
	return mtuo
}

// SetDeleted sets the "deleted" field.
func (mtuo *MaterialTestUpdateOne) SetDeleted(i int) *MaterialTestUpdateOne {
	mtuo.mutation.ResetDeleted()
	mtuo.mutation.SetDeleted(i)
	return mtuo
}

// AddDeleted adds i to the "deleted" field.
func (mtuo *MaterialTestUpdateOne) AddDeleted(i int) *MaterialTestUpdateOne {
	mtuo.mutation.AddDeleted(i)
	return mtuo
}

// Mutation returns the MaterialTestMutation object of the builder.
func (mtuo *MaterialTestUpdateOne) Mutation() *MaterialTestMutation {
	return mtuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MaterialTestUpdateOne) Select(field string, fields ...string) *MaterialTestUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MaterialTest entity.
func (mtuo *MaterialTestUpdateOne) Save(ctx context.Context) (*MaterialTest, error) {
	var (
		err  error
		node *MaterialTest
	)
	if len(mtuo.hooks) == 0 {
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MaterialTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			if mtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mtuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MaterialTest)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MaterialTestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MaterialTestUpdateOne) SaveX(ctx context.Context) *MaterialTest {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MaterialTestUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MaterialTestUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtuo *MaterialTestUpdateOne) sqlSave(ctx context.Context) (_node *MaterialTest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   materialtest.Table,
			Columns: materialtest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: materialtest.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MaterialTest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, materialtest.FieldID)
		for _, f := range fields {
			if !materialtest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != materialtest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldName,
		})
	}
	if value, ok := mtuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldCode,
		})
	}
	if value, ok := mtuo.mutation.SeqNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldSeqNumber,
		})
	}
	if value, ok := mtuo.mutation.AddSeqNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldAddSeqNumber,
		})
	}
	if value, ok := mtuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldDate,
		})
	}
	if value, ok := mtuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldDate,
		})
	}
	if value, ok := mtuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldType,
		})
	}
	if value, ok := mtuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldType,
		})
	}
	if value, ok := mtuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldCategory,
		})
	}
	if value, ok := mtuo.mutation.AddedCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldCategory,
		})
	}
	if value, ok := mtuo.mutation.MaterialCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldMaterialCategory,
		})
	}
	if value, ok := mtuo.mutation.AddedMaterialCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldMaterialCategory,
		})
	}
	if value, ok := mtuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldUserName,
		})
	}
	if value, ok := mtuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldTenantId,
		})
	}
	if value, ok := mtuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldTenantId,
		})
	}
	if value, ok := mtuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldTenantName,
		})
	}
	if value, ok := mtuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: materialtest.FieldRemarks,
		})
	}
	if value, ok := mtuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldCreatedAt,
		})
	}
	if value, ok := mtuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldCreatedAt,
		})
	}
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldUpdatedAt,
		})
	}
	if value, ok := mtuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: materialtest.FieldUpdatedAt,
		})
	}
	if value, ok := mtuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldDeleted,
		})
	}
	if value, ok := mtuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: materialtest.FieldDeleted,
		})
	}
	_node = &MaterialTest{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{materialtest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

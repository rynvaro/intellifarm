// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/medicine"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Medicine is the model entity for the Medicine schema.
type Medicine struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Epid holds the value of the "epid" field.
	Epid int64 `json:"epid,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// MedicineName holds the value of the "medicineName" field.
	MedicineName string `json:"medicineName,omitempty"`
	// Dose holds the value of the "dose" field.
	Dose int64 `json:"dose,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// DateStart holds the value of the "dateStart" field.
	DateStart int64 `json:"dateStart,omitempty"`
	// DateEnd holds the value of the "dateEnd" field.
	DateEnd int64 `json:"dateEnd,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Medicine) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // epid
		&sql.NullString{}, // earNumber
		&sql.NullString{}, // medicineName
		&sql.NullInt64{},  // dose
		&sql.NullString{}, // unit
		&sql.NullInt64{},  // dateStart
		&sql.NullInt64{},  // dateEnd
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Medicine fields.
func (m *Medicine) assignValues(values ...interface{}) error {
	if m, n := len(values), len(medicine.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field epid", values[0])
	} else if value.Valid {
		m.Epid = value.Int64
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[1])
	} else if value.Valid {
		m.EarNumber = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field medicineName", values[2])
	} else if value.Valid {
		m.MedicineName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field dose", values[3])
	} else if value.Valid {
		m.Dose = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field unit", values[4])
	} else if value.Valid {
		m.Unit = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field dateStart", values[5])
	} else if value.Valid {
		m.DateStart = value.Int64
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field dateEnd", values[6])
	} else if value.Valid {
		m.DateEnd = value.Int64
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[7])
	} else if value.Valid {
		m.CreatedAt = value.Int64
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[8])
	} else if value.Valid {
		m.UpdatedAt = value.Int64
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[9])
	} else if value.Valid {
		m.Deleted = int(value.Int64)
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[10])
	} else if value.Valid {
		m.Remarks = value.String
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[11])
	} else if value.Valid {
		m.TenantId = value.Int64
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[12])
	} else if value.Valid {
		m.TenantName = value.String
	}
	return nil
}

// Update returns a builder for updating this Medicine.
// Note that, you need to call Medicine.Unwrap() before calling this method, if this Medicine
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Medicine) Update() *MedicineUpdateOne {
	return (&MedicineClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Medicine) Unwrap() *Medicine {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Medicine is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Medicine) String() string {
	var builder strings.Builder
	builder.WriteString("Medicine(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", epid=")
	builder.WriteString(fmt.Sprintf("%v", m.Epid))
	builder.WriteString(", earNumber=")
	builder.WriteString(m.EarNumber)
	builder.WriteString(", medicineName=")
	builder.WriteString(m.MedicineName)
	builder.WriteString(", dose=")
	builder.WriteString(fmt.Sprintf("%v", m.Dose))
	builder.WriteString(", unit=")
	builder.WriteString(m.Unit)
	builder.WriteString(", dateStart=")
	builder.WriteString(fmt.Sprintf("%v", m.DateStart))
	builder.WriteString(", dateEnd=")
	builder.WriteString(fmt.Sprintf("%v", m.DateEnd))
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", m.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", m.Deleted))
	builder.WriteString(", remarks=")
	builder.WriteString(m.Remarks)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", m.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(m.TenantName)
	builder.WriteByte(')')
	return builder.String()
}

// Medicines is a parsable slice of Medicine.
type Medicines []*Medicine

func (m Medicines) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}

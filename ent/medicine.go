// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/medicine"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Medicine is the model entity for the Medicine schema.
type Medicine struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// 发病ID
	Epid int64 `json:"epid,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// MedicineName holds the value of the "medicineName" field.
	MedicineName string `json:"medicineName,omitempty"`
	// 剂量
	Dose int64 `json:"dose,omitempty"`
	// 剂量单位
	Unit string `json:"unit,omitempty"`
	// 用药开始时间
	DateStart int64 `json:"dateStart,omitempty"`
	// 休药时间
	DateEnd int64 `json:"dateEnd,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Medicine) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case medicine.FieldID, medicine.FieldCattleId, medicine.FieldTenantId, medicine.FieldFarmId, medicine.FieldShedId, medicine.FieldEpid, medicine.FieldDose, medicine.FieldDateStart, medicine.FieldDateEnd, medicine.FieldCreatedAt, medicine.FieldUpdatedAt, medicine.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case medicine.FieldTenantName, medicine.FieldFarmName, medicine.FieldShedName, medicine.FieldEarNumber, medicine.FieldMedicineName, medicine.FieldUnit, medicine.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Medicine", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Medicine fields.
func (m *Medicine) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medicine.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case medicine.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				m.CattleId = value.Int64
			}
		case medicine.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				m.TenantId = value.Int64
			}
		case medicine.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				m.TenantName = value.String
			}
		case medicine.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				m.FarmId = value.Int64
			}
		case medicine.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				m.FarmName = value.String
			}
		case medicine.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				m.ShedId = value.Int64
			}
		case medicine.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				m.ShedName = value.String
			}
		case medicine.FieldEpid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field epid", values[i])
			} else if value.Valid {
				m.Epid = value.Int64
			}
		case medicine.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				m.EarNumber = value.String
			}
		case medicine.FieldMedicineName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field medicineName", values[i])
			} else if value.Valid {
				m.MedicineName = value.String
			}
		case medicine.FieldDose:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dose", values[i])
			} else if value.Valid {
				m.Dose = value.Int64
			}
		case medicine.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				m.Unit = value.String
			}
		case medicine.FieldDateStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dateStart", values[i])
			} else if value.Valid {
				m.DateStart = value.Int64
			}
		case medicine.FieldDateEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dateEnd", values[i])
			} else if value.Valid {
				m.DateEnd = value.Int64
			}
		case medicine.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Int64
			}
		case medicine.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Int64
			}
		case medicine.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				m.Deleted = int(value.Int64)
			}
		case medicine.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				m.Remarks = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Medicine.
// Note that you need to call Medicine.Unwrap() before calling this method if this Medicine
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Medicine) Update() *MedicineUpdateOne {
	return (&MedicineClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Medicine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Medicine) Unwrap() *Medicine {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Medicine is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Medicine) String() string {
	var builder strings.Builder
	builder.WriteString("Medicine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", m.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", m.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(m.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", m.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(m.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", m.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(m.ShedName)
	builder.WriteString(", ")
	builder.WriteString("epid=")
	builder.WriteString(fmt.Sprintf("%v", m.Epid))
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(m.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("medicineName=")
	builder.WriteString(m.MedicineName)
	builder.WriteString(", ")
	builder.WriteString("dose=")
	builder.WriteString(fmt.Sprintf("%v", m.Dose))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(m.Unit)
	builder.WriteString(", ")
	builder.WriteString("dateStart=")
	builder.WriteString(fmt.Sprintf("%v", m.DateStart))
	builder.WriteString(", ")
	builder.WriteString("dateEnd=")
	builder.WriteString(fmt.Sprintf("%v", m.DateEnd))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", m.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", m.Deleted))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(m.Remarks)
	builder.WriteByte(')')
	return builder.String()
}

// Medicines is a parsable slice of Medicine.
type Medicines []*Medicine

func (m Medicines) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}

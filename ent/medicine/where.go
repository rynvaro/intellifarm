// Code generated by entc, DO NOT EDIT.

package medicine

import (
	"cattleai/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Epid applies equality check predicate on the "epid" field. It's identical to EpidEQ.
func Epid(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpid), v))
	})
}

// EarNumber applies equality check predicate on the "earNumber" field. It's identical to EarNumberEQ.
func EarNumber(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// MedicineName applies equality check predicate on the "medicineName" field. It's identical to MedicineNameEQ.
func MedicineName(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicineName), v))
	})
}

// Dose applies equality check predicate on the "dose" field. It's identical to DoseEQ.
func Dose(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDose), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// DateStart applies equality check predicate on the "dateStart" field. It's identical to DateStartEQ.
func DateStart(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateStart), v))
	})
}

// DateEnd applies equality check predicate on the "dateEnd" field. It's identical to DateEndEQ.
func DateEnd(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateEnd), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// EpidEQ applies the EQ predicate on the "epid" field.
func EpidEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpid), v))
	})
}

// EpidNEQ applies the NEQ predicate on the "epid" field.
func EpidNEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEpid), v))
	})
}

// EpidIn applies the In predicate on the "epid" field.
func EpidIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEpid), v...))
	})
}

// EpidNotIn applies the NotIn predicate on the "epid" field.
func EpidNotIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEpid), v...))
	})
}

// EpidGT applies the GT predicate on the "epid" field.
func EpidGT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEpid), v))
	})
}

// EpidGTE applies the GTE predicate on the "epid" field.
func EpidGTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEpid), v))
	})
}

// EpidLT applies the LT predicate on the "epid" field.
func EpidLT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEpid), v))
	})
}

// EpidLTE applies the LTE predicate on the "epid" field.
func EpidLTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEpid), v))
	})
}

// EarNumberEQ applies the EQ predicate on the "earNumber" field.
func EarNumberEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberNEQ applies the NEQ predicate on the "earNumber" field.
func EarNumberNEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEarNumber), v))
	})
}

// EarNumberIn applies the In predicate on the "earNumber" field.
func EarNumberIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEarNumber), v...))
	})
}

// EarNumberNotIn applies the NotIn predicate on the "earNumber" field.
func EarNumberNotIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEarNumber), v...))
	})
}

// EarNumberGT applies the GT predicate on the "earNumber" field.
func EarNumberGT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEarNumber), v))
	})
}

// EarNumberGTE applies the GTE predicate on the "earNumber" field.
func EarNumberGTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberLT applies the LT predicate on the "earNumber" field.
func EarNumberLT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEarNumber), v))
	})
}

// EarNumberLTE applies the LTE predicate on the "earNumber" field.
func EarNumberLTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEarNumber), v))
	})
}

// EarNumberContains applies the Contains predicate on the "earNumber" field.
func EarNumberContains(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasPrefix applies the HasPrefix predicate on the "earNumber" field.
func EarNumberHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEarNumber), v))
	})
}

// EarNumberHasSuffix applies the HasSuffix predicate on the "earNumber" field.
func EarNumberHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEarNumber), v))
	})
}

// EarNumberEqualFold applies the EqualFold predicate on the "earNumber" field.
func EarNumberEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEarNumber), v))
	})
}

// EarNumberContainsFold applies the ContainsFold predicate on the "earNumber" field.
func EarNumberContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEarNumber), v))
	})
}

// MedicineNameEQ applies the EQ predicate on the "medicineName" field.
func MedicineNameEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicineName), v))
	})
}

// MedicineNameNEQ applies the NEQ predicate on the "medicineName" field.
func MedicineNameNEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicineName), v))
	})
}

// MedicineNameIn applies the In predicate on the "medicineName" field.
func MedicineNameIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicineName), v...))
	})
}

// MedicineNameNotIn applies the NotIn predicate on the "medicineName" field.
func MedicineNameNotIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicineName), v...))
	})
}

// MedicineNameGT applies the GT predicate on the "medicineName" field.
func MedicineNameGT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicineName), v))
	})
}

// MedicineNameGTE applies the GTE predicate on the "medicineName" field.
func MedicineNameGTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicineName), v))
	})
}

// MedicineNameLT applies the LT predicate on the "medicineName" field.
func MedicineNameLT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicineName), v))
	})
}

// MedicineNameLTE applies the LTE predicate on the "medicineName" field.
func MedicineNameLTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicineName), v))
	})
}

// MedicineNameContains applies the Contains predicate on the "medicineName" field.
func MedicineNameContains(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMedicineName), v))
	})
}

// MedicineNameHasPrefix applies the HasPrefix predicate on the "medicineName" field.
func MedicineNameHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMedicineName), v))
	})
}

// MedicineNameHasSuffix applies the HasSuffix predicate on the "medicineName" field.
func MedicineNameHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMedicineName), v))
	})
}

// MedicineNameEqualFold applies the EqualFold predicate on the "medicineName" field.
func MedicineNameEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMedicineName), v))
	})
}

// MedicineNameContainsFold applies the ContainsFold predicate on the "medicineName" field.
func MedicineNameContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMedicineName), v))
	})
}

// DoseEQ applies the EQ predicate on the "dose" field.
func DoseEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDose), v))
	})
}

// DoseNEQ applies the NEQ predicate on the "dose" field.
func DoseNEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDose), v))
	})
}

// DoseIn applies the In predicate on the "dose" field.
func DoseIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDose), v...))
	})
}

// DoseNotIn applies the NotIn predicate on the "dose" field.
func DoseNotIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDose), v...))
	})
}

// DoseGT applies the GT predicate on the "dose" field.
func DoseGT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDose), v))
	})
}

// DoseGTE applies the GTE predicate on the "dose" field.
func DoseGTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDose), v))
	})
}

// DoseLT applies the LT predicate on the "dose" field.
func DoseLT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDose), v))
	})
}

// DoseLTE applies the LTE predicate on the "dose" field.
func DoseLTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDose), v))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnit), v))
	})
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnit), v))
	})
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnit), v))
	})
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnit), v))
	})
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnit), v))
	})
}

// DateStartEQ applies the EQ predicate on the "dateStart" field.
func DateStartEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateStart), v))
	})
}

// DateStartNEQ applies the NEQ predicate on the "dateStart" field.
func DateStartNEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateStart), v))
	})
}

// DateStartIn applies the In predicate on the "dateStart" field.
func DateStartIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateStart), v...))
	})
}

// DateStartNotIn applies the NotIn predicate on the "dateStart" field.
func DateStartNotIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateStart), v...))
	})
}

// DateStartGT applies the GT predicate on the "dateStart" field.
func DateStartGT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateStart), v))
	})
}

// DateStartGTE applies the GTE predicate on the "dateStart" field.
func DateStartGTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateStart), v))
	})
}

// DateStartLT applies the LT predicate on the "dateStart" field.
func DateStartLT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateStart), v))
	})
}

// DateStartLTE applies the LTE predicate on the "dateStart" field.
func DateStartLTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateStart), v))
	})
}

// DateEndEQ applies the EQ predicate on the "dateEnd" field.
func DateEndEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateEnd), v))
	})
}

// DateEndNEQ applies the NEQ predicate on the "dateEnd" field.
func DateEndNEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateEnd), v))
	})
}

// DateEndIn applies the In predicate on the "dateEnd" field.
func DateEndIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateEnd), v...))
	})
}

// DateEndNotIn applies the NotIn predicate on the "dateEnd" field.
func DateEndNotIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateEnd), v...))
	})
}

// DateEndGT applies the GT predicate on the "dateEnd" field.
func DateEndGT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateEnd), v))
	})
}

// DateEndGTE applies the GTE predicate on the "dateEnd" field.
func DateEndGTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateEnd), v))
	})
}

// DateEndLT applies the LT predicate on the "dateEnd" field.
func DateEndLT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateEnd), v))
	})
}

// DateEndLTE applies the LTE predicate on the "dateEnd" field.
func DateEndLTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateEnd), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.Medicine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Medicine) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Medicine) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Medicine) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		p(s.Not())
	})
}

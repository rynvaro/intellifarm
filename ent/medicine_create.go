// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/medicine"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// MedicineCreate is the builder for creating a Medicine entity.
type MedicineCreate struct {
	config
	mutation *MedicineMutation
	hooks    []Hook
}

// SetEpid sets the epid field.
func (mc *MedicineCreate) SetEpid(i int64) *MedicineCreate {
	mc.mutation.SetEpid(i)
	return mc
}

// SetEarNumber sets the earNumber field.
func (mc *MedicineCreate) SetEarNumber(s string) *MedicineCreate {
	mc.mutation.SetEarNumber(s)
	return mc
}

// SetMedicineName sets the medicineName field.
func (mc *MedicineCreate) SetMedicineName(s string) *MedicineCreate {
	mc.mutation.SetMedicineName(s)
	return mc
}

// SetDose sets the dose field.
func (mc *MedicineCreate) SetDose(i int64) *MedicineCreate {
	mc.mutation.SetDose(i)
	return mc
}

// SetUnit sets the unit field.
func (mc *MedicineCreate) SetUnit(s string) *MedicineCreate {
	mc.mutation.SetUnit(s)
	return mc
}

// SetDateStart sets the dateStart field.
func (mc *MedicineCreate) SetDateStart(i int64) *MedicineCreate {
	mc.mutation.SetDateStart(i)
	return mc
}

// SetDateEnd sets the dateEnd field.
func (mc *MedicineCreate) SetDateEnd(i int64) *MedicineCreate {
	mc.mutation.SetDateEnd(i)
	return mc
}

// SetCreatedAt sets the createdAt field.
func (mc *MedicineCreate) SetCreatedAt(i int64) *MedicineCreate {
	mc.mutation.SetCreatedAt(i)
	return mc
}

// SetUpdatedAt sets the updatedAt field.
func (mc *MedicineCreate) SetUpdatedAt(i int64) *MedicineCreate {
	mc.mutation.SetUpdatedAt(i)
	return mc
}

// SetDeleted sets the deleted field.
func (mc *MedicineCreate) SetDeleted(i int) *MedicineCreate {
	mc.mutation.SetDeleted(i)
	return mc
}

// SetRemarks sets the remarks field.
func (mc *MedicineCreate) SetRemarks(s string) *MedicineCreate {
	mc.mutation.SetRemarks(s)
	return mc
}

// SetTenantId sets the tenantId field.
func (mc *MedicineCreate) SetTenantId(i int64) *MedicineCreate {
	mc.mutation.SetTenantId(i)
	return mc
}

// SetTenantName sets the tenantName field.
func (mc *MedicineCreate) SetTenantName(s string) *MedicineCreate {
	mc.mutation.SetTenantName(s)
	return mc
}

// Mutation returns the MedicineMutation object of the builder.
func (mc *MedicineCreate) Mutation() *MedicineMutation {
	return mc.mutation
}

// Save creates the Medicine in the database.
func (mc *MedicineCreate) Save(ctx context.Context) (*Medicine, error) {
	var (
		err  error
		node *Medicine
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MedicineCreate) SaveX(ctx context.Context) *Medicine {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (mc *MedicineCreate) check() error {
	if _, ok := mc.mutation.Epid(); !ok {
		return &ValidationError{Name: "epid", err: errors.New("ent: missing required field \"epid\"")}
	}
	if _, ok := mc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New("ent: missing required field \"earNumber\"")}
	}
	if _, ok := mc.mutation.MedicineName(); !ok {
		return &ValidationError{Name: "medicineName", err: errors.New("ent: missing required field \"medicineName\"")}
	}
	if _, ok := mc.mutation.Dose(); !ok {
		return &ValidationError{Name: "dose", err: errors.New("ent: missing required field \"dose\"")}
	}
	if _, ok := mc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New("ent: missing required field \"unit\"")}
	}
	if _, ok := mc.mutation.DateStart(); !ok {
		return &ValidationError{Name: "dateStart", err: errors.New("ent: missing required field \"dateStart\"")}
	}
	if _, ok := mc.mutation.DateEnd(); !ok {
		return &ValidationError{Name: "dateEnd", err: errors.New("ent: missing required field \"dateEnd\"")}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := mc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	if _, ok := mc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := mc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := mc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	return nil
}

func (mc *MedicineCreate) sqlSave(ctx context.Context) (*Medicine, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (mc *MedicineCreate) createSpec() (*Medicine, *sqlgraph.CreateSpec) {
	var (
		_node = &Medicine{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: medicine.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: medicine.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Epid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldEpid,
		})
		_node.Epid = value
	}
	if value, ok := mc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := mc.mutation.MedicineName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldMedicineName,
		})
		_node.MedicineName = value
	}
	if value, ok := mc.mutation.Dose(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDose,
		})
		_node.Dose = value
	}
	if value, ok := mc.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := mc.mutation.DateStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateStart,
		})
		_node.DateStart = value
	}
	if value, ok := mc.mutation.DateEnd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateEnd,
		})
		_node.DateEnd = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: medicine.FieldDeleted,
		})
		_node.Deleted = value
	}
	if value, ok := mc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := mc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := mc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldTenantName,
		})
		_node.TenantName = value
	}
	return _node, _spec
}

// MedicineCreateBulk is the builder for creating a bulk of Medicine entities.
type MedicineCreateBulk struct {
	config
	builders []*MedicineCreate
}

// Save creates the Medicine entities in the database.
func (mcb *MedicineCreateBulk) Save(ctx context.Context) ([]*Medicine, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Medicine, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedicineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mcb *MedicineCreateBulk) SaveX(ctx context.Context) []*Medicine {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

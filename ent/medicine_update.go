// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/medicine"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// MedicineUpdate is the builder for updating Medicine entities.
type MedicineUpdate struct {
	config
	hooks      []Hook
	mutation   *MedicineMutation
	predicates []predicate.Medicine
}

// Where adds a new predicate for the builder.
func (mu *MedicineUpdate) Where(ps ...predicate.Medicine) *MedicineUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetCattleId sets the cattleId field.
func (mu *MedicineUpdate) SetCattleId(i int64) *MedicineUpdate {
	mu.mutation.ResetCattleId()
	mu.mutation.SetCattleId(i)
	return mu
}

// AddCattleId adds i to cattleId.
func (mu *MedicineUpdate) AddCattleId(i int64) *MedicineUpdate {
	mu.mutation.AddCattleId(i)
	return mu
}

// SetTenantId sets the tenantId field.
func (mu *MedicineUpdate) SetTenantId(i int64) *MedicineUpdate {
	mu.mutation.ResetTenantId()
	mu.mutation.SetTenantId(i)
	return mu
}

// AddTenantId adds i to tenantId.
func (mu *MedicineUpdate) AddTenantId(i int64) *MedicineUpdate {
	mu.mutation.AddTenantId(i)
	return mu
}

// SetTenantName sets the tenantName field.
func (mu *MedicineUpdate) SetTenantName(s string) *MedicineUpdate {
	mu.mutation.SetTenantName(s)
	return mu
}

// SetFarmId sets the farmId field.
func (mu *MedicineUpdate) SetFarmId(i int64) *MedicineUpdate {
	mu.mutation.ResetFarmId()
	mu.mutation.SetFarmId(i)
	return mu
}

// AddFarmId adds i to farmId.
func (mu *MedicineUpdate) AddFarmId(i int64) *MedicineUpdate {
	mu.mutation.AddFarmId(i)
	return mu
}

// SetFarmName sets the farmName field.
func (mu *MedicineUpdate) SetFarmName(s string) *MedicineUpdate {
	mu.mutation.SetFarmName(s)
	return mu
}

// SetShedId sets the shedId field.
func (mu *MedicineUpdate) SetShedId(i int64) *MedicineUpdate {
	mu.mutation.ResetShedId()
	mu.mutation.SetShedId(i)
	return mu
}

// AddShedId adds i to shedId.
func (mu *MedicineUpdate) AddShedId(i int64) *MedicineUpdate {
	mu.mutation.AddShedId(i)
	return mu
}

// SetShedName sets the shedName field.
func (mu *MedicineUpdate) SetShedName(s string) *MedicineUpdate {
	mu.mutation.SetShedName(s)
	return mu
}

// SetEpid sets the epid field.
func (mu *MedicineUpdate) SetEpid(i int64) *MedicineUpdate {
	mu.mutation.ResetEpid()
	mu.mutation.SetEpid(i)
	return mu
}

// AddEpid adds i to epid.
func (mu *MedicineUpdate) AddEpid(i int64) *MedicineUpdate {
	mu.mutation.AddEpid(i)
	return mu
}

// SetEarNumber sets the earNumber field.
func (mu *MedicineUpdate) SetEarNumber(s string) *MedicineUpdate {
	mu.mutation.SetEarNumber(s)
	return mu
}

// SetMedicineName sets the medicineName field.
func (mu *MedicineUpdate) SetMedicineName(s string) *MedicineUpdate {
	mu.mutation.SetMedicineName(s)
	return mu
}

// SetDose sets the dose field.
func (mu *MedicineUpdate) SetDose(i int64) *MedicineUpdate {
	mu.mutation.ResetDose()
	mu.mutation.SetDose(i)
	return mu
}

// AddDose adds i to dose.
func (mu *MedicineUpdate) AddDose(i int64) *MedicineUpdate {
	mu.mutation.AddDose(i)
	return mu
}

// SetUnit sets the unit field.
func (mu *MedicineUpdate) SetUnit(s string) *MedicineUpdate {
	mu.mutation.SetUnit(s)
	return mu
}

// SetDateStart sets the dateStart field.
func (mu *MedicineUpdate) SetDateStart(i int64) *MedicineUpdate {
	mu.mutation.ResetDateStart()
	mu.mutation.SetDateStart(i)
	return mu
}

// AddDateStart adds i to dateStart.
func (mu *MedicineUpdate) AddDateStart(i int64) *MedicineUpdate {
	mu.mutation.AddDateStart(i)
	return mu
}

// SetDateEnd sets the dateEnd field.
func (mu *MedicineUpdate) SetDateEnd(i int64) *MedicineUpdate {
	mu.mutation.ResetDateEnd()
	mu.mutation.SetDateEnd(i)
	return mu
}

// AddDateEnd adds i to dateEnd.
func (mu *MedicineUpdate) AddDateEnd(i int64) *MedicineUpdate {
	mu.mutation.AddDateEnd(i)
	return mu
}

// SetCreatedAt sets the createdAt field.
func (mu *MedicineUpdate) SetCreatedAt(i int64) *MedicineUpdate {
	mu.mutation.ResetCreatedAt()
	mu.mutation.SetCreatedAt(i)
	return mu
}

// AddCreatedAt adds i to createdAt.
func (mu *MedicineUpdate) AddCreatedAt(i int64) *MedicineUpdate {
	mu.mutation.AddCreatedAt(i)
	return mu
}

// SetUpdatedAt sets the updatedAt field.
func (mu *MedicineUpdate) SetUpdatedAt(i int64) *MedicineUpdate {
	mu.mutation.ResetUpdatedAt()
	mu.mutation.SetUpdatedAt(i)
	return mu
}

// AddUpdatedAt adds i to updatedAt.
func (mu *MedicineUpdate) AddUpdatedAt(i int64) *MedicineUpdate {
	mu.mutation.AddUpdatedAt(i)
	return mu
}

// SetDeleted sets the deleted field.
func (mu *MedicineUpdate) SetDeleted(i int) *MedicineUpdate {
	mu.mutation.ResetDeleted()
	mu.mutation.SetDeleted(i)
	return mu
}

// AddDeleted adds i to deleted.
func (mu *MedicineUpdate) AddDeleted(i int) *MedicineUpdate {
	mu.mutation.AddDeleted(i)
	return mu
}

// SetRemarks sets the remarks field.
func (mu *MedicineUpdate) SetRemarks(s string) *MedicineUpdate {
	mu.mutation.SetRemarks(s)
	return mu
}

// Mutation returns the MedicineMutation object of the builder.
func (mu *MedicineUpdate) Mutation() *MedicineMutation {
	return mu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MedicineUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MedicineUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MedicineUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MedicineUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MedicineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicine.Table,
			Columns: medicine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: medicine.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldCattleId,
		})
	}
	if value, ok := mu.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldCattleId,
		})
	}
	if value, ok := mu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldTenantId,
		})
	}
	if value, ok := mu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldTenantId,
		})
	}
	if value, ok := mu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldTenantName,
		})
	}
	if value, ok := mu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldFarmId,
		})
	}
	if value, ok := mu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldFarmId,
		})
	}
	if value, ok := mu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldFarmName,
		})
	}
	if value, ok := mu.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldShedId,
		})
	}
	if value, ok := mu.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldShedId,
		})
	}
	if value, ok := mu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldShedName,
		})
	}
	if value, ok := mu.mutation.Epid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldEpid,
		})
	}
	if value, ok := mu.mutation.AddedEpid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldEpid,
		})
	}
	if value, ok := mu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldEarNumber,
		})
	}
	if value, ok := mu.mutation.MedicineName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldMedicineName,
		})
	}
	if value, ok := mu.mutation.Dose(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDose,
		})
	}
	if value, ok := mu.mutation.AddedDose(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDose,
		})
	}
	if value, ok := mu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldUnit,
		})
	}
	if value, ok := mu.mutation.DateStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateStart,
		})
	}
	if value, ok := mu.mutation.AddedDateStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateStart,
		})
	}
	if value, ok := mu.mutation.DateEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateEnd,
		})
	}
	if value, ok := mu.mutation.AddedDateEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateEnd,
		})
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: medicine.FieldDeleted,
		})
	}
	if value, ok := mu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: medicine.FieldDeleted,
		})
	}
	if value, ok := mu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldRemarks,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MedicineUpdateOne is the builder for updating a single Medicine entity.
type MedicineUpdateOne struct {
	config
	hooks    []Hook
	mutation *MedicineMutation
}

// SetCattleId sets the cattleId field.
func (muo *MedicineUpdateOne) SetCattleId(i int64) *MedicineUpdateOne {
	muo.mutation.ResetCattleId()
	muo.mutation.SetCattleId(i)
	return muo
}

// AddCattleId adds i to cattleId.
func (muo *MedicineUpdateOne) AddCattleId(i int64) *MedicineUpdateOne {
	muo.mutation.AddCattleId(i)
	return muo
}

// SetTenantId sets the tenantId field.
func (muo *MedicineUpdateOne) SetTenantId(i int64) *MedicineUpdateOne {
	muo.mutation.ResetTenantId()
	muo.mutation.SetTenantId(i)
	return muo
}

// AddTenantId adds i to tenantId.
func (muo *MedicineUpdateOne) AddTenantId(i int64) *MedicineUpdateOne {
	muo.mutation.AddTenantId(i)
	return muo
}

// SetTenantName sets the tenantName field.
func (muo *MedicineUpdateOne) SetTenantName(s string) *MedicineUpdateOne {
	muo.mutation.SetTenantName(s)
	return muo
}

// SetFarmId sets the farmId field.
func (muo *MedicineUpdateOne) SetFarmId(i int64) *MedicineUpdateOne {
	muo.mutation.ResetFarmId()
	muo.mutation.SetFarmId(i)
	return muo
}

// AddFarmId adds i to farmId.
func (muo *MedicineUpdateOne) AddFarmId(i int64) *MedicineUpdateOne {
	muo.mutation.AddFarmId(i)
	return muo
}

// SetFarmName sets the farmName field.
func (muo *MedicineUpdateOne) SetFarmName(s string) *MedicineUpdateOne {
	muo.mutation.SetFarmName(s)
	return muo
}

// SetShedId sets the shedId field.
func (muo *MedicineUpdateOne) SetShedId(i int64) *MedicineUpdateOne {
	muo.mutation.ResetShedId()
	muo.mutation.SetShedId(i)
	return muo
}

// AddShedId adds i to shedId.
func (muo *MedicineUpdateOne) AddShedId(i int64) *MedicineUpdateOne {
	muo.mutation.AddShedId(i)
	return muo
}

// SetShedName sets the shedName field.
func (muo *MedicineUpdateOne) SetShedName(s string) *MedicineUpdateOne {
	muo.mutation.SetShedName(s)
	return muo
}

// SetEpid sets the epid field.
func (muo *MedicineUpdateOne) SetEpid(i int64) *MedicineUpdateOne {
	muo.mutation.ResetEpid()
	muo.mutation.SetEpid(i)
	return muo
}

// AddEpid adds i to epid.
func (muo *MedicineUpdateOne) AddEpid(i int64) *MedicineUpdateOne {
	muo.mutation.AddEpid(i)
	return muo
}

// SetEarNumber sets the earNumber field.
func (muo *MedicineUpdateOne) SetEarNumber(s string) *MedicineUpdateOne {
	muo.mutation.SetEarNumber(s)
	return muo
}

// SetMedicineName sets the medicineName field.
func (muo *MedicineUpdateOne) SetMedicineName(s string) *MedicineUpdateOne {
	muo.mutation.SetMedicineName(s)
	return muo
}

// SetDose sets the dose field.
func (muo *MedicineUpdateOne) SetDose(i int64) *MedicineUpdateOne {
	muo.mutation.ResetDose()
	muo.mutation.SetDose(i)
	return muo
}

// AddDose adds i to dose.
func (muo *MedicineUpdateOne) AddDose(i int64) *MedicineUpdateOne {
	muo.mutation.AddDose(i)
	return muo
}

// SetUnit sets the unit field.
func (muo *MedicineUpdateOne) SetUnit(s string) *MedicineUpdateOne {
	muo.mutation.SetUnit(s)
	return muo
}

// SetDateStart sets the dateStart field.
func (muo *MedicineUpdateOne) SetDateStart(i int64) *MedicineUpdateOne {
	muo.mutation.ResetDateStart()
	muo.mutation.SetDateStart(i)
	return muo
}

// AddDateStart adds i to dateStart.
func (muo *MedicineUpdateOne) AddDateStart(i int64) *MedicineUpdateOne {
	muo.mutation.AddDateStart(i)
	return muo
}

// SetDateEnd sets the dateEnd field.
func (muo *MedicineUpdateOne) SetDateEnd(i int64) *MedicineUpdateOne {
	muo.mutation.ResetDateEnd()
	muo.mutation.SetDateEnd(i)
	return muo
}

// AddDateEnd adds i to dateEnd.
func (muo *MedicineUpdateOne) AddDateEnd(i int64) *MedicineUpdateOne {
	muo.mutation.AddDateEnd(i)
	return muo
}

// SetCreatedAt sets the createdAt field.
func (muo *MedicineUpdateOne) SetCreatedAt(i int64) *MedicineUpdateOne {
	muo.mutation.ResetCreatedAt()
	muo.mutation.SetCreatedAt(i)
	return muo
}

// AddCreatedAt adds i to createdAt.
func (muo *MedicineUpdateOne) AddCreatedAt(i int64) *MedicineUpdateOne {
	muo.mutation.AddCreatedAt(i)
	return muo
}

// SetUpdatedAt sets the updatedAt field.
func (muo *MedicineUpdateOne) SetUpdatedAt(i int64) *MedicineUpdateOne {
	muo.mutation.ResetUpdatedAt()
	muo.mutation.SetUpdatedAt(i)
	return muo
}

// AddUpdatedAt adds i to updatedAt.
func (muo *MedicineUpdateOne) AddUpdatedAt(i int64) *MedicineUpdateOne {
	muo.mutation.AddUpdatedAt(i)
	return muo
}

// SetDeleted sets the deleted field.
func (muo *MedicineUpdateOne) SetDeleted(i int) *MedicineUpdateOne {
	muo.mutation.ResetDeleted()
	muo.mutation.SetDeleted(i)
	return muo
}

// AddDeleted adds i to deleted.
func (muo *MedicineUpdateOne) AddDeleted(i int) *MedicineUpdateOne {
	muo.mutation.AddDeleted(i)
	return muo
}

// SetRemarks sets the remarks field.
func (muo *MedicineUpdateOne) SetRemarks(s string) *MedicineUpdateOne {
	muo.mutation.SetRemarks(s)
	return muo
}

// Mutation returns the MedicineMutation object of the builder.
func (muo *MedicineUpdateOne) Mutation() *MedicineMutation {
	return muo.mutation
}

// Save executes the query and returns the updated entity.
func (muo *MedicineUpdateOne) Save(ctx context.Context) (*Medicine, error) {
	var (
		err  error
		node *Medicine
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MedicineUpdateOne) SaveX(ctx context.Context) *Medicine {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MedicineUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MedicineUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MedicineUpdateOne) sqlSave(ctx context.Context) (_node *Medicine, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicine.Table,
			Columns: medicine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: medicine.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Medicine.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.CattleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldCattleId,
		})
	}
	if value, ok := muo.mutation.AddedCattleId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldCattleId,
		})
	}
	if value, ok := muo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldTenantId,
		})
	}
	if value, ok := muo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldTenantId,
		})
	}
	if value, ok := muo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldTenantName,
		})
	}
	if value, ok := muo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldFarmId,
		})
	}
	if value, ok := muo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldFarmId,
		})
	}
	if value, ok := muo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldFarmName,
		})
	}
	if value, ok := muo.mutation.ShedId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldShedId,
		})
	}
	if value, ok := muo.mutation.AddedShedId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldShedId,
		})
	}
	if value, ok := muo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldShedName,
		})
	}
	if value, ok := muo.mutation.Epid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldEpid,
		})
	}
	if value, ok := muo.mutation.AddedEpid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldEpid,
		})
	}
	if value, ok := muo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldEarNumber,
		})
	}
	if value, ok := muo.mutation.MedicineName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldMedicineName,
		})
	}
	if value, ok := muo.mutation.Dose(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDose,
		})
	}
	if value, ok := muo.mutation.AddedDose(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDose,
		})
	}
	if value, ok := muo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldUnit,
		})
	}
	if value, ok := muo.mutation.DateStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateStart,
		})
	}
	if value, ok := muo.mutation.AddedDateStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateStart,
		})
	}
	if value, ok := muo.mutation.DateEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateEnd,
		})
	}
	if value, ok := muo.mutation.AddedDateEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldDateEnd,
		})
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: medicine.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: medicine.FieldDeleted,
		})
	}
	if value, ok := muo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: medicine.FieldDeleted,
		})
	}
	if value, ok := muo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicine.FieldRemarks,
		})
	}
	_node = &Medicine{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

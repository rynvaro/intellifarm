// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/facebook/ent/schema/field"
)

var (
	// BirthSurroundingsColumns holds the columns for the "birth_surroundings" table.
	BirthSurroundingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "farm_id", Type: field.TypeInt64},
		{Name: "farm_name", Type: field.TypeString},
		{Name: "record_time", Type: field.TypeInt64},
		{Name: "user_id", Type: field.TypeInt64},
		{Name: "user_name", Type: field.TypeString},
		{Name: "temperature", Type: field.TypeInt64},
		{Name: "humidity", Type: field.TypeInt64},
		{Name: "breath_rate_id", Type: field.TypeInt64},
		{Name: "breath_rate_name", Type: field.TypeString},
		{Name: "wind_speed", Type: field.TypeInt64},
		{Name: "wind_direction_id", Type: field.TypeInt},
		{Name: "wind_direction", Type: field.TypeString},
		{Name: "location_changes", Type: field.TypeInt64},
		{Name: "hair_state_id", Type: field.TypeInt},
		{Name: "hair_state_name", Type: field.TypeString},
		{Name: "soil_depth", Type: field.TypeInt},
		{Name: "sun_exposure", Type: field.TypeInt},
		{Name: "walk_distance", Type: field.TypeInt},
		{Name: "rained", Type: field.TypeInt},
		{Name: "th_index", Type: field.TypeFloat32},
		{Name: "remarks", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
		{Name: "deleted", Type: field.TypeInt},
	}
	// BirthSurroundingsTable holds the schema information for the "birth_surroundings" table.
	BirthSurroundingsTable = &schema.Table{
		Name:        "birth_surroundings",
		Columns:     BirthSurroundingsColumns,
		PrimaryKey:  []*schema.Column{BirthSurroundingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// BreathRatesColumns holds the columns for the "breath_rates" table.
	BreathRatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// BreathRatesTable holds the schema information for the "breath_rates" table.
	BreathRatesTable = &schema.Table{
		Name:        "breath_rates",
		Columns:     BreathRatesColumns,
		PrimaryKey:  []*schema.Column{BreathRatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:        "categories",
		Columns:     CategoriesColumns,
		PrimaryKey:  []*schema.Column{CategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ConfsColumns holds the columns for the "confs" table.
	ConfsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "confs", Type: field.TypeJSON},
	}
	// ConfsTable holds the schema information for the "confs" table.
	ConfsTable = &schema.Table{
		Name:        "confs",
		Columns:     ConfsColumns,
		PrimaryKey:  []*schema.Column{ConfsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// DutiesColumns holds the columns for the "duties" table.
	DutiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// DutiesTable holds the schema information for the "duties" table.
	DutiesTable = &schema.Table{
		Name:        "duties",
		Columns:     DutiesColumns,
		PrimaryKey:  []*schema.Column{DutiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FarmsColumns holds the columns for the "farms" table.
	FarmsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "code", Type: field.TypeString, Unique: true},
		{Name: "construction_date", Type: field.TypeString},
		{Name: "feeding_scale", Type: field.TypeInt64},
		{Name: "contact_user", Type: field.TypeString},
		{Name: "contact_phone", Type: field.TypeString},
		{Name: "contact_address", Type: field.TypeString},
		{Name: "square", Type: field.TypeInt64},
		{Name: "shed_count", Type: field.TypeInt64},
		{Name: "category_id", Type: field.TypeInt64},
		{Name: "category_name", Type: field.TypeString},
		{Name: "variety_id", Type: field.TypeInt64},
		{Name: "variety_name", Type: field.TypeString},
		{Name: "district_code", Type: field.TypeString},
		{Name: "district_name", Type: field.TypeString},
		{Name: "remarks", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
		{Name: "deleted", Type: field.TypeInt},
	}
	// FarmsTable holds the schema information for the "farms" table.
	FarmsTable = &schema.Table{
		Name:        "farms",
		Columns:     FarmsColumns,
		PrimaryKey:  []*schema.Column{FarmsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// HairStatesColumns holds the columns for the "hair_states" table.
	HairStatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// HairStatesTable holds the schema information for the "hair_states" table.
	HairStatesTable = &schema.Table{
		Name:        "hair_states",
		Columns:     HairStatesColumns,
		PrimaryKey:  []*schema.Column{HairStatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PositionsColumns holds the columns for the "positions" table.
	PositionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// PositionsTable holds the schema information for the "positions" table.
	PositionsTable = &schema.Table{
		Name:        "positions",
		Columns:     PositionsColumns,
		PrimaryKey:  []*schema.Column{PositionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ShedsColumns holds the columns for the "sheds" table.
	ShedsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "farm_id", Type: field.TypeInt64},
		{Name: "farm_name", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "shed_cate_id", Type: field.TypeInt64},
		{Name: "shed_cate_name", Type: field.TypeString},
		{Name: "shed_type_id", Type: field.TypeInt},
		{Name: "shed_type_name", Type: field.TypeString},
		{Name: "square", Type: field.TypeInt64},
		{Name: "length", Type: field.TypeInt64},
		{Name: "width", Type: field.TypeInt64},
		{Name: "height", Type: field.TypeInt64},
		{Name: "remarks", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "user_name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
		{Name: "deleted", Type: field.TypeInt},
	}
	// ShedsTable holds the schema information for the "sheds" table.
	ShedsTable = &schema.Table{
		Name:        "sheds",
		Columns:     ShedsColumns,
		PrimaryKey:  []*schema.Column{ShedsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ShedCategoriesColumns holds the columns for the "shed_categories" table.
	ShedCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// ShedCategoriesTable holds the schema information for the "shed_categories" table.
	ShedCategoriesTable = &schema.Table{
		Name:        "shed_categories",
		Columns:     ShedCategoriesColumns,
		PrimaryKey:  []*schema.Column{ShedCategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ShedTypesColumns holds the columns for the "shed_types" table.
	ShedTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// ShedTypesTable holds the schema information for the "shed_types" table.
	ShedTypesTable = &schema.Table{
		Name:        "shed_types",
		Columns:     ShedTypesColumns,
		PrimaryKey:  []*schema.Column{ShedTypesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "farm_id", Type: field.TypeInt64},
		{Name: "farm_name", Type: field.TypeString},
		{Name: "position_id", Type: field.TypeInt64},
		{Name: "position_name", Type: field.TypeString},
		{Name: "duty_name", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "gender", Type: field.TypeInt},
		{Name: "age", Type: field.TypeInt},
		{Name: "education", Type: field.TypeString},
		{Name: "major", Type: field.TypeString},
		{Name: "job_title", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "id_card", Type: field.TypeString},
		{Name: "address", Type: field.TypeString},
		{Name: "on_job_state", Type: field.TypeInt, Default: 1},
		{Name: "joined_at", Type: field.TypeInt64},
		{Name: "remarks", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
		{Name: "deleted", Type: field.TypeInt},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// WindDirectionsColumns holds the columns for the "wind_directions" table.
	WindDirectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// WindDirectionsTable holds the schema information for the "wind_directions" table.
	WindDirectionsTable = &schema.Table{
		Name:        "wind_directions",
		Columns:     WindDirectionsColumns,
		PrimaryKey:  []*schema.Column{WindDirectionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BirthSurroundingsTable,
		BreathRatesTable,
		CategoriesTable,
		ConfsTable,
		DutiesTable,
		FarmsTable,
		HairStatesTable,
		PositionsTable,
		ShedsTable,
		ShedCategoriesTable,
		ShedTypesTable,
		UsersTable,
		WindDirectionsTable,
	}
)

func init() {
}

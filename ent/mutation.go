// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/confs"
	"cattleai/ent/birthsurrounding"
	"cattleai/ent/breathrate"
	"cattleai/ent/category"
	"cattleai/ent/conf"
	"cattleai/ent/duty"
	"cattleai/ent/farm"
	"cattleai/ent/hairstate"
	"cattleai/ent/position"
	"cattleai/ent/shed"
	"cattleai/ent/shedcategory"
	"cattleai/ent/shedtype"
	"cattleai/ent/user"
	"cattleai/ent/winddirection"
	"context"
	"fmt"
	"sync"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBirthSurrounding = "BirthSurrounding"
	TypeBreathRate       = "BreathRate"
	TypeCategory         = "Category"
	TypeConf             = "Conf"
	TypeDuty             = "Duty"
	TypeFarm             = "Farm"
	TypeHairState        = "HairState"
	TypePosition         = "Position"
	TypeShed             = "Shed"
	TypeShedCategory     = "ShedCategory"
	TypeShedType         = "ShedType"
	TypeUser             = "User"
	TypeWindDirection    = "WindDirection"
)

// BirthSurroundingMutation represents an operation that mutate the BirthSurroundings
// nodes in the graph.
type BirthSurroundingMutation struct {
	config
	op                 Op
	typ                string
	id                 *int64
	name               *string
	farmId             *int64
	addfarmId          *int64
	farmName           *string
	recordTime         *int64
	addrecordTime      *int64
	userId             *int64
	adduserId          *int64
	userName           *string
	temperature        *int64
	addtemperature     *int64
	humidity           *int64
	addhumidity        *int64
	breathRateId       *int64
	addbreathRateId    *int64
	breathRateName     *string
	windSpeed          *int64
	addwindSpeed       *int64
	windDirectionId    *int
	addwindDirectionId *int
	windDirection      *string
	locationChanges    *int64
	addlocationChanges *int64
	hairStateId        *int
	addhairStateId     *int
	hairStateName      *string
	soilDepth          *int
	addsoilDepth       *int
	sunExposure        *int
	addsunExposure     *int
	walkDistance       *int
	addwalkDistance    *int
	rained             *int
	addrained          *int
	thIndex            *float32
	addthIndex         *float32
	remarks            *string
	createdAt          *int64
	addcreatedAt       *int64
	updatedAt          *int64
	addupdatedAt       *int64
	deleted            *int
	adddeleted         *int
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*BirthSurrounding, error)
}

var _ ent.Mutation = (*BirthSurroundingMutation)(nil)

// birthsurroundingOption allows to manage the mutation configuration using functional options.
type birthsurroundingOption func(*BirthSurroundingMutation)

// newBirthSurroundingMutation creates new mutation for $n.Name.
func newBirthSurroundingMutation(c config, op Op, opts ...birthsurroundingOption) *BirthSurroundingMutation {
	m := &BirthSurroundingMutation{
		config:        c,
		op:            op,
		typ:           TypeBirthSurrounding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBirthSurroundingID sets the id field of the mutation.
func withBirthSurroundingID(id int64) birthsurroundingOption {
	return func(m *BirthSurroundingMutation) {
		var (
			err   error
			once  sync.Once
			value *BirthSurrounding
		)
		m.oldValue = func(ctx context.Context) (*BirthSurrounding, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BirthSurrounding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBirthSurrounding sets the old BirthSurrounding of the mutation.
func withBirthSurrounding(node *BirthSurrounding) birthsurroundingOption {
	return func(m *BirthSurroundingMutation) {
		m.oldValue = func(context.Context) (*BirthSurrounding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BirthSurroundingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BirthSurroundingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BirthSurroundingMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *BirthSurroundingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *BirthSurroundingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *BirthSurroundingMutation) ResetName() {
	m.name = nil
}

// SetFarmId sets the farmId field.
func (m *BirthSurroundingMutation) SetFarmId(i int64) {
	m.farmId = &i
	m.addfarmId = nil
}

// FarmId returns the farmId value in the mutation.
func (m *BirthSurroundingMutation) FarmId() (r int64, exists bool) {
	v := m.farmId
	if v == nil {
		return
	}
	return *v, true
}

// OldFarmId returns the old farmId value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldFarmId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFarmId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFarmId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFarmId: %w", err)
	}
	return oldValue.FarmId, nil
}

// AddFarmId adds i to farmId.
func (m *BirthSurroundingMutation) AddFarmId(i int64) {
	if m.addfarmId != nil {
		*m.addfarmId += i
	} else {
		m.addfarmId = &i
	}
}

// AddedFarmId returns the value that was added to the farmId field in this mutation.
func (m *BirthSurroundingMutation) AddedFarmId() (r int64, exists bool) {
	v := m.addfarmId
	if v == nil {
		return
	}
	return *v, true
}

// ResetFarmId reset all changes of the "farmId" field.
func (m *BirthSurroundingMutation) ResetFarmId() {
	m.farmId = nil
	m.addfarmId = nil
}

// SetFarmName sets the farmName field.
func (m *BirthSurroundingMutation) SetFarmName(s string) {
	m.farmName = &s
}

// FarmName returns the farmName value in the mutation.
func (m *BirthSurroundingMutation) FarmName() (r string, exists bool) {
	v := m.farmName
	if v == nil {
		return
	}
	return *v, true
}

// OldFarmName returns the old farmName value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldFarmName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFarmName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFarmName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFarmName: %w", err)
	}
	return oldValue.FarmName, nil
}

// ResetFarmName reset all changes of the "farmName" field.
func (m *BirthSurroundingMutation) ResetFarmName() {
	m.farmName = nil
}

// SetRecordTime sets the recordTime field.
func (m *BirthSurroundingMutation) SetRecordTime(i int64) {
	m.recordTime = &i
	m.addrecordTime = nil
}

// RecordTime returns the recordTime value in the mutation.
func (m *BirthSurroundingMutation) RecordTime() (r int64, exists bool) {
	v := m.recordTime
	if v == nil {
		return
	}
	return *v, true
}

// OldRecordTime returns the old recordTime value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldRecordTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRecordTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRecordTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecordTime: %w", err)
	}
	return oldValue.RecordTime, nil
}

// AddRecordTime adds i to recordTime.
func (m *BirthSurroundingMutation) AddRecordTime(i int64) {
	if m.addrecordTime != nil {
		*m.addrecordTime += i
	} else {
		m.addrecordTime = &i
	}
}

// AddedRecordTime returns the value that was added to the recordTime field in this mutation.
func (m *BirthSurroundingMutation) AddedRecordTime() (r int64, exists bool) {
	v := m.addrecordTime
	if v == nil {
		return
	}
	return *v, true
}

// ResetRecordTime reset all changes of the "recordTime" field.
func (m *BirthSurroundingMutation) ResetRecordTime() {
	m.recordTime = nil
	m.addrecordTime = nil
}

// SetUserId sets the userId field.
func (m *BirthSurroundingMutation) SetUserId(i int64) {
	m.userId = &i
	m.adduserId = nil
}

// UserId returns the userId value in the mutation.
func (m *BirthSurroundingMutation) UserId() (r int64, exists bool) {
	v := m.userId
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old userId value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldUserId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// AddUserId adds i to userId.
func (m *BirthSurroundingMutation) AddUserId(i int64) {
	if m.adduserId != nil {
		*m.adduserId += i
	} else {
		m.adduserId = &i
	}
}

// AddedUserId returns the value that was added to the userId field in this mutation.
func (m *BirthSurroundingMutation) AddedUserId() (r int64, exists bool) {
	v := m.adduserId
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserId reset all changes of the "userId" field.
func (m *BirthSurroundingMutation) ResetUserId() {
	m.userId = nil
	m.adduserId = nil
}

// SetUserName sets the userName field.
func (m *BirthSurroundingMutation) SetUserName(s string) {
	m.userName = &s
}

// UserName returns the userName value in the mutation.
func (m *BirthSurroundingMutation) UserName() (r string, exists bool) {
	v := m.userName
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old userName value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName reset all changes of the "userName" field.
func (m *BirthSurroundingMutation) ResetUserName() {
	m.userName = nil
}

// SetTemperature sets the temperature field.
func (m *BirthSurroundingMutation) SetTemperature(i int64) {
	m.temperature = &i
	m.addtemperature = nil
}

// Temperature returns the temperature value in the mutation.
func (m *BirthSurroundingMutation) Temperature() (r int64, exists bool) {
	v := m.temperature
	if v == nil {
		return
	}
	return *v, true
}

// OldTemperature returns the old temperature value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldTemperature(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTemperature is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTemperature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemperature: %w", err)
	}
	return oldValue.Temperature, nil
}

// AddTemperature adds i to temperature.
func (m *BirthSurroundingMutation) AddTemperature(i int64) {
	if m.addtemperature != nil {
		*m.addtemperature += i
	} else {
		m.addtemperature = &i
	}
}

// AddedTemperature returns the value that was added to the temperature field in this mutation.
func (m *BirthSurroundingMutation) AddedTemperature() (r int64, exists bool) {
	v := m.addtemperature
	if v == nil {
		return
	}
	return *v, true
}

// ResetTemperature reset all changes of the "temperature" field.
func (m *BirthSurroundingMutation) ResetTemperature() {
	m.temperature = nil
	m.addtemperature = nil
}

// SetHumidity sets the humidity field.
func (m *BirthSurroundingMutation) SetHumidity(i int64) {
	m.humidity = &i
	m.addhumidity = nil
}

// Humidity returns the humidity value in the mutation.
func (m *BirthSurroundingMutation) Humidity() (r int64, exists bool) {
	v := m.humidity
	if v == nil {
		return
	}
	return *v, true
}

// OldHumidity returns the old humidity value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldHumidity(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHumidity is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHumidity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHumidity: %w", err)
	}
	return oldValue.Humidity, nil
}

// AddHumidity adds i to humidity.
func (m *BirthSurroundingMutation) AddHumidity(i int64) {
	if m.addhumidity != nil {
		*m.addhumidity += i
	} else {
		m.addhumidity = &i
	}
}

// AddedHumidity returns the value that was added to the humidity field in this mutation.
func (m *BirthSurroundingMutation) AddedHumidity() (r int64, exists bool) {
	v := m.addhumidity
	if v == nil {
		return
	}
	return *v, true
}

// ResetHumidity reset all changes of the "humidity" field.
func (m *BirthSurroundingMutation) ResetHumidity() {
	m.humidity = nil
	m.addhumidity = nil
}

// SetBreathRateId sets the breathRateId field.
func (m *BirthSurroundingMutation) SetBreathRateId(i int64) {
	m.breathRateId = &i
	m.addbreathRateId = nil
}

// BreathRateId returns the breathRateId value in the mutation.
func (m *BirthSurroundingMutation) BreathRateId() (r int64, exists bool) {
	v := m.breathRateId
	if v == nil {
		return
	}
	return *v, true
}

// OldBreathRateId returns the old breathRateId value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldBreathRateId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBreathRateId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBreathRateId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBreathRateId: %w", err)
	}
	return oldValue.BreathRateId, nil
}

// AddBreathRateId adds i to breathRateId.
func (m *BirthSurroundingMutation) AddBreathRateId(i int64) {
	if m.addbreathRateId != nil {
		*m.addbreathRateId += i
	} else {
		m.addbreathRateId = &i
	}
}

// AddedBreathRateId returns the value that was added to the breathRateId field in this mutation.
func (m *BirthSurroundingMutation) AddedBreathRateId() (r int64, exists bool) {
	v := m.addbreathRateId
	if v == nil {
		return
	}
	return *v, true
}

// ResetBreathRateId reset all changes of the "breathRateId" field.
func (m *BirthSurroundingMutation) ResetBreathRateId() {
	m.breathRateId = nil
	m.addbreathRateId = nil
}

// SetBreathRateName sets the breathRateName field.
func (m *BirthSurroundingMutation) SetBreathRateName(s string) {
	m.breathRateName = &s
}

// BreathRateName returns the breathRateName value in the mutation.
func (m *BirthSurroundingMutation) BreathRateName() (r string, exists bool) {
	v := m.breathRateName
	if v == nil {
		return
	}
	return *v, true
}

// OldBreathRateName returns the old breathRateName value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldBreathRateName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBreathRateName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBreathRateName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBreathRateName: %w", err)
	}
	return oldValue.BreathRateName, nil
}

// ResetBreathRateName reset all changes of the "breathRateName" field.
func (m *BirthSurroundingMutation) ResetBreathRateName() {
	m.breathRateName = nil
}

// SetWindSpeed sets the windSpeed field.
func (m *BirthSurroundingMutation) SetWindSpeed(i int64) {
	m.windSpeed = &i
	m.addwindSpeed = nil
}

// WindSpeed returns the windSpeed value in the mutation.
func (m *BirthSurroundingMutation) WindSpeed() (r int64, exists bool) {
	v := m.windSpeed
	if v == nil {
		return
	}
	return *v, true
}

// OldWindSpeed returns the old windSpeed value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldWindSpeed(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWindSpeed is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWindSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWindSpeed: %w", err)
	}
	return oldValue.WindSpeed, nil
}

// AddWindSpeed adds i to windSpeed.
func (m *BirthSurroundingMutation) AddWindSpeed(i int64) {
	if m.addwindSpeed != nil {
		*m.addwindSpeed += i
	} else {
		m.addwindSpeed = &i
	}
}

// AddedWindSpeed returns the value that was added to the windSpeed field in this mutation.
func (m *BirthSurroundingMutation) AddedWindSpeed() (r int64, exists bool) {
	v := m.addwindSpeed
	if v == nil {
		return
	}
	return *v, true
}

// ResetWindSpeed reset all changes of the "windSpeed" field.
func (m *BirthSurroundingMutation) ResetWindSpeed() {
	m.windSpeed = nil
	m.addwindSpeed = nil
}

// SetWindDirectionId sets the windDirectionId field.
func (m *BirthSurroundingMutation) SetWindDirectionId(i int) {
	m.windDirectionId = &i
	m.addwindDirectionId = nil
}

// WindDirectionId returns the windDirectionId value in the mutation.
func (m *BirthSurroundingMutation) WindDirectionId() (r int, exists bool) {
	v := m.windDirectionId
	if v == nil {
		return
	}
	return *v, true
}

// OldWindDirectionId returns the old windDirectionId value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldWindDirectionId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWindDirectionId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWindDirectionId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWindDirectionId: %w", err)
	}
	return oldValue.WindDirectionId, nil
}

// AddWindDirectionId adds i to windDirectionId.
func (m *BirthSurroundingMutation) AddWindDirectionId(i int) {
	if m.addwindDirectionId != nil {
		*m.addwindDirectionId += i
	} else {
		m.addwindDirectionId = &i
	}
}

// AddedWindDirectionId returns the value that was added to the windDirectionId field in this mutation.
func (m *BirthSurroundingMutation) AddedWindDirectionId() (r int, exists bool) {
	v := m.addwindDirectionId
	if v == nil {
		return
	}
	return *v, true
}

// ResetWindDirectionId reset all changes of the "windDirectionId" field.
func (m *BirthSurroundingMutation) ResetWindDirectionId() {
	m.windDirectionId = nil
	m.addwindDirectionId = nil
}

// SetWindDirection sets the windDirection field.
func (m *BirthSurroundingMutation) SetWindDirection(s string) {
	m.windDirection = &s
}

// WindDirection returns the windDirection value in the mutation.
func (m *BirthSurroundingMutation) WindDirection() (r string, exists bool) {
	v := m.windDirection
	if v == nil {
		return
	}
	return *v, true
}

// OldWindDirection returns the old windDirection value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldWindDirection(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWindDirection is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWindDirection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWindDirection: %w", err)
	}
	return oldValue.WindDirection, nil
}

// ResetWindDirection reset all changes of the "windDirection" field.
func (m *BirthSurroundingMutation) ResetWindDirection() {
	m.windDirection = nil
}

// SetLocationChanges sets the locationChanges field.
func (m *BirthSurroundingMutation) SetLocationChanges(i int64) {
	m.locationChanges = &i
	m.addlocationChanges = nil
}

// LocationChanges returns the locationChanges value in the mutation.
func (m *BirthSurroundingMutation) LocationChanges() (r int64, exists bool) {
	v := m.locationChanges
	if v == nil {
		return
	}
	return *v, true
}

// OldLocationChanges returns the old locationChanges value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldLocationChanges(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLocationChanges is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLocationChanges requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocationChanges: %w", err)
	}
	return oldValue.LocationChanges, nil
}

// AddLocationChanges adds i to locationChanges.
func (m *BirthSurroundingMutation) AddLocationChanges(i int64) {
	if m.addlocationChanges != nil {
		*m.addlocationChanges += i
	} else {
		m.addlocationChanges = &i
	}
}

// AddedLocationChanges returns the value that was added to the locationChanges field in this mutation.
func (m *BirthSurroundingMutation) AddedLocationChanges() (r int64, exists bool) {
	v := m.addlocationChanges
	if v == nil {
		return
	}
	return *v, true
}

// ResetLocationChanges reset all changes of the "locationChanges" field.
func (m *BirthSurroundingMutation) ResetLocationChanges() {
	m.locationChanges = nil
	m.addlocationChanges = nil
}

// SetHairStateId sets the hairStateId field.
func (m *BirthSurroundingMutation) SetHairStateId(i int) {
	m.hairStateId = &i
	m.addhairStateId = nil
}

// HairStateId returns the hairStateId value in the mutation.
func (m *BirthSurroundingMutation) HairStateId() (r int, exists bool) {
	v := m.hairStateId
	if v == nil {
		return
	}
	return *v, true
}

// OldHairStateId returns the old hairStateId value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldHairStateId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHairStateId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHairStateId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHairStateId: %w", err)
	}
	return oldValue.HairStateId, nil
}

// AddHairStateId adds i to hairStateId.
func (m *BirthSurroundingMutation) AddHairStateId(i int) {
	if m.addhairStateId != nil {
		*m.addhairStateId += i
	} else {
		m.addhairStateId = &i
	}
}

// AddedHairStateId returns the value that was added to the hairStateId field in this mutation.
func (m *BirthSurroundingMutation) AddedHairStateId() (r int, exists bool) {
	v := m.addhairStateId
	if v == nil {
		return
	}
	return *v, true
}

// ResetHairStateId reset all changes of the "hairStateId" field.
func (m *BirthSurroundingMutation) ResetHairStateId() {
	m.hairStateId = nil
	m.addhairStateId = nil
}

// SetHairStateName sets the hairStateName field.
func (m *BirthSurroundingMutation) SetHairStateName(s string) {
	m.hairStateName = &s
}

// HairStateName returns the hairStateName value in the mutation.
func (m *BirthSurroundingMutation) HairStateName() (r string, exists bool) {
	v := m.hairStateName
	if v == nil {
		return
	}
	return *v, true
}

// OldHairStateName returns the old hairStateName value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldHairStateName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHairStateName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHairStateName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHairStateName: %w", err)
	}
	return oldValue.HairStateName, nil
}

// ResetHairStateName reset all changes of the "hairStateName" field.
func (m *BirthSurroundingMutation) ResetHairStateName() {
	m.hairStateName = nil
}

// SetSoilDepth sets the soilDepth field.
func (m *BirthSurroundingMutation) SetSoilDepth(i int) {
	m.soilDepth = &i
	m.addsoilDepth = nil
}

// SoilDepth returns the soilDepth value in the mutation.
func (m *BirthSurroundingMutation) SoilDepth() (r int, exists bool) {
	v := m.soilDepth
	if v == nil {
		return
	}
	return *v, true
}

// OldSoilDepth returns the old soilDepth value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldSoilDepth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSoilDepth is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSoilDepth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSoilDepth: %w", err)
	}
	return oldValue.SoilDepth, nil
}

// AddSoilDepth adds i to soilDepth.
func (m *BirthSurroundingMutation) AddSoilDepth(i int) {
	if m.addsoilDepth != nil {
		*m.addsoilDepth += i
	} else {
		m.addsoilDepth = &i
	}
}

// AddedSoilDepth returns the value that was added to the soilDepth field in this mutation.
func (m *BirthSurroundingMutation) AddedSoilDepth() (r int, exists bool) {
	v := m.addsoilDepth
	if v == nil {
		return
	}
	return *v, true
}

// ResetSoilDepth reset all changes of the "soilDepth" field.
func (m *BirthSurroundingMutation) ResetSoilDepth() {
	m.soilDepth = nil
	m.addsoilDepth = nil
}

// SetSunExposure sets the sunExposure field.
func (m *BirthSurroundingMutation) SetSunExposure(i int) {
	m.sunExposure = &i
	m.addsunExposure = nil
}

// SunExposure returns the sunExposure value in the mutation.
func (m *BirthSurroundingMutation) SunExposure() (r int, exists bool) {
	v := m.sunExposure
	if v == nil {
		return
	}
	return *v, true
}

// OldSunExposure returns the old sunExposure value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldSunExposure(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSunExposure is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSunExposure requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSunExposure: %w", err)
	}
	return oldValue.SunExposure, nil
}

// AddSunExposure adds i to sunExposure.
func (m *BirthSurroundingMutation) AddSunExposure(i int) {
	if m.addsunExposure != nil {
		*m.addsunExposure += i
	} else {
		m.addsunExposure = &i
	}
}

// AddedSunExposure returns the value that was added to the sunExposure field in this mutation.
func (m *BirthSurroundingMutation) AddedSunExposure() (r int, exists bool) {
	v := m.addsunExposure
	if v == nil {
		return
	}
	return *v, true
}

// ResetSunExposure reset all changes of the "sunExposure" field.
func (m *BirthSurroundingMutation) ResetSunExposure() {
	m.sunExposure = nil
	m.addsunExposure = nil
}

// SetWalkDistance sets the walkDistance field.
func (m *BirthSurroundingMutation) SetWalkDistance(i int) {
	m.walkDistance = &i
	m.addwalkDistance = nil
}

// WalkDistance returns the walkDistance value in the mutation.
func (m *BirthSurroundingMutation) WalkDistance() (r int, exists bool) {
	v := m.walkDistance
	if v == nil {
		return
	}
	return *v, true
}

// OldWalkDistance returns the old walkDistance value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldWalkDistance(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWalkDistance is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWalkDistance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalkDistance: %w", err)
	}
	return oldValue.WalkDistance, nil
}

// AddWalkDistance adds i to walkDistance.
func (m *BirthSurroundingMutation) AddWalkDistance(i int) {
	if m.addwalkDistance != nil {
		*m.addwalkDistance += i
	} else {
		m.addwalkDistance = &i
	}
}

// AddedWalkDistance returns the value that was added to the walkDistance field in this mutation.
func (m *BirthSurroundingMutation) AddedWalkDistance() (r int, exists bool) {
	v := m.addwalkDistance
	if v == nil {
		return
	}
	return *v, true
}

// ResetWalkDistance reset all changes of the "walkDistance" field.
func (m *BirthSurroundingMutation) ResetWalkDistance() {
	m.walkDistance = nil
	m.addwalkDistance = nil
}

// SetRained sets the rained field.
func (m *BirthSurroundingMutation) SetRained(i int) {
	m.rained = &i
	m.addrained = nil
}

// Rained returns the rained value in the mutation.
func (m *BirthSurroundingMutation) Rained() (r int, exists bool) {
	v := m.rained
	if v == nil {
		return
	}
	return *v, true
}

// OldRained returns the old rained value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldRained(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRained is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRained requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRained: %w", err)
	}
	return oldValue.Rained, nil
}

// AddRained adds i to rained.
func (m *BirthSurroundingMutation) AddRained(i int) {
	if m.addrained != nil {
		*m.addrained += i
	} else {
		m.addrained = &i
	}
}

// AddedRained returns the value that was added to the rained field in this mutation.
func (m *BirthSurroundingMutation) AddedRained() (r int, exists bool) {
	v := m.addrained
	if v == nil {
		return
	}
	return *v, true
}

// ResetRained reset all changes of the "rained" field.
func (m *BirthSurroundingMutation) ResetRained() {
	m.rained = nil
	m.addrained = nil
}

// SetThIndex sets the thIndex field.
func (m *BirthSurroundingMutation) SetThIndex(f float32) {
	m.thIndex = &f
	m.addthIndex = nil
}

// ThIndex returns the thIndex value in the mutation.
func (m *BirthSurroundingMutation) ThIndex() (r float32, exists bool) {
	v := m.thIndex
	if v == nil {
		return
	}
	return *v, true
}

// OldThIndex returns the old thIndex value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldThIndex(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldThIndex is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldThIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThIndex: %w", err)
	}
	return oldValue.ThIndex, nil
}

// AddThIndex adds f to thIndex.
func (m *BirthSurroundingMutation) AddThIndex(f float32) {
	if m.addthIndex != nil {
		*m.addthIndex += f
	} else {
		m.addthIndex = &f
	}
}

// AddedThIndex returns the value that was added to the thIndex field in this mutation.
func (m *BirthSurroundingMutation) AddedThIndex() (r float32, exists bool) {
	v := m.addthIndex
	if v == nil {
		return
	}
	return *v, true
}

// ResetThIndex reset all changes of the "thIndex" field.
func (m *BirthSurroundingMutation) ResetThIndex() {
	m.thIndex = nil
	m.addthIndex = nil
}

// SetRemarks sets the remarks field.
func (m *BirthSurroundingMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the remarks value in the mutation.
func (m *BirthSurroundingMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old remarks value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemarks is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ResetRemarks reset all changes of the "remarks" field.
func (m *BirthSurroundingMutation) ResetRemarks() {
	m.remarks = nil
}

// SetCreatedAt sets the createdAt field.
func (m *BirthSurroundingMutation) SetCreatedAt(i int64) {
	m.createdAt = &i
	m.addcreatedAt = nil
}

// CreatedAt returns the createdAt value in the mutation.
func (m *BirthSurroundingMutation) CreatedAt() (r int64, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to createdAt.
func (m *BirthSurroundingMutation) AddCreatedAt(i int64) {
	if m.addcreatedAt != nil {
		*m.addcreatedAt += i
	} else {
		m.addcreatedAt = &i
	}
}

// AddedCreatedAt returns the value that was added to the createdAt field in this mutation.
func (m *BirthSurroundingMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *BirthSurroundingMutation) ResetCreatedAt() {
	m.createdAt = nil
	m.addcreatedAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *BirthSurroundingMutation) SetUpdatedAt(i int64) {
	m.updatedAt = &i
	m.addupdatedAt = nil
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *BirthSurroundingMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to updatedAt.
func (m *BirthSurroundingMutation) AddUpdatedAt(i int64) {
	if m.addupdatedAt != nil {
		*m.addupdatedAt += i
	} else {
		m.addupdatedAt = &i
	}
}

// AddedUpdatedAt returns the value that was added to the updatedAt field in this mutation.
func (m *BirthSurroundingMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *BirthSurroundingMutation) ResetUpdatedAt() {
	m.updatedAt = nil
	m.addupdatedAt = nil
}

// SetDeleted sets the deleted field.
func (m *BirthSurroundingMutation) SetDeleted(i int) {
	m.deleted = &i
	m.adddeleted = nil
}

// Deleted returns the deleted value in the mutation.
func (m *BirthSurroundingMutation) Deleted() (r int, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old deleted value of the BirthSurrounding.
// If the BirthSurrounding object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BirthSurroundingMutation) OldDeleted(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleted is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// AddDeleted adds i to deleted.
func (m *BirthSurroundingMutation) AddDeleted(i int) {
	if m.adddeleted != nil {
		*m.adddeleted += i
	} else {
		m.adddeleted = &i
	}
}

// AddedDeleted returns the value that was added to the deleted field in this mutation.
func (m *BirthSurroundingMutation) AddedDeleted() (r int, exists bool) {
	v := m.adddeleted
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleted reset all changes of the "deleted" field.
func (m *BirthSurroundingMutation) ResetDeleted() {
	m.deleted = nil
	m.adddeleted = nil
}

// Op returns the operation name.
func (m *BirthSurroundingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BirthSurrounding).
func (m *BirthSurroundingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BirthSurroundingMutation) Fields() []string {
	fields := make([]string, 0, 25)
	if m.name != nil {
		fields = append(fields, birthsurrounding.FieldName)
	}
	if m.farmId != nil {
		fields = append(fields, birthsurrounding.FieldFarmId)
	}
	if m.farmName != nil {
		fields = append(fields, birthsurrounding.FieldFarmName)
	}
	if m.recordTime != nil {
		fields = append(fields, birthsurrounding.FieldRecordTime)
	}
	if m.userId != nil {
		fields = append(fields, birthsurrounding.FieldUserId)
	}
	if m.userName != nil {
		fields = append(fields, birthsurrounding.FieldUserName)
	}
	if m.temperature != nil {
		fields = append(fields, birthsurrounding.FieldTemperature)
	}
	if m.humidity != nil {
		fields = append(fields, birthsurrounding.FieldHumidity)
	}
	if m.breathRateId != nil {
		fields = append(fields, birthsurrounding.FieldBreathRateId)
	}
	if m.breathRateName != nil {
		fields = append(fields, birthsurrounding.FieldBreathRateName)
	}
	if m.windSpeed != nil {
		fields = append(fields, birthsurrounding.FieldWindSpeed)
	}
	if m.windDirectionId != nil {
		fields = append(fields, birthsurrounding.FieldWindDirectionId)
	}
	if m.windDirection != nil {
		fields = append(fields, birthsurrounding.FieldWindDirection)
	}
	if m.locationChanges != nil {
		fields = append(fields, birthsurrounding.FieldLocationChanges)
	}
	if m.hairStateId != nil {
		fields = append(fields, birthsurrounding.FieldHairStateId)
	}
	if m.hairStateName != nil {
		fields = append(fields, birthsurrounding.FieldHairStateName)
	}
	if m.soilDepth != nil {
		fields = append(fields, birthsurrounding.FieldSoilDepth)
	}
	if m.sunExposure != nil {
		fields = append(fields, birthsurrounding.FieldSunExposure)
	}
	if m.walkDistance != nil {
		fields = append(fields, birthsurrounding.FieldWalkDistance)
	}
	if m.rained != nil {
		fields = append(fields, birthsurrounding.FieldRained)
	}
	if m.thIndex != nil {
		fields = append(fields, birthsurrounding.FieldThIndex)
	}
	if m.remarks != nil {
		fields = append(fields, birthsurrounding.FieldRemarks)
	}
	if m.createdAt != nil {
		fields = append(fields, birthsurrounding.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, birthsurrounding.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, birthsurrounding.FieldDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BirthSurroundingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case birthsurrounding.FieldName:
		return m.Name()
	case birthsurrounding.FieldFarmId:
		return m.FarmId()
	case birthsurrounding.FieldFarmName:
		return m.FarmName()
	case birthsurrounding.FieldRecordTime:
		return m.RecordTime()
	case birthsurrounding.FieldUserId:
		return m.UserId()
	case birthsurrounding.FieldUserName:
		return m.UserName()
	case birthsurrounding.FieldTemperature:
		return m.Temperature()
	case birthsurrounding.FieldHumidity:
		return m.Humidity()
	case birthsurrounding.FieldBreathRateId:
		return m.BreathRateId()
	case birthsurrounding.FieldBreathRateName:
		return m.BreathRateName()
	case birthsurrounding.FieldWindSpeed:
		return m.WindSpeed()
	case birthsurrounding.FieldWindDirectionId:
		return m.WindDirectionId()
	case birthsurrounding.FieldWindDirection:
		return m.WindDirection()
	case birthsurrounding.FieldLocationChanges:
		return m.LocationChanges()
	case birthsurrounding.FieldHairStateId:
		return m.HairStateId()
	case birthsurrounding.FieldHairStateName:
		return m.HairStateName()
	case birthsurrounding.FieldSoilDepth:
		return m.SoilDepth()
	case birthsurrounding.FieldSunExposure:
		return m.SunExposure()
	case birthsurrounding.FieldWalkDistance:
		return m.WalkDistance()
	case birthsurrounding.FieldRained:
		return m.Rained()
	case birthsurrounding.FieldThIndex:
		return m.ThIndex()
	case birthsurrounding.FieldRemarks:
		return m.Remarks()
	case birthsurrounding.FieldCreatedAt:
		return m.CreatedAt()
	case birthsurrounding.FieldUpdatedAt:
		return m.UpdatedAt()
	case birthsurrounding.FieldDeleted:
		return m.Deleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BirthSurroundingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case birthsurrounding.FieldName:
		return m.OldName(ctx)
	case birthsurrounding.FieldFarmId:
		return m.OldFarmId(ctx)
	case birthsurrounding.FieldFarmName:
		return m.OldFarmName(ctx)
	case birthsurrounding.FieldRecordTime:
		return m.OldRecordTime(ctx)
	case birthsurrounding.FieldUserId:
		return m.OldUserId(ctx)
	case birthsurrounding.FieldUserName:
		return m.OldUserName(ctx)
	case birthsurrounding.FieldTemperature:
		return m.OldTemperature(ctx)
	case birthsurrounding.FieldHumidity:
		return m.OldHumidity(ctx)
	case birthsurrounding.FieldBreathRateId:
		return m.OldBreathRateId(ctx)
	case birthsurrounding.FieldBreathRateName:
		return m.OldBreathRateName(ctx)
	case birthsurrounding.FieldWindSpeed:
		return m.OldWindSpeed(ctx)
	case birthsurrounding.FieldWindDirectionId:
		return m.OldWindDirectionId(ctx)
	case birthsurrounding.FieldWindDirection:
		return m.OldWindDirection(ctx)
	case birthsurrounding.FieldLocationChanges:
		return m.OldLocationChanges(ctx)
	case birthsurrounding.FieldHairStateId:
		return m.OldHairStateId(ctx)
	case birthsurrounding.FieldHairStateName:
		return m.OldHairStateName(ctx)
	case birthsurrounding.FieldSoilDepth:
		return m.OldSoilDepth(ctx)
	case birthsurrounding.FieldSunExposure:
		return m.OldSunExposure(ctx)
	case birthsurrounding.FieldWalkDistance:
		return m.OldWalkDistance(ctx)
	case birthsurrounding.FieldRained:
		return m.OldRained(ctx)
	case birthsurrounding.FieldThIndex:
		return m.OldThIndex(ctx)
	case birthsurrounding.FieldRemarks:
		return m.OldRemarks(ctx)
	case birthsurrounding.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case birthsurrounding.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case birthsurrounding.FieldDeleted:
		return m.OldDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown BirthSurrounding field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BirthSurroundingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case birthsurrounding.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case birthsurrounding.FieldFarmId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFarmId(v)
		return nil
	case birthsurrounding.FieldFarmName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFarmName(v)
		return nil
	case birthsurrounding.FieldRecordTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecordTime(v)
		return nil
	case birthsurrounding.FieldUserId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case birthsurrounding.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case birthsurrounding.FieldTemperature:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemperature(v)
		return nil
	case birthsurrounding.FieldHumidity:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHumidity(v)
		return nil
	case birthsurrounding.FieldBreathRateId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBreathRateId(v)
		return nil
	case birthsurrounding.FieldBreathRateName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBreathRateName(v)
		return nil
	case birthsurrounding.FieldWindSpeed:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWindSpeed(v)
		return nil
	case birthsurrounding.FieldWindDirectionId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWindDirectionId(v)
		return nil
	case birthsurrounding.FieldWindDirection:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWindDirection(v)
		return nil
	case birthsurrounding.FieldLocationChanges:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocationChanges(v)
		return nil
	case birthsurrounding.FieldHairStateId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHairStateId(v)
		return nil
	case birthsurrounding.FieldHairStateName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHairStateName(v)
		return nil
	case birthsurrounding.FieldSoilDepth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSoilDepth(v)
		return nil
	case birthsurrounding.FieldSunExposure:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSunExposure(v)
		return nil
	case birthsurrounding.FieldWalkDistance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalkDistance(v)
		return nil
	case birthsurrounding.FieldRained:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRained(v)
		return nil
	case birthsurrounding.FieldThIndex:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThIndex(v)
		return nil
	case birthsurrounding.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case birthsurrounding.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case birthsurrounding.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case birthsurrounding.FieldDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown BirthSurrounding field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BirthSurroundingMutation) AddedFields() []string {
	var fields []string
	if m.addfarmId != nil {
		fields = append(fields, birthsurrounding.FieldFarmId)
	}
	if m.addrecordTime != nil {
		fields = append(fields, birthsurrounding.FieldRecordTime)
	}
	if m.adduserId != nil {
		fields = append(fields, birthsurrounding.FieldUserId)
	}
	if m.addtemperature != nil {
		fields = append(fields, birthsurrounding.FieldTemperature)
	}
	if m.addhumidity != nil {
		fields = append(fields, birthsurrounding.FieldHumidity)
	}
	if m.addbreathRateId != nil {
		fields = append(fields, birthsurrounding.FieldBreathRateId)
	}
	if m.addwindSpeed != nil {
		fields = append(fields, birthsurrounding.FieldWindSpeed)
	}
	if m.addwindDirectionId != nil {
		fields = append(fields, birthsurrounding.FieldWindDirectionId)
	}
	if m.addlocationChanges != nil {
		fields = append(fields, birthsurrounding.FieldLocationChanges)
	}
	if m.addhairStateId != nil {
		fields = append(fields, birthsurrounding.FieldHairStateId)
	}
	if m.addsoilDepth != nil {
		fields = append(fields, birthsurrounding.FieldSoilDepth)
	}
	if m.addsunExposure != nil {
		fields = append(fields, birthsurrounding.FieldSunExposure)
	}
	if m.addwalkDistance != nil {
		fields = append(fields, birthsurrounding.FieldWalkDistance)
	}
	if m.addrained != nil {
		fields = append(fields, birthsurrounding.FieldRained)
	}
	if m.addthIndex != nil {
		fields = append(fields, birthsurrounding.FieldThIndex)
	}
	if m.addcreatedAt != nil {
		fields = append(fields, birthsurrounding.FieldCreatedAt)
	}
	if m.addupdatedAt != nil {
		fields = append(fields, birthsurrounding.FieldUpdatedAt)
	}
	if m.adddeleted != nil {
		fields = append(fields, birthsurrounding.FieldDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BirthSurroundingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case birthsurrounding.FieldFarmId:
		return m.AddedFarmId()
	case birthsurrounding.FieldRecordTime:
		return m.AddedRecordTime()
	case birthsurrounding.FieldUserId:
		return m.AddedUserId()
	case birthsurrounding.FieldTemperature:
		return m.AddedTemperature()
	case birthsurrounding.FieldHumidity:
		return m.AddedHumidity()
	case birthsurrounding.FieldBreathRateId:
		return m.AddedBreathRateId()
	case birthsurrounding.FieldWindSpeed:
		return m.AddedWindSpeed()
	case birthsurrounding.FieldWindDirectionId:
		return m.AddedWindDirectionId()
	case birthsurrounding.FieldLocationChanges:
		return m.AddedLocationChanges()
	case birthsurrounding.FieldHairStateId:
		return m.AddedHairStateId()
	case birthsurrounding.FieldSoilDepth:
		return m.AddedSoilDepth()
	case birthsurrounding.FieldSunExposure:
		return m.AddedSunExposure()
	case birthsurrounding.FieldWalkDistance:
		return m.AddedWalkDistance()
	case birthsurrounding.FieldRained:
		return m.AddedRained()
	case birthsurrounding.FieldThIndex:
		return m.AddedThIndex()
	case birthsurrounding.FieldCreatedAt:
		return m.AddedCreatedAt()
	case birthsurrounding.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case birthsurrounding.FieldDeleted:
		return m.AddedDeleted()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BirthSurroundingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case birthsurrounding.FieldFarmId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFarmId(v)
		return nil
	case birthsurrounding.FieldRecordTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecordTime(v)
		return nil
	case birthsurrounding.FieldUserId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserId(v)
		return nil
	case birthsurrounding.FieldTemperature:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTemperature(v)
		return nil
	case birthsurrounding.FieldHumidity:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHumidity(v)
		return nil
	case birthsurrounding.FieldBreathRateId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBreathRateId(v)
		return nil
	case birthsurrounding.FieldWindSpeed:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWindSpeed(v)
		return nil
	case birthsurrounding.FieldWindDirectionId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWindDirectionId(v)
		return nil
	case birthsurrounding.FieldLocationChanges:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLocationChanges(v)
		return nil
	case birthsurrounding.FieldHairStateId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHairStateId(v)
		return nil
	case birthsurrounding.FieldSoilDepth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSoilDepth(v)
		return nil
	case birthsurrounding.FieldSunExposure:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSunExposure(v)
		return nil
	case birthsurrounding.FieldWalkDistance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWalkDistance(v)
		return nil
	case birthsurrounding.FieldRained:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRained(v)
		return nil
	case birthsurrounding.FieldThIndex:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThIndex(v)
		return nil
	case birthsurrounding.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case birthsurrounding.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case birthsurrounding.FieldDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown BirthSurrounding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BirthSurroundingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BirthSurroundingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BirthSurroundingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BirthSurrounding nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BirthSurroundingMutation) ResetField(name string) error {
	switch name {
	case birthsurrounding.FieldName:
		m.ResetName()
		return nil
	case birthsurrounding.FieldFarmId:
		m.ResetFarmId()
		return nil
	case birthsurrounding.FieldFarmName:
		m.ResetFarmName()
		return nil
	case birthsurrounding.FieldRecordTime:
		m.ResetRecordTime()
		return nil
	case birthsurrounding.FieldUserId:
		m.ResetUserId()
		return nil
	case birthsurrounding.FieldUserName:
		m.ResetUserName()
		return nil
	case birthsurrounding.FieldTemperature:
		m.ResetTemperature()
		return nil
	case birthsurrounding.FieldHumidity:
		m.ResetHumidity()
		return nil
	case birthsurrounding.FieldBreathRateId:
		m.ResetBreathRateId()
		return nil
	case birthsurrounding.FieldBreathRateName:
		m.ResetBreathRateName()
		return nil
	case birthsurrounding.FieldWindSpeed:
		m.ResetWindSpeed()
		return nil
	case birthsurrounding.FieldWindDirectionId:
		m.ResetWindDirectionId()
		return nil
	case birthsurrounding.FieldWindDirection:
		m.ResetWindDirection()
		return nil
	case birthsurrounding.FieldLocationChanges:
		m.ResetLocationChanges()
		return nil
	case birthsurrounding.FieldHairStateId:
		m.ResetHairStateId()
		return nil
	case birthsurrounding.FieldHairStateName:
		m.ResetHairStateName()
		return nil
	case birthsurrounding.FieldSoilDepth:
		m.ResetSoilDepth()
		return nil
	case birthsurrounding.FieldSunExposure:
		m.ResetSunExposure()
		return nil
	case birthsurrounding.FieldWalkDistance:
		m.ResetWalkDistance()
		return nil
	case birthsurrounding.FieldRained:
		m.ResetRained()
		return nil
	case birthsurrounding.FieldThIndex:
		m.ResetThIndex()
		return nil
	case birthsurrounding.FieldRemarks:
		m.ResetRemarks()
		return nil
	case birthsurrounding.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case birthsurrounding.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case birthsurrounding.FieldDeleted:
		m.ResetDeleted()
		return nil
	}
	return fmt.Errorf("unknown BirthSurrounding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BirthSurroundingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BirthSurroundingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BirthSurroundingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BirthSurroundingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BirthSurroundingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BirthSurroundingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BirthSurroundingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BirthSurrounding unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BirthSurroundingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BirthSurrounding edge %s", name)
}

// BreathRateMutation represents an operation that mutate the BreathRates
// nodes in the graph.
type BreathRateMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BreathRate, error)
}

var _ ent.Mutation = (*BreathRateMutation)(nil)

// breathrateOption allows to manage the mutation configuration using functional options.
type breathrateOption func(*BreathRateMutation)

// newBreathRateMutation creates new mutation for $n.Name.
func newBreathRateMutation(c config, op Op, opts ...breathrateOption) *BreathRateMutation {
	m := &BreathRateMutation{
		config:        c,
		op:            op,
		typ:           TypeBreathRate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBreathRateID sets the id field of the mutation.
func withBreathRateID(id int64) breathrateOption {
	return func(m *BreathRateMutation) {
		var (
			err   error
			once  sync.Once
			value *BreathRate
		)
		m.oldValue = func(ctx context.Context) (*BreathRate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BreathRate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBreathRate sets the old BreathRate of the mutation.
func withBreathRate(node *BreathRate) breathrateOption {
	return func(m *BreathRateMutation) {
		m.oldValue = func(context.Context) (*BreathRate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BreathRateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BreathRateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BreathRateMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *BreathRateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *BreathRateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the BreathRate.
// If the BreathRate object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BreathRateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *BreathRateMutation) ResetName() {
	m.name = nil
}

// Op returns the operation name.
func (m *BreathRateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BreathRate).
func (m *BreathRateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BreathRateMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, breathrate.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BreathRateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case breathrate.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BreathRateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case breathrate.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown BreathRate field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BreathRateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case breathrate.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown BreathRate field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BreathRateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BreathRateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BreathRateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BreathRate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BreathRateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BreathRateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BreathRateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BreathRate nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BreathRateMutation) ResetField(name string) error {
	switch name {
	case breathrate.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown BreathRate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BreathRateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BreathRateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BreathRateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BreathRateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BreathRateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BreathRateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BreathRateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BreathRate unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BreathRateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BreathRate edge %s", name)
}

// CategoryMutation represents an operation that mutate the Categories
// nodes in the graph.
type CategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Category, error)
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows to manage the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for $n.Name.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the id field of the mutation.
func withCategoryID(id int64) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CategoryMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Category.
// If the Category object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Category edge %s", name)
}

// ConfMutation represents an operation that mutate the Confs
// nodes in the graph.
type ConfMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	confs         **confs.Confs
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Conf, error)
}

var _ ent.Mutation = (*ConfMutation)(nil)

// confOption allows to manage the mutation configuration using functional options.
type confOption func(*ConfMutation)

// newConfMutation creates new mutation for $n.Name.
func newConfMutation(c config, op Op, opts ...confOption) *ConfMutation {
	m := &ConfMutation{
		config:        c,
		op:            op,
		typ:           TypeConf,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConfID sets the id field of the mutation.
func withConfID(id int64) confOption {
	return func(m *ConfMutation) {
		var (
			err   error
			once  sync.Once
			value *Conf
		)
		m.oldValue = func(ctx context.Context) (*Conf, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Conf.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConf sets the old Conf of the mutation.
func withConf(node *Conf) confOption {
	return func(m *ConfMutation) {
		m.oldValue = func(context.Context) (*Conf, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConfMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConfMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ConfMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetConfs sets the confs field.
func (m *ConfMutation) SetConfs(c *confs.Confs) {
	m.confs = &c
}

// Confs returns the confs value in the mutation.
func (m *ConfMutation) Confs() (r *confs.Confs, exists bool) {
	v := m.confs
	if v == nil {
		return
	}
	return *v, true
}

// OldConfs returns the old confs value of the Conf.
// If the Conf object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ConfMutation) OldConfs(ctx context.Context) (v *confs.Confs, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfs is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfs: %w", err)
	}
	return oldValue.Confs, nil
}

// ResetConfs reset all changes of the "confs" field.
func (m *ConfMutation) ResetConfs() {
	m.confs = nil
}

// Op returns the operation name.
func (m *ConfMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Conf).
func (m *ConfMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ConfMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.confs != nil {
		fields = append(fields, conf.FieldConfs)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ConfMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case conf.FieldConfs:
		return m.Confs()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ConfMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case conf.FieldConfs:
		return m.OldConfs(ctx)
	}
	return nil, fmt.Errorf("unknown Conf field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ConfMutation) SetField(name string, value ent.Value) error {
	switch name {
	case conf.FieldConfs:
		v, ok := value.(*confs.Confs)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfs(v)
		return nil
	}
	return fmt.Errorf("unknown Conf field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ConfMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ConfMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ConfMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Conf numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ConfMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ConfMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConfMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Conf nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ConfMutation) ResetField(name string) error {
	switch name {
	case conf.FieldConfs:
		m.ResetConfs()
		return nil
	}
	return fmt.Errorf("unknown Conf field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ConfMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ConfMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ConfMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ConfMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ConfMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ConfMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ConfMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Conf unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ConfMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Conf edge %s", name)
}

// DutyMutation represents an operation that mutate the Duties
// nodes in the graph.
type DutyMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Duty, error)
}

var _ ent.Mutation = (*DutyMutation)(nil)

// dutyOption allows to manage the mutation configuration using functional options.
type dutyOption func(*DutyMutation)

// newDutyMutation creates new mutation for $n.Name.
func newDutyMutation(c config, op Op, opts ...dutyOption) *DutyMutation {
	m := &DutyMutation{
		config:        c,
		op:            op,
		typ:           TypeDuty,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDutyID sets the id field of the mutation.
func withDutyID(id int64) dutyOption {
	return func(m *DutyMutation) {
		var (
			err   error
			once  sync.Once
			value *Duty
		)
		m.oldValue = func(ctx context.Context) (*Duty, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Duty.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDuty sets the old Duty of the mutation.
func withDuty(node *Duty) dutyOption {
	return func(m *DutyMutation) {
		m.oldValue = func(context.Context) (*Duty, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DutyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DutyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DutyMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DutyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DutyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Duty.
// If the Duty object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DutyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DutyMutation) ResetName() {
	m.name = nil
}

// Op returns the operation name.
func (m *DutyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Duty).
func (m *DutyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DutyMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, duty.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DutyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case duty.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DutyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case duty.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Duty field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DutyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case duty.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Duty field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DutyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DutyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DutyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Duty numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DutyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DutyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DutyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Duty nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DutyMutation) ResetField(name string) error {
	switch name {
	case duty.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Duty field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DutyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DutyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DutyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DutyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DutyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DutyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DutyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Duty unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DutyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Duty edge %s", name)
}

// FarmMutation represents an operation that mutate the Farms
// nodes in the graph.
type FarmMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	name             *string
	code             *string
	constructionDate *string
	feedingScale     *int64
	addfeedingScale  *int64
	contactUser      *string
	contactPhone     *string
	contactAddress   *string
	square           *int64
	addsquare        *int64
	shedCount        *int64
	addshedCount     *int64
	categoryId       *int64
	addcategoryId    *int64
	categoryName     *string
	varietyId        *int64
	addvarietyId     *int64
	varietyName      *string
	districtCode     *string
	districtName     *string
	remarks          *string
	createdAt        *int64
	addcreatedAt     *int64
	updatedAt        *int64
	addupdatedAt     *int64
	deleted          *int
	adddeleted       *int
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Farm, error)
}

var _ ent.Mutation = (*FarmMutation)(nil)

// farmOption allows to manage the mutation configuration using functional options.
type farmOption func(*FarmMutation)

// newFarmMutation creates new mutation for $n.Name.
func newFarmMutation(c config, op Op, opts ...farmOption) *FarmMutation {
	m := &FarmMutation{
		config:        c,
		op:            op,
		typ:           TypeFarm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFarmID sets the id field of the mutation.
func withFarmID(id int64) farmOption {
	return func(m *FarmMutation) {
		var (
			err   error
			once  sync.Once
			value *Farm
		)
		m.oldValue = func(ctx context.Context) (*Farm, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Farm.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFarm sets the old Farm of the mutation.
func withFarm(node *Farm) farmOption {
	return func(m *FarmMutation) {
		m.oldValue = func(context.Context) (*Farm, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FarmMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FarmMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FarmMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *FarmMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *FarmMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *FarmMutation) ResetName() {
	m.name = nil
}

// SetCode sets the code field.
func (m *FarmMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the code value in the mutation.
func (m *FarmMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old code value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode reset all changes of the "code" field.
func (m *FarmMutation) ResetCode() {
	m.code = nil
}

// SetConstructionDate sets the constructionDate field.
func (m *FarmMutation) SetConstructionDate(s string) {
	m.constructionDate = &s
}

// ConstructionDate returns the constructionDate value in the mutation.
func (m *FarmMutation) ConstructionDate() (r string, exists bool) {
	v := m.constructionDate
	if v == nil {
		return
	}
	return *v, true
}

// OldConstructionDate returns the old constructionDate value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldConstructionDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConstructionDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConstructionDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConstructionDate: %w", err)
	}
	return oldValue.ConstructionDate, nil
}

// ResetConstructionDate reset all changes of the "constructionDate" field.
func (m *FarmMutation) ResetConstructionDate() {
	m.constructionDate = nil
}

// SetFeedingScale sets the feedingScale field.
func (m *FarmMutation) SetFeedingScale(i int64) {
	m.feedingScale = &i
	m.addfeedingScale = nil
}

// FeedingScale returns the feedingScale value in the mutation.
func (m *FarmMutation) FeedingScale() (r int64, exists bool) {
	v := m.feedingScale
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedingScale returns the old feedingScale value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldFeedingScale(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeedingScale is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeedingScale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedingScale: %w", err)
	}
	return oldValue.FeedingScale, nil
}

// AddFeedingScale adds i to feedingScale.
func (m *FarmMutation) AddFeedingScale(i int64) {
	if m.addfeedingScale != nil {
		*m.addfeedingScale += i
	} else {
		m.addfeedingScale = &i
	}
}

// AddedFeedingScale returns the value that was added to the feedingScale field in this mutation.
func (m *FarmMutation) AddedFeedingScale() (r int64, exists bool) {
	v := m.addfeedingScale
	if v == nil {
		return
	}
	return *v, true
}

// ResetFeedingScale reset all changes of the "feedingScale" field.
func (m *FarmMutation) ResetFeedingScale() {
	m.feedingScale = nil
	m.addfeedingScale = nil
}

// SetContactUser sets the contactUser field.
func (m *FarmMutation) SetContactUser(s string) {
	m.contactUser = &s
}

// ContactUser returns the contactUser value in the mutation.
func (m *FarmMutation) ContactUser() (r string, exists bool) {
	v := m.contactUser
	if v == nil {
		return
	}
	return *v, true
}

// OldContactUser returns the old contactUser value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldContactUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContactUser is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContactUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactUser: %w", err)
	}
	return oldValue.ContactUser, nil
}

// ResetContactUser reset all changes of the "contactUser" field.
func (m *FarmMutation) ResetContactUser() {
	m.contactUser = nil
}

// SetContactPhone sets the contactPhone field.
func (m *FarmMutation) SetContactPhone(s string) {
	m.contactPhone = &s
}

// ContactPhone returns the contactPhone value in the mutation.
func (m *FarmMutation) ContactPhone() (r string, exists bool) {
	v := m.contactPhone
	if v == nil {
		return
	}
	return *v, true
}

// OldContactPhone returns the old contactPhone value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldContactPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContactPhone is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContactPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactPhone: %w", err)
	}
	return oldValue.ContactPhone, nil
}

// ResetContactPhone reset all changes of the "contactPhone" field.
func (m *FarmMutation) ResetContactPhone() {
	m.contactPhone = nil
}

// SetContactAddress sets the contactAddress field.
func (m *FarmMutation) SetContactAddress(s string) {
	m.contactAddress = &s
}

// ContactAddress returns the contactAddress value in the mutation.
func (m *FarmMutation) ContactAddress() (r string, exists bool) {
	v := m.contactAddress
	if v == nil {
		return
	}
	return *v, true
}

// OldContactAddress returns the old contactAddress value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldContactAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContactAddress is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContactAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactAddress: %w", err)
	}
	return oldValue.ContactAddress, nil
}

// ResetContactAddress reset all changes of the "contactAddress" field.
func (m *FarmMutation) ResetContactAddress() {
	m.contactAddress = nil
}

// SetSquare sets the square field.
func (m *FarmMutation) SetSquare(i int64) {
	m.square = &i
	m.addsquare = nil
}

// Square returns the square value in the mutation.
func (m *FarmMutation) Square() (r int64, exists bool) {
	v := m.square
	if v == nil {
		return
	}
	return *v, true
}

// OldSquare returns the old square value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldSquare(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSquare is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSquare requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSquare: %w", err)
	}
	return oldValue.Square, nil
}

// AddSquare adds i to square.
func (m *FarmMutation) AddSquare(i int64) {
	if m.addsquare != nil {
		*m.addsquare += i
	} else {
		m.addsquare = &i
	}
}

// AddedSquare returns the value that was added to the square field in this mutation.
func (m *FarmMutation) AddedSquare() (r int64, exists bool) {
	v := m.addsquare
	if v == nil {
		return
	}
	return *v, true
}

// ResetSquare reset all changes of the "square" field.
func (m *FarmMutation) ResetSquare() {
	m.square = nil
	m.addsquare = nil
}

// SetShedCount sets the shedCount field.
func (m *FarmMutation) SetShedCount(i int64) {
	m.shedCount = &i
	m.addshedCount = nil
}

// ShedCount returns the shedCount value in the mutation.
func (m *FarmMutation) ShedCount() (r int64, exists bool) {
	v := m.shedCount
	if v == nil {
		return
	}
	return *v, true
}

// OldShedCount returns the old shedCount value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldShedCount(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShedCount is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShedCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShedCount: %w", err)
	}
	return oldValue.ShedCount, nil
}

// AddShedCount adds i to shedCount.
func (m *FarmMutation) AddShedCount(i int64) {
	if m.addshedCount != nil {
		*m.addshedCount += i
	} else {
		m.addshedCount = &i
	}
}

// AddedShedCount returns the value that was added to the shedCount field in this mutation.
func (m *FarmMutation) AddedShedCount() (r int64, exists bool) {
	v := m.addshedCount
	if v == nil {
		return
	}
	return *v, true
}

// ResetShedCount reset all changes of the "shedCount" field.
func (m *FarmMutation) ResetShedCount() {
	m.shedCount = nil
	m.addshedCount = nil
}

// SetCategoryId sets the categoryId field.
func (m *FarmMutation) SetCategoryId(i int64) {
	m.categoryId = &i
	m.addcategoryId = nil
}

// CategoryId returns the categoryId value in the mutation.
func (m *FarmMutation) CategoryId() (r int64, exists bool) {
	v := m.categoryId
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryId returns the old categoryId value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldCategoryId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCategoryId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCategoryId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryId: %w", err)
	}
	return oldValue.CategoryId, nil
}

// AddCategoryId adds i to categoryId.
func (m *FarmMutation) AddCategoryId(i int64) {
	if m.addcategoryId != nil {
		*m.addcategoryId += i
	} else {
		m.addcategoryId = &i
	}
}

// AddedCategoryId returns the value that was added to the categoryId field in this mutation.
func (m *FarmMutation) AddedCategoryId() (r int64, exists bool) {
	v := m.addcategoryId
	if v == nil {
		return
	}
	return *v, true
}

// ResetCategoryId reset all changes of the "categoryId" field.
func (m *FarmMutation) ResetCategoryId() {
	m.categoryId = nil
	m.addcategoryId = nil
}

// SetCategoryName sets the categoryName field.
func (m *FarmMutation) SetCategoryName(s string) {
	m.categoryName = &s
}

// CategoryName returns the categoryName value in the mutation.
func (m *FarmMutation) CategoryName() (r string, exists bool) {
	v := m.categoryName
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryName returns the old categoryName value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldCategoryName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCategoryName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCategoryName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryName: %w", err)
	}
	return oldValue.CategoryName, nil
}

// ResetCategoryName reset all changes of the "categoryName" field.
func (m *FarmMutation) ResetCategoryName() {
	m.categoryName = nil
}

// SetVarietyId sets the varietyId field.
func (m *FarmMutation) SetVarietyId(i int64) {
	m.varietyId = &i
	m.addvarietyId = nil
}

// VarietyId returns the varietyId value in the mutation.
func (m *FarmMutation) VarietyId() (r int64, exists bool) {
	v := m.varietyId
	if v == nil {
		return
	}
	return *v, true
}

// OldVarietyId returns the old varietyId value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldVarietyId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVarietyId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVarietyId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVarietyId: %w", err)
	}
	return oldValue.VarietyId, nil
}

// AddVarietyId adds i to varietyId.
func (m *FarmMutation) AddVarietyId(i int64) {
	if m.addvarietyId != nil {
		*m.addvarietyId += i
	} else {
		m.addvarietyId = &i
	}
}

// AddedVarietyId returns the value that was added to the varietyId field in this mutation.
func (m *FarmMutation) AddedVarietyId() (r int64, exists bool) {
	v := m.addvarietyId
	if v == nil {
		return
	}
	return *v, true
}

// ResetVarietyId reset all changes of the "varietyId" field.
func (m *FarmMutation) ResetVarietyId() {
	m.varietyId = nil
	m.addvarietyId = nil
}

// SetVarietyName sets the varietyName field.
func (m *FarmMutation) SetVarietyName(s string) {
	m.varietyName = &s
}

// VarietyName returns the varietyName value in the mutation.
func (m *FarmMutation) VarietyName() (r string, exists bool) {
	v := m.varietyName
	if v == nil {
		return
	}
	return *v, true
}

// OldVarietyName returns the old varietyName value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldVarietyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVarietyName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVarietyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVarietyName: %w", err)
	}
	return oldValue.VarietyName, nil
}

// ResetVarietyName reset all changes of the "varietyName" field.
func (m *FarmMutation) ResetVarietyName() {
	m.varietyName = nil
}

// SetDistrictCode sets the districtCode field.
func (m *FarmMutation) SetDistrictCode(s string) {
	m.districtCode = &s
}

// DistrictCode returns the districtCode value in the mutation.
func (m *FarmMutation) DistrictCode() (r string, exists bool) {
	v := m.districtCode
	if v == nil {
		return
	}
	return *v, true
}

// OldDistrictCode returns the old districtCode value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldDistrictCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDistrictCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDistrictCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistrictCode: %w", err)
	}
	return oldValue.DistrictCode, nil
}

// ResetDistrictCode reset all changes of the "districtCode" field.
func (m *FarmMutation) ResetDistrictCode() {
	m.districtCode = nil
}

// SetDistrictName sets the districtName field.
func (m *FarmMutation) SetDistrictName(s string) {
	m.districtName = &s
}

// DistrictName returns the districtName value in the mutation.
func (m *FarmMutation) DistrictName() (r string, exists bool) {
	v := m.districtName
	if v == nil {
		return
	}
	return *v, true
}

// OldDistrictName returns the old districtName value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldDistrictName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDistrictName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDistrictName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistrictName: %w", err)
	}
	return oldValue.DistrictName, nil
}

// ResetDistrictName reset all changes of the "districtName" field.
func (m *FarmMutation) ResetDistrictName() {
	m.districtName = nil
}

// SetRemarks sets the remarks field.
func (m *FarmMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the remarks value in the mutation.
func (m *FarmMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old remarks value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemarks is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ResetRemarks reset all changes of the "remarks" field.
func (m *FarmMutation) ResetRemarks() {
	m.remarks = nil
}

// SetCreatedAt sets the createdAt field.
func (m *FarmMutation) SetCreatedAt(i int64) {
	m.createdAt = &i
	m.addcreatedAt = nil
}

// CreatedAt returns the createdAt value in the mutation.
func (m *FarmMutation) CreatedAt() (r int64, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to createdAt.
func (m *FarmMutation) AddCreatedAt(i int64) {
	if m.addcreatedAt != nil {
		*m.addcreatedAt += i
	} else {
		m.addcreatedAt = &i
	}
}

// AddedCreatedAt returns the value that was added to the createdAt field in this mutation.
func (m *FarmMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *FarmMutation) ResetCreatedAt() {
	m.createdAt = nil
	m.addcreatedAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *FarmMutation) SetUpdatedAt(i int64) {
	m.updatedAt = &i
	m.addupdatedAt = nil
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *FarmMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to updatedAt.
func (m *FarmMutation) AddUpdatedAt(i int64) {
	if m.addupdatedAt != nil {
		*m.addupdatedAt += i
	} else {
		m.addupdatedAt = &i
	}
}

// AddedUpdatedAt returns the value that was added to the updatedAt field in this mutation.
func (m *FarmMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *FarmMutation) ResetUpdatedAt() {
	m.updatedAt = nil
	m.addupdatedAt = nil
}

// SetDeleted sets the deleted field.
func (m *FarmMutation) SetDeleted(i int) {
	m.deleted = &i
	m.adddeleted = nil
}

// Deleted returns the deleted value in the mutation.
func (m *FarmMutation) Deleted() (r int, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old deleted value of the Farm.
// If the Farm object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FarmMutation) OldDeleted(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleted is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// AddDeleted adds i to deleted.
func (m *FarmMutation) AddDeleted(i int) {
	if m.adddeleted != nil {
		*m.adddeleted += i
	} else {
		m.adddeleted = &i
	}
}

// AddedDeleted returns the value that was added to the deleted field in this mutation.
func (m *FarmMutation) AddedDeleted() (r int, exists bool) {
	v := m.adddeleted
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleted reset all changes of the "deleted" field.
func (m *FarmMutation) ResetDeleted() {
	m.deleted = nil
	m.adddeleted = nil
}

// Op returns the operation name.
func (m *FarmMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Farm).
func (m *FarmMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FarmMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.name != nil {
		fields = append(fields, farm.FieldName)
	}
	if m.code != nil {
		fields = append(fields, farm.FieldCode)
	}
	if m.constructionDate != nil {
		fields = append(fields, farm.FieldConstructionDate)
	}
	if m.feedingScale != nil {
		fields = append(fields, farm.FieldFeedingScale)
	}
	if m.contactUser != nil {
		fields = append(fields, farm.FieldContactUser)
	}
	if m.contactPhone != nil {
		fields = append(fields, farm.FieldContactPhone)
	}
	if m.contactAddress != nil {
		fields = append(fields, farm.FieldContactAddress)
	}
	if m.square != nil {
		fields = append(fields, farm.FieldSquare)
	}
	if m.shedCount != nil {
		fields = append(fields, farm.FieldShedCount)
	}
	if m.categoryId != nil {
		fields = append(fields, farm.FieldCategoryId)
	}
	if m.categoryName != nil {
		fields = append(fields, farm.FieldCategoryName)
	}
	if m.varietyId != nil {
		fields = append(fields, farm.FieldVarietyId)
	}
	if m.varietyName != nil {
		fields = append(fields, farm.FieldVarietyName)
	}
	if m.districtCode != nil {
		fields = append(fields, farm.FieldDistrictCode)
	}
	if m.districtName != nil {
		fields = append(fields, farm.FieldDistrictName)
	}
	if m.remarks != nil {
		fields = append(fields, farm.FieldRemarks)
	}
	if m.createdAt != nil {
		fields = append(fields, farm.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, farm.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, farm.FieldDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FarmMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case farm.FieldName:
		return m.Name()
	case farm.FieldCode:
		return m.Code()
	case farm.FieldConstructionDate:
		return m.ConstructionDate()
	case farm.FieldFeedingScale:
		return m.FeedingScale()
	case farm.FieldContactUser:
		return m.ContactUser()
	case farm.FieldContactPhone:
		return m.ContactPhone()
	case farm.FieldContactAddress:
		return m.ContactAddress()
	case farm.FieldSquare:
		return m.Square()
	case farm.FieldShedCount:
		return m.ShedCount()
	case farm.FieldCategoryId:
		return m.CategoryId()
	case farm.FieldCategoryName:
		return m.CategoryName()
	case farm.FieldVarietyId:
		return m.VarietyId()
	case farm.FieldVarietyName:
		return m.VarietyName()
	case farm.FieldDistrictCode:
		return m.DistrictCode()
	case farm.FieldDistrictName:
		return m.DistrictName()
	case farm.FieldRemarks:
		return m.Remarks()
	case farm.FieldCreatedAt:
		return m.CreatedAt()
	case farm.FieldUpdatedAt:
		return m.UpdatedAt()
	case farm.FieldDeleted:
		return m.Deleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FarmMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case farm.FieldName:
		return m.OldName(ctx)
	case farm.FieldCode:
		return m.OldCode(ctx)
	case farm.FieldConstructionDate:
		return m.OldConstructionDate(ctx)
	case farm.FieldFeedingScale:
		return m.OldFeedingScale(ctx)
	case farm.FieldContactUser:
		return m.OldContactUser(ctx)
	case farm.FieldContactPhone:
		return m.OldContactPhone(ctx)
	case farm.FieldContactAddress:
		return m.OldContactAddress(ctx)
	case farm.FieldSquare:
		return m.OldSquare(ctx)
	case farm.FieldShedCount:
		return m.OldShedCount(ctx)
	case farm.FieldCategoryId:
		return m.OldCategoryId(ctx)
	case farm.FieldCategoryName:
		return m.OldCategoryName(ctx)
	case farm.FieldVarietyId:
		return m.OldVarietyId(ctx)
	case farm.FieldVarietyName:
		return m.OldVarietyName(ctx)
	case farm.FieldDistrictCode:
		return m.OldDistrictCode(ctx)
	case farm.FieldDistrictName:
		return m.OldDistrictName(ctx)
	case farm.FieldRemarks:
		return m.OldRemarks(ctx)
	case farm.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case farm.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case farm.FieldDeleted:
		return m.OldDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown Farm field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FarmMutation) SetField(name string, value ent.Value) error {
	switch name {
	case farm.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case farm.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case farm.FieldConstructionDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConstructionDate(v)
		return nil
	case farm.FieldFeedingScale:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedingScale(v)
		return nil
	case farm.FieldContactUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactUser(v)
		return nil
	case farm.FieldContactPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactPhone(v)
		return nil
	case farm.FieldContactAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactAddress(v)
		return nil
	case farm.FieldSquare:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSquare(v)
		return nil
	case farm.FieldShedCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShedCount(v)
		return nil
	case farm.FieldCategoryId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryId(v)
		return nil
	case farm.FieldCategoryName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryName(v)
		return nil
	case farm.FieldVarietyId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVarietyId(v)
		return nil
	case farm.FieldVarietyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVarietyName(v)
		return nil
	case farm.FieldDistrictCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistrictCode(v)
		return nil
	case farm.FieldDistrictName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistrictName(v)
		return nil
	case farm.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case farm.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case farm.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case farm.FieldDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown Farm field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FarmMutation) AddedFields() []string {
	var fields []string
	if m.addfeedingScale != nil {
		fields = append(fields, farm.FieldFeedingScale)
	}
	if m.addsquare != nil {
		fields = append(fields, farm.FieldSquare)
	}
	if m.addshedCount != nil {
		fields = append(fields, farm.FieldShedCount)
	}
	if m.addcategoryId != nil {
		fields = append(fields, farm.FieldCategoryId)
	}
	if m.addvarietyId != nil {
		fields = append(fields, farm.FieldVarietyId)
	}
	if m.addcreatedAt != nil {
		fields = append(fields, farm.FieldCreatedAt)
	}
	if m.addupdatedAt != nil {
		fields = append(fields, farm.FieldUpdatedAt)
	}
	if m.adddeleted != nil {
		fields = append(fields, farm.FieldDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FarmMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case farm.FieldFeedingScale:
		return m.AddedFeedingScale()
	case farm.FieldSquare:
		return m.AddedSquare()
	case farm.FieldShedCount:
		return m.AddedShedCount()
	case farm.FieldCategoryId:
		return m.AddedCategoryId()
	case farm.FieldVarietyId:
		return m.AddedVarietyId()
	case farm.FieldCreatedAt:
		return m.AddedCreatedAt()
	case farm.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case farm.FieldDeleted:
		return m.AddedDeleted()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FarmMutation) AddField(name string, value ent.Value) error {
	switch name {
	case farm.FieldFeedingScale:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFeedingScale(v)
		return nil
	case farm.FieldSquare:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSquare(v)
		return nil
	case farm.FieldShedCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShedCount(v)
		return nil
	case farm.FieldCategoryId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategoryId(v)
		return nil
	case farm.FieldVarietyId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVarietyId(v)
		return nil
	case farm.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case farm.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case farm.FieldDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown Farm numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FarmMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FarmMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FarmMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Farm nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FarmMutation) ResetField(name string) error {
	switch name {
	case farm.FieldName:
		m.ResetName()
		return nil
	case farm.FieldCode:
		m.ResetCode()
		return nil
	case farm.FieldConstructionDate:
		m.ResetConstructionDate()
		return nil
	case farm.FieldFeedingScale:
		m.ResetFeedingScale()
		return nil
	case farm.FieldContactUser:
		m.ResetContactUser()
		return nil
	case farm.FieldContactPhone:
		m.ResetContactPhone()
		return nil
	case farm.FieldContactAddress:
		m.ResetContactAddress()
		return nil
	case farm.FieldSquare:
		m.ResetSquare()
		return nil
	case farm.FieldShedCount:
		m.ResetShedCount()
		return nil
	case farm.FieldCategoryId:
		m.ResetCategoryId()
		return nil
	case farm.FieldCategoryName:
		m.ResetCategoryName()
		return nil
	case farm.FieldVarietyId:
		m.ResetVarietyId()
		return nil
	case farm.FieldVarietyName:
		m.ResetVarietyName()
		return nil
	case farm.FieldDistrictCode:
		m.ResetDistrictCode()
		return nil
	case farm.FieldDistrictName:
		m.ResetDistrictName()
		return nil
	case farm.FieldRemarks:
		m.ResetRemarks()
		return nil
	case farm.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case farm.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case farm.FieldDeleted:
		m.ResetDeleted()
		return nil
	}
	return fmt.Errorf("unknown Farm field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FarmMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FarmMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FarmMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FarmMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FarmMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FarmMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FarmMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Farm unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FarmMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Farm edge %s", name)
}

// HairStateMutation represents an operation that mutate the HairStates
// nodes in the graph.
type HairStateMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*HairState, error)
}

var _ ent.Mutation = (*HairStateMutation)(nil)

// hairstateOption allows to manage the mutation configuration using functional options.
type hairstateOption func(*HairStateMutation)

// newHairStateMutation creates new mutation for $n.Name.
func newHairStateMutation(c config, op Op, opts ...hairstateOption) *HairStateMutation {
	m := &HairStateMutation{
		config:        c,
		op:            op,
		typ:           TypeHairState,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHairStateID sets the id field of the mutation.
func withHairStateID(id int64) hairstateOption {
	return func(m *HairStateMutation) {
		var (
			err   error
			once  sync.Once
			value *HairState
		)
		m.oldValue = func(ctx context.Context) (*HairState, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HairState.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHairState sets the old HairState of the mutation.
func withHairState(node *HairState) hairstateOption {
	return func(m *HairStateMutation) {
		m.oldValue = func(context.Context) (*HairState, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HairStateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HairStateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *HairStateMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *HairStateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *HairStateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the HairState.
// If the HairState object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *HairStateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *HairStateMutation) ResetName() {
	m.name = nil
}

// Op returns the operation name.
func (m *HairStateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (HairState).
func (m *HairStateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *HairStateMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, hairstate.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *HairStateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hairstate.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *HairStateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hairstate.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown HairState field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *HairStateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hairstate.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown HairState field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *HairStateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *HairStateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *HairStateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown HairState numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *HairStateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *HairStateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *HairStateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HairState nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *HairStateMutation) ResetField(name string) error {
	switch name {
	case hairstate.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown HairState field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *HairStateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *HairStateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *HairStateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *HairStateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *HairStateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *HairStateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *HairStateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HairState unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *HairStateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HairState edge %s", name)
}

// PositionMutation represents an operation that mutate the Positions
// nodes in the graph.
type PositionMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Position, error)
}

var _ ent.Mutation = (*PositionMutation)(nil)

// positionOption allows to manage the mutation configuration using functional options.
type positionOption func(*PositionMutation)

// newPositionMutation creates new mutation for $n.Name.
func newPositionMutation(c config, op Op, opts ...positionOption) *PositionMutation {
	m := &PositionMutation{
		config:        c,
		op:            op,
		typ:           TypePosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPositionID sets the id field of the mutation.
func withPositionID(id int64) positionOption {
	return func(m *PositionMutation) {
		var (
			err   error
			once  sync.Once
			value *Position
		)
		m.oldValue = func(ctx context.Context) (*Position, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Position.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPosition sets the old Position of the mutation.
func withPosition(node *Position) positionOption {
	return func(m *PositionMutation) {
		m.oldValue = func(context.Context) (*Position, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PositionMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *PositionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *PositionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Position.
// If the Position object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PositionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *PositionMutation) ResetName() {
	m.name = nil
}

// Op returns the operation name.
func (m *PositionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Position).
func (m *PositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PositionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, position.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case position.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case position.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Position field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case position.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PositionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PositionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Position numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PositionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PositionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Position nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PositionMutation) ResetField(name string) error {
	switch name {
	case position.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PositionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PositionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PositionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PositionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Position unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PositionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Position edge %s", name)
}

// ShedMutation represents an operation that mutate the Sheds
// nodes in the graph.
type ShedMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	farmId        *int64
	addfarmId     *int64
	farmName      *string
	name          *string
	shedCateId    *int64
	addshedCateId *int64
	shedCateName  *string
	shedTypeId    *int
	addshedTypeId *int
	shedTypeName  *string
	square        *int64
	addsquare     *int64
	length        *int64
	addlength     *int64
	width         *int64
	addwidth      *int64
	height        *int64
	addheight     *int64
	remarks       *string
	userId        *int
	adduserId     *int
	userName      *string
	createdAt     *int64
	addcreatedAt  *int64
	updatedAt     *int64
	addupdatedAt  *int64
	deleted       *int
	adddeleted    *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Shed, error)
}

var _ ent.Mutation = (*ShedMutation)(nil)

// shedOption allows to manage the mutation configuration using functional options.
type shedOption func(*ShedMutation)

// newShedMutation creates new mutation for $n.Name.
func newShedMutation(c config, op Op, opts ...shedOption) *ShedMutation {
	m := &ShedMutation{
		config:        c,
		op:            op,
		typ:           TypeShed,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShedID sets the id field of the mutation.
func withShedID(id int64) shedOption {
	return func(m *ShedMutation) {
		var (
			err   error
			once  sync.Once
			value *Shed
		)
		m.oldValue = func(ctx context.Context) (*Shed, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shed.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShed sets the old Shed of the mutation.
func withShed(node *Shed) shedOption {
	return func(m *ShedMutation) {
		m.oldValue = func(context.Context) (*Shed, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ShedMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFarmId sets the farmId field.
func (m *ShedMutation) SetFarmId(i int64) {
	m.farmId = &i
	m.addfarmId = nil
}

// FarmId returns the farmId value in the mutation.
func (m *ShedMutation) FarmId() (r int64, exists bool) {
	v := m.farmId
	if v == nil {
		return
	}
	return *v, true
}

// OldFarmId returns the old farmId value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldFarmId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFarmId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFarmId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFarmId: %w", err)
	}
	return oldValue.FarmId, nil
}

// AddFarmId adds i to farmId.
func (m *ShedMutation) AddFarmId(i int64) {
	if m.addfarmId != nil {
		*m.addfarmId += i
	} else {
		m.addfarmId = &i
	}
}

// AddedFarmId returns the value that was added to the farmId field in this mutation.
func (m *ShedMutation) AddedFarmId() (r int64, exists bool) {
	v := m.addfarmId
	if v == nil {
		return
	}
	return *v, true
}

// ResetFarmId reset all changes of the "farmId" field.
func (m *ShedMutation) ResetFarmId() {
	m.farmId = nil
	m.addfarmId = nil
}

// SetFarmName sets the farmName field.
func (m *ShedMutation) SetFarmName(s string) {
	m.farmName = &s
}

// FarmName returns the farmName value in the mutation.
func (m *ShedMutation) FarmName() (r string, exists bool) {
	v := m.farmName
	if v == nil {
		return
	}
	return *v, true
}

// OldFarmName returns the old farmName value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldFarmName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFarmName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFarmName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFarmName: %w", err)
	}
	return oldValue.FarmName, nil
}

// ResetFarmName reset all changes of the "farmName" field.
func (m *ShedMutation) ResetFarmName() {
	m.farmName = nil
}

// SetName sets the name field.
func (m *ShedMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ShedMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ShedMutation) ResetName() {
	m.name = nil
}

// SetShedCateId sets the shedCateId field.
func (m *ShedMutation) SetShedCateId(i int64) {
	m.shedCateId = &i
	m.addshedCateId = nil
}

// ShedCateId returns the shedCateId value in the mutation.
func (m *ShedMutation) ShedCateId() (r int64, exists bool) {
	v := m.shedCateId
	if v == nil {
		return
	}
	return *v, true
}

// OldShedCateId returns the old shedCateId value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldShedCateId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShedCateId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShedCateId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShedCateId: %w", err)
	}
	return oldValue.ShedCateId, nil
}

// AddShedCateId adds i to shedCateId.
func (m *ShedMutation) AddShedCateId(i int64) {
	if m.addshedCateId != nil {
		*m.addshedCateId += i
	} else {
		m.addshedCateId = &i
	}
}

// AddedShedCateId returns the value that was added to the shedCateId field in this mutation.
func (m *ShedMutation) AddedShedCateId() (r int64, exists bool) {
	v := m.addshedCateId
	if v == nil {
		return
	}
	return *v, true
}

// ResetShedCateId reset all changes of the "shedCateId" field.
func (m *ShedMutation) ResetShedCateId() {
	m.shedCateId = nil
	m.addshedCateId = nil
}

// SetShedCateName sets the shedCateName field.
func (m *ShedMutation) SetShedCateName(s string) {
	m.shedCateName = &s
}

// ShedCateName returns the shedCateName value in the mutation.
func (m *ShedMutation) ShedCateName() (r string, exists bool) {
	v := m.shedCateName
	if v == nil {
		return
	}
	return *v, true
}

// OldShedCateName returns the old shedCateName value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldShedCateName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShedCateName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShedCateName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShedCateName: %w", err)
	}
	return oldValue.ShedCateName, nil
}

// ResetShedCateName reset all changes of the "shedCateName" field.
func (m *ShedMutation) ResetShedCateName() {
	m.shedCateName = nil
}

// SetShedTypeId sets the shedTypeId field.
func (m *ShedMutation) SetShedTypeId(i int) {
	m.shedTypeId = &i
	m.addshedTypeId = nil
}

// ShedTypeId returns the shedTypeId value in the mutation.
func (m *ShedMutation) ShedTypeId() (r int, exists bool) {
	v := m.shedTypeId
	if v == nil {
		return
	}
	return *v, true
}

// OldShedTypeId returns the old shedTypeId value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldShedTypeId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShedTypeId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShedTypeId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShedTypeId: %w", err)
	}
	return oldValue.ShedTypeId, nil
}

// AddShedTypeId adds i to shedTypeId.
func (m *ShedMutation) AddShedTypeId(i int) {
	if m.addshedTypeId != nil {
		*m.addshedTypeId += i
	} else {
		m.addshedTypeId = &i
	}
}

// AddedShedTypeId returns the value that was added to the shedTypeId field in this mutation.
func (m *ShedMutation) AddedShedTypeId() (r int, exists bool) {
	v := m.addshedTypeId
	if v == nil {
		return
	}
	return *v, true
}

// ResetShedTypeId reset all changes of the "shedTypeId" field.
func (m *ShedMutation) ResetShedTypeId() {
	m.shedTypeId = nil
	m.addshedTypeId = nil
}

// SetShedTypeName sets the shedTypeName field.
func (m *ShedMutation) SetShedTypeName(s string) {
	m.shedTypeName = &s
}

// ShedTypeName returns the shedTypeName value in the mutation.
func (m *ShedMutation) ShedTypeName() (r string, exists bool) {
	v := m.shedTypeName
	if v == nil {
		return
	}
	return *v, true
}

// OldShedTypeName returns the old shedTypeName value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldShedTypeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShedTypeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShedTypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShedTypeName: %w", err)
	}
	return oldValue.ShedTypeName, nil
}

// ResetShedTypeName reset all changes of the "shedTypeName" field.
func (m *ShedMutation) ResetShedTypeName() {
	m.shedTypeName = nil
}

// SetSquare sets the square field.
func (m *ShedMutation) SetSquare(i int64) {
	m.square = &i
	m.addsquare = nil
}

// Square returns the square value in the mutation.
func (m *ShedMutation) Square() (r int64, exists bool) {
	v := m.square
	if v == nil {
		return
	}
	return *v, true
}

// OldSquare returns the old square value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldSquare(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSquare is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSquare requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSquare: %w", err)
	}
	return oldValue.Square, nil
}

// AddSquare adds i to square.
func (m *ShedMutation) AddSquare(i int64) {
	if m.addsquare != nil {
		*m.addsquare += i
	} else {
		m.addsquare = &i
	}
}

// AddedSquare returns the value that was added to the square field in this mutation.
func (m *ShedMutation) AddedSquare() (r int64, exists bool) {
	v := m.addsquare
	if v == nil {
		return
	}
	return *v, true
}

// ResetSquare reset all changes of the "square" field.
func (m *ShedMutation) ResetSquare() {
	m.square = nil
	m.addsquare = nil
}

// SetLength sets the length field.
func (m *ShedMutation) SetLength(i int64) {
	m.length = &i
	m.addlength = nil
}

// Length returns the length value in the mutation.
func (m *ShedMutation) Length() (r int64, exists bool) {
	v := m.length
	if v == nil {
		return
	}
	return *v, true
}

// OldLength returns the old length value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldLength(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLength is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLength: %w", err)
	}
	return oldValue.Length, nil
}

// AddLength adds i to length.
func (m *ShedMutation) AddLength(i int64) {
	if m.addlength != nil {
		*m.addlength += i
	} else {
		m.addlength = &i
	}
}

// AddedLength returns the value that was added to the length field in this mutation.
func (m *ShedMutation) AddedLength() (r int64, exists bool) {
	v := m.addlength
	if v == nil {
		return
	}
	return *v, true
}

// ResetLength reset all changes of the "length" field.
func (m *ShedMutation) ResetLength() {
	m.length = nil
	m.addlength = nil
}

// SetWidth sets the width field.
func (m *ShedMutation) SetWidth(i int64) {
	m.width = &i
	m.addwidth = nil
}

// Width returns the width value in the mutation.
func (m *ShedMutation) Width() (r int64, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old width value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldWidth(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWidth is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// AddWidth adds i to width.
func (m *ShedMutation) AddWidth(i int64) {
	if m.addwidth != nil {
		*m.addwidth += i
	} else {
		m.addwidth = &i
	}
}

// AddedWidth returns the value that was added to the width field in this mutation.
func (m *ShedMutation) AddedWidth() (r int64, exists bool) {
	v := m.addwidth
	if v == nil {
		return
	}
	return *v, true
}

// ResetWidth reset all changes of the "width" field.
func (m *ShedMutation) ResetWidth() {
	m.width = nil
	m.addwidth = nil
}

// SetHeight sets the height field.
func (m *ShedMutation) SetHeight(i int64) {
	m.height = &i
	m.addheight = nil
}

// Height returns the height value in the mutation.
func (m *ShedMutation) Height() (r int64, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old height value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldHeight(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHeight is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to height.
func (m *ShedMutation) AddHeight(i int64) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the height field in this mutation.
func (m *ShedMutation) AddedHeight() (r int64, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight reset all changes of the "height" field.
func (m *ShedMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetRemarks sets the remarks field.
func (m *ShedMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the remarks value in the mutation.
func (m *ShedMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old remarks value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemarks is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ResetRemarks reset all changes of the "remarks" field.
func (m *ShedMutation) ResetRemarks() {
	m.remarks = nil
}

// SetUserId sets the userId field.
func (m *ShedMutation) SetUserId(i int) {
	m.userId = &i
	m.adduserId = nil
}

// UserId returns the userId value in the mutation.
func (m *ShedMutation) UserId() (r int, exists bool) {
	v := m.userId
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old userId value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldUserId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// AddUserId adds i to userId.
func (m *ShedMutation) AddUserId(i int) {
	if m.adduserId != nil {
		*m.adduserId += i
	} else {
		m.adduserId = &i
	}
}

// AddedUserId returns the value that was added to the userId field in this mutation.
func (m *ShedMutation) AddedUserId() (r int, exists bool) {
	v := m.adduserId
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserId reset all changes of the "userId" field.
func (m *ShedMutation) ResetUserId() {
	m.userId = nil
	m.adduserId = nil
}

// SetUserName sets the userName field.
func (m *ShedMutation) SetUserName(s string) {
	m.userName = &s
}

// UserName returns the userName value in the mutation.
func (m *ShedMutation) UserName() (r string, exists bool) {
	v := m.userName
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old userName value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName reset all changes of the "userName" field.
func (m *ShedMutation) ResetUserName() {
	m.userName = nil
}

// SetCreatedAt sets the createdAt field.
func (m *ShedMutation) SetCreatedAt(i int64) {
	m.createdAt = &i
	m.addcreatedAt = nil
}

// CreatedAt returns the createdAt value in the mutation.
func (m *ShedMutation) CreatedAt() (r int64, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to createdAt.
func (m *ShedMutation) AddCreatedAt(i int64) {
	if m.addcreatedAt != nil {
		*m.addcreatedAt += i
	} else {
		m.addcreatedAt = &i
	}
}

// AddedCreatedAt returns the value that was added to the createdAt field in this mutation.
func (m *ShedMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *ShedMutation) ResetCreatedAt() {
	m.createdAt = nil
	m.addcreatedAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *ShedMutation) SetUpdatedAt(i int64) {
	m.updatedAt = &i
	m.addupdatedAt = nil
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *ShedMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to updatedAt.
func (m *ShedMutation) AddUpdatedAt(i int64) {
	if m.addupdatedAt != nil {
		*m.addupdatedAt += i
	} else {
		m.addupdatedAt = &i
	}
}

// AddedUpdatedAt returns the value that was added to the updatedAt field in this mutation.
func (m *ShedMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *ShedMutation) ResetUpdatedAt() {
	m.updatedAt = nil
	m.addupdatedAt = nil
}

// SetDeleted sets the deleted field.
func (m *ShedMutation) SetDeleted(i int) {
	m.deleted = &i
	m.adddeleted = nil
}

// Deleted returns the deleted value in the mutation.
func (m *ShedMutation) Deleted() (r int, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old deleted value of the Shed.
// If the Shed object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedMutation) OldDeleted(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleted is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// AddDeleted adds i to deleted.
func (m *ShedMutation) AddDeleted(i int) {
	if m.adddeleted != nil {
		*m.adddeleted += i
	} else {
		m.adddeleted = &i
	}
}

// AddedDeleted returns the value that was added to the deleted field in this mutation.
func (m *ShedMutation) AddedDeleted() (r int, exists bool) {
	v := m.adddeleted
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleted reset all changes of the "deleted" field.
func (m *ShedMutation) ResetDeleted() {
	m.deleted = nil
	m.adddeleted = nil
}

// Op returns the operation name.
func (m *ShedMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Shed).
func (m *ShedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ShedMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.farmId != nil {
		fields = append(fields, shed.FieldFarmId)
	}
	if m.farmName != nil {
		fields = append(fields, shed.FieldFarmName)
	}
	if m.name != nil {
		fields = append(fields, shed.FieldName)
	}
	if m.shedCateId != nil {
		fields = append(fields, shed.FieldShedCateId)
	}
	if m.shedCateName != nil {
		fields = append(fields, shed.FieldShedCateName)
	}
	if m.shedTypeId != nil {
		fields = append(fields, shed.FieldShedTypeId)
	}
	if m.shedTypeName != nil {
		fields = append(fields, shed.FieldShedTypeName)
	}
	if m.square != nil {
		fields = append(fields, shed.FieldSquare)
	}
	if m.length != nil {
		fields = append(fields, shed.FieldLength)
	}
	if m.width != nil {
		fields = append(fields, shed.FieldWidth)
	}
	if m.height != nil {
		fields = append(fields, shed.FieldHeight)
	}
	if m.remarks != nil {
		fields = append(fields, shed.FieldRemarks)
	}
	if m.userId != nil {
		fields = append(fields, shed.FieldUserId)
	}
	if m.userName != nil {
		fields = append(fields, shed.FieldUserName)
	}
	if m.createdAt != nil {
		fields = append(fields, shed.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, shed.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, shed.FieldDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ShedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shed.FieldFarmId:
		return m.FarmId()
	case shed.FieldFarmName:
		return m.FarmName()
	case shed.FieldName:
		return m.Name()
	case shed.FieldShedCateId:
		return m.ShedCateId()
	case shed.FieldShedCateName:
		return m.ShedCateName()
	case shed.FieldShedTypeId:
		return m.ShedTypeId()
	case shed.FieldShedTypeName:
		return m.ShedTypeName()
	case shed.FieldSquare:
		return m.Square()
	case shed.FieldLength:
		return m.Length()
	case shed.FieldWidth:
		return m.Width()
	case shed.FieldHeight:
		return m.Height()
	case shed.FieldRemarks:
		return m.Remarks()
	case shed.FieldUserId:
		return m.UserId()
	case shed.FieldUserName:
		return m.UserName()
	case shed.FieldCreatedAt:
		return m.CreatedAt()
	case shed.FieldUpdatedAt:
		return m.UpdatedAt()
	case shed.FieldDeleted:
		return m.Deleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ShedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shed.FieldFarmId:
		return m.OldFarmId(ctx)
	case shed.FieldFarmName:
		return m.OldFarmName(ctx)
	case shed.FieldName:
		return m.OldName(ctx)
	case shed.FieldShedCateId:
		return m.OldShedCateId(ctx)
	case shed.FieldShedCateName:
		return m.OldShedCateName(ctx)
	case shed.FieldShedTypeId:
		return m.OldShedTypeId(ctx)
	case shed.FieldShedTypeName:
		return m.OldShedTypeName(ctx)
	case shed.FieldSquare:
		return m.OldSquare(ctx)
	case shed.FieldLength:
		return m.OldLength(ctx)
	case shed.FieldWidth:
		return m.OldWidth(ctx)
	case shed.FieldHeight:
		return m.OldHeight(ctx)
	case shed.FieldRemarks:
		return m.OldRemarks(ctx)
	case shed.FieldUserId:
		return m.OldUserId(ctx)
	case shed.FieldUserName:
		return m.OldUserName(ctx)
	case shed.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case shed.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case shed.FieldDeleted:
		return m.OldDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown Shed field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shed.FieldFarmId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFarmId(v)
		return nil
	case shed.FieldFarmName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFarmName(v)
		return nil
	case shed.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case shed.FieldShedCateId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShedCateId(v)
		return nil
	case shed.FieldShedCateName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShedCateName(v)
		return nil
	case shed.FieldShedTypeId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShedTypeId(v)
		return nil
	case shed.FieldShedTypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShedTypeName(v)
		return nil
	case shed.FieldSquare:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSquare(v)
		return nil
	case shed.FieldLength:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLength(v)
		return nil
	case shed.FieldWidth:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	case shed.FieldHeight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case shed.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case shed.FieldUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case shed.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case shed.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case shed.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case shed.FieldDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown Shed field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ShedMutation) AddedFields() []string {
	var fields []string
	if m.addfarmId != nil {
		fields = append(fields, shed.FieldFarmId)
	}
	if m.addshedCateId != nil {
		fields = append(fields, shed.FieldShedCateId)
	}
	if m.addshedTypeId != nil {
		fields = append(fields, shed.FieldShedTypeId)
	}
	if m.addsquare != nil {
		fields = append(fields, shed.FieldSquare)
	}
	if m.addlength != nil {
		fields = append(fields, shed.FieldLength)
	}
	if m.addwidth != nil {
		fields = append(fields, shed.FieldWidth)
	}
	if m.addheight != nil {
		fields = append(fields, shed.FieldHeight)
	}
	if m.adduserId != nil {
		fields = append(fields, shed.FieldUserId)
	}
	if m.addcreatedAt != nil {
		fields = append(fields, shed.FieldCreatedAt)
	}
	if m.addupdatedAt != nil {
		fields = append(fields, shed.FieldUpdatedAt)
	}
	if m.adddeleted != nil {
		fields = append(fields, shed.FieldDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ShedMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shed.FieldFarmId:
		return m.AddedFarmId()
	case shed.FieldShedCateId:
		return m.AddedShedCateId()
	case shed.FieldShedTypeId:
		return m.AddedShedTypeId()
	case shed.FieldSquare:
		return m.AddedSquare()
	case shed.FieldLength:
		return m.AddedLength()
	case shed.FieldWidth:
		return m.AddedWidth()
	case shed.FieldHeight:
		return m.AddedHeight()
	case shed.FieldUserId:
		return m.AddedUserId()
	case shed.FieldCreatedAt:
		return m.AddedCreatedAt()
	case shed.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case shed.FieldDeleted:
		return m.AddedDeleted()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShedMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shed.FieldFarmId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFarmId(v)
		return nil
	case shed.FieldShedCateId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShedCateId(v)
		return nil
	case shed.FieldShedTypeId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShedTypeId(v)
		return nil
	case shed.FieldSquare:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSquare(v)
		return nil
	case shed.FieldLength:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLength(v)
		return nil
	case shed.FieldWidth:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidth(v)
		return nil
	case shed.FieldHeight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case shed.FieldUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserId(v)
		return nil
	case shed.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case shed.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case shed.FieldDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown Shed numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ShedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ShedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Shed nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ShedMutation) ResetField(name string) error {
	switch name {
	case shed.FieldFarmId:
		m.ResetFarmId()
		return nil
	case shed.FieldFarmName:
		m.ResetFarmName()
		return nil
	case shed.FieldName:
		m.ResetName()
		return nil
	case shed.FieldShedCateId:
		m.ResetShedCateId()
		return nil
	case shed.FieldShedCateName:
		m.ResetShedCateName()
		return nil
	case shed.FieldShedTypeId:
		m.ResetShedTypeId()
		return nil
	case shed.FieldShedTypeName:
		m.ResetShedTypeName()
		return nil
	case shed.FieldSquare:
		m.ResetSquare()
		return nil
	case shed.FieldLength:
		m.ResetLength()
		return nil
	case shed.FieldWidth:
		m.ResetWidth()
		return nil
	case shed.FieldHeight:
		m.ResetHeight()
		return nil
	case shed.FieldRemarks:
		m.ResetRemarks()
		return nil
	case shed.FieldUserId:
		m.ResetUserId()
		return nil
	case shed.FieldUserName:
		m.ResetUserName()
		return nil
	case shed.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case shed.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case shed.FieldDeleted:
		m.ResetDeleted()
		return nil
	}
	return fmt.Errorf("unknown Shed field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ShedMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ShedMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ShedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ShedMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ShedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ShedMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ShedMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Shed unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ShedMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Shed edge %s", name)
}

// ShedCategoryMutation represents an operation that mutate the ShedCategories
// nodes in the graph.
type ShedCategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ShedCategory, error)
}

var _ ent.Mutation = (*ShedCategoryMutation)(nil)

// shedcategoryOption allows to manage the mutation configuration using functional options.
type shedcategoryOption func(*ShedCategoryMutation)

// newShedCategoryMutation creates new mutation for $n.Name.
func newShedCategoryMutation(c config, op Op, opts ...shedcategoryOption) *ShedCategoryMutation {
	m := &ShedCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeShedCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShedCategoryID sets the id field of the mutation.
func withShedCategoryID(id int64) shedcategoryOption {
	return func(m *ShedCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *ShedCategory
		)
		m.oldValue = func(ctx context.Context) (*ShedCategory, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShedCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShedCategory sets the old ShedCategory of the mutation.
func withShedCategory(node *ShedCategory) shedcategoryOption {
	return func(m *ShedCategoryMutation) {
		m.oldValue = func(context.Context) (*ShedCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShedCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShedCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ShedCategoryMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ShedCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ShedCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the ShedCategory.
// If the ShedCategory object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ShedCategoryMutation) ResetName() {
	m.name = nil
}

// Op returns the operation name.
func (m *ShedCategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ShedCategory).
func (m *ShedCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ShedCategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, shedcategory.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ShedCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shedcategory.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ShedCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shedcategory.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown ShedCategory field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShedCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shedcategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown ShedCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ShedCategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ShedCategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShedCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ShedCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ShedCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ShedCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShedCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShedCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ShedCategoryMutation) ResetField(name string) error {
	switch name {
	case shedcategory.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown ShedCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ShedCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ShedCategoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ShedCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ShedCategoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ShedCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ShedCategoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ShedCategoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ShedCategory unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ShedCategoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ShedCategory edge %s", name)
}

// ShedTypeMutation represents an operation that mutate the ShedTypes
// nodes in the graph.
type ShedTypeMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ShedType, error)
}

var _ ent.Mutation = (*ShedTypeMutation)(nil)

// shedtypeOption allows to manage the mutation configuration using functional options.
type shedtypeOption func(*ShedTypeMutation)

// newShedTypeMutation creates new mutation for $n.Name.
func newShedTypeMutation(c config, op Op, opts ...shedtypeOption) *ShedTypeMutation {
	m := &ShedTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeShedType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShedTypeID sets the id field of the mutation.
func withShedTypeID(id int64) shedtypeOption {
	return func(m *ShedTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *ShedType
		)
		m.oldValue = func(ctx context.Context) (*ShedType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShedType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShedType sets the old ShedType of the mutation.
func withShedType(node *ShedType) shedtypeOption {
	return func(m *ShedTypeMutation) {
		m.oldValue = func(context.Context) (*ShedType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShedTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShedTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ShedTypeMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ShedTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ShedTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the ShedType.
// If the ShedType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ShedTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ShedTypeMutation) ResetName() {
	m.name = nil
}

// Op returns the operation name.
func (m *ShedTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ShedType).
func (m *ShedTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ShedTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, shedtype.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ShedTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shedtype.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ShedTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shedtype.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown ShedType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShedTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shedtype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown ShedType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ShedTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ShedTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShedTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ShedType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ShedTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ShedTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShedTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShedType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ShedTypeMutation) ResetField(name string) error {
	switch name {
	case shedtype.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown ShedType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ShedTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ShedTypeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ShedTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ShedTypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ShedTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ShedTypeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ShedTypeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ShedType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ShedTypeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ShedType edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	farmId        *int64
	addfarmId     *int64
	farmName      *string
	positionId    *int64
	addpositionId *int64
	positionName  *string
	dutyName      *string
	name          *string
	gender        *int
	addgender     *int
	age           *int
	addage        *int
	education     *string
	major         *string
	jobTitle      *string
	phone         *string
	idCard        *string
	address       *string
	onJobState    *int
	addonJobState *int
	joinedAt      *int64
	addjoinedAt   *int64
	remarks       *string
	createdAt     *int64
	addcreatedAt  *int64
	updatedAt     *int64
	addupdatedAt  *int64
	deleted       *int
	adddeleted    *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFarmId sets the farmId field.
func (m *UserMutation) SetFarmId(i int64) {
	m.farmId = &i
	m.addfarmId = nil
}

// FarmId returns the farmId value in the mutation.
func (m *UserMutation) FarmId() (r int64, exists bool) {
	v := m.farmId
	if v == nil {
		return
	}
	return *v, true
}

// OldFarmId returns the old farmId value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldFarmId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFarmId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFarmId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFarmId: %w", err)
	}
	return oldValue.FarmId, nil
}

// AddFarmId adds i to farmId.
func (m *UserMutation) AddFarmId(i int64) {
	if m.addfarmId != nil {
		*m.addfarmId += i
	} else {
		m.addfarmId = &i
	}
}

// AddedFarmId returns the value that was added to the farmId field in this mutation.
func (m *UserMutation) AddedFarmId() (r int64, exists bool) {
	v := m.addfarmId
	if v == nil {
		return
	}
	return *v, true
}

// ResetFarmId reset all changes of the "farmId" field.
func (m *UserMutation) ResetFarmId() {
	m.farmId = nil
	m.addfarmId = nil
}

// SetFarmName sets the farmName field.
func (m *UserMutation) SetFarmName(s string) {
	m.farmName = &s
}

// FarmName returns the farmName value in the mutation.
func (m *UserMutation) FarmName() (r string, exists bool) {
	v := m.farmName
	if v == nil {
		return
	}
	return *v, true
}

// OldFarmName returns the old farmName value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldFarmName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFarmName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFarmName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFarmName: %w", err)
	}
	return oldValue.FarmName, nil
}

// ResetFarmName reset all changes of the "farmName" field.
func (m *UserMutation) ResetFarmName() {
	m.farmName = nil
}

// SetPositionId sets the positionId field.
func (m *UserMutation) SetPositionId(i int64) {
	m.positionId = &i
	m.addpositionId = nil
}

// PositionId returns the positionId value in the mutation.
func (m *UserMutation) PositionId() (r int64, exists bool) {
	v := m.positionId
	if v == nil {
		return
	}
	return *v, true
}

// OldPositionId returns the old positionId value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPositionId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPositionId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPositionId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPositionId: %w", err)
	}
	return oldValue.PositionId, nil
}

// AddPositionId adds i to positionId.
func (m *UserMutation) AddPositionId(i int64) {
	if m.addpositionId != nil {
		*m.addpositionId += i
	} else {
		m.addpositionId = &i
	}
}

// AddedPositionId returns the value that was added to the positionId field in this mutation.
func (m *UserMutation) AddedPositionId() (r int64, exists bool) {
	v := m.addpositionId
	if v == nil {
		return
	}
	return *v, true
}

// ResetPositionId reset all changes of the "positionId" field.
func (m *UserMutation) ResetPositionId() {
	m.positionId = nil
	m.addpositionId = nil
}

// SetPositionName sets the positionName field.
func (m *UserMutation) SetPositionName(s string) {
	m.positionName = &s
}

// PositionName returns the positionName value in the mutation.
func (m *UserMutation) PositionName() (r string, exists bool) {
	v := m.positionName
	if v == nil {
		return
	}
	return *v, true
}

// OldPositionName returns the old positionName value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPositionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPositionName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPositionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPositionName: %w", err)
	}
	return oldValue.PositionName, nil
}

// ResetPositionName reset all changes of the "positionName" field.
func (m *UserMutation) ResetPositionName() {
	m.positionName = nil
}

// SetDutyName sets the dutyName field.
func (m *UserMutation) SetDutyName(s string) {
	m.dutyName = &s
}

// DutyName returns the dutyName value in the mutation.
func (m *UserMutation) DutyName() (r string, exists bool) {
	v := m.dutyName
	if v == nil {
		return
	}
	return *v, true
}

// OldDutyName returns the old dutyName value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldDutyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDutyName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDutyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDutyName: %w", err)
	}
	return oldValue.DutyName, nil
}

// ResetDutyName reset all changes of the "dutyName" field.
func (m *UserMutation) ResetDutyName() {
	m.dutyName = nil
}

// SetName sets the name field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetGender sets the gender field.
func (m *UserMutation) SetGender(i int) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the gender value in the mutation.
func (m *UserMutation) Gender() (r int, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old gender value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to gender.
func (m *UserMutation) AddGender(i int) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the gender field in this mutation.
func (m *UserMutation) AddedGender() (r int, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ResetGender reset all changes of the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
}

// SetAge sets the age field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetEducation sets the education field.
func (m *UserMutation) SetEducation(s string) {
	m.education = &s
}

// Education returns the education value in the mutation.
func (m *UserMutation) Education() (r string, exists bool) {
	v := m.education
	if v == nil {
		return
	}
	return *v, true
}

// OldEducation returns the old education value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEducation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEducation is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEducation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEducation: %w", err)
	}
	return oldValue.Education, nil
}

// ResetEducation reset all changes of the "education" field.
func (m *UserMutation) ResetEducation() {
	m.education = nil
}

// SetMajor sets the major field.
func (m *UserMutation) SetMajor(s string) {
	m.major = &s
}

// Major returns the major value in the mutation.
func (m *UserMutation) Major() (r string, exists bool) {
	v := m.major
	if v == nil {
		return
	}
	return *v, true
}

// OldMajor returns the old major value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldMajor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMajor is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMajor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMajor: %w", err)
	}
	return oldValue.Major, nil
}

// ResetMajor reset all changes of the "major" field.
func (m *UserMutation) ResetMajor() {
	m.major = nil
}

// SetJobTitle sets the jobTitle field.
func (m *UserMutation) SetJobTitle(s string) {
	m.jobTitle = &s
}

// JobTitle returns the jobTitle value in the mutation.
func (m *UserMutation) JobTitle() (r string, exists bool) {
	v := m.jobTitle
	if v == nil {
		return
	}
	return *v, true
}

// OldJobTitle returns the old jobTitle value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldJobTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJobTitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJobTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobTitle: %w", err)
	}
	return oldValue.JobTitle, nil
}

// ResetJobTitle reset all changes of the "jobTitle" field.
func (m *UserMutation) ResetJobTitle() {
	m.jobTitle = nil
}

// SetPhone sets the phone field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the phone value in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old phone value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone reset all changes of the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// SetIdCard sets the idCard field.
func (m *UserMutation) SetIdCard(s string) {
	m.idCard = &s
}

// IdCard returns the idCard value in the mutation.
func (m *UserMutation) IdCard() (r string, exists bool) {
	v := m.idCard
	if v == nil {
		return
	}
	return *v, true
}

// OldIdCard returns the old idCard value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldIdCard(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdCard is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdCard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdCard: %w", err)
	}
	return oldValue.IdCard, nil
}

// ResetIdCard reset all changes of the "idCard" field.
func (m *UserMutation) ResetIdCard() {
	m.idCard = nil
}

// SetAddress sets the address field.
func (m *UserMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the address value in the mutation.
func (m *UserMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old address value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress reset all changes of the "address" field.
func (m *UserMutation) ResetAddress() {
	m.address = nil
}

// SetOnJobState sets the onJobState field.
func (m *UserMutation) SetOnJobState(i int) {
	m.onJobState = &i
	m.addonJobState = nil
}

// OnJobState returns the onJobState value in the mutation.
func (m *UserMutation) OnJobState() (r int, exists bool) {
	v := m.onJobState
	if v == nil {
		return
	}
	return *v, true
}

// OldOnJobState returns the old onJobState value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldOnJobState(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOnJobState is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOnJobState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnJobState: %w", err)
	}
	return oldValue.OnJobState, nil
}

// AddOnJobState adds i to onJobState.
func (m *UserMutation) AddOnJobState(i int) {
	if m.addonJobState != nil {
		*m.addonJobState += i
	} else {
		m.addonJobState = &i
	}
}

// AddedOnJobState returns the value that was added to the onJobState field in this mutation.
func (m *UserMutation) AddedOnJobState() (r int, exists bool) {
	v := m.addonJobState
	if v == nil {
		return
	}
	return *v, true
}

// ResetOnJobState reset all changes of the "onJobState" field.
func (m *UserMutation) ResetOnJobState() {
	m.onJobState = nil
	m.addonJobState = nil
}

// SetJoinedAt sets the joinedAt field.
func (m *UserMutation) SetJoinedAt(i int64) {
	m.joinedAt = &i
	m.addjoinedAt = nil
}

// JoinedAt returns the joinedAt value in the mutation.
func (m *UserMutation) JoinedAt() (r int64, exists bool) {
	v := m.joinedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinedAt returns the old joinedAt value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldJoinedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJoinedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJoinedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinedAt: %w", err)
	}
	return oldValue.JoinedAt, nil
}

// AddJoinedAt adds i to joinedAt.
func (m *UserMutation) AddJoinedAt(i int64) {
	if m.addjoinedAt != nil {
		*m.addjoinedAt += i
	} else {
		m.addjoinedAt = &i
	}
}

// AddedJoinedAt returns the value that was added to the joinedAt field in this mutation.
func (m *UserMutation) AddedJoinedAt() (r int64, exists bool) {
	v := m.addjoinedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetJoinedAt reset all changes of the "joinedAt" field.
func (m *UserMutation) ResetJoinedAt() {
	m.joinedAt = nil
	m.addjoinedAt = nil
}

// SetRemarks sets the remarks field.
func (m *UserMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the remarks value in the mutation.
func (m *UserMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old remarks value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemarks is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ResetRemarks reset all changes of the "remarks" field.
func (m *UserMutation) ResetRemarks() {
	m.remarks = nil
}

// SetCreatedAt sets the createdAt field.
func (m *UserMutation) SetCreatedAt(i int64) {
	m.createdAt = &i
	m.addcreatedAt = nil
}

// CreatedAt returns the createdAt value in the mutation.
func (m *UserMutation) CreatedAt() (r int64, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to createdAt.
func (m *UserMutation) AddCreatedAt(i int64) {
	if m.addcreatedAt != nil {
		*m.addcreatedAt += i
	} else {
		m.addcreatedAt = &i
	}
}

// AddedCreatedAt returns the value that was added to the createdAt field in this mutation.
func (m *UserMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *UserMutation) ResetCreatedAt() {
	m.createdAt = nil
	m.addcreatedAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *UserMutation) SetUpdatedAt(i int64) {
	m.updatedAt = &i
	m.addupdatedAt = nil
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *UserMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to updatedAt.
func (m *UserMutation) AddUpdatedAt(i int64) {
	if m.addupdatedAt != nil {
		*m.addupdatedAt += i
	} else {
		m.addupdatedAt = &i
	}
}

// AddedUpdatedAt returns the value that was added to the updatedAt field in this mutation.
func (m *UserMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updatedAt = nil
	m.addupdatedAt = nil
}

// SetDeleted sets the deleted field.
func (m *UserMutation) SetDeleted(i int) {
	m.deleted = &i
	m.adddeleted = nil
}

// Deleted returns the deleted value in the mutation.
func (m *UserMutation) Deleted() (r int, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old deleted value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldDeleted(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleted is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// AddDeleted adds i to deleted.
func (m *UserMutation) AddDeleted(i int) {
	if m.adddeleted != nil {
		*m.adddeleted += i
	} else {
		m.adddeleted = &i
	}
}

// AddedDeleted returns the value that was added to the deleted field in this mutation.
func (m *UserMutation) AddedDeleted() (r int, exists bool) {
	v := m.adddeleted
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleted reset all changes of the "deleted" field.
func (m *UserMutation) ResetDeleted() {
	m.deleted = nil
	m.adddeleted = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.farmId != nil {
		fields = append(fields, user.FieldFarmId)
	}
	if m.farmName != nil {
		fields = append(fields, user.FieldFarmName)
	}
	if m.positionId != nil {
		fields = append(fields, user.FieldPositionId)
	}
	if m.positionName != nil {
		fields = append(fields, user.FieldPositionName)
	}
	if m.dutyName != nil {
		fields = append(fields, user.FieldDutyName)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.education != nil {
		fields = append(fields, user.FieldEducation)
	}
	if m.major != nil {
		fields = append(fields, user.FieldMajor)
	}
	if m.jobTitle != nil {
		fields = append(fields, user.FieldJobTitle)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.idCard != nil {
		fields = append(fields, user.FieldIdCard)
	}
	if m.address != nil {
		fields = append(fields, user.FieldAddress)
	}
	if m.onJobState != nil {
		fields = append(fields, user.FieldOnJobState)
	}
	if m.joinedAt != nil {
		fields = append(fields, user.FieldJoinedAt)
	}
	if m.remarks != nil {
		fields = append(fields, user.FieldRemarks)
	}
	if m.createdAt != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, user.FieldDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFarmId:
		return m.FarmId()
	case user.FieldFarmName:
		return m.FarmName()
	case user.FieldPositionId:
		return m.PositionId()
	case user.FieldPositionName:
		return m.PositionName()
	case user.FieldDutyName:
		return m.DutyName()
	case user.FieldName:
		return m.Name()
	case user.FieldGender:
		return m.Gender()
	case user.FieldAge:
		return m.Age()
	case user.FieldEducation:
		return m.Education()
	case user.FieldMajor:
		return m.Major()
	case user.FieldJobTitle:
		return m.JobTitle()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldIdCard:
		return m.IdCard()
	case user.FieldAddress:
		return m.Address()
	case user.FieldOnJobState:
		return m.OnJobState()
	case user.FieldJoinedAt:
		return m.JoinedAt()
	case user.FieldRemarks:
		return m.Remarks()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeleted:
		return m.Deleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFarmId:
		return m.OldFarmId(ctx)
	case user.FieldFarmName:
		return m.OldFarmName(ctx)
	case user.FieldPositionId:
		return m.OldPositionId(ctx)
	case user.FieldPositionName:
		return m.OldPositionName(ctx)
	case user.FieldDutyName:
		return m.OldDutyName(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldEducation:
		return m.OldEducation(ctx)
	case user.FieldMajor:
		return m.OldMajor(ctx)
	case user.FieldJobTitle:
		return m.OldJobTitle(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldIdCard:
		return m.OldIdCard(ctx)
	case user.FieldAddress:
		return m.OldAddress(ctx)
	case user.FieldOnJobState:
		return m.OldOnJobState(ctx)
	case user.FieldJoinedAt:
		return m.OldJoinedAt(ctx)
	case user.FieldRemarks:
		return m.OldRemarks(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeleted:
		return m.OldDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFarmId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFarmId(v)
		return nil
	case user.FieldFarmName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFarmName(v)
		return nil
	case user.FieldPositionId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPositionId(v)
		return nil
	case user.FieldPositionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPositionName(v)
		return nil
	case user.FieldDutyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDutyName(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldEducation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEducation(v)
		return nil
	case user.FieldMajor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMajor(v)
		return nil
	case user.FieldJobTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobTitle(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldIdCard:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdCard(v)
		return nil
	case user.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case user.FieldOnJobState:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnJobState(v)
		return nil
	case user.FieldJoinedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinedAt(v)
		return nil
	case user.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addfarmId != nil {
		fields = append(fields, user.FieldFarmId)
	}
	if m.addpositionId != nil {
		fields = append(fields, user.FieldPositionId)
	}
	if m.addgender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.addonJobState != nil {
		fields = append(fields, user.FieldOnJobState)
	}
	if m.addjoinedAt != nil {
		fields = append(fields, user.FieldJoinedAt)
	}
	if m.addcreatedAt != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.addupdatedAt != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.adddeleted != nil {
		fields = append(fields, user.FieldDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFarmId:
		return m.AddedFarmId()
	case user.FieldPositionId:
		return m.AddedPositionId()
	case user.FieldGender:
		return m.AddedGender()
	case user.FieldAge:
		return m.AddedAge()
	case user.FieldOnJobState:
		return m.AddedOnJobState()
	case user.FieldJoinedAt:
		return m.AddedJoinedAt()
	case user.FieldCreatedAt:
		return m.AddedCreatedAt()
	case user.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case user.FieldDeleted:
		return m.AddedDeleted()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldFarmId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFarmId(v)
		return nil
	case user.FieldPositionId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPositionId(v)
		return nil
	case user.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case user.FieldOnJobState:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOnJobState(v)
		return nil
	case user.FieldJoinedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddJoinedAt(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case user.FieldDeleted:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFarmId:
		m.ResetFarmId()
		return nil
	case user.FieldFarmName:
		m.ResetFarmName()
		return nil
	case user.FieldPositionId:
		m.ResetPositionId()
		return nil
	case user.FieldPositionName:
		m.ResetPositionName()
		return nil
	case user.FieldDutyName:
		m.ResetDutyName()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldEducation:
		m.ResetEducation()
		return nil
	case user.FieldMajor:
		m.ResetMajor()
		return nil
	case user.FieldJobTitle:
		m.ResetJobTitle()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldIdCard:
		m.ResetIdCard()
		return nil
	case user.FieldAddress:
		m.ResetAddress()
		return nil
	case user.FieldOnJobState:
		m.ResetOnJobState()
		return nil
	case user.FieldJoinedAt:
		m.ResetJoinedAt()
		return nil
	case user.FieldRemarks:
		m.ResetRemarks()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeleted:
		m.ResetDeleted()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// WindDirectionMutation represents an operation that mutate the WindDirections
// nodes in the graph.
type WindDirectionMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*WindDirection, error)
}

var _ ent.Mutation = (*WindDirectionMutation)(nil)

// winddirectionOption allows to manage the mutation configuration using functional options.
type winddirectionOption func(*WindDirectionMutation)

// newWindDirectionMutation creates new mutation for $n.Name.
func newWindDirectionMutation(c config, op Op, opts ...winddirectionOption) *WindDirectionMutation {
	m := &WindDirectionMutation{
		config:        c,
		op:            op,
		typ:           TypeWindDirection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWindDirectionID sets the id field of the mutation.
func withWindDirectionID(id int64) winddirectionOption {
	return func(m *WindDirectionMutation) {
		var (
			err   error
			once  sync.Once
			value *WindDirection
		)
		m.oldValue = func(ctx context.Context) (*WindDirection, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WindDirection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWindDirection sets the old WindDirection of the mutation.
func withWindDirection(node *WindDirection) winddirectionOption {
	return func(m *WindDirectionMutation) {
		m.oldValue = func(context.Context) (*WindDirection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WindDirectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WindDirectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *WindDirectionMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *WindDirectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *WindDirectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the WindDirection.
// If the WindDirection object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WindDirectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *WindDirectionMutation) ResetName() {
	m.name = nil
}

// Op returns the operation name.
func (m *WindDirectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (WindDirection).
func (m *WindDirectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *WindDirectionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, winddirection.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *WindDirectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case winddirection.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *WindDirectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case winddirection.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown WindDirection field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *WindDirectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case winddirection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown WindDirection field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *WindDirectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *WindDirectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *WindDirectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WindDirection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *WindDirectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *WindDirectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *WindDirectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WindDirection nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *WindDirectionMutation) ResetField(name string) error {
	switch name {
	case winddirection.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown WindDirection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *WindDirectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *WindDirectionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *WindDirectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *WindDirectionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *WindDirectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *WindDirectionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *WindDirectionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown WindDirection unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *WindDirectionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown WindDirection edge %s", name)
}

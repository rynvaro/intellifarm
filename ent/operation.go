// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/operation"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Operation is the model entity for the Operation schema.
type Operation struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int64 `json:"userId,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// API holds the value of the "api" field.
	API string `json:"api,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operation) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // userId
		&sql.NullString{}, // userName
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullInt64{},  // farmId
		&sql.NullString{}, // farmName
		&sql.NullString{}, // api
		&sql.NullString{}, // ip
		&sql.NullString{}, // method
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operation fields.
func (o *Operation) assignValues(values ...interface{}) error {
	if m, n := len(values), len(operation.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field userId", values[0])
	} else if value.Valid {
		o.UserId = value.Int64
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[1])
	} else if value.Valid {
		o.UserName = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[2])
	} else if value.Valid {
		o.TenantId = value.Int64
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[3])
	} else if value.Valid {
		o.TenantName = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[4])
	} else if value.Valid {
		o.FarmId = value.Int64
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[5])
	} else if value.Valid {
		o.FarmName = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field api", values[6])
	} else if value.Valid {
		o.API = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ip", values[7])
	} else if value.Valid {
		o.IP = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field method", values[8])
	} else if value.Valid {
		o.Method = value.String
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[9])
	} else if value.Valid {
		o.CreatedAt = value.Int64
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[10])
	} else if value.Valid {
		o.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Operation.
// Note that, you need to call Operation.Unwrap() before calling this method, if this Operation
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operation) Update() *OperationUpdateOne {
	return (&OperationClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Operation) Unwrap() *Operation {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operation is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operation) String() string {
	var builder strings.Builder
	builder.WriteString("Operation(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", o.UserId))
	builder.WriteString(", userName=")
	builder.WriteString(o.UserName)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", o.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(o.TenantName)
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", o.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(o.FarmName)
	builder.WriteString(", api=")
	builder.WriteString(o.API)
	builder.WriteString(", ip=")
	builder.WriteString(o.IP)
	builder.WriteString(", method=")
	builder.WriteString(o.Method)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", o.CreatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", o.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Operations is a parsable slice of Operation.
type Operations []*Operation

func (o Operations) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}

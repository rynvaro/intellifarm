// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/operation"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Operation is the model entity for the Operation schema.
type Operation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int64 `json:"userId,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// API holds the value of the "api" field.
	API string `json:"api,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case operation.FieldID, operation.FieldUserId, operation.FieldTenantId, operation.FieldFarmId, operation.FieldCreatedAt, operation.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case operation.FieldUserName, operation.FieldTenantName, operation.FieldFarmName, operation.FieldAPI, operation.FieldIP, operation.FieldMethod:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Operation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operation fields.
func (o *Operation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case operation.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				o.UserId = value.Int64
			}
		case operation.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				o.UserName = value.String
			}
		case operation.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				o.TenantId = value.Int64
			}
		case operation.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				o.TenantName = value.String
			}
		case operation.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				o.FarmId = value.Int64
			}
		case operation.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				o.FarmName = value.String
			}
		case operation.FieldAPI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api", values[i])
			} else if value.Valid {
				o.API = value.String
			}
		case operation.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				o.IP = value.String
			}
		case operation.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				o.Method = value.String
			}
		case operation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Int64
			}
		case operation.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				o.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Operation.
// Note that you need to call Operation.Unwrap() before calling this method if this Operation
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operation) Update() *OperationUpdateOne {
	return (&OperationClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Operation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Operation) Unwrap() *Operation {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operation is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operation) String() string {
	var builder strings.Builder
	builder.WriteString("Operation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", o.UserId))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(o.UserName)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", o.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(o.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", o.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(o.FarmName)
	builder.WriteString(", ")
	builder.WriteString("api=")
	builder.WriteString(o.API)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(o.IP)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(o.Method)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", o.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", o.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Operations is a parsable slice of Operation.
type Operations []*Operation

func (o Operations) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}

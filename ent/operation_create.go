// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/operation"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// OperationCreate is the builder for creating a Operation entity.
type OperationCreate struct {
	config
	mutation *OperationMutation
	hooks    []Hook
}

// SetUserId sets the userId field.
func (oc *OperationCreate) SetUserId(i int64) *OperationCreate {
	oc.mutation.SetUserId(i)
	return oc
}

// SetUserName sets the userName field.
func (oc *OperationCreate) SetUserName(s string) *OperationCreate {
	oc.mutation.SetUserName(s)
	return oc
}

// SetTenantId sets the tenantId field.
func (oc *OperationCreate) SetTenantId(i int64) *OperationCreate {
	oc.mutation.SetTenantId(i)
	return oc
}

// SetTenantName sets the tenantName field.
func (oc *OperationCreate) SetTenantName(s string) *OperationCreate {
	oc.mutation.SetTenantName(s)
	return oc
}

// SetAPI sets the api field.
func (oc *OperationCreate) SetAPI(s string) *OperationCreate {
	oc.mutation.SetAPI(s)
	return oc
}

// SetIP sets the ip field.
func (oc *OperationCreate) SetIP(s string) *OperationCreate {
	oc.mutation.SetIP(s)
	return oc
}

// SetMethod sets the method field.
func (oc *OperationCreate) SetMethod(s string) *OperationCreate {
	oc.mutation.SetMethod(s)
	return oc
}

// SetCreatedAt sets the createdAt field.
func (oc *OperationCreate) SetCreatedAt(i int64) *OperationCreate {
	oc.mutation.SetCreatedAt(i)
	return oc
}

// SetDeleted sets the deleted field.
func (oc *OperationCreate) SetDeleted(i int) *OperationCreate {
	oc.mutation.SetDeleted(i)
	return oc
}

// Mutation returns the OperationMutation object of the builder.
func (oc *OperationCreate) Mutation() *OperationMutation {
	return oc.mutation
}

// Save creates the Operation in the database.
func (oc *OperationCreate) Save(ctx context.Context) (*Operation, error) {
	var (
		err  error
		node *Operation
	)
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OperationCreate) SaveX(ctx context.Context) *Operation {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (oc *OperationCreate) check() error {
	if _, ok := oc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New("ent: missing required field \"userId\"")}
	}
	if _, ok := oc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New("ent: missing required field \"userName\"")}
	}
	if _, ok := oc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := oc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := oc.mutation.API(); !ok {
		return &ValidationError{Name: "api", err: errors.New("ent: missing required field \"api\"")}
	}
	if _, ok := oc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New("ent: missing required field \"ip\"")}
	}
	if _, ok := oc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New("ent: missing required field \"method\"")}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := oc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (oc *OperationCreate) sqlSave(ctx context.Context) (*Operation, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (oc *OperationCreate) createSpec() (*Operation, *sqlgraph.CreateSpec) {
	var (
		_node = &Operation{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: operation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: operation.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldUserId,
		})
		_node.UserId = value
	}
	if value, ok := oc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := oc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := oc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := oc.mutation.API(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldAPI,
		})
		_node.API = value
	}
	if value, ok := oc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := oc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: operation.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// OperationCreateBulk is the builder for creating a bulk of Operation entities.
type OperationCreateBulk struct {
	config
	builders []*OperationCreate
}

// Save creates the Operation entities in the database.
func (ocb *OperationCreateBulk) Save(ctx context.Context) ([]*Operation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Operation, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ocb *OperationCreateBulk) SaveX(ctx context.Context) []*Operation {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

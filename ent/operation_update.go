// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/operation"
	"cattleai/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperationUpdate is the builder for updating Operation entities.
type OperationUpdate struct {
	config
	hooks    []Hook
	mutation *OperationMutation
}

// Where appends a list predicates to the OperationUpdate builder.
func (ou *OperationUpdate) Where(ps ...predicate.Operation) *OperationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUserId sets the "userId" field.
func (ou *OperationUpdate) SetUserId(i int64) *OperationUpdate {
	ou.mutation.ResetUserId()
	ou.mutation.SetUserId(i)
	return ou
}

// AddUserId adds i to the "userId" field.
func (ou *OperationUpdate) AddUserId(i int64) *OperationUpdate {
	ou.mutation.AddUserId(i)
	return ou
}

// SetUserName sets the "userName" field.
func (ou *OperationUpdate) SetUserName(s string) *OperationUpdate {
	ou.mutation.SetUserName(s)
	return ou
}

// SetTenantId sets the "tenantId" field.
func (ou *OperationUpdate) SetTenantId(i int64) *OperationUpdate {
	ou.mutation.ResetTenantId()
	ou.mutation.SetTenantId(i)
	return ou
}

// AddTenantId adds i to the "tenantId" field.
func (ou *OperationUpdate) AddTenantId(i int64) *OperationUpdate {
	ou.mutation.AddTenantId(i)
	return ou
}

// SetTenantName sets the "tenantName" field.
func (ou *OperationUpdate) SetTenantName(s string) *OperationUpdate {
	ou.mutation.SetTenantName(s)
	return ou
}

// SetFarmId sets the "farmId" field.
func (ou *OperationUpdate) SetFarmId(i int64) *OperationUpdate {
	ou.mutation.ResetFarmId()
	ou.mutation.SetFarmId(i)
	return ou
}

// AddFarmId adds i to the "farmId" field.
func (ou *OperationUpdate) AddFarmId(i int64) *OperationUpdate {
	ou.mutation.AddFarmId(i)
	return ou
}

// SetFarmName sets the "farmName" field.
func (ou *OperationUpdate) SetFarmName(s string) *OperationUpdate {
	ou.mutation.SetFarmName(s)
	return ou
}

// SetAPI sets the "api" field.
func (ou *OperationUpdate) SetAPI(s string) *OperationUpdate {
	ou.mutation.SetAPI(s)
	return ou
}

// SetIP sets the "ip" field.
func (ou *OperationUpdate) SetIP(s string) *OperationUpdate {
	ou.mutation.SetIP(s)
	return ou
}

// SetMethod sets the "method" field.
func (ou *OperationUpdate) SetMethod(s string) *OperationUpdate {
	ou.mutation.SetMethod(s)
	return ou
}

// SetCreatedAt sets the "createdAt" field.
func (ou *OperationUpdate) SetCreatedAt(i int64) *OperationUpdate {
	ou.mutation.ResetCreatedAt()
	ou.mutation.SetCreatedAt(i)
	return ou
}

// AddCreatedAt adds i to the "createdAt" field.
func (ou *OperationUpdate) AddCreatedAt(i int64) *OperationUpdate {
	ou.mutation.AddCreatedAt(i)
	return ou
}

// SetDeleted sets the "deleted" field.
func (ou *OperationUpdate) SetDeleted(i int) *OperationUpdate {
	ou.mutation.ResetDeleted()
	ou.mutation.SetDeleted(i)
	return ou
}

// AddDeleted adds i to the "deleted" field.
func (ou *OperationUpdate) AddDeleted(i int) *OperationUpdate {
	ou.mutation.AddDeleted(i)
	return ou
}

// Mutation returns the OperationMutation object of the builder.
func (ou *OperationUpdate) Mutation() *OperationMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OperationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operation.Table,
			Columns: operation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operation.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldUserId,
		})
	}
	if value, ok := ou.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldUserId,
		})
	}
	if value, ok := ou.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldUserName,
		})
	}
	if value, ok := ou.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldTenantId,
		})
	}
	if value, ok := ou.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldTenantId,
		})
	}
	if value, ok := ou.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldTenantName,
		})
	}
	if value, ok := ou.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldFarmId,
		})
	}
	if value, ok := ou.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldFarmId,
		})
	}
	if value, ok := ou.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldFarmName,
		})
	}
	if value, ok := ou.mutation.API(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldAPI,
		})
	}
	if value, ok := ou.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldIP,
		})
	}
	if value, ok := ou.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldMethod,
		})
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldCreatedAt,
		})
	}
	if value, ok := ou.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldCreatedAt,
		})
	}
	if value, ok := ou.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: operation.FieldDeleted,
		})
	}
	if value, ok := ou.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: operation.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OperationUpdateOne is the builder for updating a single Operation entity.
type OperationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperationMutation
}

// SetUserId sets the "userId" field.
func (ouo *OperationUpdateOne) SetUserId(i int64) *OperationUpdateOne {
	ouo.mutation.ResetUserId()
	ouo.mutation.SetUserId(i)
	return ouo
}

// AddUserId adds i to the "userId" field.
func (ouo *OperationUpdateOne) AddUserId(i int64) *OperationUpdateOne {
	ouo.mutation.AddUserId(i)
	return ouo
}

// SetUserName sets the "userName" field.
func (ouo *OperationUpdateOne) SetUserName(s string) *OperationUpdateOne {
	ouo.mutation.SetUserName(s)
	return ouo
}

// SetTenantId sets the "tenantId" field.
func (ouo *OperationUpdateOne) SetTenantId(i int64) *OperationUpdateOne {
	ouo.mutation.ResetTenantId()
	ouo.mutation.SetTenantId(i)
	return ouo
}

// AddTenantId adds i to the "tenantId" field.
func (ouo *OperationUpdateOne) AddTenantId(i int64) *OperationUpdateOne {
	ouo.mutation.AddTenantId(i)
	return ouo
}

// SetTenantName sets the "tenantName" field.
func (ouo *OperationUpdateOne) SetTenantName(s string) *OperationUpdateOne {
	ouo.mutation.SetTenantName(s)
	return ouo
}

// SetFarmId sets the "farmId" field.
func (ouo *OperationUpdateOne) SetFarmId(i int64) *OperationUpdateOne {
	ouo.mutation.ResetFarmId()
	ouo.mutation.SetFarmId(i)
	return ouo
}

// AddFarmId adds i to the "farmId" field.
func (ouo *OperationUpdateOne) AddFarmId(i int64) *OperationUpdateOne {
	ouo.mutation.AddFarmId(i)
	return ouo
}

// SetFarmName sets the "farmName" field.
func (ouo *OperationUpdateOne) SetFarmName(s string) *OperationUpdateOne {
	ouo.mutation.SetFarmName(s)
	return ouo
}

// SetAPI sets the "api" field.
func (ouo *OperationUpdateOne) SetAPI(s string) *OperationUpdateOne {
	ouo.mutation.SetAPI(s)
	return ouo
}

// SetIP sets the "ip" field.
func (ouo *OperationUpdateOne) SetIP(s string) *OperationUpdateOne {
	ouo.mutation.SetIP(s)
	return ouo
}

// SetMethod sets the "method" field.
func (ouo *OperationUpdateOne) SetMethod(s string) *OperationUpdateOne {
	ouo.mutation.SetMethod(s)
	return ouo
}

// SetCreatedAt sets the "createdAt" field.
func (ouo *OperationUpdateOne) SetCreatedAt(i int64) *OperationUpdateOne {
	ouo.mutation.ResetCreatedAt()
	ouo.mutation.SetCreatedAt(i)
	return ouo
}

// AddCreatedAt adds i to the "createdAt" field.
func (ouo *OperationUpdateOne) AddCreatedAt(i int64) *OperationUpdateOne {
	ouo.mutation.AddCreatedAt(i)
	return ouo
}

// SetDeleted sets the "deleted" field.
func (ouo *OperationUpdateOne) SetDeleted(i int) *OperationUpdateOne {
	ouo.mutation.ResetDeleted()
	ouo.mutation.SetDeleted(i)
	return ouo
}

// AddDeleted adds i to the "deleted" field.
func (ouo *OperationUpdateOne) AddDeleted(i int) *OperationUpdateOne {
	ouo.mutation.AddDeleted(i)
	return ouo
}

// Mutation returns the OperationMutation object of the builder.
func (ouo *OperationUpdateOne) Mutation() *OperationMutation {
	return ouo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperationUpdateOne) Select(field string, fields ...string) *OperationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operation entity.
func (ouo *OperationUpdateOne) Save(ctx context.Context) (*Operation, error) {
	var (
		err  error
		node *Operation
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Operation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OperationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperationUpdateOne) SaveX(ctx context.Context) *Operation {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OperationUpdateOne) sqlSave(ctx context.Context) (_node *Operation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operation.Table,
			Columns: operation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operation.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operation.FieldID)
		for _, f := range fields {
			if !operation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldUserId,
		})
	}
	if value, ok := ouo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldUserId,
		})
	}
	if value, ok := ouo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldUserName,
		})
	}
	if value, ok := ouo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldTenantId,
		})
	}
	if value, ok := ouo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldTenantId,
		})
	}
	if value, ok := ouo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldTenantName,
		})
	}
	if value, ok := ouo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldFarmId,
		})
	}
	if value, ok := ouo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldFarmId,
		})
	}
	if value, ok := ouo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldFarmName,
		})
	}
	if value, ok := ouo.mutation.API(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldAPI,
		})
	}
	if value, ok := ouo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldIP,
		})
	}
	if value, ok := ouo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operation.FieldMethod,
		})
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldCreatedAt,
		})
	}
	if value, ok := ouo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: operation.FieldCreatedAt,
		})
	}
	if value, ok := ouo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: operation.FieldDeleted,
		})
	}
	if value, ok := ouo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: operation.FieldDeleted,
		})
	}
	_node = &Operation{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

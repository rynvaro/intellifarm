// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/positionapi"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// PositionApi is the model entity for the PositionApi schema.
type PositionApi struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// PositionId holds the value of the "positionId" field.
	PositionId int64 `json:"positionId,omitempty"`
	// Apis holds the value of the "apis" field.
	Apis string `json:"apis,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PositionApi) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // positionId
		&sql.NullString{}, // apis
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PositionApi fields.
func (pa *PositionApi) assignValues(values ...interface{}) error {
	if m, n := len(values), len(positionapi.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field positionId", values[0])
	} else if value.Valid {
		pa.PositionId = value.Int64
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field apis", values[1])
	} else if value.Valid {
		pa.Apis = value.String
	}
	return nil
}

// Update returns a builder for updating this PositionApi.
// Note that, you need to call PositionApi.Unwrap() before calling this method, if this PositionApi
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PositionApi) Update() *PositionApiUpdateOne {
	return (&PositionApiClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *PositionApi) Unwrap() *PositionApi {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PositionApi is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PositionApi) String() string {
	var builder strings.Builder
	builder.WriteString("PositionApi(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", positionId=")
	builder.WriteString(fmt.Sprintf("%v", pa.PositionId))
	builder.WriteString(", apis=")
	builder.WriteString(pa.Apis)
	builder.WriteByte(')')
	return builder.String()
}

// PositionApis is a parsable slice of PositionApi.
type PositionApis []*PositionApi

func (pa PositionApis) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}

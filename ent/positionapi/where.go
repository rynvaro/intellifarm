// Code generated by ent, DO NOT EDIT.

package positionapi

import (
	"cattleai/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PositionId applies equality check predicate on the "positionId" field. It's identical to PositionIdEQ.
func PositionId(v int64) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionId), v))
	})
}

// Apis applies equality check predicate on the "apis" field. It's identical to ApisEQ.
func Apis(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApis), v))
	})
}

// PositionIdEQ applies the EQ predicate on the "positionId" field.
func PositionIdEQ(v int64) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionId), v))
	})
}

// PositionIdNEQ applies the NEQ predicate on the "positionId" field.
func PositionIdNEQ(v int64) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPositionId), v))
	})
}

// PositionIdIn applies the In predicate on the "positionId" field.
func PositionIdIn(vs ...int64) predicate.PositionApi {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPositionId), v...))
	})
}

// PositionIdNotIn applies the NotIn predicate on the "positionId" field.
func PositionIdNotIn(vs ...int64) predicate.PositionApi {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPositionId), v...))
	})
}

// PositionIdGT applies the GT predicate on the "positionId" field.
func PositionIdGT(v int64) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPositionId), v))
	})
}

// PositionIdGTE applies the GTE predicate on the "positionId" field.
func PositionIdGTE(v int64) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPositionId), v))
	})
}

// PositionIdLT applies the LT predicate on the "positionId" field.
func PositionIdLT(v int64) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPositionId), v))
	})
}

// PositionIdLTE applies the LTE predicate on the "positionId" field.
func PositionIdLTE(v int64) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPositionId), v))
	})
}

// ApisEQ applies the EQ predicate on the "apis" field.
func ApisEQ(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApis), v))
	})
}

// ApisNEQ applies the NEQ predicate on the "apis" field.
func ApisNEQ(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApis), v))
	})
}

// ApisIn applies the In predicate on the "apis" field.
func ApisIn(vs ...string) predicate.PositionApi {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldApis), v...))
	})
}

// ApisNotIn applies the NotIn predicate on the "apis" field.
func ApisNotIn(vs ...string) predicate.PositionApi {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldApis), v...))
	})
}

// ApisGT applies the GT predicate on the "apis" field.
func ApisGT(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApis), v))
	})
}

// ApisGTE applies the GTE predicate on the "apis" field.
func ApisGTE(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApis), v))
	})
}

// ApisLT applies the LT predicate on the "apis" field.
func ApisLT(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApis), v))
	})
}

// ApisLTE applies the LTE predicate on the "apis" field.
func ApisLTE(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApis), v))
	})
}

// ApisContains applies the Contains predicate on the "apis" field.
func ApisContains(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldApis), v))
	})
}

// ApisHasPrefix applies the HasPrefix predicate on the "apis" field.
func ApisHasPrefix(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldApis), v))
	})
}

// ApisHasSuffix applies the HasSuffix predicate on the "apis" field.
func ApisHasSuffix(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldApis), v))
	})
}

// ApisEqualFold applies the EqualFold predicate on the "apis" field.
func ApisEqualFold(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldApis), v))
	})
}

// ApisContainsFold applies the ContainsFold predicate on the "apis" field.
func ApisContainsFold(v string) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldApis), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PositionApi) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PositionApi) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PositionApi) predicate.PositionApi {
	return predicate.PositionApi(func(s *sql.Selector) {
		p(s.Not())
	})
}

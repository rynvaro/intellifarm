// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/positionapi"
	"cattleai/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// PositionApiUpdate is the builder for updating PositionApi entities.
type PositionApiUpdate struct {
	config
	hooks      []Hook
	mutation   *PositionApiMutation
	predicates []predicate.PositionApi
}

// Where adds a new predicate for the builder.
func (pau *PositionApiUpdate) Where(ps ...predicate.PositionApi) *PositionApiUpdate {
	pau.predicates = append(pau.predicates, ps...)
	return pau
}

// SetPositionId sets the positionId field.
func (pau *PositionApiUpdate) SetPositionId(i int64) *PositionApiUpdate {
	pau.mutation.ResetPositionId()
	pau.mutation.SetPositionId(i)
	return pau
}

// AddPositionId adds i to positionId.
func (pau *PositionApiUpdate) AddPositionId(i int64) *PositionApiUpdate {
	pau.mutation.AddPositionId(i)
	return pau
}

// SetApis sets the apis field.
func (pau *PositionApiUpdate) SetApis(s string) *PositionApiUpdate {
	pau.mutation.SetApis(s)
	return pau
}

// Mutation returns the PositionApiMutation object of the builder.
func (pau *PositionApiUpdate) Mutation() *PositionApiMutation {
	return pau.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pau *PositionApiUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pau.hooks) == 0 {
		affected, err = pau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionApiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pau.mutation = mutation
			affected, err = pau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pau.hooks) - 1; i >= 0; i-- {
			mut = pau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PositionApiUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PositionApiUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PositionApiUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pau *PositionApiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   positionapi.Table,
			Columns: positionapi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: positionapi.FieldID,
			},
		},
	}
	if ps := pau.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.PositionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: positionapi.FieldPositionId,
		})
	}
	if value, ok := pau.mutation.AddedPositionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: positionapi.FieldPositionId,
		})
	}
	if value, ok := pau.mutation.Apis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: positionapi.FieldApis,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{positionapi.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PositionApiUpdateOne is the builder for updating a single PositionApi entity.
type PositionApiUpdateOne struct {
	config
	hooks    []Hook
	mutation *PositionApiMutation
}

// SetPositionId sets the positionId field.
func (pauo *PositionApiUpdateOne) SetPositionId(i int64) *PositionApiUpdateOne {
	pauo.mutation.ResetPositionId()
	pauo.mutation.SetPositionId(i)
	return pauo
}

// AddPositionId adds i to positionId.
func (pauo *PositionApiUpdateOne) AddPositionId(i int64) *PositionApiUpdateOne {
	pauo.mutation.AddPositionId(i)
	return pauo
}

// SetApis sets the apis field.
func (pauo *PositionApiUpdateOne) SetApis(s string) *PositionApiUpdateOne {
	pauo.mutation.SetApis(s)
	return pauo
}

// Mutation returns the PositionApiMutation object of the builder.
func (pauo *PositionApiUpdateOne) Mutation() *PositionApiMutation {
	return pauo.mutation
}

// Save executes the query and returns the updated entity.
func (pauo *PositionApiUpdateOne) Save(ctx context.Context) (*PositionApi, error) {
	var (
		err  error
		node *PositionApi
	)
	if len(pauo.hooks) == 0 {
		node, err = pauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionApiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pauo.mutation = mutation
			node, err = pauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pauo.hooks) - 1; i >= 0; i-- {
			mut = pauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PositionApiUpdateOne) SaveX(ctx context.Context) *PositionApi {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PositionApiUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PositionApiUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pauo *PositionApiUpdateOne) sqlSave(ctx context.Context) (_node *PositionApi, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   positionapi.Table,
			Columns: positionapi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: positionapi.FieldID,
			},
		},
	}
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PositionApi.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := pauo.mutation.PositionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: positionapi.FieldPositionId,
		})
	}
	if value, ok := pauo.mutation.AddedPositionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: positionapi.FieldPositionId,
		})
	}
	if value, ok := pauo.mutation.Apis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: positionapi.FieldApis,
		})
	}
	_node = &PositionApi{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{positionapi.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

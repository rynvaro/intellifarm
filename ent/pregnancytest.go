// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/pregnancytest"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// PregnancyTest is the model entity for the PregnancyTest schema.
type PregnancyTest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛只ID
	CattleId int64 `json:"cattleId,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍ID
	ShedId int64 `json:"shedId,omitempty"`
	// 牛舍名称
	ShedName string `json:"shedName,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// 胎次
	Times int `json:"times,omitempty"`
	// BreedingAt holds the value of the "breedingAt" field.
	BreedingAt int64 `json:"breedingAt,omitempty"`
	// TestAt holds the value of the "testAt" field.
	TestAt int64 `json:"testAt,omitempty"`
	// PregnancyTestTypeId holds the value of the "pregnancyTestTypeId" field.
	PregnancyTestTypeId int `json:"pregnancyTestTypeId,omitempty"`
	// PregnancyTestTypeName holds the value of the "pregnancyTestTypeName" field.
	PregnancyTestTypeName string `json:"pregnancyTestTypeName,omitempty"`
	// PregnancyTestMethodId holds the value of the "pregnancyTestMethodId" field.
	PregnancyTestMethodId int `json:"pregnancyTestMethodId,omitempty"`
	// PregnancyTestMethodName holds the value of the "pregnancyTestMethodName" field.
	PregnancyTestMethodName string `json:"pregnancyTestMethodName,omitempty"`
	// PregnancyTestResultId holds the value of the "pregnancyTestResultId" field.
	PregnancyTestResultId int `json:"pregnancyTestResultId,omitempty"`
	// PregnancyTestResultName holds the value of the "pregnancyTestResultName" field.
	PregnancyTestResultName string `json:"pregnancyTestResultName,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PregnancyTest) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pregnancytest.FieldID, pregnancytest.FieldCattleId, pregnancytest.FieldTenantId, pregnancytest.FieldFarmId, pregnancytest.FieldShedId, pregnancytest.FieldTimes, pregnancytest.FieldBreedingAt, pregnancytest.FieldTestAt, pregnancytest.FieldPregnancyTestTypeId, pregnancytest.FieldPregnancyTestMethodId, pregnancytest.FieldPregnancyTestResultId, pregnancytest.FieldCreatedAt, pregnancytest.FieldUpdatedAt, pregnancytest.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case pregnancytest.FieldTenantName, pregnancytest.FieldFarmName, pregnancytest.FieldShedName, pregnancytest.FieldName, pregnancytest.FieldEarNumber, pregnancytest.FieldPregnancyTestTypeName, pregnancytest.FieldPregnancyTestMethodName, pregnancytest.FieldPregnancyTestResultName, pregnancytest.FieldUserName, pregnancytest.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PregnancyTest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PregnancyTest fields.
func (pt *PregnancyTest) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pregnancytest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case pregnancytest.FieldCattleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cattleId", values[i])
			} else if value.Valid {
				pt.CattleId = value.Int64
			}
		case pregnancytest.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				pt.TenantId = value.Int64
			}
		case pregnancytest.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				pt.TenantName = value.String
			}
		case pregnancytest.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				pt.FarmId = value.Int64
			}
		case pregnancytest.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				pt.FarmName = value.String
			}
		case pregnancytest.FieldShedId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedId", values[i])
			} else if value.Valid {
				pt.ShedId = value.Int64
			}
		case pregnancytest.FieldShedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedName", values[i])
			} else if value.Valid {
				pt.ShedName = value.String
			}
		case pregnancytest.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pt.Name = value.String
			}
		case pregnancytest.FieldEarNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field earNumber", values[i])
			} else if value.Valid {
				pt.EarNumber = value.String
			}
		case pregnancytest.FieldTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field times", values[i])
			} else if value.Valid {
				pt.Times = int(value.Int64)
			}
		case pregnancytest.FieldBreedingAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field breedingAt", values[i])
			} else if value.Valid {
				pt.BreedingAt = value.Int64
			}
		case pregnancytest.FieldTestAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field testAt", values[i])
			} else if value.Valid {
				pt.TestAt = value.Int64
			}
		case pregnancytest.FieldPregnancyTestTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pregnancyTestTypeId", values[i])
			} else if value.Valid {
				pt.PregnancyTestTypeId = int(value.Int64)
			}
		case pregnancytest.FieldPregnancyTestTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pregnancyTestTypeName", values[i])
			} else if value.Valid {
				pt.PregnancyTestTypeName = value.String
			}
		case pregnancytest.FieldPregnancyTestMethodId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pregnancyTestMethodId", values[i])
			} else if value.Valid {
				pt.PregnancyTestMethodId = int(value.Int64)
			}
		case pregnancytest.FieldPregnancyTestMethodName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pregnancyTestMethodName", values[i])
			} else if value.Valid {
				pt.PregnancyTestMethodName = value.String
			}
		case pregnancytest.FieldPregnancyTestResultId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pregnancyTestResultId", values[i])
			} else if value.Valid {
				pt.PregnancyTestResultId = int(value.Int64)
			}
		case pregnancytest.FieldPregnancyTestResultName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pregnancyTestResultName", values[i])
			} else if value.Valid {
				pt.PregnancyTestResultName = value.String
			}
		case pregnancytest.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				pt.UserName = value.String
			}
		case pregnancytest.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				pt.Remarks = value.String
			}
		case pregnancytest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Int64
			}
		case pregnancytest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				pt.UpdatedAt = value.Int64
			}
		case pregnancytest.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				pt.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PregnancyTest.
// Note that you need to call PregnancyTest.Unwrap() before calling this method if this PregnancyTest
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PregnancyTest) Update() *PregnancyTestUpdateOne {
	return (&PregnancyTestClient{config: pt.config}).UpdateOne(pt)
}

// Unwrap unwraps the PregnancyTest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PregnancyTest) Unwrap() *PregnancyTest {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PregnancyTest is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PregnancyTest) String() string {
	var builder strings.Builder
	builder.WriteString("PregnancyTest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("cattleId=")
	builder.WriteString(fmt.Sprintf("%v", pt.CattleId))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", pt.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(pt.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", pt.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(pt.FarmName)
	builder.WriteString(", ")
	builder.WriteString("shedId=")
	builder.WriteString(fmt.Sprintf("%v", pt.ShedId))
	builder.WriteString(", ")
	builder.WriteString("shedName=")
	builder.WriteString(pt.ShedName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pt.Name)
	builder.WriteString(", ")
	builder.WriteString("earNumber=")
	builder.WriteString(pt.EarNumber)
	builder.WriteString(", ")
	builder.WriteString("times=")
	builder.WriteString(fmt.Sprintf("%v", pt.Times))
	builder.WriteString(", ")
	builder.WriteString("breedingAt=")
	builder.WriteString(fmt.Sprintf("%v", pt.BreedingAt))
	builder.WriteString(", ")
	builder.WriteString("testAt=")
	builder.WriteString(fmt.Sprintf("%v", pt.TestAt))
	builder.WriteString(", ")
	builder.WriteString("pregnancyTestTypeId=")
	builder.WriteString(fmt.Sprintf("%v", pt.PregnancyTestTypeId))
	builder.WriteString(", ")
	builder.WriteString("pregnancyTestTypeName=")
	builder.WriteString(pt.PregnancyTestTypeName)
	builder.WriteString(", ")
	builder.WriteString("pregnancyTestMethodId=")
	builder.WriteString(fmt.Sprintf("%v", pt.PregnancyTestMethodId))
	builder.WriteString(", ")
	builder.WriteString("pregnancyTestMethodName=")
	builder.WriteString(pt.PregnancyTestMethodName)
	builder.WriteString(", ")
	builder.WriteString("pregnancyTestResultId=")
	builder.WriteString(fmt.Sprintf("%v", pt.PregnancyTestResultId))
	builder.WriteString(", ")
	builder.WriteString("pregnancyTestResultName=")
	builder.WriteString(pt.PregnancyTestResultName)
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(pt.UserName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(pt.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", pt.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", pt.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", pt.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// PregnancyTests is a parsable slice of PregnancyTest.
type PregnancyTests []*PregnancyTest

func (pt PregnancyTests) config(cfg config) {
	for _i := range pt {
		pt[_i].config = cfg
	}
}

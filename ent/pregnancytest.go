// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/pregnancytest"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// PregnancyTest is the model entity for the PregnancyTest schema.
type PregnancyTest struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CattleId holds the value of the "cattleId" field.
	CattleId int64 `json:"cattleId,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// ShedId holds the value of the "shedId" field.
	ShedId int64 `json:"shedId,omitempty"`
	// ShedName holds the value of the "shedName" field.
	ShedName string `json:"shedName,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EarNumber holds the value of the "earNumber" field.
	EarNumber string `json:"earNumber,omitempty"`
	// Times holds the value of the "times" field.
	Times int `json:"times,omitempty"`
	// BreedingAt holds the value of the "breedingAt" field.
	BreedingAt int64 `json:"breedingAt,omitempty"`
	// TestAt holds the value of the "testAt" field.
	TestAt int64 `json:"testAt,omitempty"`
	// PregnancyTestTypeId holds the value of the "pregnancyTestTypeId" field.
	PregnancyTestTypeId int `json:"pregnancyTestTypeId,omitempty"`
	// PregnancyTestTypeName holds the value of the "pregnancyTestTypeName" field.
	PregnancyTestTypeName string `json:"pregnancyTestTypeName,omitempty"`
	// PregnancyTestMethodId holds the value of the "pregnancyTestMethodId" field.
	PregnancyTestMethodId int `json:"pregnancyTestMethodId,omitempty"`
	// PregnancyTestMethodName holds the value of the "pregnancyTestMethodName" field.
	PregnancyTestMethodName string `json:"pregnancyTestMethodName,omitempty"`
	// PregnancyTestResultId holds the value of the "pregnancyTestResultId" field.
	PregnancyTestResultId int `json:"pregnancyTestResultId,omitempty"`
	// PregnancyTestResultName holds the value of the "pregnancyTestResultName" field.
	PregnancyTestResultName string `json:"pregnancyTestResultName,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PregnancyTest) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // cattleId
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullInt64{},  // farmId
		&sql.NullString{}, // farmName
		&sql.NullInt64{},  // shedId
		&sql.NullString{}, // shedName
		&sql.NullString{}, // name
		&sql.NullString{}, // earNumber
		&sql.NullInt64{},  // times
		&sql.NullInt64{},  // breedingAt
		&sql.NullInt64{},  // testAt
		&sql.NullInt64{},  // pregnancyTestTypeId
		&sql.NullString{}, // pregnancyTestTypeName
		&sql.NullInt64{},  // pregnancyTestMethodId
		&sql.NullString{}, // pregnancyTestMethodName
		&sql.NullInt64{},  // pregnancyTestResultId
		&sql.NullString{}, // pregnancyTestResultName
		&sql.NullString{}, // userName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PregnancyTest fields.
func (pt *PregnancyTest) assignValues(values ...interface{}) error {
	if m, n := len(values), len(pregnancytest.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pt.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field cattleId", values[0])
	} else if value.Valid {
		pt.CattleId = value.Int64
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[1])
	} else if value.Valid {
		pt.TenantId = value.Int64
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[2])
	} else if value.Valid {
		pt.TenantName = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[3])
	} else if value.Valid {
		pt.FarmId = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[4])
	} else if value.Valid {
		pt.FarmName = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field shedId", values[5])
	} else if value.Valid {
		pt.ShedId = value.Int64
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedName", values[6])
	} else if value.Valid {
		pt.ShedName = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[7])
	} else if value.Valid {
		pt.Name = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field earNumber", values[8])
	} else if value.Valid {
		pt.EarNumber = value.String
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field times", values[9])
	} else if value.Valid {
		pt.Times = int(value.Int64)
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field breedingAt", values[10])
	} else if value.Valid {
		pt.BreedingAt = value.Int64
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field testAt", values[11])
	} else if value.Valid {
		pt.TestAt = value.Int64
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pregnancyTestTypeId", values[12])
	} else if value.Valid {
		pt.PregnancyTestTypeId = int(value.Int64)
	}
	if value, ok := values[13].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field pregnancyTestTypeName", values[13])
	} else if value.Valid {
		pt.PregnancyTestTypeName = value.String
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pregnancyTestMethodId", values[14])
	} else if value.Valid {
		pt.PregnancyTestMethodId = int(value.Int64)
	}
	if value, ok := values[15].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field pregnancyTestMethodName", values[15])
	} else if value.Valid {
		pt.PregnancyTestMethodName = value.String
	}
	if value, ok := values[16].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pregnancyTestResultId", values[16])
	} else if value.Valid {
		pt.PregnancyTestResultId = int(value.Int64)
	}
	if value, ok := values[17].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field pregnancyTestResultName", values[17])
	} else if value.Valid {
		pt.PregnancyTestResultName = value.String
	}
	if value, ok := values[18].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[18])
	} else if value.Valid {
		pt.UserName = value.String
	}
	if value, ok := values[19].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[19])
	} else if value.Valid {
		pt.Remarks = value.String
	}
	if value, ok := values[20].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[20])
	} else if value.Valid {
		pt.CreatedAt = value.Int64
	}
	if value, ok := values[21].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[21])
	} else if value.Valid {
		pt.UpdatedAt = value.Int64
	}
	if value, ok := values[22].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[22])
	} else if value.Valid {
		pt.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this PregnancyTest.
// Note that, you need to call PregnancyTest.Unwrap() before calling this method, if this PregnancyTest
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PregnancyTest) Update() *PregnancyTestUpdateOne {
	return (&PregnancyTestClient{config: pt.config}).UpdateOne(pt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pt *PregnancyTest) Unwrap() *PregnancyTest {
	tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PregnancyTest is not a transactional entity")
	}
	pt.config.driver = tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PregnancyTest) String() string {
	var builder strings.Builder
	builder.WriteString("PregnancyTest(")
	builder.WriteString(fmt.Sprintf("id=%v", pt.ID))
	builder.WriteString(", cattleId=")
	builder.WriteString(fmt.Sprintf("%v", pt.CattleId))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", pt.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(pt.TenantName)
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", pt.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(pt.FarmName)
	builder.WriteString(", shedId=")
	builder.WriteString(fmt.Sprintf("%v", pt.ShedId))
	builder.WriteString(", shedName=")
	builder.WriteString(pt.ShedName)
	builder.WriteString(", name=")
	builder.WriteString(pt.Name)
	builder.WriteString(", earNumber=")
	builder.WriteString(pt.EarNumber)
	builder.WriteString(", times=")
	builder.WriteString(fmt.Sprintf("%v", pt.Times))
	builder.WriteString(", breedingAt=")
	builder.WriteString(fmt.Sprintf("%v", pt.BreedingAt))
	builder.WriteString(", testAt=")
	builder.WriteString(fmt.Sprintf("%v", pt.TestAt))
	builder.WriteString(", pregnancyTestTypeId=")
	builder.WriteString(fmt.Sprintf("%v", pt.PregnancyTestTypeId))
	builder.WriteString(", pregnancyTestTypeName=")
	builder.WriteString(pt.PregnancyTestTypeName)
	builder.WriteString(", pregnancyTestMethodId=")
	builder.WriteString(fmt.Sprintf("%v", pt.PregnancyTestMethodId))
	builder.WriteString(", pregnancyTestMethodName=")
	builder.WriteString(pt.PregnancyTestMethodName)
	builder.WriteString(", pregnancyTestResultId=")
	builder.WriteString(fmt.Sprintf("%v", pt.PregnancyTestResultId))
	builder.WriteString(", pregnancyTestResultName=")
	builder.WriteString(pt.PregnancyTestResultName)
	builder.WriteString(", userName=")
	builder.WriteString(pt.UserName)
	builder.WriteString(", remarks=")
	builder.WriteString(pt.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", pt.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", pt.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", pt.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// PregnancyTests is a parsable slice of PregnancyTest.
type PregnancyTests []*PregnancyTest

func (pt PregnancyTests) config(cfg config) {
	for _i := range pt {
		pt[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/pregnancytest"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PregnancyTestCreate is the builder for creating a PregnancyTest entity.
type PregnancyTestCreate struct {
	config
	mutation *PregnancyTestMutation
	hooks    []Hook
}

// SetCattleId sets the "cattleId" field.
func (ptc *PregnancyTestCreate) SetCattleId(i int64) *PregnancyTestCreate {
	ptc.mutation.SetCattleId(i)
	return ptc
}

// SetTenantId sets the "tenantId" field.
func (ptc *PregnancyTestCreate) SetTenantId(i int64) *PregnancyTestCreate {
	ptc.mutation.SetTenantId(i)
	return ptc
}

// SetTenantName sets the "tenantName" field.
func (ptc *PregnancyTestCreate) SetTenantName(s string) *PregnancyTestCreate {
	ptc.mutation.SetTenantName(s)
	return ptc
}

// SetFarmId sets the "farmId" field.
func (ptc *PregnancyTestCreate) SetFarmId(i int64) *PregnancyTestCreate {
	ptc.mutation.SetFarmId(i)
	return ptc
}

// SetFarmName sets the "farmName" field.
func (ptc *PregnancyTestCreate) SetFarmName(s string) *PregnancyTestCreate {
	ptc.mutation.SetFarmName(s)
	return ptc
}

// SetShedId sets the "shedId" field.
func (ptc *PregnancyTestCreate) SetShedId(i int64) *PregnancyTestCreate {
	ptc.mutation.SetShedId(i)
	return ptc
}

// SetShedName sets the "shedName" field.
func (ptc *PregnancyTestCreate) SetShedName(s string) *PregnancyTestCreate {
	ptc.mutation.SetShedName(s)
	return ptc
}

// SetName sets the "name" field.
func (ptc *PregnancyTestCreate) SetName(s string) *PregnancyTestCreate {
	ptc.mutation.SetName(s)
	return ptc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptc *PregnancyTestCreate) SetNillableName(s *string) *PregnancyTestCreate {
	if s != nil {
		ptc.SetName(*s)
	}
	return ptc
}

// SetEarNumber sets the "earNumber" field.
func (ptc *PregnancyTestCreate) SetEarNumber(s string) *PregnancyTestCreate {
	ptc.mutation.SetEarNumber(s)
	return ptc
}

// SetTimes sets the "times" field.
func (ptc *PregnancyTestCreate) SetTimes(i int) *PregnancyTestCreate {
	ptc.mutation.SetTimes(i)
	return ptc
}

// SetBreedingAt sets the "breedingAt" field.
func (ptc *PregnancyTestCreate) SetBreedingAt(i int64) *PregnancyTestCreate {
	ptc.mutation.SetBreedingAt(i)
	return ptc
}

// SetTestAt sets the "testAt" field.
func (ptc *PregnancyTestCreate) SetTestAt(i int64) *PregnancyTestCreate {
	ptc.mutation.SetTestAt(i)
	return ptc
}

// SetPregnancyTestTypeId sets the "pregnancyTestTypeId" field.
func (ptc *PregnancyTestCreate) SetPregnancyTestTypeId(i int) *PregnancyTestCreate {
	ptc.mutation.SetPregnancyTestTypeId(i)
	return ptc
}

// SetPregnancyTestTypeName sets the "pregnancyTestTypeName" field.
func (ptc *PregnancyTestCreate) SetPregnancyTestTypeName(s string) *PregnancyTestCreate {
	ptc.mutation.SetPregnancyTestTypeName(s)
	return ptc
}

// SetPregnancyTestMethodId sets the "pregnancyTestMethodId" field.
func (ptc *PregnancyTestCreate) SetPregnancyTestMethodId(i int) *PregnancyTestCreate {
	ptc.mutation.SetPregnancyTestMethodId(i)
	return ptc
}

// SetPregnancyTestMethodName sets the "pregnancyTestMethodName" field.
func (ptc *PregnancyTestCreate) SetPregnancyTestMethodName(s string) *PregnancyTestCreate {
	ptc.mutation.SetPregnancyTestMethodName(s)
	return ptc
}

// SetPregnancyTestResultId sets the "pregnancyTestResultId" field.
func (ptc *PregnancyTestCreate) SetPregnancyTestResultId(i int) *PregnancyTestCreate {
	ptc.mutation.SetPregnancyTestResultId(i)
	return ptc
}

// SetPregnancyTestResultName sets the "pregnancyTestResultName" field.
func (ptc *PregnancyTestCreate) SetPregnancyTestResultName(s string) *PregnancyTestCreate {
	ptc.mutation.SetPregnancyTestResultName(s)
	return ptc
}

// SetUserName sets the "userName" field.
func (ptc *PregnancyTestCreate) SetUserName(s string) *PregnancyTestCreate {
	ptc.mutation.SetUserName(s)
	return ptc
}

// SetRemarks sets the "remarks" field.
func (ptc *PregnancyTestCreate) SetRemarks(s string) *PregnancyTestCreate {
	ptc.mutation.SetRemarks(s)
	return ptc
}

// SetCreatedAt sets the "createdAt" field.
func (ptc *PregnancyTestCreate) SetCreatedAt(i int64) *PregnancyTestCreate {
	ptc.mutation.SetCreatedAt(i)
	return ptc
}

// SetUpdatedAt sets the "updatedAt" field.
func (ptc *PregnancyTestCreate) SetUpdatedAt(i int64) *PregnancyTestCreate {
	ptc.mutation.SetUpdatedAt(i)
	return ptc
}

// SetDeleted sets the "deleted" field.
func (ptc *PregnancyTestCreate) SetDeleted(i int) *PregnancyTestCreate {
	ptc.mutation.SetDeleted(i)
	return ptc
}

// Mutation returns the PregnancyTestMutation object of the builder.
func (ptc *PregnancyTestCreate) Mutation() *PregnancyTestMutation {
	return ptc.mutation
}

// Save creates the PregnancyTest in the database.
func (ptc *PregnancyTestCreate) Save(ctx context.Context) (*PregnancyTest, error) {
	var (
		err  error
		node *PregnancyTest
	)
	if len(ptc.hooks) == 0 {
		if err = ptc.check(); err != nil {
			return nil, err
		}
		node, err = ptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PregnancyTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptc.check(); err != nil {
				return nil, err
			}
			ptc.mutation = mutation
			if node, err = ptc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ptc.hooks) - 1; i >= 0; i-- {
			if ptc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ptc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PregnancyTest)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PregnancyTestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PregnancyTestCreate) SaveX(ctx context.Context) *PregnancyTest {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PregnancyTestCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PregnancyTestCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PregnancyTestCreate) check() error {
	if _, ok := ptc.mutation.CattleId(); !ok {
		return &ValidationError{Name: "cattleId", err: errors.New(`ent: missing required field "PregnancyTest.cattleId"`)}
	}
	if _, ok := ptc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "PregnancyTest.tenantId"`)}
	}
	if _, ok := ptc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "PregnancyTest.tenantName"`)}
	}
	if _, ok := ptc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New(`ent: missing required field "PregnancyTest.farmId"`)}
	}
	if _, ok := ptc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New(`ent: missing required field "PregnancyTest.farmName"`)}
	}
	if _, ok := ptc.mutation.ShedId(); !ok {
		return &ValidationError{Name: "shedId", err: errors.New(`ent: missing required field "PregnancyTest.shedId"`)}
	}
	if _, ok := ptc.mutation.ShedName(); !ok {
		return &ValidationError{Name: "shedName", err: errors.New(`ent: missing required field "PregnancyTest.shedName"`)}
	}
	if _, ok := ptc.mutation.EarNumber(); !ok {
		return &ValidationError{Name: "earNumber", err: errors.New(`ent: missing required field "PregnancyTest.earNumber"`)}
	}
	if _, ok := ptc.mutation.Times(); !ok {
		return &ValidationError{Name: "times", err: errors.New(`ent: missing required field "PregnancyTest.times"`)}
	}
	if _, ok := ptc.mutation.BreedingAt(); !ok {
		return &ValidationError{Name: "breedingAt", err: errors.New(`ent: missing required field "PregnancyTest.breedingAt"`)}
	}
	if _, ok := ptc.mutation.TestAt(); !ok {
		return &ValidationError{Name: "testAt", err: errors.New(`ent: missing required field "PregnancyTest.testAt"`)}
	}
	if _, ok := ptc.mutation.PregnancyTestTypeId(); !ok {
		return &ValidationError{Name: "pregnancyTestTypeId", err: errors.New(`ent: missing required field "PregnancyTest.pregnancyTestTypeId"`)}
	}
	if _, ok := ptc.mutation.PregnancyTestTypeName(); !ok {
		return &ValidationError{Name: "pregnancyTestTypeName", err: errors.New(`ent: missing required field "PregnancyTest.pregnancyTestTypeName"`)}
	}
	if _, ok := ptc.mutation.PregnancyTestMethodId(); !ok {
		return &ValidationError{Name: "pregnancyTestMethodId", err: errors.New(`ent: missing required field "PregnancyTest.pregnancyTestMethodId"`)}
	}
	if _, ok := ptc.mutation.PregnancyTestMethodName(); !ok {
		return &ValidationError{Name: "pregnancyTestMethodName", err: errors.New(`ent: missing required field "PregnancyTest.pregnancyTestMethodName"`)}
	}
	if _, ok := ptc.mutation.PregnancyTestResultId(); !ok {
		return &ValidationError{Name: "pregnancyTestResultId", err: errors.New(`ent: missing required field "PregnancyTest.pregnancyTestResultId"`)}
	}
	if _, ok := ptc.mutation.PregnancyTestResultName(); !ok {
		return &ValidationError{Name: "pregnancyTestResultName", err: errors.New(`ent: missing required field "PregnancyTest.pregnancyTestResultName"`)}
	}
	if _, ok := ptc.mutation.UserName(); !ok {
		return &ValidationError{Name: "userName", err: errors.New(`ent: missing required field "PregnancyTest.userName"`)}
	}
	if _, ok := ptc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "PregnancyTest.remarks"`)}
	}
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "PregnancyTest.createdAt"`)}
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "PregnancyTest.updatedAt"`)}
	}
	if _, ok := ptc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "PregnancyTest.deleted"`)}
	}
	return nil
}

func (ptc *PregnancyTestCreate) sqlSave(ctx context.Context) (*PregnancyTest, error) {
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ptc *PregnancyTestCreate) createSpec() (*PregnancyTest, *sqlgraph.CreateSpec) {
	var (
		_node = &PregnancyTest{config: ptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pregnancytest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pregnancytest.FieldID,
			},
		}
	)
	if value, ok := ptc.mutation.CattleId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldCattleId,
		})
		_node.CattleId = value
	}
	if value, ok := ptc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := ptc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := ptc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := ptc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := ptc.mutation.ShedId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldShedId,
		})
		_node.ShedId = value
	}
	if value, ok := ptc.mutation.ShedName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldShedName,
		})
		_node.ShedName = value
	}
	if value, ok := ptc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ptc.mutation.EarNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldEarNumber,
		})
		_node.EarNumber = value
	}
	if value, ok := ptc.mutation.Times(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldTimes,
		})
		_node.Times = value
	}
	if value, ok := ptc.mutation.BreedingAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldBreedingAt,
		})
		_node.BreedingAt = value
	}
	if value, ok := ptc.mutation.TestAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTestAt,
		})
		_node.TestAt = value
	}
	if value, ok := ptc.mutation.PregnancyTestTypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestTypeId,
		})
		_node.PregnancyTestTypeId = value
	}
	if value, ok := ptc.mutation.PregnancyTestTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestTypeName,
		})
		_node.PregnancyTestTypeName = value
	}
	if value, ok := ptc.mutation.PregnancyTestMethodId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestMethodId,
		})
		_node.PregnancyTestMethodId = value
	}
	if value, ok := ptc.mutation.PregnancyTestMethodName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestMethodName,
		})
		_node.PregnancyTestMethodName = value
	}
	if value, ok := ptc.mutation.PregnancyTestResultId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestResultId,
		})
		_node.PregnancyTestResultId = value
	}
	if value, ok := ptc.mutation.PregnancyTestResultName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestResultName,
		})
		_node.PregnancyTestResultName = value
	}
	if value, ok := ptc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := ptc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ptc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ptc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// PregnancyTestCreateBulk is the builder for creating many PregnancyTest entities in bulk.
type PregnancyTestCreateBulk struct {
	config
	builders []*PregnancyTestCreate
}

// Save creates the PregnancyTest entities in the database.
func (ptcb *PregnancyTestCreateBulk) Save(ctx context.Context) ([]*PregnancyTest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PregnancyTest, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PregnancyTestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PregnancyTestCreateBulk) SaveX(ctx context.Context) []*PregnancyTest {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PregnancyTestCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PregnancyTestCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

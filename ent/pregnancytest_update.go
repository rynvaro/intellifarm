// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/pregnancytest"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// PregnancyTestUpdate is the builder for updating PregnancyTest entities.
type PregnancyTestUpdate struct {
	config
	hooks      []Hook
	mutation   *PregnancyTestMutation
	predicates []predicate.PregnancyTest
}

// Where adds a new predicate for the builder.
func (ptu *PregnancyTestUpdate) Where(ps ...predicate.PregnancyTest) *PregnancyTestUpdate {
	ptu.predicates = append(ptu.predicates, ps...)
	return ptu
}

// SetName sets the name field.
func (ptu *PregnancyTestUpdate) SetName(s string) *PregnancyTestUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// SetNillableName sets the name field if the given value is not nil.
func (ptu *PregnancyTestUpdate) SetNillableName(s *string) *PregnancyTestUpdate {
	if s != nil {
		ptu.SetName(*s)
	}
	return ptu
}

// ClearName clears the value of name.
func (ptu *PregnancyTestUpdate) ClearName() *PregnancyTestUpdate {
	ptu.mutation.ClearName()
	return ptu
}

// SetEarNumber sets the earNumber field.
func (ptu *PregnancyTestUpdate) SetEarNumber(s string) *PregnancyTestUpdate {
	ptu.mutation.SetEarNumber(s)
	return ptu
}

// SetTimes sets the times field.
func (ptu *PregnancyTestUpdate) SetTimes(i int) *PregnancyTestUpdate {
	ptu.mutation.ResetTimes()
	ptu.mutation.SetTimes(i)
	return ptu
}

// AddTimes adds i to times.
func (ptu *PregnancyTestUpdate) AddTimes(i int) *PregnancyTestUpdate {
	ptu.mutation.AddTimes(i)
	return ptu
}

// SetReproductiveState sets the reproductiveState field.
func (ptu *PregnancyTestUpdate) SetReproductiveState(s string) *PregnancyTestUpdate {
	ptu.mutation.SetReproductiveState(s)
	return ptu
}

// SetShedName sets the shedName field.
func (ptu *PregnancyTestUpdate) SetShedName(s string) *PregnancyTestUpdate {
	ptu.mutation.SetShedName(s)
	return ptu
}

// SetBreedingAt sets the breedingAt field.
func (ptu *PregnancyTestUpdate) SetBreedingAt(i int64) *PregnancyTestUpdate {
	ptu.mutation.ResetBreedingAt()
	ptu.mutation.SetBreedingAt(i)
	return ptu
}

// AddBreedingAt adds i to breedingAt.
func (ptu *PregnancyTestUpdate) AddBreedingAt(i int64) *PregnancyTestUpdate {
	ptu.mutation.AddBreedingAt(i)
	return ptu
}

// SetTestAt sets the testAt field.
func (ptu *PregnancyTestUpdate) SetTestAt(i int64) *PregnancyTestUpdate {
	ptu.mutation.ResetTestAt()
	ptu.mutation.SetTestAt(i)
	return ptu
}

// AddTestAt adds i to testAt.
func (ptu *PregnancyTestUpdate) AddTestAt(i int64) *PregnancyTestUpdate {
	ptu.mutation.AddTestAt(i)
	return ptu
}

// SetPregnancyTestTypeId sets the pregnancyTestTypeId field.
func (ptu *PregnancyTestUpdate) SetPregnancyTestTypeId(i int) *PregnancyTestUpdate {
	ptu.mutation.ResetPregnancyTestTypeId()
	ptu.mutation.SetPregnancyTestTypeId(i)
	return ptu
}

// AddPregnancyTestTypeId adds i to pregnancyTestTypeId.
func (ptu *PregnancyTestUpdate) AddPregnancyTestTypeId(i int) *PregnancyTestUpdate {
	ptu.mutation.AddPregnancyTestTypeId(i)
	return ptu
}

// SetPregnancyTestTypeName sets the pregnancyTestTypeName field.
func (ptu *PregnancyTestUpdate) SetPregnancyTestTypeName(s string) *PregnancyTestUpdate {
	ptu.mutation.SetPregnancyTestTypeName(s)
	return ptu
}

// SetPregnancyTestMethodId sets the pregnancyTestMethodId field.
func (ptu *PregnancyTestUpdate) SetPregnancyTestMethodId(i int) *PregnancyTestUpdate {
	ptu.mutation.ResetPregnancyTestMethodId()
	ptu.mutation.SetPregnancyTestMethodId(i)
	return ptu
}

// AddPregnancyTestMethodId adds i to pregnancyTestMethodId.
func (ptu *PregnancyTestUpdate) AddPregnancyTestMethodId(i int) *PregnancyTestUpdate {
	ptu.mutation.AddPregnancyTestMethodId(i)
	return ptu
}

// SetPregnancyTestMethodName sets the pregnancyTestMethodName field.
func (ptu *PregnancyTestUpdate) SetPregnancyTestMethodName(s string) *PregnancyTestUpdate {
	ptu.mutation.SetPregnancyTestMethodName(s)
	return ptu
}

// SetPregnancyTestResultId sets the pregnancyTestResultId field.
func (ptu *PregnancyTestUpdate) SetPregnancyTestResultId(i int) *PregnancyTestUpdate {
	ptu.mutation.ResetPregnancyTestResultId()
	ptu.mutation.SetPregnancyTestResultId(i)
	return ptu
}

// AddPregnancyTestResultId adds i to pregnancyTestResultId.
func (ptu *PregnancyTestUpdate) AddPregnancyTestResultId(i int) *PregnancyTestUpdate {
	ptu.mutation.AddPregnancyTestResultId(i)
	return ptu
}

// SetPregnancyTestResultName sets the pregnancyTestResultName field.
func (ptu *PregnancyTestUpdate) SetPregnancyTestResultName(s string) *PregnancyTestUpdate {
	ptu.mutation.SetPregnancyTestResultName(s)
	return ptu
}

// SetUserName sets the userName field.
func (ptu *PregnancyTestUpdate) SetUserName(s string) *PregnancyTestUpdate {
	ptu.mutation.SetUserName(s)
	return ptu
}

// SetTenantId sets the tenantId field.
func (ptu *PregnancyTestUpdate) SetTenantId(i int64) *PregnancyTestUpdate {
	ptu.mutation.ResetTenantId()
	ptu.mutation.SetTenantId(i)
	return ptu
}

// AddTenantId adds i to tenantId.
func (ptu *PregnancyTestUpdate) AddTenantId(i int64) *PregnancyTestUpdate {
	ptu.mutation.AddTenantId(i)
	return ptu
}

// SetTenantName sets the tenantName field.
func (ptu *PregnancyTestUpdate) SetTenantName(s string) *PregnancyTestUpdate {
	ptu.mutation.SetTenantName(s)
	return ptu
}

// SetRemarks sets the remarks field.
func (ptu *PregnancyTestUpdate) SetRemarks(s string) *PregnancyTestUpdate {
	ptu.mutation.SetRemarks(s)
	return ptu
}

// SetCreatedAt sets the createdAt field.
func (ptu *PregnancyTestUpdate) SetCreatedAt(i int64) *PregnancyTestUpdate {
	ptu.mutation.ResetCreatedAt()
	ptu.mutation.SetCreatedAt(i)
	return ptu
}

// AddCreatedAt adds i to createdAt.
func (ptu *PregnancyTestUpdate) AddCreatedAt(i int64) *PregnancyTestUpdate {
	ptu.mutation.AddCreatedAt(i)
	return ptu
}

// SetUpdatedAt sets the updatedAt field.
func (ptu *PregnancyTestUpdate) SetUpdatedAt(i int64) *PregnancyTestUpdate {
	ptu.mutation.ResetUpdatedAt()
	ptu.mutation.SetUpdatedAt(i)
	return ptu
}

// AddUpdatedAt adds i to updatedAt.
func (ptu *PregnancyTestUpdate) AddUpdatedAt(i int64) *PregnancyTestUpdate {
	ptu.mutation.AddUpdatedAt(i)
	return ptu
}

// SetDeleted sets the deleted field.
func (ptu *PregnancyTestUpdate) SetDeleted(i int) *PregnancyTestUpdate {
	ptu.mutation.ResetDeleted()
	ptu.mutation.SetDeleted(i)
	return ptu
}

// AddDeleted adds i to deleted.
func (ptu *PregnancyTestUpdate) AddDeleted(i int) *PregnancyTestUpdate {
	ptu.mutation.AddDeleted(i)
	return ptu
}

// Mutation returns the PregnancyTestMutation object of the builder.
func (ptu *PregnancyTestUpdate) Mutation() *PregnancyTestMutation {
	return ptu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ptu *PregnancyTestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ptu.hooks) == 0 {
		affected, err = ptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PregnancyTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ptu.mutation = mutation
			affected, err = ptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ptu.hooks) - 1; i >= 0; i-- {
			mut = ptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PregnancyTestUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PregnancyTestUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PregnancyTestUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptu *PregnancyTestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pregnancytest.Table,
			Columns: pregnancytest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pregnancytest.FieldID,
			},
		},
	}
	if ps := ptu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldName,
		})
	}
	if ptu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pregnancytest.FieldName,
		})
	}
	if value, ok := ptu.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldEarNumber,
		})
	}
	if value, ok := ptu.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldTimes,
		})
	}
	if value, ok := ptu.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldTimes,
		})
	}
	if value, ok := ptu.mutation.ReproductiveState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldReproductiveState,
		})
	}
	if value, ok := ptu.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldShedName,
		})
	}
	if value, ok := ptu.mutation.BreedingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldBreedingAt,
		})
	}
	if value, ok := ptu.mutation.AddedBreedingAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldBreedingAt,
		})
	}
	if value, ok := ptu.mutation.TestAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTestAt,
		})
	}
	if value, ok := ptu.mutation.AddedTestAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTestAt,
		})
	}
	if value, ok := ptu.mutation.PregnancyTestTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestTypeId,
		})
	}
	if value, ok := ptu.mutation.AddedPregnancyTestTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestTypeId,
		})
	}
	if value, ok := ptu.mutation.PregnancyTestTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestTypeName,
		})
	}
	if value, ok := ptu.mutation.PregnancyTestMethodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestMethodId,
		})
	}
	if value, ok := ptu.mutation.AddedPregnancyTestMethodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestMethodId,
		})
	}
	if value, ok := ptu.mutation.PregnancyTestMethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestMethodName,
		})
	}
	if value, ok := ptu.mutation.PregnancyTestResultId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestResultId,
		})
	}
	if value, ok := ptu.mutation.AddedPregnancyTestResultId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestResultId,
		})
	}
	if value, ok := ptu.mutation.PregnancyTestResultName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestResultName,
		})
	}
	if value, ok := ptu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldUserName,
		})
	}
	if value, ok := ptu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTenantId,
		})
	}
	if value, ok := ptu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTenantId,
		})
	}
	if value, ok := ptu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldTenantName,
		})
	}
	if value, ok := ptu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldRemarks,
		})
	}
	if value, ok := ptu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldCreatedAt,
		})
	}
	if value, ok := ptu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldCreatedAt,
		})
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldUpdatedAt,
		})
	}
	if value, ok := ptu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldUpdatedAt,
		})
	}
	if value, ok := ptu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldDeleted,
		})
	}
	if value, ok := ptu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pregnancytest.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PregnancyTestUpdateOne is the builder for updating a single PregnancyTest entity.
type PregnancyTestUpdateOne struct {
	config
	hooks    []Hook
	mutation *PregnancyTestMutation
}

// SetName sets the name field.
func (ptuo *PregnancyTestUpdateOne) SetName(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// SetNillableName sets the name field if the given value is not nil.
func (ptuo *PregnancyTestUpdateOne) SetNillableName(s *string) *PregnancyTestUpdateOne {
	if s != nil {
		ptuo.SetName(*s)
	}
	return ptuo
}

// ClearName clears the value of name.
func (ptuo *PregnancyTestUpdateOne) ClearName() *PregnancyTestUpdateOne {
	ptuo.mutation.ClearName()
	return ptuo
}

// SetEarNumber sets the earNumber field.
func (ptuo *PregnancyTestUpdateOne) SetEarNumber(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetEarNumber(s)
	return ptuo
}

// SetTimes sets the times field.
func (ptuo *PregnancyTestUpdateOne) SetTimes(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetTimes()
	ptuo.mutation.SetTimes(i)
	return ptuo
}

// AddTimes adds i to times.
func (ptuo *PregnancyTestUpdateOne) AddTimes(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.AddTimes(i)
	return ptuo
}

// SetReproductiveState sets the reproductiveState field.
func (ptuo *PregnancyTestUpdateOne) SetReproductiveState(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetReproductiveState(s)
	return ptuo
}

// SetShedName sets the shedName field.
func (ptuo *PregnancyTestUpdateOne) SetShedName(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetShedName(s)
	return ptuo
}

// SetBreedingAt sets the breedingAt field.
func (ptuo *PregnancyTestUpdateOne) SetBreedingAt(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetBreedingAt()
	ptuo.mutation.SetBreedingAt(i)
	return ptuo
}

// AddBreedingAt adds i to breedingAt.
func (ptuo *PregnancyTestUpdateOne) AddBreedingAt(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.AddBreedingAt(i)
	return ptuo
}

// SetTestAt sets the testAt field.
func (ptuo *PregnancyTestUpdateOne) SetTestAt(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetTestAt()
	ptuo.mutation.SetTestAt(i)
	return ptuo
}

// AddTestAt adds i to testAt.
func (ptuo *PregnancyTestUpdateOne) AddTestAt(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.AddTestAt(i)
	return ptuo
}

// SetPregnancyTestTypeId sets the pregnancyTestTypeId field.
func (ptuo *PregnancyTestUpdateOne) SetPregnancyTestTypeId(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetPregnancyTestTypeId()
	ptuo.mutation.SetPregnancyTestTypeId(i)
	return ptuo
}

// AddPregnancyTestTypeId adds i to pregnancyTestTypeId.
func (ptuo *PregnancyTestUpdateOne) AddPregnancyTestTypeId(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.AddPregnancyTestTypeId(i)
	return ptuo
}

// SetPregnancyTestTypeName sets the pregnancyTestTypeName field.
func (ptuo *PregnancyTestUpdateOne) SetPregnancyTestTypeName(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetPregnancyTestTypeName(s)
	return ptuo
}

// SetPregnancyTestMethodId sets the pregnancyTestMethodId field.
func (ptuo *PregnancyTestUpdateOne) SetPregnancyTestMethodId(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetPregnancyTestMethodId()
	ptuo.mutation.SetPregnancyTestMethodId(i)
	return ptuo
}

// AddPregnancyTestMethodId adds i to pregnancyTestMethodId.
func (ptuo *PregnancyTestUpdateOne) AddPregnancyTestMethodId(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.AddPregnancyTestMethodId(i)
	return ptuo
}

// SetPregnancyTestMethodName sets the pregnancyTestMethodName field.
func (ptuo *PregnancyTestUpdateOne) SetPregnancyTestMethodName(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetPregnancyTestMethodName(s)
	return ptuo
}

// SetPregnancyTestResultId sets the pregnancyTestResultId field.
func (ptuo *PregnancyTestUpdateOne) SetPregnancyTestResultId(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetPregnancyTestResultId()
	ptuo.mutation.SetPregnancyTestResultId(i)
	return ptuo
}

// AddPregnancyTestResultId adds i to pregnancyTestResultId.
func (ptuo *PregnancyTestUpdateOne) AddPregnancyTestResultId(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.AddPregnancyTestResultId(i)
	return ptuo
}

// SetPregnancyTestResultName sets the pregnancyTestResultName field.
func (ptuo *PregnancyTestUpdateOne) SetPregnancyTestResultName(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetPregnancyTestResultName(s)
	return ptuo
}

// SetUserName sets the userName field.
func (ptuo *PregnancyTestUpdateOne) SetUserName(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetUserName(s)
	return ptuo
}

// SetTenantId sets the tenantId field.
func (ptuo *PregnancyTestUpdateOne) SetTenantId(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetTenantId()
	ptuo.mutation.SetTenantId(i)
	return ptuo
}

// AddTenantId adds i to tenantId.
func (ptuo *PregnancyTestUpdateOne) AddTenantId(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.AddTenantId(i)
	return ptuo
}

// SetTenantName sets the tenantName field.
func (ptuo *PregnancyTestUpdateOne) SetTenantName(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetTenantName(s)
	return ptuo
}

// SetRemarks sets the remarks field.
func (ptuo *PregnancyTestUpdateOne) SetRemarks(s string) *PregnancyTestUpdateOne {
	ptuo.mutation.SetRemarks(s)
	return ptuo
}

// SetCreatedAt sets the createdAt field.
func (ptuo *PregnancyTestUpdateOne) SetCreatedAt(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetCreatedAt()
	ptuo.mutation.SetCreatedAt(i)
	return ptuo
}

// AddCreatedAt adds i to createdAt.
func (ptuo *PregnancyTestUpdateOne) AddCreatedAt(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.AddCreatedAt(i)
	return ptuo
}

// SetUpdatedAt sets the updatedAt field.
func (ptuo *PregnancyTestUpdateOne) SetUpdatedAt(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetUpdatedAt()
	ptuo.mutation.SetUpdatedAt(i)
	return ptuo
}

// AddUpdatedAt adds i to updatedAt.
func (ptuo *PregnancyTestUpdateOne) AddUpdatedAt(i int64) *PregnancyTestUpdateOne {
	ptuo.mutation.AddUpdatedAt(i)
	return ptuo
}

// SetDeleted sets the deleted field.
func (ptuo *PregnancyTestUpdateOne) SetDeleted(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.ResetDeleted()
	ptuo.mutation.SetDeleted(i)
	return ptuo
}

// AddDeleted adds i to deleted.
func (ptuo *PregnancyTestUpdateOne) AddDeleted(i int) *PregnancyTestUpdateOne {
	ptuo.mutation.AddDeleted(i)
	return ptuo
}

// Mutation returns the PregnancyTestMutation object of the builder.
func (ptuo *PregnancyTestUpdateOne) Mutation() *PregnancyTestMutation {
	return ptuo.mutation
}

// Save executes the query and returns the updated entity.
func (ptuo *PregnancyTestUpdateOne) Save(ctx context.Context) (*PregnancyTest, error) {
	var (
		err  error
		node *PregnancyTest
	)
	if len(ptuo.hooks) == 0 {
		node, err = ptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PregnancyTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ptuo.mutation = mutation
			node, err = ptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptuo.hooks) - 1; i >= 0; i-- {
			mut = ptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PregnancyTestUpdateOne) SaveX(ctx context.Context) *PregnancyTest {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PregnancyTestUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PregnancyTestUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptuo *PregnancyTestUpdateOne) sqlSave(ctx context.Context) (_node *PregnancyTest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pregnancytest.Table,
			Columns: pregnancytest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pregnancytest.FieldID,
			},
		},
	}
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PregnancyTest.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldName,
		})
	}
	if ptuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pregnancytest.FieldName,
		})
	}
	if value, ok := ptuo.mutation.EarNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldEarNumber,
		})
	}
	if value, ok := ptuo.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldTimes,
		})
	}
	if value, ok := ptuo.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldTimes,
		})
	}
	if value, ok := ptuo.mutation.ReproductiveState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldReproductiveState,
		})
	}
	if value, ok := ptuo.mutation.ShedName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldShedName,
		})
	}
	if value, ok := ptuo.mutation.BreedingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldBreedingAt,
		})
	}
	if value, ok := ptuo.mutation.AddedBreedingAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldBreedingAt,
		})
	}
	if value, ok := ptuo.mutation.TestAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTestAt,
		})
	}
	if value, ok := ptuo.mutation.AddedTestAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTestAt,
		})
	}
	if value, ok := ptuo.mutation.PregnancyTestTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestTypeId,
		})
	}
	if value, ok := ptuo.mutation.AddedPregnancyTestTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestTypeId,
		})
	}
	if value, ok := ptuo.mutation.PregnancyTestTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestTypeName,
		})
	}
	if value, ok := ptuo.mutation.PregnancyTestMethodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestMethodId,
		})
	}
	if value, ok := ptuo.mutation.AddedPregnancyTestMethodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestMethodId,
		})
	}
	if value, ok := ptuo.mutation.PregnancyTestMethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestMethodName,
		})
	}
	if value, ok := ptuo.mutation.PregnancyTestResultId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestResultId,
		})
	}
	if value, ok := ptuo.mutation.AddedPregnancyTestResultId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestResultId,
		})
	}
	if value, ok := ptuo.mutation.PregnancyTestResultName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldPregnancyTestResultName,
		})
	}
	if value, ok := ptuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldUserName,
		})
	}
	if value, ok := ptuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTenantId,
		})
	}
	if value, ok := ptuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldTenantId,
		})
	}
	if value, ok := ptuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldTenantName,
		})
	}
	if value, ok := ptuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytest.FieldRemarks,
		})
	}
	if value, ok := ptuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldCreatedAt,
		})
	}
	if value, ok := ptuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldCreatedAt,
		})
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldUpdatedAt,
		})
	}
	if value, ok := ptuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pregnancytest.FieldUpdatedAt,
		})
	}
	if value, ok := ptuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldDeleted,
		})
	}
	if value, ok := ptuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pregnancytest.FieldDeleted,
		})
	}
	_node = &PregnancyTest{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pregnancytest.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

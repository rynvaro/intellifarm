// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/pregnancytestmethod"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// PregnancyTestMethodUpdate is the builder for updating PregnancyTestMethod entities.
type PregnancyTestMethodUpdate struct {
	config
	hooks      []Hook
	mutation   *PregnancyTestMethodMutation
	predicates []predicate.PregnancyTestMethod
}

// Where adds a new predicate for the builder.
func (ptmu *PregnancyTestMethodUpdate) Where(ps ...predicate.PregnancyTestMethod) *PregnancyTestMethodUpdate {
	ptmu.predicates = append(ptmu.predicates, ps...)
	return ptmu
}

// SetName sets the name field.
func (ptmu *PregnancyTestMethodUpdate) SetName(s string) *PregnancyTestMethodUpdate {
	ptmu.mutation.SetName(s)
	return ptmu
}

// Mutation returns the PregnancyTestMethodMutation object of the builder.
func (ptmu *PregnancyTestMethodUpdate) Mutation() *PregnancyTestMethodMutation {
	return ptmu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ptmu *PregnancyTestMethodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ptmu.hooks) == 0 {
		if err = ptmu.check(); err != nil {
			return 0, err
		}
		affected, err = ptmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PregnancyTestMethodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptmu.check(); err != nil {
				return 0, err
			}
			ptmu.mutation = mutation
			affected, err = ptmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ptmu.hooks) - 1; i >= 0; i-- {
			mut = ptmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptmu *PregnancyTestMethodUpdate) SaveX(ctx context.Context) int {
	affected, err := ptmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptmu *PregnancyTestMethodUpdate) Exec(ctx context.Context) error {
	_, err := ptmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptmu *PregnancyTestMethodUpdate) ExecX(ctx context.Context) {
	if err := ptmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptmu *PregnancyTestMethodUpdate) check() error {
	if v, ok := ptmu.mutation.Name(); ok {
		if err := pregnancytestmethod.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ptmu *PregnancyTestMethodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pregnancytestmethod.Table,
			Columns: pregnancytestmethod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pregnancytestmethod.FieldID,
			},
		},
	}
	if ps := ptmu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptmu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytestmethod.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pregnancytestmethod.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PregnancyTestMethodUpdateOne is the builder for updating a single PregnancyTestMethod entity.
type PregnancyTestMethodUpdateOne struct {
	config
	hooks    []Hook
	mutation *PregnancyTestMethodMutation
}

// SetName sets the name field.
func (ptmuo *PregnancyTestMethodUpdateOne) SetName(s string) *PregnancyTestMethodUpdateOne {
	ptmuo.mutation.SetName(s)
	return ptmuo
}

// Mutation returns the PregnancyTestMethodMutation object of the builder.
func (ptmuo *PregnancyTestMethodUpdateOne) Mutation() *PregnancyTestMethodMutation {
	return ptmuo.mutation
}

// Save executes the query and returns the updated entity.
func (ptmuo *PregnancyTestMethodUpdateOne) Save(ctx context.Context) (*PregnancyTestMethod, error) {
	var (
		err  error
		node *PregnancyTestMethod
	)
	if len(ptmuo.hooks) == 0 {
		if err = ptmuo.check(); err != nil {
			return nil, err
		}
		node, err = ptmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PregnancyTestMethodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptmuo.check(); err != nil {
				return nil, err
			}
			ptmuo.mutation = mutation
			node, err = ptmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptmuo.hooks) - 1; i >= 0; i-- {
			mut = ptmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptmuo *PregnancyTestMethodUpdateOne) SaveX(ctx context.Context) *PregnancyTestMethod {
	node, err := ptmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptmuo *PregnancyTestMethodUpdateOne) Exec(ctx context.Context) error {
	_, err := ptmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptmuo *PregnancyTestMethodUpdateOne) ExecX(ctx context.Context) {
	if err := ptmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptmuo *PregnancyTestMethodUpdateOne) check() error {
	if v, ok := ptmuo.mutation.Name(); ok {
		if err := pregnancytestmethod.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ptmuo *PregnancyTestMethodUpdateOne) sqlSave(ctx context.Context) (_node *PregnancyTestMethod, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pregnancytestmethod.Table,
			Columns: pregnancytestmethod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pregnancytestmethod.FieldID,
			},
		},
	}
	id, ok := ptmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PregnancyTestMethod.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ptmuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pregnancytestmethod.FieldName,
		})
	}
	_node = &PregnancyTestMethod{config: ptmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ptmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pregnancytestmethod.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

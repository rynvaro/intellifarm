// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/pregnancytestresult"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// PregnancyTestResult is the model entity for the PregnancyTestResult schema.
type PregnancyTestResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PregnancyTestResult) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pregnancytestresult.FieldID:
			values[i] = new(sql.NullInt64)
		case pregnancytestresult.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PregnancyTestResult", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PregnancyTestResult fields.
func (ptr *PregnancyTestResult) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pregnancytestresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ptr.ID = int(value.Int64)
		case pregnancytestresult.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ptr.Name = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PregnancyTestResult.
// Note that you need to call PregnancyTestResult.Unwrap() before calling this method if this PregnancyTestResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (ptr *PregnancyTestResult) Update() *PregnancyTestResultUpdateOne {
	return (&PregnancyTestResultClient{config: ptr.config}).UpdateOne(ptr)
}

// Unwrap unwraps the PregnancyTestResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ptr *PregnancyTestResult) Unwrap() *PregnancyTestResult {
	_tx, ok := ptr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PregnancyTestResult is not a transactional entity")
	}
	ptr.config.driver = _tx.drv
	return ptr
}

// String implements the fmt.Stringer.
func (ptr *PregnancyTestResult) String() string {
	var builder strings.Builder
	builder.WriteString("PregnancyTestResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ptr.ID))
	builder.WriteString("name=")
	builder.WriteString(ptr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// PregnancyTestResults is a parsable slice of PregnancyTestResult.
type PregnancyTestResults []*PregnancyTestResult

func (ptr PregnancyTestResults) config(cfg config) {
	for _i := range ptr {
		ptr[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"cattleai/ent"
	"context"
	"errors"
	"fmt"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = errors.New("ent/privacy: allow rule")

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = errors.New("ent/privacy: deny rule")

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = errors.New("ent/privacy: skip rule")
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

type decisionCtxKey struct{}

// DecisionContext creates a decision context.
func DecisionContext(parent context.Context, decision error) context.Context {
	if decision == nil || errors.Is(decision, Skip) {
		return parent
	}
	return context.WithValue(parent, decisionCtxKey{}, decision)
}

func decisionFromContext(ctx context.Context) (error, bool) {
	decision, ok := ctx.Value(decisionCtxKey{}).(error)
	if ok && errors.Is(decision, Allow) {
		decision = nil
	}
	return decision, ok
}

type (
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy []QueryRule

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule interface {
		EvalQuery(context.Context, ent.Query) error
	}
)

// EvalQuery evaluates a query against a query policy.
func (policy QueryPolicy) EvalQuery(ctx context.Context, q ent.Query) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalQuery(ctx, q); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

type (
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy []MutationRule

	// MutationRule defines the interface deciding whether a
	// mutation is allowed and optionally modify it.
	MutationRule interface {
		EvalMutation(context.Context, ent.Mutation) error
	}
)

// EvalMutation evaluates a mutation against a mutation policy.
func (policy MutationPolicy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalMutation(ctx, m); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// MutationRuleFunc type is an adapter to allow the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// Policy groups query and mutation policies.
type Policy struct {
	Query    QueryPolicy
	Mutation MutationPolicy
}

// EvalQuery forwards evaluation to query policy.
func (policy Policy) EvalQuery(ctx context.Context, q ent.Query) error {
	return policy.Query.EvalQuery(ctx, q)
}

// EvalMutation forwards evaluation to mutation policy.
func (policy Policy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return policy.Mutation.EvalMutation(ctx, m)
}

// QueryMutationRule is the interface that groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The BirthSurroundingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BirthSurroundingQueryRuleFunc func(context.Context, *ent.BirthSurroundingQuery) error

// EvalQuery return f(ctx, q).
func (f BirthSurroundingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BirthSurroundingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BirthSurroundingQuery", q)
}

// The BirthSurroundingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BirthSurroundingMutationRuleFunc func(context.Context, *ent.BirthSurroundingMutation) error

// EvalMutation calls f(ctx, m).
func (f BirthSurroundingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BirthSurroundingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BirthSurroundingMutation", m)
}

// The BreathRateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BreathRateQueryRuleFunc func(context.Context, *ent.BreathRateQuery) error

// EvalQuery return f(ctx, q).
func (f BreathRateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BreathRateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BreathRateQuery", q)
}

// The BreathRateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BreathRateMutationRuleFunc func(context.Context, *ent.BreathRateMutation) error

// EvalMutation calls f(ctx, m).
func (f BreathRateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BreathRateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BreathRateMutation", m)
}

// The BreedingTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BreedingTypeQueryRuleFunc func(context.Context, *ent.BreedingTypeQuery) error

// EvalQuery return f(ctx, q).
func (f BreedingTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BreedingTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BreedingTypeQuery", q)
}

// The BreedingTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BreedingTypeMutationRuleFunc func(context.Context, *ent.BreedingTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f BreedingTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BreedingTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BreedingTypeMutation", m)
}

// The CategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CategoryQueryRuleFunc func(context.Context, *ent.CategoryQuery) error

// EvalQuery return f(ctx, q).
func (f CategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CategoryQuery", q)
}

// The CategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CategoryMutationRuleFunc func(context.Context, *ent.CategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f CategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CategoryMutation", m)
}

// The CattleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleQueryRuleFunc func(context.Context, *ent.CattleQuery) error

// EvalQuery return f(ctx, q).
func (f CattleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleQuery", q)
}

// The CattleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleMutationRuleFunc func(context.Context, *ent.CattleMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleMutation", m)
}

// The CattleCateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleCateQueryRuleFunc func(context.Context, *ent.CattleCateQuery) error

// EvalQuery return f(ctx, q).
func (f CattleCateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleCateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleCateQuery", q)
}

// The CattleCateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleCateMutationRuleFunc func(context.Context, *ent.CattleCateMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleCateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleCateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleCateMutation", m)
}

// The CattleGenderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleGenderQueryRuleFunc func(context.Context, *ent.CattleGenderQuery) error

// EvalQuery return f(ctx, q).
func (f CattleGenderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleGenderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleGenderQuery", q)
}

// The CattleGenderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleGenderMutationRuleFunc func(context.Context, *ent.CattleGenderMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleGenderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleGenderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleGenderMutation", m)
}

// The CattleGrowQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleGrowQueryRuleFunc func(context.Context, *ent.CattleGrowQuery) error

// EvalQuery return f(ctx, q).
func (f CattleGrowQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleGrowQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleGrowQuery", q)
}

// The CattleGrowMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleGrowMutationRuleFunc func(context.Context, *ent.CattleGrowMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleGrowMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleGrowMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleGrowMutation", m)
}

// The CattleGrowsDataQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleGrowsDataQueryRuleFunc func(context.Context, *ent.CattleGrowsDataQuery) error

// EvalQuery return f(ctx, q).
func (f CattleGrowsDataQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleGrowsDataQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleGrowsDataQuery", q)
}

// The CattleGrowsDataMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleGrowsDataMutationRuleFunc func(context.Context, *ent.CattleGrowsDataMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleGrowsDataMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleGrowsDataMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleGrowsDataMutation", m)
}

// The CattleGrowsRateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleGrowsRateQueryRuleFunc func(context.Context, *ent.CattleGrowsRateQuery) error

// EvalQuery return f(ctx, q).
func (f CattleGrowsRateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleGrowsRateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleGrowsRateQuery", q)
}

// The CattleGrowsRateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleGrowsRateMutationRuleFunc func(context.Context, *ent.CattleGrowsRateMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleGrowsRateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleGrowsRateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleGrowsRateMutation", m)
}

// The CattleHairColorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleHairColorQueryRuleFunc func(context.Context, *ent.CattleHairColorQuery) error

// EvalQuery return f(ctx, q).
func (f CattleHairColorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleHairColorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleHairColorQuery", q)
}

// The CattleHairColorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleHairColorMutationRuleFunc func(context.Context, *ent.CattleHairColorMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleHairColorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleHairColorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleHairColorMutation", m)
}

// The CattleJoinedTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleJoinedTypeQueryRuleFunc func(context.Context, *ent.CattleJoinedTypeQuery) error

// EvalQuery return f(ctx, q).
func (f CattleJoinedTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleJoinedTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleJoinedTypeQuery", q)
}

// The CattleJoinedTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleJoinedTypeMutationRuleFunc func(context.Context, *ent.CattleJoinedTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleJoinedTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleJoinedTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleJoinedTypeMutation", m)
}

// The CattleOwnerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleOwnerQueryRuleFunc func(context.Context, *ent.CattleOwnerQuery) error

// EvalQuery return f(ctx, q).
func (f CattleOwnerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleOwnerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleOwnerQuery", q)
}

// The CattleOwnerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleOwnerMutationRuleFunc func(context.Context, *ent.CattleOwnerMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleOwnerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleOwnerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleOwnerMutation", m)
}

// The CattleTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CattleTypeQueryRuleFunc func(context.Context, *ent.CattleTypeQuery) error

// EvalQuery return f(ctx, q).
func (f CattleTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CattleTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CattleTypeQuery", q)
}

// The CattleTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CattleTypeMutationRuleFunc func(context.Context, *ent.CattleTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f CattleTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CattleTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CattleTypeMutation", m)
}

// The ConfQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConfQueryRuleFunc func(context.Context, *ent.ConfQuery) error

// EvalQuery return f(ctx, q).
func (f ConfQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConfQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConfQuery", q)
}

// The ConfMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConfMutationRuleFunc func(context.Context, *ent.ConfMutation) error

// EvalMutation calls f(ctx, m).
func (f ConfMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConfMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConfMutation", m)
}

// The DutyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DutyQueryRuleFunc func(context.Context, *ent.DutyQuery) error

// EvalQuery return f(ctx, q).
func (f DutyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DutyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DutyQuery", q)
}

// The DutyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DutyMutationRuleFunc func(context.Context, *ent.DutyMutation) error

// EvalMutation calls f(ctx, m).
func (f DutyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DutyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DutyMutation", m)
}

// The FarmQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FarmQueryRuleFunc func(context.Context, *ent.FarmQuery) error

// EvalQuery return f(ctx, q).
func (f FarmQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FarmQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FarmQuery", q)
}

// The FarmMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FarmMutationRuleFunc func(context.Context, *ent.FarmMutation) error

// EvalMutation calls f(ctx, m).
func (f FarmMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FarmMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FarmMutation", m)
}

// The HairStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HairStateQueryRuleFunc func(context.Context, *ent.HairStateQuery) error

// EvalQuery return f(ctx, q).
func (f HairStateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HairStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HairStateQuery", q)
}

// The HairStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HairStateMutationRuleFunc func(context.Context, *ent.HairStateMutation) error

// EvalMutation calls f(ctx, m).
func (f HairStateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HairStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HairStateMutation", m)
}

// The PositionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PositionQueryRuleFunc func(context.Context, *ent.PositionQuery) error

// EvalQuery return f(ctx, q).
func (f PositionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PositionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PositionQuery", q)
}

// The PositionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PositionMutationRuleFunc func(context.Context, *ent.PositionMutation) error

// EvalMutation calls f(ctx, m).
func (f PositionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PositionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PositionMutation", m)
}

// The ReproductiveStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReproductiveStateQueryRuleFunc func(context.Context, *ent.ReproductiveStateQuery) error

// EvalQuery return f(ctx, q).
func (f ReproductiveStateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReproductiveStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReproductiveStateQuery", q)
}

// The ReproductiveStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReproductiveStateMutationRuleFunc func(context.Context, *ent.ReproductiveStateMutation) error

// EvalMutation calls f(ctx, m).
func (f ReproductiveStateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReproductiveStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReproductiveStateMutation", m)
}

// The ShedQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShedQueryRuleFunc func(context.Context, *ent.ShedQuery) error

// EvalQuery return f(ctx, q).
func (f ShedQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShedQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShedQuery", q)
}

// The ShedMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShedMutationRuleFunc func(context.Context, *ent.ShedMutation) error

// EvalMutation calls f(ctx, m).
func (f ShedMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShedMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShedMutation", m)
}

// The ShedCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShedCategoryQueryRuleFunc func(context.Context, *ent.ShedCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f ShedCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShedCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShedCategoryQuery", q)
}

// The ShedCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShedCategoryMutationRuleFunc func(context.Context, *ent.ShedCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ShedCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShedCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShedCategoryMutation", m)
}

// The ShedTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShedTypeQueryRuleFunc func(context.Context, *ent.ShedTypeQuery) error

// EvalQuery return f(ctx, q).
func (f ShedTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShedTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShedTypeQuery", q)
}

// The ShedTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShedTypeMutationRuleFunc func(context.Context, *ent.ShedTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f ShedTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShedTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShedTypeMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The WindDirectionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WindDirectionQueryRuleFunc func(context.Context, *ent.WindDirectionQuery) error

// EvalQuery return f(ctx, q).
func (f WindDirectionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WindDirectionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WindDirectionQuery", q)
}

// The WindDirectionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WindDirectionMutationRuleFunc func(context.Context, *ent.WindDirectionMutation) error

// EvalMutation calls f(ctx, m).
func (f WindDirectionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WindDirectionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WindDirectionMutation", m)
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/ration"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RationCreate is the builder for creating a Ration entity.
type RationCreate struct {
	config
	mutation *RationMutation
	hooks    []Hook
}

// SetName sets the name field.
func (rc *RationCreate) SetName(s string) *RationCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetCode sets the code field.
func (rc *RationCreate) SetCode(s string) *RationCreate {
	rc.mutation.SetCode(s)
	return rc
}

// SetStatus sets the status field.
func (rc *RationCreate) SetStatus(i int) *RationCreate {
	rc.mutation.SetStatus(i)
	return rc
}

// SetCreateDate sets the createDate field.
func (rc *RationCreate) SetCreateDate(i int64) *RationCreate {
	rc.mutation.SetCreateDate(i)
	return rc
}

// SetAdjustDate sets the adjustDate field.
func (rc *RationCreate) SetAdjustDate(i int64) *RationCreate {
	rc.mutation.SetAdjustDate(i)
	return rc
}

// SetDisableDate sets the disableDate field.
func (rc *RationCreate) SetDisableDate(i int64) *RationCreate {
	rc.mutation.SetDisableDate(i)
	return rc
}

// SetCost sets the cost field.
func (rc *RationCreate) SetCost(i int64) *RationCreate {
	rc.mutation.SetCost(i)
	return rc
}

// SetRemarks sets the remarks field.
func (rc *RationCreate) SetRemarks(s string) *RationCreate {
	rc.mutation.SetRemarks(s)
	return rc
}

// SetCreatedAt sets the createdAt field.
func (rc *RationCreate) SetCreatedAt(i int64) *RationCreate {
	rc.mutation.SetCreatedAt(i)
	return rc
}

// SetUpdatedAt sets the updatedAt field.
func (rc *RationCreate) SetUpdatedAt(i int64) *RationCreate {
	rc.mutation.SetUpdatedAt(i)
	return rc
}

// SetDeleted sets the deleted field.
func (rc *RationCreate) SetDeleted(i int) *RationCreate {
	rc.mutation.SetDeleted(i)
	return rc
}

// Mutation returns the RationMutation object of the builder.
func (rc *RationCreate) Mutation() *RationMutation {
	return rc.mutation
}

// Save creates the Ration in the database.
func (rc *RationCreate) Save(ctx context.Context) (*Ration, error) {
	var (
		err  error
		node *Ration
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RationCreate) SaveX(ctx context.Context) *Ration {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rc *RationCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := rc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := rc.mutation.CreateDate(); !ok {
		return &ValidationError{Name: "createDate", err: errors.New("ent: missing required field \"createDate\"")}
	}
	if _, ok := rc.mutation.AdjustDate(); !ok {
		return &ValidationError{Name: "adjustDate", err: errors.New("ent: missing required field \"adjustDate\"")}
	}
	if _, ok := rc.mutation.DisableDate(); !ok {
		return &ValidationError{Name: "disableDate", err: errors.New("ent: missing required field \"disableDate\"")}
	}
	if _, ok := rc.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New("ent: missing required field \"cost\"")}
	}
	if _, ok := rc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := rc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (rc *RationCreate) sqlSave(ctx context.Context) (*Ration, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (rc *RationCreate) createSpec() (*Ration, *sqlgraph.CreateSpec) {
	var (
		_node = &Ration{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ration.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ration.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ration.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := rc.mutation.CreateDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldCreateDate,
		})
		_node.CreateDate = value
	}
	if value, ok := rc.mutation.AdjustDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldAdjustDate,
		})
		_node.AdjustDate = value
	}
	if value, ok := rc.mutation.DisableDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldDisableDate,
		})
		_node.DisableDate = value
	}
	if value, ok := rc.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldCost,
		})
		_node.Cost = value
	}
	if value, ok := rc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ration.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// RationCreateBulk is the builder for creating a bulk of Ration entities.
type RationCreateBulk struct {
	config
	builders []*RationCreate
}

// Save creates the Ration entities in the database.
func (rcb *RationCreateBulk) Save(ctx context.Context) ([]*Ration, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Ration, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rcb *RationCreateBulk) SaveX(ctx context.Context) []*Ration {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

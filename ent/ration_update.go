// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/ration"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RationUpdate is the builder for updating Ration entities.
type RationUpdate struct {
	config
	hooks      []Hook
	mutation   *RationMutation
	predicates []predicate.Ration
}

// Where adds a new predicate for the builder.
func (ru *RationUpdate) Where(ps ...predicate.Ration) *RationUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetName sets the name field.
func (ru *RationUpdate) SetName(s string) *RationUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetFormulaId sets the formulaId field.
func (ru *RationUpdate) SetFormulaId(i int64) *RationUpdate {
	ru.mutation.ResetFormulaId()
	ru.mutation.SetFormulaId(i)
	return ru
}

// AddFormulaId adds i to formulaId.
func (ru *RationUpdate) AddFormulaId(i int64) *RationUpdate {
	ru.mutation.AddFormulaId(i)
	return ru
}

// SetFormulaName sets the formulaName field.
func (ru *RationUpdate) SetFormulaName(s string) *RationUpdate {
	ru.mutation.SetFormulaName(s)
	return ru
}

// SetFormulaCode sets the formulaCode field.
func (ru *RationUpdate) SetFormulaCode(s string) *RationUpdate {
	ru.mutation.SetFormulaCode(s)
	return ru
}

// SetInventory sets the inventory field.
func (ru *RationUpdate) SetInventory(i int64) *RationUpdate {
	ru.mutation.ResetInventory()
	ru.mutation.SetInventory(i)
	return ru
}

// AddInventory adds i to inventory.
func (ru *RationUpdate) AddInventory(i int64) *RationUpdate {
	ru.mutation.AddInventory(i)
	return ru
}

// SetUserName sets the userName field.
func (ru *RationUpdate) SetUserName(s string) *RationUpdate {
	ru.mutation.SetUserName(s)
	return ru
}

// SetTenantId sets the tenantId field.
func (ru *RationUpdate) SetTenantId(i int64) *RationUpdate {
	ru.mutation.ResetTenantId()
	ru.mutation.SetTenantId(i)
	return ru
}

// AddTenantId adds i to tenantId.
func (ru *RationUpdate) AddTenantId(i int64) *RationUpdate {
	ru.mutation.AddTenantId(i)
	return ru
}

// SetTenantName sets the tenantName field.
func (ru *RationUpdate) SetTenantName(s string) *RationUpdate {
	ru.mutation.SetTenantName(s)
	return ru
}

// SetFarmId sets the farmId field.
func (ru *RationUpdate) SetFarmId(i int64) *RationUpdate {
	ru.mutation.ResetFarmId()
	ru.mutation.SetFarmId(i)
	return ru
}

// AddFarmId adds i to farmId.
func (ru *RationUpdate) AddFarmId(i int64) *RationUpdate {
	ru.mutation.AddFarmId(i)
	return ru
}

// SetFarmName sets the farmName field.
func (ru *RationUpdate) SetFarmName(s string) *RationUpdate {
	ru.mutation.SetFarmName(s)
	return ru
}

// SetRemarks sets the remarks field.
func (ru *RationUpdate) SetRemarks(s string) *RationUpdate {
	ru.mutation.SetRemarks(s)
	return ru
}

// SetCreatedAt sets the createdAt field.
func (ru *RationUpdate) SetCreatedAt(i int64) *RationUpdate {
	ru.mutation.ResetCreatedAt()
	ru.mutation.SetCreatedAt(i)
	return ru
}

// AddCreatedAt adds i to createdAt.
func (ru *RationUpdate) AddCreatedAt(i int64) *RationUpdate {
	ru.mutation.AddCreatedAt(i)
	return ru
}

// SetUpdatedAt sets the updatedAt field.
func (ru *RationUpdate) SetUpdatedAt(i int64) *RationUpdate {
	ru.mutation.ResetUpdatedAt()
	ru.mutation.SetUpdatedAt(i)
	return ru
}

// AddUpdatedAt adds i to updatedAt.
func (ru *RationUpdate) AddUpdatedAt(i int64) *RationUpdate {
	ru.mutation.AddUpdatedAt(i)
	return ru
}

// SetDeleted sets the deleted field.
func (ru *RationUpdate) SetDeleted(i int) *RationUpdate {
	ru.mutation.ResetDeleted()
	ru.mutation.SetDeleted(i)
	return ru
}

// AddDeleted adds i to deleted.
func (ru *RationUpdate) AddDeleted(i int) *RationUpdate {
	ru.mutation.AddDeleted(i)
	return ru
}

// Mutation returns the RationMutation object of the builder.
func (ru *RationUpdate) Mutation() *RationMutation {
	return ru.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RationUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RationUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RationUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ration.Table,
			Columns: ration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ration.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldName,
		})
	}
	if value, ok := ru.mutation.FormulaId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldFormulaId,
		})
	}
	if value, ok := ru.mutation.AddedFormulaId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldFormulaId,
		})
	}
	if value, ok := ru.mutation.FormulaName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldFormulaName,
		})
	}
	if value, ok := ru.mutation.FormulaCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldFormulaCode,
		})
	}
	if value, ok := ru.mutation.Inventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldInventory,
		})
	}
	if value, ok := ru.mutation.AddedInventory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldInventory,
		})
	}
	if value, ok := ru.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldUserName,
		})
	}
	if value, ok := ru.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldTenantId,
		})
	}
	if value, ok := ru.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldTenantId,
		})
	}
	if value, ok := ru.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldTenantName,
		})
	}
	if value, ok := ru.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldFarmId,
		})
	}
	if value, ok := ru.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldFarmId,
		})
	}
	if value, ok := ru.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldFarmName,
		})
	}
	if value, ok := ru.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldRemarks,
		})
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldCreatedAt,
		})
	}
	if value, ok := ru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldCreatedAt,
		})
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ration.FieldDeleted,
		})
	}
	if value, ok := ru.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ration.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ration.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RationUpdateOne is the builder for updating a single Ration entity.
type RationUpdateOne struct {
	config
	hooks    []Hook
	mutation *RationMutation
}

// SetName sets the name field.
func (ruo *RationUpdateOne) SetName(s string) *RationUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetFormulaId sets the formulaId field.
func (ruo *RationUpdateOne) SetFormulaId(i int64) *RationUpdateOne {
	ruo.mutation.ResetFormulaId()
	ruo.mutation.SetFormulaId(i)
	return ruo
}

// AddFormulaId adds i to formulaId.
func (ruo *RationUpdateOne) AddFormulaId(i int64) *RationUpdateOne {
	ruo.mutation.AddFormulaId(i)
	return ruo
}

// SetFormulaName sets the formulaName field.
func (ruo *RationUpdateOne) SetFormulaName(s string) *RationUpdateOne {
	ruo.mutation.SetFormulaName(s)
	return ruo
}

// SetFormulaCode sets the formulaCode field.
func (ruo *RationUpdateOne) SetFormulaCode(s string) *RationUpdateOne {
	ruo.mutation.SetFormulaCode(s)
	return ruo
}

// SetInventory sets the inventory field.
func (ruo *RationUpdateOne) SetInventory(i int64) *RationUpdateOne {
	ruo.mutation.ResetInventory()
	ruo.mutation.SetInventory(i)
	return ruo
}

// AddInventory adds i to inventory.
func (ruo *RationUpdateOne) AddInventory(i int64) *RationUpdateOne {
	ruo.mutation.AddInventory(i)
	return ruo
}

// SetUserName sets the userName field.
func (ruo *RationUpdateOne) SetUserName(s string) *RationUpdateOne {
	ruo.mutation.SetUserName(s)
	return ruo
}

// SetTenantId sets the tenantId field.
func (ruo *RationUpdateOne) SetTenantId(i int64) *RationUpdateOne {
	ruo.mutation.ResetTenantId()
	ruo.mutation.SetTenantId(i)
	return ruo
}

// AddTenantId adds i to tenantId.
func (ruo *RationUpdateOne) AddTenantId(i int64) *RationUpdateOne {
	ruo.mutation.AddTenantId(i)
	return ruo
}

// SetTenantName sets the tenantName field.
func (ruo *RationUpdateOne) SetTenantName(s string) *RationUpdateOne {
	ruo.mutation.SetTenantName(s)
	return ruo
}

// SetFarmId sets the farmId field.
func (ruo *RationUpdateOne) SetFarmId(i int64) *RationUpdateOne {
	ruo.mutation.ResetFarmId()
	ruo.mutation.SetFarmId(i)
	return ruo
}

// AddFarmId adds i to farmId.
func (ruo *RationUpdateOne) AddFarmId(i int64) *RationUpdateOne {
	ruo.mutation.AddFarmId(i)
	return ruo
}

// SetFarmName sets the farmName field.
func (ruo *RationUpdateOne) SetFarmName(s string) *RationUpdateOne {
	ruo.mutation.SetFarmName(s)
	return ruo
}

// SetRemarks sets the remarks field.
func (ruo *RationUpdateOne) SetRemarks(s string) *RationUpdateOne {
	ruo.mutation.SetRemarks(s)
	return ruo
}

// SetCreatedAt sets the createdAt field.
func (ruo *RationUpdateOne) SetCreatedAt(i int64) *RationUpdateOne {
	ruo.mutation.ResetCreatedAt()
	ruo.mutation.SetCreatedAt(i)
	return ruo
}

// AddCreatedAt adds i to createdAt.
func (ruo *RationUpdateOne) AddCreatedAt(i int64) *RationUpdateOne {
	ruo.mutation.AddCreatedAt(i)
	return ruo
}

// SetUpdatedAt sets the updatedAt field.
func (ruo *RationUpdateOne) SetUpdatedAt(i int64) *RationUpdateOne {
	ruo.mutation.ResetUpdatedAt()
	ruo.mutation.SetUpdatedAt(i)
	return ruo
}

// AddUpdatedAt adds i to updatedAt.
func (ruo *RationUpdateOne) AddUpdatedAt(i int64) *RationUpdateOne {
	ruo.mutation.AddUpdatedAt(i)
	return ruo
}

// SetDeleted sets the deleted field.
func (ruo *RationUpdateOne) SetDeleted(i int) *RationUpdateOne {
	ruo.mutation.ResetDeleted()
	ruo.mutation.SetDeleted(i)
	return ruo
}

// AddDeleted adds i to deleted.
func (ruo *RationUpdateOne) AddDeleted(i int) *RationUpdateOne {
	ruo.mutation.AddDeleted(i)
	return ruo
}

// Mutation returns the RationMutation object of the builder.
func (ruo *RationUpdateOne) Mutation() *RationMutation {
	return ruo.mutation
}

// Save executes the query and returns the updated entity.
func (ruo *RationUpdateOne) Save(ctx context.Context) (*Ration, error) {
	var (
		err  error
		node *Ration
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RationUpdateOne) SaveX(ctx context.Context) *Ration {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RationUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RationUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RationUpdateOne) sqlSave(ctx context.Context) (_node *Ration, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ration.Table,
			Columns: ration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ration.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Ration.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldName,
		})
	}
	if value, ok := ruo.mutation.FormulaId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldFormulaId,
		})
	}
	if value, ok := ruo.mutation.AddedFormulaId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldFormulaId,
		})
	}
	if value, ok := ruo.mutation.FormulaName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldFormulaName,
		})
	}
	if value, ok := ruo.mutation.FormulaCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldFormulaCode,
		})
	}
	if value, ok := ruo.mutation.Inventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldInventory,
		})
	}
	if value, ok := ruo.mutation.AddedInventory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldInventory,
		})
	}
	if value, ok := ruo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldUserName,
		})
	}
	if value, ok := ruo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldTenantId,
		})
	}
	if value, ok := ruo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldTenantId,
		})
	}
	if value, ok := ruo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldTenantName,
		})
	}
	if value, ok := ruo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldFarmId,
		})
	}
	if value, ok := ruo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldFarmId,
		})
	}
	if value, ok := ruo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldFarmName,
		})
	}
	if value, ok := ruo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ration.FieldRemarks,
		})
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldCreatedAt,
		})
	}
	if value, ok := ruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldCreatedAt,
		})
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ration.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ration.FieldDeleted,
		})
	}
	if value, ok := ruo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ration.FieldDeleted,
		})
	}
	_node = &Ration{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ration.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

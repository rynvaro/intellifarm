// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/rationformula"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// RationFormula is the model entity for the RationFormula schema.
type RationFormula struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Cost holds the value of the "cost" field.
	Cost int64 `json:"cost,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	TenantId int64 `json:"tenantId,omitempty"`
	// TenantName holds the value of the "tenantName" field.
	TenantName string `json:"tenantName,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RationFormula) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // code
		&sql.NullInt64{},  // status
		&sql.NullInt64{},  // cost
		&sql.NullString{}, // data
		&sql.NullInt64{},  // tenantId
		&sql.NullString{}, // tenantName
		&sql.NullInt64{},  // farmId
		&sql.NullString{}, // farmName
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RationFormula fields.
func (rf *RationFormula) assignValues(values ...interface{}) error {
	if m, n := len(values), len(rationformula.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rf.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		rf.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[1])
	} else if value.Valid {
		rf.Code = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[2])
	} else if value.Valid {
		rf.Status = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field cost", values[3])
	} else if value.Valid {
		rf.Cost = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field data", values[4])
	} else if value.Valid {
		rf.Data = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tenantId", values[5])
	} else if value.Valid {
		rf.TenantId = value.Int64
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tenantName", values[6])
	} else if value.Valid {
		rf.TenantName = value.String
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[7])
	} else if value.Valid {
		rf.FarmId = value.Int64
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[8])
	} else if value.Valid {
		rf.FarmName = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[9])
	} else if value.Valid {
		rf.Remarks = value.String
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[10])
	} else if value.Valid {
		rf.CreatedAt = value.Int64
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[11])
	} else if value.Valid {
		rf.UpdatedAt = value.Int64
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[12])
	} else if value.Valid {
		rf.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this RationFormula.
// Note that, you need to call RationFormula.Unwrap() before calling this method, if this RationFormula
// was returned from a transaction, and the transaction was committed or rolled back.
func (rf *RationFormula) Update() *RationFormulaUpdateOne {
	return (&RationFormulaClient{config: rf.config}).UpdateOne(rf)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rf *RationFormula) Unwrap() *RationFormula {
	tx, ok := rf.config.driver.(*txDriver)
	if !ok {
		panic("ent: RationFormula is not a transactional entity")
	}
	rf.config.driver = tx.drv
	return rf
}

// String implements the fmt.Stringer.
func (rf *RationFormula) String() string {
	var builder strings.Builder
	builder.WriteString("RationFormula(")
	builder.WriteString(fmt.Sprintf("id=%v", rf.ID))
	builder.WriteString(", name=")
	builder.WriteString(rf.Name)
	builder.WriteString(", code=")
	builder.WriteString(rf.Code)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", rf.Status))
	builder.WriteString(", cost=")
	builder.WriteString(fmt.Sprintf("%v", rf.Cost))
	builder.WriteString(", data=")
	builder.WriteString(rf.Data)
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", rf.TenantId))
	builder.WriteString(", tenantName=")
	builder.WriteString(rf.TenantName)
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", rf.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(rf.FarmName)
	builder.WriteString(", remarks=")
	builder.WriteString(rf.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", rf.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", rf.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", rf.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// RationFormulas is a parsable slice of RationFormula.
type RationFormulas []*RationFormula

func (rf RationFormulas) config(cfg config) {
	for _i := range rf {
		rf[_i].config = cfg
	}
}

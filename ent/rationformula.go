// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/rationformula"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// RationFormula is the model entity for the RationFormula schema.
type RationFormula struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// 1 启用 2 停用
	Status int `json:"status,omitempty"`
	// 成本
	Cost int64 `json:"cost,omitempty"`
	// JSON格式的配比数据
	Data string `json:"data,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RationFormula) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rationformula.FieldID, rationformula.FieldStatus, rationformula.FieldCost, rationformula.FieldTenantId, rationformula.FieldFarmId, rationformula.FieldCreatedAt, rationformula.FieldUpdatedAt, rationformula.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case rationformula.FieldName, rationformula.FieldCode, rationformula.FieldData, rationformula.FieldTenantName, rationformula.FieldFarmName, rationformula.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RationFormula", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RationFormula fields.
func (rf *RationFormula) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rationformula.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rf.ID = int(value.Int64)
		case rationformula.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rf.Name = value.String
			}
		case rationformula.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				rf.Code = value.String
			}
		case rationformula.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rf.Status = int(value.Int64)
			}
		case rationformula.FieldCost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				rf.Cost = value.Int64
			}
		case rationformula.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				rf.Data = value.String
			}
		case rationformula.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				rf.TenantId = value.Int64
			}
		case rationformula.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				rf.TenantName = value.String
			}
		case rationformula.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				rf.FarmId = value.Int64
			}
		case rationformula.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				rf.FarmName = value.String
			}
		case rationformula.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				rf.Remarks = value.String
			}
		case rationformula.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				rf.CreatedAt = value.Int64
			}
		case rationformula.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				rf.UpdatedAt = value.Int64
			}
		case rationformula.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				rf.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RationFormula.
// Note that you need to call RationFormula.Unwrap() before calling this method if this RationFormula
// was returned from a transaction, and the transaction was committed or rolled back.
func (rf *RationFormula) Update() *RationFormulaUpdateOne {
	return (&RationFormulaClient{config: rf.config}).UpdateOne(rf)
}

// Unwrap unwraps the RationFormula entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rf *RationFormula) Unwrap() *RationFormula {
	_tx, ok := rf.config.driver.(*txDriver)
	if !ok {
		panic("ent: RationFormula is not a transactional entity")
	}
	rf.config.driver = _tx.drv
	return rf
}

// String implements the fmt.Stringer.
func (rf *RationFormula) String() string {
	var builder strings.Builder
	builder.WriteString("RationFormula(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rf.ID))
	builder.WriteString("name=")
	builder.WriteString(rf.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(rf.Code)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rf.Status))
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", rf.Cost))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(rf.Data)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", rf.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(rf.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", rf.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(rf.FarmName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(rf.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", rf.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", rf.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", rf.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// RationFormulas is a parsable slice of RationFormula.
type RationFormulas []*RationFormula

func (rf RationFormulas) config(cfg config) {
	for _i := range rf {
		rf[_i].config = cfg
	}
}

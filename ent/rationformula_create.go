// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/rationformula"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RationFormulaCreate is the builder for creating a RationFormula entity.
type RationFormulaCreate struct {
	config
	mutation *RationFormulaMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rfc *RationFormulaCreate) SetName(s string) *RationFormulaCreate {
	rfc.mutation.SetName(s)
	return rfc
}

// SetCode sets the "code" field.
func (rfc *RationFormulaCreate) SetCode(s string) *RationFormulaCreate {
	rfc.mutation.SetCode(s)
	return rfc
}

// SetStatus sets the "status" field.
func (rfc *RationFormulaCreate) SetStatus(i int) *RationFormulaCreate {
	rfc.mutation.SetStatus(i)
	return rfc
}

// SetCost sets the "cost" field.
func (rfc *RationFormulaCreate) SetCost(i int64) *RationFormulaCreate {
	rfc.mutation.SetCost(i)
	return rfc
}

// SetData sets the "data" field.
func (rfc *RationFormulaCreate) SetData(s string) *RationFormulaCreate {
	rfc.mutation.SetData(s)
	return rfc
}

// SetTenantId sets the "tenantId" field.
func (rfc *RationFormulaCreate) SetTenantId(i int64) *RationFormulaCreate {
	rfc.mutation.SetTenantId(i)
	return rfc
}

// SetTenantName sets the "tenantName" field.
func (rfc *RationFormulaCreate) SetTenantName(s string) *RationFormulaCreate {
	rfc.mutation.SetTenantName(s)
	return rfc
}

// SetFarmId sets the "farmId" field.
func (rfc *RationFormulaCreate) SetFarmId(i int64) *RationFormulaCreate {
	rfc.mutation.SetFarmId(i)
	return rfc
}

// SetFarmName sets the "farmName" field.
func (rfc *RationFormulaCreate) SetFarmName(s string) *RationFormulaCreate {
	rfc.mutation.SetFarmName(s)
	return rfc
}

// SetRemarks sets the "remarks" field.
func (rfc *RationFormulaCreate) SetRemarks(s string) *RationFormulaCreate {
	rfc.mutation.SetRemarks(s)
	return rfc
}

// SetCreatedAt sets the "createdAt" field.
func (rfc *RationFormulaCreate) SetCreatedAt(i int64) *RationFormulaCreate {
	rfc.mutation.SetCreatedAt(i)
	return rfc
}

// SetUpdatedAt sets the "updatedAt" field.
func (rfc *RationFormulaCreate) SetUpdatedAt(i int64) *RationFormulaCreate {
	rfc.mutation.SetUpdatedAt(i)
	return rfc
}

// SetDeleted sets the "deleted" field.
func (rfc *RationFormulaCreate) SetDeleted(i int) *RationFormulaCreate {
	rfc.mutation.SetDeleted(i)
	return rfc
}

// Mutation returns the RationFormulaMutation object of the builder.
func (rfc *RationFormulaCreate) Mutation() *RationFormulaMutation {
	return rfc.mutation
}

// Save creates the RationFormula in the database.
func (rfc *RationFormulaCreate) Save(ctx context.Context) (*RationFormula, error) {
	var (
		err  error
		node *RationFormula
	)
	if len(rfc.hooks) == 0 {
		if err = rfc.check(); err != nil {
			return nil, err
		}
		node, err = rfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RationFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfc.check(); err != nil {
				return nil, err
			}
			rfc.mutation = mutation
			if node, err = rfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rfc.hooks) - 1; i >= 0; i-- {
			if rfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RationFormula)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RationFormulaMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rfc *RationFormulaCreate) SaveX(ctx context.Context) *RationFormula {
	v, err := rfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rfc *RationFormulaCreate) Exec(ctx context.Context) error {
	_, err := rfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfc *RationFormulaCreate) ExecX(ctx context.Context) {
	if err := rfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfc *RationFormulaCreate) check() error {
	if _, ok := rfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RationFormula.name"`)}
	}
	if _, ok := rfc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "RationFormula.code"`)}
	}
	if _, ok := rfc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "RationFormula.status"`)}
	}
	if _, ok := rfc.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New(`ent: missing required field "RationFormula.cost"`)}
	}
	if _, ok := rfc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "RationFormula.data"`)}
	}
	if _, ok := rfc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "RationFormula.tenantId"`)}
	}
	if _, ok := rfc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "RationFormula.tenantName"`)}
	}
	if _, ok := rfc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New(`ent: missing required field "RationFormula.farmId"`)}
	}
	if _, ok := rfc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New(`ent: missing required field "RationFormula.farmName"`)}
	}
	if _, ok := rfc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "RationFormula.remarks"`)}
	}
	if _, ok := rfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "RationFormula.createdAt"`)}
	}
	if _, ok := rfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "RationFormula.updatedAt"`)}
	}
	if _, ok := rfc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "RationFormula.deleted"`)}
	}
	return nil
}

func (rfc *RationFormulaCreate) sqlSave(ctx context.Context) (*RationFormula, error) {
	_node, _spec := rfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rfc *RationFormulaCreate) createSpec() (*RationFormula, *sqlgraph.CreateSpec) {
	var (
		_node = &RationFormula{config: rfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rationformula.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rationformula.FieldID,
			},
		}
	)
	if value, ok := rfc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rfc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := rfc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := rfc.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCost,
		})
		_node.Cost = value
	}
	if value, ok := rfc.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldData,
		})
		_node.Data = value
	}
	if value, ok := rfc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := rfc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := rfc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := rfc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := rfc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := rfc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rfc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rfc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// RationFormulaCreateBulk is the builder for creating many RationFormula entities in bulk.
type RationFormulaCreateBulk struct {
	config
	builders []*RationFormulaCreate
}

// Save creates the RationFormula entities in the database.
func (rfcb *RationFormulaCreateBulk) Save(ctx context.Context) ([]*RationFormula, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rfcb.builders))
	nodes := make([]*RationFormula, len(rfcb.builders))
	mutators := make([]Mutator, len(rfcb.builders))
	for i := range rfcb.builders {
		func(i int, root context.Context) {
			builder := rfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RationFormulaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rfcb *RationFormulaCreateBulk) SaveX(ctx context.Context) []*RationFormula {
	v, err := rfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rfcb *RationFormulaCreateBulk) Exec(ctx context.Context) error {
	_, err := rfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfcb *RationFormulaCreateBulk) ExecX(ctx context.Context) {
	if err := rfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

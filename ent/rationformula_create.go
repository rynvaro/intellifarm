// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/rationformula"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RationFormulaCreate is the builder for creating a RationFormula entity.
type RationFormulaCreate struct {
	config
	mutation *RationFormulaMutation
	hooks    []Hook
}

// SetName sets the name field.
func (rfc *RationFormulaCreate) SetName(s string) *RationFormulaCreate {
	rfc.mutation.SetName(s)
	return rfc
}

// SetCode sets the code field.
func (rfc *RationFormulaCreate) SetCode(s string) *RationFormulaCreate {
	rfc.mutation.SetCode(s)
	return rfc
}

// SetStatus sets the status field.
func (rfc *RationFormulaCreate) SetStatus(i int) *RationFormulaCreate {
	rfc.mutation.SetStatus(i)
	return rfc
}

// SetCost sets the cost field.
func (rfc *RationFormulaCreate) SetCost(i int64) *RationFormulaCreate {
	rfc.mutation.SetCost(i)
	return rfc
}

// SetData sets the data field.
func (rfc *RationFormulaCreate) SetData(s string) *RationFormulaCreate {
	rfc.mutation.SetData(s)
	return rfc
}

// SetTenantId sets the tenantId field.
func (rfc *RationFormulaCreate) SetTenantId(i int64) *RationFormulaCreate {
	rfc.mutation.SetTenantId(i)
	return rfc
}

// SetTenantName sets the tenantName field.
func (rfc *RationFormulaCreate) SetTenantName(s string) *RationFormulaCreate {
	rfc.mutation.SetTenantName(s)
	return rfc
}

// SetFarmId sets the farmId field.
func (rfc *RationFormulaCreate) SetFarmId(i int64) *RationFormulaCreate {
	rfc.mutation.SetFarmId(i)
	return rfc
}

// SetFarmName sets the farmName field.
func (rfc *RationFormulaCreate) SetFarmName(s string) *RationFormulaCreate {
	rfc.mutation.SetFarmName(s)
	return rfc
}

// SetRemarks sets the remarks field.
func (rfc *RationFormulaCreate) SetRemarks(s string) *RationFormulaCreate {
	rfc.mutation.SetRemarks(s)
	return rfc
}

// SetCreatedAt sets the createdAt field.
func (rfc *RationFormulaCreate) SetCreatedAt(i int64) *RationFormulaCreate {
	rfc.mutation.SetCreatedAt(i)
	return rfc
}

// SetUpdatedAt sets the updatedAt field.
func (rfc *RationFormulaCreate) SetUpdatedAt(i int64) *RationFormulaCreate {
	rfc.mutation.SetUpdatedAt(i)
	return rfc
}

// SetDeleted sets the deleted field.
func (rfc *RationFormulaCreate) SetDeleted(i int) *RationFormulaCreate {
	rfc.mutation.SetDeleted(i)
	return rfc
}

// Mutation returns the RationFormulaMutation object of the builder.
func (rfc *RationFormulaCreate) Mutation() *RationFormulaMutation {
	return rfc.mutation
}

// Save creates the RationFormula in the database.
func (rfc *RationFormulaCreate) Save(ctx context.Context) (*RationFormula, error) {
	var (
		err  error
		node *RationFormula
	)
	if len(rfc.hooks) == 0 {
		if err = rfc.check(); err != nil {
			return nil, err
		}
		node, err = rfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RationFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfc.check(); err != nil {
				return nil, err
			}
			rfc.mutation = mutation
			node, err = rfc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rfc.hooks) - 1; i >= 0; i-- {
			mut = rfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rfc *RationFormulaCreate) SaveX(ctx context.Context) *RationFormula {
	v, err := rfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rfc *RationFormulaCreate) check() error {
	if _, ok := rfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := rfc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := rfc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := rfc.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New("ent: missing required field \"cost\"")}
	}
	if _, ok := rfc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New("ent: missing required field \"data\"")}
	}
	if _, ok := rfc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New("ent: missing required field \"tenantId\"")}
	}
	if _, ok := rfc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New("ent: missing required field \"tenantName\"")}
	}
	if _, ok := rfc.mutation.FarmId(); !ok {
		return &ValidationError{Name: "farmId", err: errors.New("ent: missing required field \"farmId\"")}
	}
	if _, ok := rfc.mutation.FarmName(); !ok {
		return &ValidationError{Name: "farmName", err: errors.New("ent: missing required field \"farmName\"")}
	}
	if _, ok := rfc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New("ent: missing required field \"remarks\"")}
	}
	if _, ok := rfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := rfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	if _, ok := rfc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (rfc *RationFormulaCreate) sqlSave(ctx context.Context) (*RationFormula, error) {
	_node, _spec := rfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rfc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (rfc *RationFormulaCreate) createSpec() (*RationFormula, *sqlgraph.CreateSpec) {
	var (
		_node = &RationFormula{config: rfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rationformula.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: rationformula.FieldID,
			},
		}
	)
	if value, ok := rfc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rfc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := rfc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := rfc.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCost,
		})
		_node.Cost = value
	}
	if value, ok := rfc.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldData,
		})
		_node.Data = value
	}
	if value, ok := rfc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := rfc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := rfc.mutation.FarmId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldFarmId,
		})
		_node.FarmId = value
	}
	if value, ok := rfc.mutation.FarmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldFarmName,
		})
		_node.FarmName = value
	}
	if value, ok := rfc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := rfc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rfc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rfc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// RationFormulaCreateBulk is the builder for creating a bulk of RationFormula entities.
type RationFormulaCreateBulk struct {
	config
	builders []*RationFormulaCreate
}

// Save creates the RationFormula entities in the database.
func (rfcb *RationFormulaCreateBulk) Save(ctx context.Context) ([]*RationFormula, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rfcb.builders))
	nodes := make([]*RationFormula, len(rfcb.builders))
	mutators := make([]Mutator, len(rfcb.builders))
	for i := range rfcb.builders {
		func(i int, root context.Context) {
			builder := rfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RationFormulaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rfcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rfcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rfcb *RationFormulaCreateBulk) SaveX(ctx context.Context) []*RationFormula {
	v, err := rfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

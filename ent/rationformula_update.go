// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/rationformula"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RationFormulaUpdate is the builder for updating RationFormula entities.
type RationFormulaUpdate struct {
	config
	hooks    []Hook
	mutation *RationFormulaMutation
}

// Where appends a list predicates to the RationFormulaUpdate builder.
func (rfu *RationFormulaUpdate) Where(ps ...predicate.RationFormula) *RationFormulaUpdate {
	rfu.mutation.Where(ps...)
	return rfu
}

// SetName sets the "name" field.
func (rfu *RationFormulaUpdate) SetName(s string) *RationFormulaUpdate {
	rfu.mutation.SetName(s)
	return rfu
}

// SetCode sets the "code" field.
func (rfu *RationFormulaUpdate) SetCode(s string) *RationFormulaUpdate {
	rfu.mutation.SetCode(s)
	return rfu
}

// SetStatus sets the "status" field.
func (rfu *RationFormulaUpdate) SetStatus(i int) *RationFormulaUpdate {
	rfu.mutation.ResetStatus()
	rfu.mutation.SetStatus(i)
	return rfu
}

// AddStatus adds i to the "status" field.
func (rfu *RationFormulaUpdate) AddStatus(i int) *RationFormulaUpdate {
	rfu.mutation.AddStatus(i)
	return rfu
}

// SetCost sets the "cost" field.
func (rfu *RationFormulaUpdate) SetCost(i int64) *RationFormulaUpdate {
	rfu.mutation.ResetCost()
	rfu.mutation.SetCost(i)
	return rfu
}

// AddCost adds i to the "cost" field.
func (rfu *RationFormulaUpdate) AddCost(i int64) *RationFormulaUpdate {
	rfu.mutation.AddCost(i)
	return rfu
}

// SetData sets the "data" field.
func (rfu *RationFormulaUpdate) SetData(s string) *RationFormulaUpdate {
	rfu.mutation.SetData(s)
	return rfu
}

// SetTenantId sets the "tenantId" field.
func (rfu *RationFormulaUpdate) SetTenantId(i int64) *RationFormulaUpdate {
	rfu.mutation.ResetTenantId()
	rfu.mutation.SetTenantId(i)
	return rfu
}

// AddTenantId adds i to the "tenantId" field.
func (rfu *RationFormulaUpdate) AddTenantId(i int64) *RationFormulaUpdate {
	rfu.mutation.AddTenantId(i)
	return rfu
}

// SetTenantName sets the "tenantName" field.
func (rfu *RationFormulaUpdate) SetTenantName(s string) *RationFormulaUpdate {
	rfu.mutation.SetTenantName(s)
	return rfu
}

// SetFarmId sets the "farmId" field.
func (rfu *RationFormulaUpdate) SetFarmId(i int64) *RationFormulaUpdate {
	rfu.mutation.ResetFarmId()
	rfu.mutation.SetFarmId(i)
	return rfu
}

// AddFarmId adds i to the "farmId" field.
func (rfu *RationFormulaUpdate) AddFarmId(i int64) *RationFormulaUpdate {
	rfu.mutation.AddFarmId(i)
	return rfu
}

// SetFarmName sets the "farmName" field.
func (rfu *RationFormulaUpdate) SetFarmName(s string) *RationFormulaUpdate {
	rfu.mutation.SetFarmName(s)
	return rfu
}

// SetRemarks sets the "remarks" field.
func (rfu *RationFormulaUpdate) SetRemarks(s string) *RationFormulaUpdate {
	rfu.mutation.SetRemarks(s)
	return rfu
}

// SetCreatedAt sets the "createdAt" field.
func (rfu *RationFormulaUpdate) SetCreatedAt(i int64) *RationFormulaUpdate {
	rfu.mutation.ResetCreatedAt()
	rfu.mutation.SetCreatedAt(i)
	return rfu
}

// AddCreatedAt adds i to the "createdAt" field.
func (rfu *RationFormulaUpdate) AddCreatedAt(i int64) *RationFormulaUpdate {
	rfu.mutation.AddCreatedAt(i)
	return rfu
}

// SetUpdatedAt sets the "updatedAt" field.
func (rfu *RationFormulaUpdate) SetUpdatedAt(i int64) *RationFormulaUpdate {
	rfu.mutation.ResetUpdatedAt()
	rfu.mutation.SetUpdatedAt(i)
	return rfu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (rfu *RationFormulaUpdate) AddUpdatedAt(i int64) *RationFormulaUpdate {
	rfu.mutation.AddUpdatedAt(i)
	return rfu
}

// SetDeleted sets the "deleted" field.
func (rfu *RationFormulaUpdate) SetDeleted(i int) *RationFormulaUpdate {
	rfu.mutation.ResetDeleted()
	rfu.mutation.SetDeleted(i)
	return rfu
}

// AddDeleted adds i to the "deleted" field.
func (rfu *RationFormulaUpdate) AddDeleted(i int) *RationFormulaUpdate {
	rfu.mutation.AddDeleted(i)
	return rfu
}

// Mutation returns the RationFormulaMutation object of the builder.
func (rfu *RationFormulaUpdate) Mutation() *RationFormulaMutation {
	return rfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rfu *RationFormulaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rfu.hooks) == 0 {
		affected, err = rfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RationFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rfu.mutation = mutation
			affected, err = rfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rfu.hooks) - 1; i >= 0; i-- {
			if rfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfu *RationFormulaUpdate) SaveX(ctx context.Context) int {
	affected, err := rfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rfu *RationFormulaUpdate) Exec(ctx context.Context) error {
	_, err := rfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfu *RationFormulaUpdate) ExecX(ctx context.Context) {
	if err := rfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rfu *RationFormulaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rationformula.Table,
			Columns: rationformula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rationformula.FieldID,
			},
		},
	}
	if ps := rfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldName,
		})
	}
	if value, ok := rfu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldCode,
		})
	}
	if value, ok := rfu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldStatus,
		})
	}
	if value, ok := rfu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldStatus,
		})
	}
	if value, ok := rfu.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCost,
		})
	}
	if value, ok := rfu.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCost,
		})
	}
	if value, ok := rfu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldData,
		})
	}
	if value, ok := rfu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldTenantId,
		})
	}
	if value, ok := rfu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldTenantId,
		})
	}
	if value, ok := rfu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldTenantName,
		})
	}
	if value, ok := rfu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldFarmId,
		})
	}
	if value, ok := rfu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldFarmId,
		})
	}
	if value, ok := rfu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldFarmName,
		})
	}
	if value, ok := rfu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldRemarks,
		})
	}
	if value, ok := rfu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCreatedAt,
		})
	}
	if value, ok := rfu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCreatedAt,
		})
	}
	if value, ok := rfu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldUpdatedAt,
		})
	}
	if value, ok := rfu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldUpdatedAt,
		})
	}
	if value, ok := rfu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldDeleted,
		})
	}
	if value, ok := rfu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rationformula.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RationFormulaUpdateOne is the builder for updating a single RationFormula entity.
type RationFormulaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RationFormulaMutation
}

// SetName sets the "name" field.
func (rfuo *RationFormulaUpdateOne) SetName(s string) *RationFormulaUpdateOne {
	rfuo.mutation.SetName(s)
	return rfuo
}

// SetCode sets the "code" field.
func (rfuo *RationFormulaUpdateOne) SetCode(s string) *RationFormulaUpdateOne {
	rfuo.mutation.SetCode(s)
	return rfuo
}

// SetStatus sets the "status" field.
func (rfuo *RationFormulaUpdateOne) SetStatus(i int) *RationFormulaUpdateOne {
	rfuo.mutation.ResetStatus()
	rfuo.mutation.SetStatus(i)
	return rfuo
}

// AddStatus adds i to the "status" field.
func (rfuo *RationFormulaUpdateOne) AddStatus(i int) *RationFormulaUpdateOne {
	rfuo.mutation.AddStatus(i)
	return rfuo
}

// SetCost sets the "cost" field.
func (rfuo *RationFormulaUpdateOne) SetCost(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.ResetCost()
	rfuo.mutation.SetCost(i)
	return rfuo
}

// AddCost adds i to the "cost" field.
func (rfuo *RationFormulaUpdateOne) AddCost(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.AddCost(i)
	return rfuo
}

// SetData sets the "data" field.
func (rfuo *RationFormulaUpdateOne) SetData(s string) *RationFormulaUpdateOne {
	rfuo.mutation.SetData(s)
	return rfuo
}

// SetTenantId sets the "tenantId" field.
func (rfuo *RationFormulaUpdateOne) SetTenantId(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.ResetTenantId()
	rfuo.mutation.SetTenantId(i)
	return rfuo
}

// AddTenantId adds i to the "tenantId" field.
func (rfuo *RationFormulaUpdateOne) AddTenantId(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.AddTenantId(i)
	return rfuo
}

// SetTenantName sets the "tenantName" field.
func (rfuo *RationFormulaUpdateOne) SetTenantName(s string) *RationFormulaUpdateOne {
	rfuo.mutation.SetTenantName(s)
	return rfuo
}

// SetFarmId sets the "farmId" field.
func (rfuo *RationFormulaUpdateOne) SetFarmId(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.ResetFarmId()
	rfuo.mutation.SetFarmId(i)
	return rfuo
}

// AddFarmId adds i to the "farmId" field.
func (rfuo *RationFormulaUpdateOne) AddFarmId(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.AddFarmId(i)
	return rfuo
}

// SetFarmName sets the "farmName" field.
func (rfuo *RationFormulaUpdateOne) SetFarmName(s string) *RationFormulaUpdateOne {
	rfuo.mutation.SetFarmName(s)
	return rfuo
}

// SetRemarks sets the "remarks" field.
func (rfuo *RationFormulaUpdateOne) SetRemarks(s string) *RationFormulaUpdateOne {
	rfuo.mutation.SetRemarks(s)
	return rfuo
}

// SetCreatedAt sets the "createdAt" field.
func (rfuo *RationFormulaUpdateOne) SetCreatedAt(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.ResetCreatedAt()
	rfuo.mutation.SetCreatedAt(i)
	return rfuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (rfuo *RationFormulaUpdateOne) AddCreatedAt(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.AddCreatedAt(i)
	return rfuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (rfuo *RationFormulaUpdateOne) SetUpdatedAt(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.ResetUpdatedAt()
	rfuo.mutation.SetUpdatedAt(i)
	return rfuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (rfuo *RationFormulaUpdateOne) AddUpdatedAt(i int64) *RationFormulaUpdateOne {
	rfuo.mutation.AddUpdatedAt(i)
	return rfuo
}

// SetDeleted sets the "deleted" field.
func (rfuo *RationFormulaUpdateOne) SetDeleted(i int) *RationFormulaUpdateOne {
	rfuo.mutation.ResetDeleted()
	rfuo.mutation.SetDeleted(i)
	return rfuo
}

// AddDeleted adds i to the "deleted" field.
func (rfuo *RationFormulaUpdateOne) AddDeleted(i int) *RationFormulaUpdateOne {
	rfuo.mutation.AddDeleted(i)
	return rfuo
}

// Mutation returns the RationFormulaMutation object of the builder.
func (rfuo *RationFormulaUpdateOne) Mutation() *RationFormulaMutation {
	return rfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rfuo *RationFormulaUpdateOne) Select(field string, fields ...string) *RationFormulaUpdateOne {
	rfuo.fields = append([]string{field}, fields...)
	return rfuo
}

// Save executes the query and returns the updated RationFormula entity.
func (rfuo *RationFormulaUpdateOne) Save(ctx context.Context) (*RationFormula, error) {
	var (
		err  error
		node *RationFormula
	)
	if len(rfuo.hooks) == 0 {
		node, err = rfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RationFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rfuo.mutation = mutation
			node, err = rfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rfuo.hooks) - 1; i >= 0; i-- {
			if rfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RationFormula)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RationFormulaMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfuo *RationFormulaUpdateOne) SaveX(ctx context.Context) *RationFormula {
	node, err := rfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rfuo *RationFormulaUpdateOne) Exec(ctx context.Context) error {
	_, err := rfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfuo *RationFormulaUpdateOne) ExecX(ctx context.Context) {
	if err := rfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rfuo *RationFormulaUpdateOne) sqlSave(ctx context.Context) (_node *RationFormula, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rationformula.Table,
			Columns: rationformula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rationformula.FieldID,
			},
		},
	}
	id, ok := rfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RationFormula.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rationformula.FieldID)
		for _, f := range fields {
			if !rationformula.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rationformula.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldName,
		})
	}
	if value, ok := rfuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldCode,
		})
	}
	if value, ok := rfuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldStatus,
		})
	}
	if value, ok := rfuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldStatus,
		})
	}
	if value, ok := rfuo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCost,
		})
	}
	if value, ok := rfuo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCost,
		})
	}
	if value, ok := rfuo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldData,
		})
	}
	if value, ok := rfuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldTenantId,
		})
	}
	if value, ok := rfuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldTenantId,
		})
	}
	if value, ok := rfuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldTenantName,
		})
	}
	if value, ok := rfuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldFarmId,
		})
	}
	if value, ok := rfuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldFarmId,
		})
	}
	if value, ok := rfuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldFarmName,
		})
	}
	if value, ok := rfuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationformula.FieldRemarks,
		})
	}
	if value, ok := rfuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCreatedAt,
		})
	}
	if value, ok := rfuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldCreatedAt,
		})
	}
	if value, ok := rfuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldUpdatedAt,
		})
	}
	if value, ok := rfuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationformula.FieldUpdatedAt,
		})
	}
	if value, ok := rfuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldDeleted,
		})
	}
	if value, ok := rfuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationformula.FieldDeleted,
		})
	}
	_node = &RationFormula{config: rfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rationformula.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/rationprocess"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// RationProcess is the model entity for the RationProcess schema.
type RationProcess struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 日粮ID
	RationId int64 `json:"rationId,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// 加工日期
	Date int64 `json:"date,omitempty"`
	// 加工数量
	Count int64 `json:"count,omitempty"`
	// 实际入库量
	In int64 `json:"in,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RationProcess) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rationprocess.FieldID, rationprocess.FieldRationId, rationprocess.FieldDate, rationprocess.FieldCount, rationprocess.FieldIn, rationprocess.FieldTenantId, rationprocess.FieldFarmId, rationprocess.FieldCreatedAt, rationprocess.FieldUpdatedAt, rationprocess.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case rationprocess.FieldName, rationprocess.FieldUserName, rationprocess.FieldTenantName, rationprocess.FieldFarmName, rationprocess.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RationProcess", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RationProcess fields.
func (rp *RationProcess) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rationprocess.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rp.ID = int(value.Int64)
		case rationprocess.FieldRationId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rationId", values[i])
			} else if value.Valid {
				rp.RationId = value.Int64
			}
		case rationprocess.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rp.Name = value.String
			}
		case rationprocess.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				rp.Date = value.Int64
			}
		case rationprocess.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				rp.Count = value.Int64
			}
		case rationprocess.FieldIn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field in", values[i])
			} else if value.Valid {
				rp.In = value.Int64
			}
		case rationprocess.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				rp.UserName = value.String
			}
		case rationprocess.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				rp.TenantId = value.Int64
			}
		case rationprocess.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				rp.TenantName = value.String
			}
		case rationprocess.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				rp.FarmId = value.Int64
			}
		case rationprocess.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				rp.FarmName = value.String
			}
		case rationprocess.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				rp.Remarks = value.String
			}
		case rationprocess.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				rp.CreatedAt = value.Int64
			}
		case rationprocess.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				rp.UpdatedAt = value.Int64
			}
		case rationprocess.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				rp.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RationProcess.
// Note that you need to call RationProcess.Unwrap() before calling this method if this RationProcess
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *RationProcess) Update() *RationProcessUpdateOne {
	return (&RationProcessClient{config: rp.config}).UpdateOne(rp)
}

// Unwrap unwraps the RationProcess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *RationProcess) Unwrap() *RationProcess {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: RationProcess is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *RationProcess) String() string {
	var builder strings.Builder
	builder.WriteString("RationProcess(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("rationId=")
	builder.WriteString(fmt.Sprintf("%v", rp.RationId))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rp.Name)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", rp.Date))
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", rp.Count))
	builder.WriteString(", ")
	builder.WriteString("in=")
	builder.WriteString(fmt.Sprintf("%v", rp.In))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(rp.UserName)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", rp.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(rp.TenantName)
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", rp.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(rp.FarmName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(rp.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", rp.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", rp.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", rp.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// RationProcesses is a parsable slice of RationProcess.
type RationProcesses []*RationProcess

func (rp RationProcesses) config(cfg config) {
	for _i := range rp {
		rp[_i].config = cfg
	}
}

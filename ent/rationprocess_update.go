// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/rationprocess"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RationProcessUpdate is the builder for updating RationProcess entities.
type RationProcessUpdate struct {
	config
	hooks    []Hook
	mutation *RationProcessMutation
}

// Where appends a list predicates to the RationProcessUpdate builder.
func (rpu *RationProcessUpdate) Where(ps ...predicate.RationProcess) *RationProcessUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetRationId sets the "rationId" field.
func (rpu *RationProcessUpdate) SetRationId(i int64) *RationProcessUpdate {
	rpu.mutation.ResetRationId()
	rpu.mutation.SetRationId(i)
	return rpu
}

// AddRationId adds i to the "rationId" field.
func (rpu *RationProcessUpdate) AddRationId(i int64) *RationProcessUpdate {
	rpu.mutation.AddRationId(i)
	return rpu
}

// SetName sets the "name" field.
func (rpu *RationProcessUpdate) SetName(s string) *RationProcessUpdate {
	rpu.mutation.SetName(s)
	return rpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpu *RationProcessUpdate) SetNillableName(s *string) *RationProcessUpdate {
	if s != nil {
		rpu.SetName(*s)
	}
	return rpu
}

// ClearName clears the value of the "name" field.
func (rpu *RationProcessUpdate) ClearName() *RationProcessUpdate {
	rpu.mutation.ClearName()
	return rpu
}

// SetDate sets the "date" field.
func (rpu *RationProcessUpdate) SetDate(i int64) *RationProcessUpdate {
	rpu.mutation.ResetDate()
	rpu.mutation.SetDate(i)
	return rpu
}

// AddDate adds i to the "date" field.
func (rpu *RationProcessUpdate) AddDate(i int64) *RationProcessUpdate {
	rpu.mutation.AddDate(i)
	return rpu
}

// SetCount sets the "count" field.
func (rpu *RationProcessUpdate) SetCount(i int64) *RationProcessUpdate {
	rpu.mutation.ResetCount()
	rpu.mutation.SetCount(i)
	return rpu
}

// AddCount adds i to the "count" field.
func (rpu *RationProcessUpdate) AddCount(i int64) *RationProcessUpdate {
	rpu.mutation.AddCount(i)
	return rpu
}

// SetIn sets the "in" field.
func (rpu *RationProcessUpdate) SetIn(i int64) *RationProcessUpdate {
	rpu.mutation.ResetIn()
	rpu.mutation.SetIn(i)
	return rpu
}

// AddIn adds i to the "in" field.
func (rpu *RationProcessUpdate) AddIn(i int64) *RationProcessUpdate {
	rpu.mutation.AddIn(i)
	return rpu
}

// SetUserName sets the "userName" field.
func (rpu *RationProcessUpdate) SetUserName(s string) *RationProcessUpdate {
	rpu.mutation.SetUserName(s)
	return rpu
}

// SetTenantId sets the "tenantId" field.
func (rpu *RationProcessUpdate) SetTenantId(i int64) *RationProcessUpdate {
	rpu.mutation.ResetTenantId()
	rpu.mutation.SetTenantId(i)
	return rpu
}

// AddTenantId adds i to the "tenantId" field.
func (rpu *RationProcessUpdate) AddTenantId(i int64) *RationProcessUpdate {
	rpu.mutation.AddTenantId(i)
	return rpu
}

// SetTenantName sets the "tenantName" field.
func (rpu *RationProcessUpdate) SetTenantName(s string) *RationProcessUpdate {
	rpu.mutation.SetTenantName(s)
	return rpu
}

// SetFarmId sets the "farmId" field.
func (rpu *RationProcessUpdate) SetFarmId(i int64) *RationProcessUpdate {
	rpu.mutation.ResetFarmId()
	rpu.mutation.SetFarmId(i)
	return rpu
}

// AddFarmId adds i to the "farmId" field.
func (rpu *RationProcessUpdate) AddFarmId(i int64) *RationProcessUpdate {
	rpu.mutation.AddFarmId(i)
	return rpu
}

// SetFarmName sets the "farmName" field.
func (rpu *RationProcessUpdate) SetFarmName(s string) *RationProcessUpdate {
	rpu.mutation.SetFarmName(s)
	return rpu
}

// SetRemarks sets the "remarks" field.
func (rpu *RationProcessUpdate) SetRemarks(s string) *RationProcessUpdate {
	rpu.mutation.SetRemarks(s)
	return rpu
}

// SetCreatedAt sets the "createdAt" field.
func (rpu *RationProcessUpdate) SetCreatedAt(i int64) *RationProcessUpdate {
	rpu.mutation.ResetCreatedAt()
	rpu.mutation.SetCreatedAt(i)
	return rpu
}

// AddCreatedAt adds i to the "createdAt" field.
func (rpu *RationProcessUpdate) AddCreatedAt(i int64) *RationProcessUpdate {
	rpu.mutation.AddCreatedAt(i)
	return rpu
}

// SetUpdatedAt sets the "updatedAt" field.
func (rpu *RationProcessUpdate) SetUpdatedAt(i int64) *RationProcessUpdate {
	rpu.mutation.ResetUpdatedAt()
	rpu.mutation.SetUpdatedAt(i)
	return rpu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (rpu *RationProcessUpdate) AddUpdatedAt(i int64) *RationProcessUpdate {
	rpu.mutation.AddUpdatedAt(i)
	return rpu
}

// SetDeleted sets the "deleted" field.
func (rpu *RationProcessUpdate) SetDeleted(i int) *RationProcessUpdate {
	rpu.mutation.ResetDeleted()
	rpu.mutation.SetDeleted(i)
	return rpu
}

// AddDeleted adds i to the "deleted" field.
func (rpu *RationProcessUpdate) AddDeleted(i int) *RationProcessUpdate {
	rpu.mutation.AddDeleted(i)
	return rpu
}

// Mutation returns the RationProcessMutation object of the builder.
func (rpu *RationProcessUpdate) Mutation() *RationProcessMutation {
	return rpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RationProcessUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rpu.hooks) == 0 {
		affected, err = rpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RationProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpu.mutation = mutation
			affected, err = rpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rpu.hooks) - 1; i >= 0; i-- {
			if rpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RationProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RationProcessUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RationProcessUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpu *RationProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rationprocess.Table,
			Columns: rationprocess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rationprocess.FieldID,
			},
		},
	}
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.RationId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldRationId,
		})
	}
	if value, ok := rpu.mutation.AddedRationId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldRationId,
		})
	}
	if value, ok := rpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldName,
		})
	}
	if rpu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rationprocess.FieldName,
		})
	}
	if value, ok := rpu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldDate,
		})
	}
	if value, ok := rpu.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldDate,
		})
	}
	if value, ok := rpu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldCount,
		})
	}
	if value, ok := rpu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldCount,
		})
	}
	if value, ok := rpu.mutation.In(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldIn,
		})
	}
	if value, ok := rpu.mutation.AddedIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldIn,
		})
	}
	if value, ok := rpu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldUserName,
		})
	}
	if value, ok := rpu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldTenantId,
		})
	}
	if value, ok := rpu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldTenantId,
		})
	}
	if value, ok := rpu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldTenantName,
		})
	}
	if value, ok := rpu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldFarmId,
		})
	}
	if value, ok := rpu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldFarmId,
		})
	}
	if value, ok := rpu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldFarmName,
		})
	}
	if value, ok := rpu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldRemarks,
		})
	}
	if value, ok := rpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldCreatedAt,
		})
	}
	if value, ok := rpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldCreatedAt,
		})
	}
	if value, ok := rpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldUpdatedAt,
		})
	}
	if value, ok := rpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldUpdatedAt,
		})
	}
	if value, ok := rpu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationprocess.FieldDeleted,
		})
	}
	if value, ok := rpu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationprocess.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rationprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RationProcessUpdateOne is the builder for updating a single RationProcess entity.
type RationProcessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RationProcessMutation
}

// SetRationId sets the "rationId" field.
func (rpuo *RationProcessUpdateOne) SetRationId(i int64) *RationProcessUpdateOne {
	rpuo.mutation.ResetRationId()
	rpuo.mutation.SetRationId(i)
	return rpuo
}

// AddRationId adds i to the "rationId" field.
func (rpuo *RationProcessUpdateOne) AddRationId(i int64) *RationProcessUpdateOne {
	rpuo.mutation.AddRationId(i)
	return rpuo
}

// SetName sets the "name" field.
func (rpuo *RationProcessUpdateOne) SetName(s string) *RationProcessUpdateOne {
	rpuo.mutation.SetName(s)
	return rpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpuo *RationProcessUpdateOne) SetNillableName(s *string) *RationProcessUpdateOne {
	if s != nil {
		rpuo.SetName(*s)
	}
	return rpuo
}

// ClearName clears the value of the "name" field.
func (rpuo *RationProcessUpdateOne) ClearName() *RationProcessUpdateOne {
	rpuo.mutation.ClearName()
	return rpuo
}

// SetDate sets the "date" field.
func (rpuo *RationProcessUpdateOne) SetDate(i int64) *RationProcessUpdateOne {
	rpuo.mutation.ResetDate()
	rpuo.mutation.SetDate(i)
	return rpuo
}

// AddDate adds i to the "date" field.
func (rpuo *RationProcessUpdateOne) AddDate(i int64) *RationProcessUpdateOne {
	rpuo.mutation.AddDate(i)
	return rpuo
}

// SetCount sets the "count" field.
func (rpuo *RationProcessUpdateOne) SetCount(i int64) *RationProcessUpdateOne {
	rpuo.mutation.ResetCount()
	rpuo.mutation.SetCount(i)
	return rpuo
}

// AddCount adds i to the "count" field.
func (rpuo *RationProcessUpdateOne) AddCount(i int64) *RationProcessUpdateOne {
	rpuo.mutation.AddCount(i)
	return rpuo
}

// SetIn sets the "in" field.
func (rpuo *RationProcessUpdateOne) SetIn(i int64) *RationProcessUpdateOne {
	rpuo.mutation.ResetIn()
	rpuo.mutation.SetIn(i)
	return rpuo
}

// AddIn adds i to the "in" field.
func (rpuo *RationProcessUpdateOne) AddIn(i int64) *RationProcessUpdateOne {
	rpuo.mutation.AddIn(i)
	return rpuo
}

// SetUserName sets the "userName" field.
func (rpuo *RationProcessUpdateOne) SetUserName(s string) *RationProcessUpdateOne {
	rpuo.mutation.SetUserName(s)
	return rpuo
}

// SetTenantId sets the "tenantId" field.
func (rpuo *RationProcessUpdateOne) SetTenantId(i int64) *RationProcessUpdateOne {
	rpuo.mutation.ResetTenantId()
	rpuo.mutation.SetTenantId(i)
	return rpuo
}

// AddTenantId adds i to the "tenantId" field.
func (rpuo *RationProcessUpdateOne) AddTenantId(i int64) *RationProcessUpdateOne {
	rpuo.mutation.AddTenantId(i)
	return rpuo
}

// SetTenantName sets the "tenantName" field.
func (rpuo *RationProcessUpdateOne) SetTenantName(s string) *RationProcessUpdateOne {
	rpuo.mutation.SetTenantName(s)
	return rpuo
}

// SetFarmId sets the "farmId" field.
func (rpuo *RationProcessUpdateOne) SetFarmId(i int64) *RationProcessUpdateOne {
	rpuo.mutation.ResetFarmId()
	rpuo.mutation.SetFarmId(i)
	return rpuo
}

// AddFarmId adds i to the "farmId" field.
func (rpuo *RationProcessUpdateOne) AddFarmId(i int64) *RationProcessUpdateOne {
	rpuo.mutation.AddFarmId(i)
	return rpuo
}

// SetFarmName sets the "farmName" field.
func (rpuo *RationProcessUpdateOne) SetFarmName(s string) *RationProcessUpdateOne {
	rpuo.mutation.SetFarmName(s)
	return rpuo
}

// SetRemarks sets the "remarks" field.
func (rpuo *RationProcessUpdateOne) SetRemarks(s string) *RationProcessUpdateOne {
	rpuo.mutation.SetRemarks(s)
	return rpuo
}

// SetCreatedAt sets the "createdAt" field.
func (rpuo *RationProcessUpdateOne) SetCreatedAt(i int64) *RationProcessUpdateOne {
	rpuo.mutation.ResetCreatedAt()
	rpuo.mutation.SetCreatedAt(i)
	return rpuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (rpuo *RationProcessUpdateOne) AddCreatedAt(i int64) *RationProcessUpdateOne {
	rpuo.mutation.AddCreatedAt(i)
	return rpuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (rpuo *RationProcessUpdateOne) SetUpdatedAt(i int64) *RationProcessUpdateOne {
	rpuo.mutation.ResetUpdatedAt()
	rpuo.mutation.SetUpdatedAt(i)
	return rpuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (rpuo *RationProcessUpdateOne) AddUpdatedAt(i int64) *RationProcessUpdateOne {
	rpuo.mutation.AddUpdatedAt(i)
	return rpuo
}

// SetDeleted sets the "deleted" field.
func (rpuo *RationProcessUpdateOne) SetDeleted(i int) *RationProcessUpdateOne {
	rpuo.mutation.ResetDeleted()
	rpuo.mutation.SetDeleted(i)
	return rpuo
}

// AddDeleted adds i to the "deleted" field.
func (rpuo *RationProcessUpdateOne) AddDeleted(i int) *RationProcessUpdateOne {
	rpuo.mutation.AddDeleted(i)
	return rpuo
}

// Mutation returns the RationProcessMutation object of the builder.
func (rpuo *RationProcessUpdateOne) Mutation() *RationProcessMutation {
	return rpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *RationProcessUpdateOne) Select(field string, fields ...string) *RationProcessUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated RationProcess entity.
func (rpuo *RationProcessUpdateOne) Save(ctx context.Context) (*RationProcess, error) {
	var (
		err  error
		node *RationProcess
	)
	if len(rpuo.hooks) == 0 {
		node, err = rpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RationProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpuo.mutation = mutation
			node, err = rpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpuo.hooks) - 1; i >= 0; i-- {
			if rpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RationProcess)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RationProcessMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RationProcessUpdateOne) SaveX(ctx context.Context) *RationProcess {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RationProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RationProcessUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpuo *RationProcessUpdateOne) sqlSave(ctx context.Context) (_node *RationProcess, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rationprocess.Table,
			Columns: rationprocess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rationprocess.FieldID,
			},
		},
	}
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RationProcess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rationprocess.FieldID)
		for _, f := range fields {
			if !rationprocess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rationprocess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.RationId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldRationId,
		})
	}
	if value, ok := rpuo.mutation.AddedRationId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldRationId,
		})
	}
	if value, ok := rpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldName,
		})
	}
	if rpuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rationprocess.FieldName,
		})
	}
	if value, ok := rpuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldDate,
		})
	}
	if value, ok := rpuo.mutation.AddedDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldDate,
		})
	}
	if value, ok := rpuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldCount,
		})
	}
	if value, ok := rpuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldCount,
		})
	}
	if value, ok := rpuo.mutation.In(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldIn,
		})
	}
	if value, ok := rpuo.mutation.AddedIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldIn,
		})
	}
	if value, ok := rpuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldUserName,
		})
	}
	if value, ok := rpuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldTenantId,
		})
	}
	if value, ok := rpuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldTenantId,
		})
	}
	if value, ok := rpuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldTenantName,
		})
	}
	if value, ok := rpuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldFarmId,
		})
	}
	if value, ok := rpuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldFarmId,
		})
	}
	if value, ok := rpuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldFarmName,
		})
	}
	if value, ok := rpuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rationprocess.FieldRemarks,
		})
	}
	if value, ok := rpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldCreatedAt,
		})
	}
	if value, ok := rpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldCreatedAt,
		})
	}
	if value, ok := rpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldUpdatedAt,
		})
	}
	if value, ok := rpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: rationprocess.FieldUpdatedAt,
		})
	}
	if value, ok := rpuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationprocess.FieldDeleted,
		})
	}
	if value, ok := rpuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rationprocess.FieldDeleted,
		})
	}
	_node = &RationProcess{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rationprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

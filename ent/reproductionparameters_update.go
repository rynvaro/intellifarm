// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/reproductionparameters"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ReproductionParametersUpdate is the builder for updating ReproductionParameters entities.
type ReproductionParametersUpdate struct {
	config
	hooks      []Hook
	mutation   *ReproductionParametersMutation
	predicates []predicate.ReproductionParameters
}

// Where adds a new predicate for the builder.
func (rpu *ReproductionParametersUpdate) Where(ps ...predicate.ReproductionParameters) *ReproductionParametersUpdate {
	rpu.predicates = append(rpu.predicates, ps...)
	return rpu
}

// SetName sets the name field.
func (rpu *ReproductionParametersUpdate) SetName(s string) *ReproductionParametersUpdate {
	rpu.mutation.SetName(s)
	return rpu
}

// SetCode sets the code field.
func (rpu *ReproductionParametersUpdate) SetCode(s string) *ReproductionParametersUpdate {
	rpu.mutation.SetCode(s)
	return rpu
}

// SetValue sets the value field.
func (rpu *ReproductionParametersUpdate) SetValue(i int64) *ReproductionParametersUpdate {
	rpu.mutation.ResetValue()
	rpu.mutation.SetValue(i)
	return rpu
}

// AddValue adds i to value.
func (rpu *ReproductionParametersUpdate) AddValue(i int64) *ReproductionParametersUpdate {
	rpu.mutation.AddValue(i)
	return rpu
}

// SetTenantId sets the tenantId field.
func (rpu *ReproductionParametersUpdate) SetTenantId(i int64) *ReproductionParametersUpdate {
	rpu.mutation.ResetTenantId()
	rpu.mutation.SetTenantId(i)
	return rpu
}

// AddTenantId adds i to tenantId.
func (rpu *ReproductionParametersUpdate) AddTenantId(i int64) *ReproductionParametersUpdate {
	rpu.mutation.AddTenantId(i)
	return rpu
}

// SetTenantName sets the tenantName field.
func (rpu *ReproductionParametersUpdate) SetTenantName(s string) *ReproductionParametersUpdate {
	rpu.mutation.SetTenantName(s)
	return rpu
}

// SetRemarks sets the remarks field.
func (rpu *ReproductionParametersUpdate) SetRemarks(s string) *ReproductionParametersUpdate {
	rpu.mutation.SetRemarks(s)
	return rpu
}

// SetCreatedAt sets the createdAt field.
func (rpu *ReproductionParametersUpdate) SetCreatedAt(i int64) *ReproductionParametersUpdate {
	rpu.mutation.ResetCreatedAt()
	rpu.mutation.SetCreatedAt(i)
	return rpu
}

// AddCreatedAt adds i to createdAt.
func (rpu *ReproductionParametersUpdate) AddCreatedAt(i int64) *ReproductionParametersUpdate {
	rpu.mutation.AddCreatedAt(i)
	return rpu
}

// SetUpdatedAt sets the updatedAt field.
func (rpu *ReproductionParametersUpdate) SetUpdatedAt(i int64) *ReproductionParametersUpdate {
	rpu.mutation.ResetUpdatedAt()
	rpu.mutation.SetUpdatedAt(i)
	return rpu
}

// AddUpdatedAt adds i to updatedAt.
func (rpu *ReproductionParametersUpdate) AddUpdatedAt(i int64) *ReproductionParametersUpdate {
	rpu.mutation.AddUpdatedAt(i)
	return rpu
}

// SetDeleted sets the deleted field.
func (rpu *ReproductionParametersUpdate) SetDeleted(i int) *ReproductionParametersUpdate {
	rpu.mutation.ResetDeleted()
	rpu.mutation.SetDeleted(i)
	return rpu
}

// AddDeleted adds i to deleted.
func (rpu *ReproductionParametersUpdate) AddDeleted(i int) *ReproductionParametersUpdate {
	rpu.mutation.AddDeleted(i)
	return rpu
}

// Mutation returns the ReproductionParametersMutation object of the builder.
func (rpu *ReproductionParametersUpdate) Mutation() *ReproductionParametersMutation {
	return rpu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (rpu *ReproductionParametersUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rpu.hooks) == 0 {
		affected, err = rpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReproductionParametersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpu.mutation = mutation
			affected, err = rpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rpu.hooks) - 1; i >= 0; i-- {
			mut = rpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *ReproductionParametersUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *ReproductionParametersUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *ReproductionParametersUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpu *ReproductionParametersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reproductionparameters.Table,
			Columns: reproductionparameters.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: reproductionparameters.FieldID,
			},
		},
	}
	if ps := rpu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reproductionparameters.FieldName,
		})
	}
	if value, ok := rpu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reproductionparameters.FieldCode,
		})
	}
	if value, ok := rpu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldValue,
		})
	}
	if value, ok := rpu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldValue,
		})
	}
	if value, ok := rpu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldTenantId,
		})
	}
	if value, ok := rpu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldTenantId,
		})
	}
	if value, ok := rpu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reproductionparameters.FieldTenantName,
		})
	}
	if value, ok := rpu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reproductionparameters.FieldRemarks,
		})
	}
	if value, ok := rpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldCreatedAt,
		})
	}
	if value, ok := rpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldCreatedAt,
		})
	}
	if value, ok := rpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldUpdatedAt,
		})
	}
	if value, ok := rpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldUpdatedAt,
		})
	}
	if value, ok := rpu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reproductionparameters.FieldDeleted,
		})
	}
	if value, ok := rpu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reproductionparameters.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reproductionparameters.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ReproductionParametersUpdateOne is the builder for updating a single ReproductionParameters entity.
type ReproductionParametersUpdateOne struct {
	config
	hooks    []Hook
	mutation *ReproductionParametersMutation
}

// SetName sets the name field.
func (rpuo *ReproductionParametersUpdateOne) SetName(s string) *ReproductionParametersUpdateOne {
	rpuo.mutation.SetName(s)
	return rpuo
}

// SetCode sets the code field.
func (rpuo *ReproductionParametersUpdateOne) SetCode(s string) *ReproductionParametersUpdateOne {
	rpuo.mutation.SetCode(s)
	return rpuo
}

// SetValue sets the value field.
func (rpuo *ReproductionParametersUpdateOne) SetValue(i int64) *ReproductionParametersUpdateOne {
	rpuo.mutation.ResetValue()
	rpuo.mutation.SetValue(i)
	return rpuo
}

// AddValue adds i to value.
func (rpuo *ReproductionParametersUpdateOne) AddValue(i int64) *ReproductionParametersUpdateOne {
	rpuo.mutation.AddValue(i)
	return rpuo
}

// SetTenantId sets the tenantId field.
func (rpuo *ReproductionParametersUpdateOne) SetTenantId(i int64) *ReproductionParametersUpdateOne {
	rpuo.mutation.ResetTenantId()
	rpuo.mutation.SetTenantId(i)
	return rpuo
}

// AddTenantId adds i to tenantId.
func (rpuo *ReproductionParametersUpdateOne) AddTenantId(i int64) *ReproductionParametersUpdateOne {
	rpuo.mutation.AddTenantId(i)
	return rpuo
}

// SetTenantName sets the tenantName field.
func (rpuo *ReproductionParametersUpdateOne) SetTenantName(s string) *ReproductionParametersUpdateOne {
	rpuo.mutation.SetTenantName(s)
	return rpuo
}

// SetRemarks sets the remarks field.
func (rpuo *ReproductionParametersUpdateOne) SetRemarks(s string) *ReproductionParametersUpdateOne {
	rpuo.mutation.SetRemarks(s)
	return rpuo
}

// SetCreatedAt sets the createdAt field.
func (rpuo *ReproductionParametersUpdateOne) SetCreatedAt(i int64) *ReproductionParametersUpdateOne {
	rpuo.mutation.ResetCreatedAt()
	rpuo.mutation.SetCreatedAt(i)
	return rpuo
}

// AddCreatedAt adds i to createdAt.
func (rpuo *ReproductionParametersUpdateOne) AddCreatedAt(i int64) *ReproductionParametersUpdateOne {
	rpuo.mutation.AddCreatedAt(i)
	return rpuo
}

// SetUpdatedAt sets the updatedAt field.
func (rpuo *ReproductionParametersUpdateOne) SetUpdatedAt(i int64) *ReproductionParametersUpdateOne {
	rpuo.mutation.ResetUpdatedAt()
	rpuo.mutation.SetUpdatedAt(i)
	return rpuo
}

// AddUpdatedAt adds i to updatedAt.
func (rpuo *ReproductionParametersUpdateOne) AddUpdatedAt(i int64) *ReproductionParametersUpdateOne {
	rpuo.mutation.AddUpdatedAt(i)
	return rpuo
}

// SetDeleted sets the deleted field.
func (rpuo *ReproductionParametersUpdateOne) SetDeleted(i int) *ReproductionParametersUpdateOne {
	rpuo.mutation.ResetDeleted()
	rpuo.mutation.SetDeleted(i)
	return rpuo
}

// AddDeleted adds i to deleted.
func (rpuo *ReproductionParametersUpdateOne) AddDeleted(i int) *ReproductionParametersUpdateOne {
	rpuo.mutation.AddDeleted(i)
	return rpuo
}

// Mutation returns the ReproductionParametersMutation object of the builder.
func (rpuo *ReproductionParametersUpdateOne) Mutation() *ReproductionParametersMutation {
	return rpuo.mutation
}

// Save executes the query and returns the updated entity.
func (rpuo *ReproductionParametersUpdateOne) Save(ctx context.Context) (*ReproductionParameters, error) {
	var (
		err  error
		node *ReproductionParameters
	)
	if len(rpuo.hooks) == 0 {
		node, err = rpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReproductionParametersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpuo.mutation = mutation
			node, err = rpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpuo.hooks) - 1; i >= 0; i-- {
			mut = rpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *ReproductionParametersUpdateOne) SaveX(ctx context.Context) *ReproductionParameters {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *ReproductionParametersUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *ReproductionParametersUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpuo *ReproductionParametersUpdateOne) sqlSave(ctx context.Context) (_node *ReproductionParameters, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reproductionparameters.Table,
			Columns: reproductionparameters.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: reproductionparameters.FieldID,
			},
		},
	}
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReproductionParameters.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reproductionparameters.FieldName,
		})
	}
	if value, ok := rpuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reproductionparameters.FieldCode,
		})
	}
	if value, ok := rpuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldValue,
		})
	}
	if value, ok := rpuo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldValue,
		})
	}
	if value, ok := rpuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldTenantId,
		})
	}
	if value, ok := rpuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldTenantId,
		})
	}
	if value, ok := rpuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reproductionparameters.FieldTenantName,
		})
	}
	if value, ok := rpuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reproductionparameters.FieldRemarks,
		})
	}
	if value, ok := rpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldCreatedAt,
		})
	}
	if value, ok := rpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldCreatedAt,
		})
	}
	if value, ok := rpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldUpdatedAt,
		})
	}
	if value, ok := rpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reproductionparameters.FieldUpdatedAt,
		})
	}
	if value, ok := rpuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reproductionparameters.FieldDeleted,
		})
	}
	if value, ok := rpuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reproductionparameters.FieldDeleted,
		})
	}
	_node = &ReproductionParameters{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reproductionparameters.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/reproductivestate"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// ReproductiveState is the model entity for the ReproductiveState schema.
type ReproductiveState struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReproductiveState) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReproductiveState fields.
func (rs *ReproductiveState) assignValues(values ...interface{}) error {
	if m, n := len(values), len(reproductivestate.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rs.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		rs.Name = value.String
	}
	return nil
}

// Update returns a builder for updating this ReproductiveState.
// Note that, you need to call ReproductiveState.Unwrap() before calling this method, if this ReproductiveState
// was returned from a transaction, and the transaction was committed or rolled back.
func (rs *ReproductiveState) Update() *ReproductiveStateUpdateOne {
	return (&ReproductiveStateClient{config: rs.config}).UpdateOne(rs)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rs *ReproductiveState) Unwrap() *ReproductiveState {
	tx, ok := rs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReproductiveState is not a transactional entity")
	}
	rs.config.driver = tx.drv
	return rs
}

// String implements the fmt.Stringer.
func (rs *ReproductiveState) String() string {
	var builder strings.Builder
	builder.WriteString("ReproductiveState(")
	builder.WriteString(fmt.Sprintf("id=%v", rs.ID))
	builder.WriteString(", name=")
	builder.WriteString(rs.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ReproductiveStates is a parsable slice of ReproductiveState.
type ReproductiveStates []*ReproductiveState

func (rs ReproductiveStates) config(cfg config) {
	for _i := range rs {
		rs[_i].config = cfg
	}
}

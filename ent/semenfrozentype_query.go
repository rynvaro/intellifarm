// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/semenfrozentype"
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// SemenFrozenTypeQuery is the builder for querying SemenFrozenType entities.
type SemenFrozenTypeQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.SemenFrozenType
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (sftq *SemenFrozenTypeQuery) Where(ps ...predicate.SemenFrozenType) *SemenFrozenTypeQuery {
	sftq.predicates = append(sftq.predicates, ps...)
	return sftq
}

// Limit adds a limit step to the query.
func (sftq *SemenFrozenTypeQuery) Limit(limit int) *SemenFrozenTypeQuery {
	sftq.limit = &limit
	return sftq
}

// Offset adds an offset step to the query.
func (sftq *SemenFrozenTypeQuery) Offset(offset int) *SemenFrozenTypeQuery {
	sftq.offset = &offset
	return sftq
}

// Order adds an order step to the query.
func (sftq *SemenFrozenTypeQuery) Order(o ...OrderFunc) *SemenFrozenTypeQuery {
	sftq.order = append(sftq.order, o...)
	return sftq
}

// First returns the first SemenFrozenType entity in the query. Returns *NotFoundError when no semenfrozentype was found.
func (sftq *SemenFrozenTypeQuery) First(ctx context.Context) (*SemenFrozenType, error) {
	nodes, err := sftq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{semenfrozentype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sftq *SemenFrozenTypeQuery) FirstX(ctx context.Context) *SemenFrozenType {
	node, err := sftq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SemenFrozenType id in the query. Returns *NotFoundError when no id was found.
func (sftq *SemenFrozenTypeQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sftq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{semenfrozentype.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (sftq *SemenFrozenTypeQuery) FirstXID(ctx context.Context) int64 {
	id, err := sftq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only SemenFrozenType entity in the query, returns an error if not exactly one entity was returned.
func (sftq *SemenFrozenTypeQuery) Only(ctx context.Context) (*SemenFrozenType, error) {
	nodes, err := sftq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{semenfrozentype.Label}
	default:
		return nil, &NotSingularError{semenfrozentype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sftq *SemenFrozenTypeQuery) OnlyX(ctx context.Context) *SemenFrozenType {
	node, err := sftq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only SemenFrozenType id in the query, returns an error if not exactly one id was returned.
func (sftq *SemenFrozenTypeQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sftq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{semenfrozentype.Label}
	default:
		err = &NotSingularError{semenfrozentype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sftq *SemenFrozenTypeQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := sftq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SemenFrozenTypes.
func (sftq *SemenFrozenTypeQuery) All(ctx context.Context) ([]*SemenFrozenType, error) {
	if err := sftq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sftq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sftq *SemenFrozenTypeQuery) AllX(ctx context.Context) []*SemenFrozenType {
	nodes, err := sftq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SemenFrozenType ids.
func (sftq *SemenFrozenTypeQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := sftq.Select(semenfrozentype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sftq *SemenFrozenTypeQuery) IDsX(ctx context.Context) []int64 {
	ids, err := sftq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sftq *SemenFrozenTypeQuery) Count(ctx context.Context) (int, error) {
	if err := sftq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sftq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sftq *SemenFrozenTypeQuery) CountX(ctx context.Context) int {
	count, err := sftq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sftq *SemenFrozenTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := sftq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sftq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sftq *SemenFrozenTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := sftq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sftq *SemenFrozenTypeQuery) Clone() *SemenFrozenTypeQuery {
	return &SemenFrozenTypeQuery{
		config:     sftq.config,
		limit:      sftq.limit,
		offset:     sftq.offset,
		order:      append([]OrderFunc{}, sftq.order...),
		unique:     append([]string{}, sftq.unique...),
		predicates: append([]predicate.SemenFrozenType{}, sftq.predicates...),
		// clone intermediate query.
		sql:  sftq.sql.Clone(),
		path: sftq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SemenFrozenType.Query().
//		GroupBy(semenfrozentype.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sftq *SemenFrozenTypeQuery) GroupBy(field string, fields ...string) *SemenFrozenTypeGroupBy {
	group := &SemenFrozenTypeGroupBy{config: sftq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sftq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sftq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.SemenFrozenType.Query().
//		Select(semenfrozentype.FieldName).
//		Scan(ctx, &v)
//
func (sftq *SemenFrozenTypeQuery) Select(field string, fields ...string) *SemenFrozenTypeSelect {
	selector := &SemenFrozenTypeSelect{config: sftq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sftq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sftq.sqlQuery(), nil
	}
	return selector
}

func (sftq *SemenFrozenTypeQuery) prepareQuery(ctx context.Context) error {
	if sftq.path != nil {
		prev, err := sftq.path(ctx)
		if err != nil {
			return err
		}
		sftq.sql = prev
	}
	return nil
}

func (sftq *SemenFrozenTypeQuery) sqlAll(ctx context.Context) ([]*SemenFrozenType, error) {
	var (
		nodes = []*SemenFrozenType{}
		_spec = sftq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &SemenFrozenType{config: sftq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, sftq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (sftq *SemenFrozenTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sftq.querySpec()
	return sqlgraph.CountNodes(ctx, sftq.driver, _spec)
}

func (sftq *SemenFrozenTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sftq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (sftq *SemenFrozenTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   semenfrozentype.Table,
			Columns: semenfrozentype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: semenfrozentype.FieldID,
			},
		},
		From:   sftq.sql,
		Unique: true,
	}
	if ps := sftq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sftq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sftq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sftq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, semenfrozentype.ValidColumn)
			}
		}
	}
	return _spec
}

func (sftq *SemenFrozenTypeQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(sftq.driver.Dialect())
	t1 := builder.Table(semenfrozentype.Table)
	selector := builder.Select(t1.Columns(semenfrozentype.Columns...)...).From(t1)
	if sftq.sql != nil {
		selector = sftq.sql
		selector.Select(selector.Columns(semenfrozentype.Columns...)...)
	}
	for _, p := range sftq.predicates {
		p(selector)
	}
	for _, p := range sftq.order {
		p(selector, semenfrozentype.ValidColumn)
	}
	if offset := sftq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sftq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SemenFrozenTypeGroupBy is the builder for group-by SemenFrozenType entities.
type SemenFrozenTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sftgb *SemenFrozenTypeGroupBy) Aggregate(fns ...AggregateFunc) *SemenFrozenTypeGroupBy {
	sftgb.fns = append(sftgb.fns, fns...)
	return sftgb
}

// Scan applies the group-by query and scan the result into the given value.
func (sftgb *SemenFrozenTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sftgb.path(ctx)
	if err != nil {
		return err
	}
	sftgb.sql = query
	return sftgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sftgb *SemenFrozenTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sftgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (sftgb *SemenFrozenTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sftgb.fields) > 1 {
		return nil, errors.New("ent: SemenFrozenTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sftgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sftgb *SemenFrozenTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := sftgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (sftgb *SemenFrozenTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sftgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{semenfrozentype.Label}
	default:
		err = fmt.Errorf("ent: SemenFrozenTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sftgb *SemenFrozenTypeGroupBy) StringX(ctx context.Context) string {
	v, err := sftgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (sftgb *SemenFrozenTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sftgb.fields) > 1 {
		return nil, errors.New("ent: SemenFrozenTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sftgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sftgb *SemenFrozenTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := sftgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (sftgb *SemenFrozenTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sftgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{semenfrozentype.Label}
	default:
		err = fmt.Errorf("ent: SemenFrozenTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sftgb *SemenFrozenTypeGroupBy) IntX(ctx context.Context) int {
	v, err := sftgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (sftgb *SemenFrozenTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sftgb.fields) > 1 {
		return nil, errors.New("ent: SemenFrozenTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sftgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sftgb *SemenFrozenTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sftgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (sftgb *SemenFrozenTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sftgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{semenfrozentype.Label}
	default:
		err = fmt.Errorf("ent: SemenFrozenTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sftgb *SemenFrozenTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sftgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (sftgb *SemenFrozenTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sftgb.fields) > 1 {
		return nil, errors.New("ent: SemenFrozenTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sftgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sftgb *SemenFrozenTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sftgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (sftgb *SemenFrozenTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sftgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{semenfrozentype.Label}
	default:
		err = fmt.Errorf("ent: SemenFrozenTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sftgb *SemenFrozenTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := sftgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sftgb *SemenFrozenTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sftgb.fields {
		if !semenfrozentype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sftgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sftgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sftgb *SemenFrozenTypeGroupBy) sqlQuery() *sql.Selector {
	selector := sftgb.sql
	columns := make([]string, 0, len(sftgb.fields)+len(sftgb.fns))
	columns = append(columns, sftgb.fields...)
	for _, fn := range sftgb.fns {
		columns = append(columns, fn(selector, semenfrozentype.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(sftgb.fields...)
}

// SemenFrozenTypeSelect is the builder for select fields of SemenFrozenType entities.
type SemenFrozenTypeSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (sfts *SemenFrozenTypeSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := sfts.path(ctx)
	if err != nil {
		return err
	}
	sfts.sql = query
	return sfts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sfts *SemenFrozenTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sfts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (sfts *SemenFrozenTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sfts.fields) > 1 {
		return nil, errors.New("ent: SemenFrozenTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sfts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sfts *SemenFrozenTypeSelect) StringsX(ctx context.Context) []string {
	v, err := sfts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (sfts *SemenFrozenTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sfts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{semenfrozentype.Label}
	default:
		err = fmt.Errorf("ent: SemenFrozenTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sfts *SemenFrozenTypeSelect) StringX(ctx context.Context) string {
	v, err := sfts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (sfts *SemenFrozenTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sfts.fields) > 1 {
		return nil, errors.New("ent: SemenFrozenTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sfts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sfts *SemenFrozenTypeSelect) IntsX(ctx context.Context) []int {
	v, err := sfts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (sfts *SemenFrozenTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sfts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{semenfrozentype.Label}
	default:
		err = fmt.Errorf("ent: SemenFrozenTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sfts *SemenFrozenTypeSelect) IntX(ctx context.Context) int {
	v, err := sfts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (sfts *SemenFrozenTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sfts.fields) > 1 {
		return nil, errors.New("ent: SemenFrozenTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sfts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sfts *SemenFrozenTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sfts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (sfts *SemenFrozenTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sfts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{semenfrozentype.Label}
	default:
		err = fmt.Errorf("ent: SemenFrozenTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sfts *SemenFrozenTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := sfts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (sfts *SemenFrozenTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sfts.fields) > 1 {
		return nil, errors.New("ent: SemenFrozenTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sfts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sfts *SemenFrozenTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := sfts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (sfts *SemenFrozenTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sfts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{semenfrozentype.Label}
	default:
		err = fmt.Errorf("ent: SemenFrozenTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sfts *SemenFrozenTypeSelect) BoolX(ctx context.Context) bool {
	v, err := sfts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sfts *SemenFrozenTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sfts.fields {
		if !semenfrozentype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := sfts.sqlQuery().Query()
	if err := sfts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sfts *SemenFrozenTypeSelect) sqlQuery() sql.Querier {
	selector := sfts.sql
	selector.Select(selector.Columns(sfts.fields...)...)
	return selector
}

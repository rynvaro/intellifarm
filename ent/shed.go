// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/shed"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Shed is the model entity for the Shed schema.
type Shed struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ShedCateId holds the value of the "shedCateId" field.
	ShedCateId int64 `json:"shedCateId,omitempty"`
	// ShedCateName holds the value of the "shedCateName" field.
	ShedCateName string `json:"shedCateName,omitempty"`
	// ShedTypeId holds the value of the "shedTypeId" field.
	ShedTypeId int `json:"shedTypeId,omitempty"`
	// ShedTypeName holds the value of the "shedTypeName" field.
	ShedTypeName string `json:"shedTypeName,omitempty"`
	// Square holds the value of the "square" field.
	Square int64 `json:"square,omitempty"`
	// Length holds the value of the "length" field.
	Length int64 `json:"length,omitempty"`
	// Width holds the value of the "width" field.
	Width int64 `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int64 `json:"height,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int `json:"userId,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shed) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // farmId
		&sql.NullString{}, // farmName
		&sql.NullString{}, // name
		&sql.NullInt64{},  // shedCateId
		&sql.NullString{}, // shedCateName
		&sql.NullInt64{},  // shedTypeId
		&sql.NullString{}, // shedTypeName
		&sql.NullInt64{},  // square
		&sql.NullInt64{},  // length
		&sql.NullInt64{},  // width
		&sql.NullInt64{},  // height
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // userId
		&sql.NullString{}, // userName
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shed fields.
func (s *Shed) assignValues(values ...interface{}) error {
	if m, n := len(values), len(shed.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[0])
	} else if value.Valid {
		s.FarmId = value.Int64
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[1])
	} else if value.Valid {
		s.FarmName = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		s.Name = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field shedCateId", values[3])
	} else if value.Valid {
		s.ShedCateId = value.Int64
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedCateName", values[4])
	} else if value.Valid {
		s.ShedCateName = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field shedTypeId", values[5])
	} else if value.Valid {
		s.ShedTypeId = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shedTypeName", values[6])
	} else if value.Valid {
		s.ShedTypeName = value.String
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field square", values[7])
	} else if value.Valid {
		s.Square = value.Int64
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field length", values[8])
	} else if value.Valid {
		s.Length = value.Int64
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field width", values[9])
	} else if value.Valid {
		s.Width = value.Int64
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field height", values[10])
	} else if value.Valid {
		s.Height = value.Int64
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[11])
	} else if value.Valid {
		s.Remarks = value.String
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field userId", values[12])
	} else if value.Valid {
		s.UserId = int(value.Int64)
	}
	if value, ok := values[13].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userName", values[13])
	} else if value.Valid {
		s.UserName = value.String
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[14])
	} else if value.Valid {
		s.CreatedAt = value.Int64
	}
	if value, ok := values[15].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[15])
	} else if value.Valid {
		s.UpdatedAt = value.Int64
	}
	if value, ok := values[16].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[16])
	} else if value.Valid {
		s.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Shed.
// Note that, you need to call Shed.Unwrap() before calling this method, if this Shed
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shed) Update() *ShedUpdateOne {
	return (&ShedClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Shed) Unwrap() *Shed {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shed is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shed) String() string {
	var builder strings.Builder
	builder.WriteString("Shed(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", s.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(s.FarmName)
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", shedCateId=")
	builder.WriteString(fmt.Sprintf("%v", s.ShedCateId))
	builder.WriteString(", shedCateName=")
	builder.WriteString(s.ShedCateName)
	builder.WriteString(", shedTypeId=")
	builder.WriteString(fmt.Sprintf("%v", s.ShedTypeId))
	builder.WriteString(", shedTypeName=")
	builder.WriteString(s.ShedTypeName)
	builder.WriteString(", square=")
	builder.WriteString(fmt.Sprintf("%v", s.Square))
	builder.WriteString(", length=")
	builder.WriteString(fmt.Sprintf("%v", s.Length))
	builder.WriteString(", width=")
	builder.WriteString(fmt.Sprintf("%v", s.Width))
	builder.WriteString(", height=")
	builder.WriteString(fmt.Sprintf("%v", s.Height))
	builder.WriteString(", remarks=")
	builder.WriteString(s.Remarks)
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", s.UserId))
	builder.WriteString(", userName=")
	builder.WriteString(s.UserName)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", s.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Sheds is a parsable slice of Shed.
type Sheds []*Shed

func (s Sheds) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/shed"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Shed is the model entity for the Shed schema.
type Shed struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 牛舍名称
	Name string `json:"name,omitempty"`
	// 牛舍类别ID
	ShedCateId int64 `json:"shedCateId,omitempty"`
	// 牛舍类别
	ShedCateName string `json:"shedCateName,omitempty"`
	// 牛舍类型
	ShedTypeId int `json:"shedTypeId,omitempty"`
	// 牛舍类型
	ShedTypeName string `json:"shedTypeName,omitempty"`
	// 建筑面积（m²）
	Square int64 `json:"square,omitempty"`
	// 长（m）
	Length int64 `json:"length,omitempty"`
	// 宽（m）
	Width int64 `json:"width,omitempty"`
	// 高（m）
	Height int64 `json:"height,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 负责人ID
	UserId int `json:"userId,omitempty"`
	// 负责人
	UserName string `json:"userName,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shed) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shed.FieldID, shed.FieldFarmId, shed.FieldShedCateId, shed.FieldShedTypeId, shed.FieldSquare, shed.FieldLength, shed.FieldWidth, shed.FieldHeight, shed.FieldTenantId, shed.FieldUserId, shed.FieldCreatedAt, shed.FieldUpdatedAt, shed.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case shed.FieldFarmName, shed.FieldName, shed.FieldShedCateName, shed.FieldShedTypeName, shed.FieldTenantName, shed.FieldRemarks, shed.FieldUserName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Shed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shed fields.
func (s *Shed) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shed.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case shed.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				s.FarmId = value.Int64
			}
		case shed.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				s.FarmName = value.String
			}
		case shed.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case shed.FieldShedCateId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedCateId", values[i])
			} else if value.Valid {
				s.ShedCateId = value.Int64
			}
		case shed.FieldShedCateName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedCateName", values[i])
			} else if value.Valid {
				s.ShedCateName = value.String
			}
		case shed.FieldShedTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shedTypeId", values[i])
			} else if value.Valid {
				s.ShedTypeId = int(value.Int64)
			}
		case shed.FieldShedTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shedTypeName", values[i])
			} else if value.Valid {
				s.ShedTypeName = value.String
			}
		case shed.FieldSquare:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field square", values[i])
			} else if value.Valid {
				s.Square = value.Int64
			}
		case shed.FieldLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				s.Length = value.Int64
			}
		case shed.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				s.Width = value.Int64
			}
		case shed.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				s.Height = value.Int64
			}
		case shed.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				s.TenantId = value.Int64
			}
		case shed.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				s.TenantName = value.String
			}
		case shed.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				s.Remarks = value.String
			}
		case shed.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				s.UserId = int(value.Int64)
			}
		case shed.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				s.UserName = value.String
			}
		case shed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Int64
			}
		case shed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Int64
			}
		case shed.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				s.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Shed.
// Note that you need to call Shed.Unwrap() before calling this method if this Shed
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shed) Update() *ShedUpdateOne {
	return (&ShedClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Shed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shed) Unwrap() *Shed {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shed is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shed) String() string {
	var builder strings.Builder
	builder.WriteString("Shed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", s.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(s.FarmName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("shedCateId=")
	builder.WriteString(fmt.Sprintf("%v", s.ShedCateId))
	builder.WriteString(", ")
	builder.WriteString("shedCateName=")
	builder.WriteString(s.ShedCateName)
	builder.WriteString(", ")
	builder.WriteString("shedTypeId=")
	builder.WriteString(fmt.Sprintf("%v", s.ShedTypeId))
	builder.WriteString(", ")
	builder.WriteString("shedTypeName=")
	builder.WriteString(s.ShedTypeName)
	builder.WriteString(", ")
	builder.WriteString("square=")
	builder.WriteString(fmt.Sprintf("%v", s.Square))
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", s.Length))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", s.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", s.Height))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", s.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(s.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(s.Remarks)
	builder.WriteString(", ")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", s.UserId))
	builder.WriteString(", ")
	builder.WriteString("userName=")
	builder.WriteString(s.UserName)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", s.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Sheds is a parsable slice of Shed.
type Sheds []*Shed

func (s Sheds) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package shed

import (
	"cattleai/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FarmId applies equality check predicate on the "farmId" field. It's identical to FarmIdEQ.
func FarmId(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmName applies equality check predicate on the "farmName" field. It's identical to FarmNameEQ.
func FarmName(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// ShedCateId applies equality check predicate on the "shedCateId" field. It's identical to ShedCateIdEQ.
func ShedCateId(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedCateId), v))
	})
}

// ShedCateName applies equality check predicate on the "shedCateName" field. It's identical to ShedCateNameEQ.
func ShedCateName(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedCateName), v))
	})
}

// ShedTypeId applies equality check predicate on the "shedTypeId" field. It's identical to ShedTypeIdEQ.
func ShedTypeId(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeName applies equality check predicate on the "shedTypeName" field. It's identical to ShedTypeNameEQ.
func ShedTypeName(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedTypeName), v))
	})
}

// Square applies equality check predicate on the "square" field. It's identical to SquareEQ.
func Square(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSquare), v))
	})
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantName applies equality check predicate on the "tenantName" field. It's identical to TenantNameEQ.
func TenantName(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// FarmIdEQ applies the EQ predicate on the "farmId" field.
func FarmIdEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmId), v))
	})
}

// FarmIdNEQ applies the NEQ predicate on the "farmId" field.
func FarmIdNEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmId), v))
	})
}

// FarmIdIn applies the In predicate on the "farmId" field.
func FarmIdIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFarmId), v...))
	})
}

// FarmIdNotIn applies the NotIn predicate on the "farmId" field.
func FarmIdNotIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFarmId), v...))
	})
}

// FarmIdGT applies the GT predicate on the "farmId" field.
func FarmIdGT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmId), v))
	})
}

// FarmIdGTE applies the GTE predicate on the "farmId" field.
func FarmIdGTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmId), v))
	})
}

// FarmIdLT applies the LT predicate on the "farmId" field.
func FarmIdLT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmId), v))
	})
}

// FarmIdLTE applies the LTE predicate on the "farmId" field.
func FarmIdLTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmId), v))
	})
}

// FarmNameEQ applies the EQ predicate on the "farmName" field.
func FarmNameEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFarmName), v))
	})
}

// FarmNameNEQ applies the NEQ predicate on the "farmName" field.
func FarmNameNEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFarmName), v))
	})
}

// FarmNameIn applies the In predicate on the "farmName" field.
func FarmNameIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFarmName), v...))
	})
}

// FarmNameNotIn applies the NotIn predicate on the "farmName" field.
func FarmNameNotIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFarmName), v...))
	})
}

// FarmNameGT applies the GT predicate on the "farmName" field.
func FarmNameGT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFarmName), v))
	})
}

// FarmNameGTE applies the GTE predicate on the "farmName" field.
func FarmNameGTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFarmName), v))
	})
}

// FarmNameLT applies the LT predicate on the "farmName" field.
func FarmNameLT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFarmName), v))
	})
}

// FarmNameLTE applies the LTE predicate on the "farmName" field.
func FarmNameLTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFarmName), v))
	})
}

// FarmNameContains applies the Contains predicate on the "farmName" field.
func FarmNameContains(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFarmName), v))
	})
}

// FarmNameHasPrefix applies the HasPrefix predicate on the "farmName" field.
func FarmNameHasPrefix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFarmName), v))
	})
}

// FarmNameHasSuffix applies the HasSuffix predicate on the "farmName" field.
func FarmNameHasSuffix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFarmName), v))
	})
}

// FarmNameEqualFold applies the EqualFold predicate on the "farmName" field.
func FarmNameEqualFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFarmName), v))
	})
}

// FarmNameContainsFold applies the ContainsFold predicate on the "farmName" field.
func FarmNameContainsFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFarmName), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ShedCateIdEQ applies the EQ predicate on the "shedCateId" field.
func ShedCateIdEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedCateId), v))
	})
}

// ShedCateIdNEQ applies the NEQ predicate on the "shedCateId" field.
func ShedCateIdNEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedCateId), v))
	})
}

// ShedCateIdIn applies the In predicate on the "shedCateId" field.
func ShedCateIdIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedCateId), v...))
	})
}

// ShedCateIdNotIn applies the NotIn predicate on the "shedCateId" field.
func ShedCateIdNotIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedCateId), v...))
	})
}

// ShedCateIdGT applies the GT predicate on the "shedCateId" field.
func ShedCateIdGT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedCateId), v))
	})
}

// ShedCateIdGTE applies the GTE predicate on the "shedCateId" field.
func ShedCateIdGTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedCateId), v))
	})
}

// ShedCateIdLT applies the LT predicate on the "shedCateId" field.
func ShedCateIdLT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedCateId), v))
	})
}

// ShedCateIdLTE applies the LTE predicate on the "shedCateId" field.
func ShedCateIdLTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedCateId), v))
	})
}

// ShedCateNameEQ applies the EQ predicate on the "shedCateName" field.
func ShedCateNameEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameNEQ applies the NEQ predicate on the "shedCateName" field.
func ShedCateNameNEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameIn applies the In predicate on the "shedCateName" field.
func ShedCateNameIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedCateName), v...))
	})
}

// ShedCateNameNotIn applies the NotIn predicate on the "shedCateName" field.
func ShedCateNameNotIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedCateName), v...))
	})
}

// ShedCateNameGT applies the GT predicate on the "shedCateName" field.
func ShedCateNameGT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameGTE applies the GTE predicate on the "shedCateName" field.
func ShedCateNameGTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameLT applies the LT predicate on the "shedCateName" field.
func ShedCateNameLT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameLTE applies the LTE predicate on the "shedCateName" field.
func ShedCateNameLTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameContains applies the Contains predicate on the "shedCateName" field.
func ShedCateNameContains(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameHasPrefix applies the HasPrefix predicate on the "shedCateName" field.
func ShedCateNameHasPrefix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameHasSuffix applies the HasSuffix predicate on the "shedCateName" field.
func ShedCateNameHasSuffix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameEqualFold applies the EqualFold predicate on the "shedCateName" field.
func ShedCateNameEqualFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedCateName), v))
	})
}

// ShedCateNameContainsFold applies the ContainsFold predicate on the "shedCateName" field.
func ShedCateNameContainsFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedCateName), v))
	})
}

// ShedTypeIdEQ applies the EQ predicate on the "shedTypeId" field.
func ShedTypeIdEQ(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdNEQ applies the NEQ predicate on the "shedTypeId" field.
func ShedTypeIdNEQ(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdIn applies the In predicate on the "shedTypeId" field.
func ShedTypeIdIn(vs ...int) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedTypeId), v...))
	})
}

// ShedTypeIdNotIn applies the NotIn predicate on the "shedTypeId" field.
func ShedTypeIdNotIn(vs ...int) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedTypeId), v...))
	})
}

// ShedTypeIdGT applies the GT predicate on the "shedTypeId" field.
func ShedTypeIdGT(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdGTE applies the GTE predicate on the "shedTypeId" field.
func ShedTypeIdGTE(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdLT applies the LT predicate on the "shedTypeId" field.
func ShedTypeIdLT(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeIdLTE applies the LTE predicate on the "shedTypeId" field.
func ShedTypeIdLTE(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedTypeId), v))
	})
}

// ShedTypeNameEQ applies the EQ predicate on the "shedTypeName" field.
func ShedTypeNameEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameNEQ applies the NEQ predicate on the "shedTypeName" field.
func ShedTypeNameNEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameIn applies the In predicate on the "shedTypeName" field.
func ShedTypeNameIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShedTypeName), v...))
	})
}

// ShedTypeNameNotIn applies the NotIn predicate on the "shedTypeName" field.
func ShedTypeNameNotIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShedTypeName), v...))
	})
}

// ShedTypeNameGT applies the GT predicate on the "shedTypeName" field.
func ShedTypeNameGT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameGTE applies the GTE predicate on the "shedTypeName" field.
func ShedTypeNameGTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameLT applies the LT predicate on the "shedTypeName" field.
func ShedTypeNameLT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameLTE applies the LTE predicate on the "shedTypeName" field.
func ShedTypeNameLTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameContains applies the Contains predicate on the "shedTypeName" field.
func ShedTypeNameContains(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameHasPrefix applies the HasPrefix predicate on the "shedTypeName" field.
func ShedTypeNameHasPrefix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameHasSuffix applies the HasSuffix predicate on the "shedTypeName" field.
func ShedTypeNameHasSuffix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameEqualFold applies the EqualFold predicate on the "shedTypeName" field.
func ShedTypeNameEqualFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShedTypeName), v))
	})
}

// ShedTypeNameContainsFold applies the ContainsFold predicate on the "shedTypeName" field.
func ShedTypeNameContainsFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShedTypeName), v))
	})
}

// SquareEQ applies the EQ predicate on the "square" field.
func SquareEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSquare), v))
	})
}

// SquareNEQ applies the NEQ predicate on the "square" field.
func SquareNEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSquare), v))
	})
}

// SquareIn applies the In predicate on the "square" field.
func SquareIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSquare), v...))
	})
}

// SquareNotIn applies the NotIn predicate on the "square" field.
func SquareNotIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSquare), v...))
	})
}

// SquareGT applies the GT predicate on the "square" field.
func SquareGT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSquare), v))
	})
}

// SquareGTE applies the GTE predicate on the "square" field.
func SquareGTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSquare), v))
	})
}

// SquareLT applies the LT predicate on the "square" field.
func SquareLT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSquare), v))
	})
}

// SquareLTE applies the LTE predicate on the "square" field.
func SquareLTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSquare), v))
	})
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLength), v))
	})
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLength), v...))
	})
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLength), v...))
	})
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLength), v))
	})
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLength), v))
	})
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLength), v))
	})
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLength), v))
	})
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWidth), v))
	})
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWidth), v...))
	})
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWidth), v...))
	})
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWidth), v))
	})
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWidth), v))
	})
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWidth), v))
	})
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWidth), v))
	})
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeight), v))
	})
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeight), v...))
	})
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeight), v...))
	})
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeight), v))
	})
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeight), v))
	})
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeight), v))
	})
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeight), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// TenantNameEQ applies the EQ predicate on the "tenantName" field.
func TenantNameEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantName), v))
	})
}

// TenantNameNEQ applies the NEQ predicate on the "tenantName" field.
func TenantNameNEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantName), v))
	})
}

// TenantNameIn applies the In predicate on the "tenantName" field.
func TenantNameIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantName), v...))
	})
}

// TenantNameNotIn applies the NotIn predicate on the "tenantName" field.
func TenantNameNotIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantName), v...))
	})
}

// TenantNameGT applies the GT predicate on the "tenantName" field.
func TenantNameGT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantName), v))
	})
}

// TenantNameGTE applies the GTE predicate on the "tenantName" field.
func TenantNameGTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantName), v))
	})
}

// TenantNameLT applies the LT predicate on the "tenantName" field.
func TenantNameLT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantName), v))
	})
}

// TenantNameLTE applies the LTE predicate on the "tenantName" field.
func TenantNameLTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantName), v))
	})
}

// TenantNameContains applies the Contains predicate on the "tenantName" field.
func TenantNameContains(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantName), v))
	})
}

// TenantNameHasPrefix applies the HasPrefix predicate on the "tenantName" field.
func TenantNameHasPrefix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantName), v))
	})
}

// TenantNameHasSuffix applies the HasSuffix predicate on the "tenantName" field.
func TenantNameHasSuffix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantName), v))
	})
}

// TenantNameEqualFold applies the EqualFold predicate on the "tenantName" field.
func TenantNameEqualFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantName), v))
	})
}

// TenantNameContainsFold applies the ContainsFold predicate on the "tenantName" field.
func TenantNameContainsFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantName), v))
	})
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemarks), v))
	})
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemarks), v))
	})
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemarks), v...))
	})
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemarks), v...))
	})
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemarks), v))
	})
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemarks), v))
	})
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemarks), v))
	})
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemarks), v))
	})
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemarks), v))
	})
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemarks), v))
	})
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemarks), v))
	})
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemarks), v))
	})
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemarks), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...int64) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v int64) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int) predicate.Shed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shed) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shed) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shed) predicate.Shed {
	return predicate.Shed(func(s *sql.Selector) {
		p(s.Not())
	})
}

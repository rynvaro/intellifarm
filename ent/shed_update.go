// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/shed"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShedUpdate is the builder for updating Shed entities.
type ShedUpdate struct {
	config
	hooks    []Hook
	mutation *ShedMutation
}

// Where appends a list predicates to the ShedUpdate builder.
func (su *ShedUpdate) Where(ps ...predicate.Shed) *ShedUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetFarmId sets the "farmId" field.
func (su *ShedUpdate) SetFarmId(i int64) *ShedUpdate {
	su.mutation.ResetFarmId()
	su.mutation.SetFarmId(i)
	return su
}

// AddFarmId adds i to the "farmId" field.
func (su *ShedUpdate) AddFarmId(i int64) *ShedUpdate {
	su.mutation.AddFarmId(i)
	return su
}

// SetFarmName sets the "farmName" field.
func (su *ShedUpdate) SetFarmName(s string) *ShedUpdate {
	su.mutation.SetFarmName(s)
	return su
}

// SetName sets the "name" field.
func (su *ShedUpdate) SetName(s string) *ShedUpdate {
	su.mutation.SetName(s)
	return su
}

// SetShedCateId sets the "shedCateId" field.
func (su *ShedUpdate) SetShedCateId(i int64) *ShedUpdate {
	su.mutation.ResetShedCateId()
	su.mutation.SetShedCateId(i)
	return su
}

// AddShedCateId adds i to the "shedCateId" field.
func (su *ShedUpdate) AddShedCateId(i int64) *ShedUpdate {
	su.mutation.AddShedCateId(i)
	return su
}

// SetShedCateName sets the "shedCateName" field.
func (su *ShedUpdate) SetShedCateName(s string) *ShedUpdate {
	su.mutation.SetShedCateName(s)
	return su
}

// SetShedTypeId sets the "shedTypeId" field.
func (su *ShedUpdate) SetShedTypeId(i int) *ShedUpdate {
	su.mutation.ResetShedTypeId()
	su.mutation.SetShedTypeId(i)
	return su
}

// AddShedTypeId adds i to the "shedTypeId" field.
func (su *ShedUpdate) AddShedTypeId(i int) *ShedUpdate {
	su.mutation.AddShedTypeId(i)
	return su
}

// SetShedTypeName sets the "shedTypeName" field.
func (su *ShedUpdate) SetShedTypeName(s string) *ShedUpdate {
	su.mutation.SetShedTypeName(s)
	return su
}

// SetSquare sets the "square" field.
func (su *ShedUpdate) SetSquare(i int64) *ShedUpdate {
	su.mutation.ResetSquare()
	su.mutation.SetSquare(i)
	return su
}

// AddSquare adds i to the "square" field.
func (su *ShedUpdate) AddSquare(i int64) *ShedUpdate {
	su.mutation.AddSquare(i)
	return su
}

// SetLength sets the "length" field.
func (su *ShedUpdate) SetLength(i int64) *ShedUpdate {
	su.mutation.ResetLength()
	su.mutation.SetLength(i)
	return su
}

// AddLength adds i to the "length" field.
func (su *ShedUpdate) AddLength(i int64) *ShedUpdate {
	su.mutation.AddLength(i)
	return su
}

// SetWidth sets the "width" field.
func (su *ShedUpdate) SetWidth(i int64) *ShedUpdate {
	su.mutation.ResetWidth()
	su.mutation.SetWidth(i)
	return su
}

// AddWidth adds i to the "width" field.
func (su *ShedUpdate) AddWidth(i int64) *ShedUpdate {
	su.mutation.AddWidth(i)
	return su
}

// SetHeight sets the "height" field.
func (su *ShedUpdate) SetHeight(i int64) *ShedUpdate {
	su.mutation.ResetHeight()
	su.mutation.SetHeight(i)
	return su
}

// AddHeight adds i to the "height" field.
func (su *ShedUpdate) AddHeight(i int64) *ShedUpdate {
	su.mutation.AddHeight(i)
	return su
}

// SetTenantId sets the "tenantId" field.
func (su *ShedUpdate) SetTenantId(i int64) *ShedUpdate {
	su.mutation.ResetTenantId()
	su.mutation.SetTenantId(i)
	return su
}

// AddTenantId adds i to the "tenantId" field.
func (su *ShedUpdate) AddTenantId(i int64) *ShedUpdate {
	su.mutation.AddTenantId(i)
	return su
}

// SetTenantName sets the "tenantName" field.
func (su *ShedUpdate) SetTenantName(s string) *ShedUpdate {
	su.mutation.SetTenantName(s)
	return su
}

// SetRemarks sets the "remarks" field.
func (su *ShedUpdate) SetRemarks(s string) *ShedUpdate {
	su.mutation.SetRemarks(s)
	return su
}

// SetUserId sets the "userId" field.
func (su *ShedUpdate) SetUserId(i int) *ShedUpdate {
	su.mutation.ResetUserId()
	su.mutation.SetUserId(i)
	return su
}

// AddUserId adds i to the "userId" field.
func (su *ShedUpdate) AddUserId(i int) *ShedUpdate {
	su.mutation.AddUserId(i)
	return su
}

// SetUserName sets the "userName" field.
func (su *ShedUpdate) SetUserName(s string) *ShedUpdate {
	su.mutation.SetUserName(s)
	return su
}

// SetCreatedAt sets the "createdAt" field.
func (su *ShedUpdate) SetCreatedAt(i int64) *ShedUpdate {
	su.mutation.ResetCreatedAt()
	su.mutation.SetCreatedAt(i)
	return su
}

// AddCreatedAt adds i to the "createdAt" field.
func (su *ShedUpdate) AddCreatedAt(i int64) *ShedUpdate {
	su.mutation.AddCreatedAt(i)
	return su
}

// SetUpdatedAt sets the "updatedAt" field.
func (su *ShedUpdate) SetUpdatedAt(i int64) *ShedUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(i)
	return su
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (su *ShedUpdate) AddUpdatedAt(i int64) *ShedUpdate {
	su.mutation.AddUpdatedAt(i)
	return su
}

// SetDeleted sets the "deleted" field.
func (su *ShedUpdate) SetDeleted(i int) *ShedUpdate {
	su.mutation.ResetDeleted()
	su.mutation.SetDeleted(i)
	return su
}

// AddDeleted adds i to the "deleted" field.
func (su *ShedUpdate) AddDeleted(i int) *ShedUpdate {
	su.mutation.AddDeleted(i)
	return su
}

// Mutation returns the ShedMutation object of the builder.
func (su *ShedUpdate) Mutation() *ShedMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShedUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShedUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShedUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShedUpdate) check() error {
	if v, ok := su.mutation.FarmName(); ok {
		if err := shed.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf(`ent: validator failed for field "Shed.farmName": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := shed.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Shed.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.ShedCateName(); ok {
		if err := shed.ShedCateNameValidator(v); err != nil {
			return &ValidationError{Name: "shedCateName", err: fmt.Errorf(`ent: validator failed for field "Shed.shedCateName": %w`, err)}
		}
	}
	if v, ok := su.mutation.ShedTypeName(); ok {
		if err := shed.ShedTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "shedTypeName", err: fmt.Errorf(`ent: validator failed for field "Shed.shedTypeName": %w`, err)}
		}
	}
	return nil
}

func (su *ShedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shed.Table,
			Columns: shed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shed.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldFarmId,
		})
	}
	if value, ok := su.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldFarmId,
		})
	}
	if value, ok := su.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldFarmName,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldName,
		})
	}
	if value, ok := su.mutation.ShedCateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldShedCateId,
		})
	}
	if value, ok := su.mutation.AddedShedCateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldShedCateId,
		})
	}
	if value, ok := su.mutation.ShedCateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldShedCateName,
		})
	}
	if value, ok := su.mutation.ShedTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldShedTypeId,
		})
	}
	if value, ok := su.mutation.AddedShedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldShedTypeId,
		})
	}
	if value, ok := su.mutation.ShedTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldShedTypeName,
		})
	}
	if value, ok := su.mutation.Square(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldSquare,
		})
	}
	if value, ok := su.mutation.AddedSquare(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldSquare,
		})
	}
	if value, ok := su.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldLength,
		})
	}
	if value, ok := su.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldLength,
		})
	}
	if value, ok := su.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldWidth,
		})
	}
	if value, ok := su.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldWidth,
		})
	}
	if value, ok := su.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldHeight,
		})
	}
	if value, ok := su.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldHeight,
		})
	}
	if value, ok := su.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldTenantId,
		})
	}
	if value, ok := su.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldTenantId,
		})
	}
	if value, ok := su.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldTenantName,
		})
	}
	if value, ok := su.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldRemarks,
		})
	}
	if value, ok := su.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldUserId,
		})
	}
	if value, ok := su.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldUserId,
		})
	}
	if value, ok := su.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldUserName,
		})
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldDeleted,
		})
	}
	if value, ok := su.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ShedUpdateOne is the builder for updating a single Shed entity.
type ShedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShedMutation
}

// SetFarmId sets the "farmId" field.
func (suo *ShedUpdateOne) SetFarmId(i int64) *ShedUpdateOne {
	suo.mutation.ResetFarmId()
	suo.mutation.SetFarmId(i)
	return suo
}

// AddFarmId adds i to the "farmId" field.
func (suo *ShedUpdateOne) AddFarmId(i int64) *ShedUpdateOne {
	suo.mutation.AddFarmId(i)
	return suo
}

// SetFarmName sets the "farmName" field.
func (suo *ShedUpdateOne) SetFarmName(s string) *ShedUpdateOne {
	suo.mutation.SetFarmName(s)
	return suo
}

// SetName sets the "name" field.
func (suo *ShedUpdateOne) SetName(s string) *ShedUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetShedCateId sets the "shedCateId" field.
func (suo *ShedUpdateOne) SetShedCateId(i int64) *ShedUpdateOne {
	suo.mutation.ResetShedCateId()
	suo.mutation.SetShedCateId(i)
	return suo
}

// AddShedCateId adds i to the "shedCateId" field.
func (suo *ShedUpdateOne) AddShedCateId(i int64) *ShedUpdateOne {
	suo.mutation.AddShedCateId(i)
	return suo
}

// SetShedCateName sets the "shedCateName" field.
func (suo *ShedUpdateOne) SetShedCateName(s string) *ShedUpdateOne {
	suo.mutation.SetShedCateName(s)
	return suo
}

// SetShedTypeId sets the "shedTypeId" field.
func (suo *ShedUpdateOne) SetShedTypeId(i int) *ShedUpdateOne {
	suo.mutation.ResetShedTypeId()
	suo.mutation.SetShedTypeId(i)
	return suo
}

// AddShedTypeId adds i to the "shedTypeId" field.
func (suo *ShedUpdateOne) AddShedTypeId(i int) *ShedUpdateOne {
	suo.mutation.AddShedTypeId(i)
	return suo
}

// SetShedTypeName sets the "shedTypeName" field.
func (suo *ShedUpdateOne) SetShedTypeName(s string) *ShedUpdateOne {
	suo.mutation.SetShedTypeName(s)
	return suo
}

// SetSquare sets the "square" field.
func (suo *ShedUpdateOne) SetSquare(i int64) *ShedUpdateOne {
	suo.mutation.ResetSquare()
	suo.mutation.SetSquare(i)
	return suo
}

// AddSquare adds i to the "square" field.
func (suo *ShedUpdateOne) AddSquare(i int64) *ShedUpdateOne {
	suo.mutation.AddSquare(i)
	return suo
}

// SetLength sets the "length" field.
func (suo *ShedUpdateOne) SetLength(i int64) *ShedUpdateOne {
	suo.mutation.ResetLength()
	suo.mutation.SetLength(i)
	return suo
}

// AddLength adds i to the "length" field.
func (suo *ShedUpdateOne) AddLength(i int64) *ShedUpdateOne {
	suo.mutation.AddLength(i)
	return suo
}

// SetWidth sets the "width" field.
func (suo *ShedUpdateOne) SetWidth(i int64) *ShedUpdateOne {
	suo.mutation.ResetWidth()
	suo.mutation.SetWidth(i)
	return suo
}

// AddWidth adds i to the "width" field.
func (suo *ShedUpdateOne) AddWidth(i int64) *ShedUpdateOne {
	suo.mutation.AddWidth(i)
	return suo
}

// SetHeight sets the "height" field.
func (suo *ShedUpdateOne) SetHeight(i int64) *ShedUpdateOne {
	suo.mutation.ResetHeight()
	suo.mutation.SetHeight(i)
	return suo
}

// AddHeight adds i to the "height" field.
func (suo *ShedUpdateOne) AddHeight(i int64) *ShedUpdateOne {
	suo.mutation.AddHeight(i)
	return suo
}

// SetTenantId sets the "tenantId" field.
func (suo *ShedUpdateOne) SetTenantId(i int64) *ShedUpdateOne {
	suo.mutation.ResetTenantId()
	suo.mutation.SetTenantId(i)
	return suo
}

// AddTenantId adds i to the "tenantId" field.
func (suo *ShedUpdateOne) AddTenantId(i int64) *ShedUpdateOne {
	suo.mutation.AddTenantId(i)
	return suo
}

// SetTenantName sets the "tenantName" field.
func (suo *ShedUpdateOne) SetTenantName(s string) *ShedUpdateOne {
	suo.mutation.SetTenantName(s)
	return suo
}

// SetRemarks sets the "remarks" field.
func (suo *ShedUpdateOne) SetRemarks(s string) *ShedUpdateOne {
	suo.mutation.SetRemarks(s)
	return suo
}

// SetUserId sets the "userId" field.
func (suo *ShedUpdateOne) SetUserId(i int) *ShedUpdateOne {
	suo.mutation.ResetUserId()
	suo.mutation.SetUserId(i)
	return suo
}

// AddUserId adds i to the "userId" field.
func (suo *ShedUpdateOne) AddUserId(i int) *ShedUpdateOne {
	suo.mutation.AddUserId(i)
	return suo
}

// SetUserName sets the "userName" field.
func (suo *ShedUpdateOne) SetUserName(s string) *ShedUpdateOne {
	suo.mutation.SetUserName(s)
	return suo
}

// SetCreatedAt sets the "createdAt" field.
func (suo *ShedUpdateOne) SetCreatedAt(i int64) *ShedUpdateOne {
	suo.mutation.ResetCreatedAt()
	suo.mutation.SetCreatedAt(i)
	return suo
}

// AddCreatedAt adds i to the "createdAt" field.
func (suo *ShedUpdateOne) AddCreatedAt(i int64) *ShedUpdateOne {
	suo.mutation.AddCreatedAt(i)
	return suo
}

// SetUpdatedAt sets the "updatedAt" field.
func (suo *ShedUpdateOne) SetUpdatedAt(i int64) *ShedUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(i)
	return suo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (suo *ShedUpdateOne) AddUpdatedAt(i int64) *ShedUpdateOne {
	suo.mutation.AddUpdatedAt(i)
	return suo
}

// SetDeleted sets the "deleted" field.
func (suo *ShedUpdateOne) SetDeleted(i int) *ShedUpdateOne {
	suo.mutation.ResetDeleted()
	suo.mutation.SetDeleted(i)
	return suo
}

// AddDeleted adds i to the "deleted" field.
func (suo *ShedUpdateOne) AddDeleted(i int) *ShedUpdateOne {
	suo.mutation.AddDeleted(i)
	return suo
}

// Mutation returns the ShedMutation object of the builder.
func (suo *ShedUpdateOne) Mutation() *ShedMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShedUpdateOne) Select(field string, fields ...string) *ShedUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shed entity.
func (suo *ShedUpdateOne) Save(ctx context.Context) (*Shed, error) {
	var (
		err  error
		node *Shed
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Shed)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ShedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShedUpdateOne) SaveX(ctx context.Context) *Shed {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShedUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShedUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShedUpdateOne) check() error {
	if v, ok := suo.mutation.FarmName(); ok {
		if err := shed.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf(`ent: validator failed for field "Shed.farmName": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := shed.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Shed.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ShedCateName(); ok {
		if err := shed.ShedCateNameValidator(v); err != nil {
			return &ValidationError{Name: "shedCateName", err: fmt.Errorf(`ent: validator failed for field "Shed.shedCateName": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ShedTypeName(); ok {
		if err := shed.ShedTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "shedTypeName", err: fmt.Errorf(`ent: validator failed for field "Shed.shedTypeName": %w`, err)}
		}
	}
	return nil
}

func (suo *ShedUpdateOne) sqlSave(ctx context.Context) (_node *Shed, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shed.Table,
			Columns: shed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shed.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shed.FieldID)
		for _, f := range fields {
			if !shed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldFarmId,
		})
	}
	if value, ok := suo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldFarmId,
		})
	}
	if value, ok := suo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldFarmName,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldName,
		})
	}
	if value, ok := suo.mutation.ShedCateId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldShedCateId,
		})
	}
	if value, ok := suo.mutation.AddedShedCateId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldShedCateId,
		})
	}
	if value, ok := suo.mutation.ShedCateName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldShedCateName,
		})
	}
	if value, ok := suo.mutation.ShedTypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldShedTypeId,
		})
	}
	if value, ok := suo.mutation.AddedShedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldShedTypeId,
		})
	}
	if value, ok := suo.mutation.ShedTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldShedTypeName,
		})
	}
	if value, ok := suo.mutation.Square(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldSquare,
		})
	}
	if value, ok := suo.mutation.AddedSquare(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldSquare,
		})
	}
	if value, ok := suo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldLength,
		})
	}
	if value, ok := suo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldLength,
		})
	}
	if value, ok := suo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldWidth,
		})
	}
	if value, ok := suo.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldWidth,
		})
	}
	if value, ok := suo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldHeight,
		})
	}
	if value, ok := suo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldHeight,
		})
	}
	if value, ok := suo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldTenantId,
		})
	}
	if value, ok := suo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldTenantId,
		})
	}
	if value, ok := suo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldTenantName,
		})
	}
	if value, ok := suo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldRemarks,
		})
	}
	if value, ok := suo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldUserId,
		})
	}
	if value, ok := suo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldUserId,
		})
	}
	if value, ok := suo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shed.FieldUserName,
		})
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shed.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldDeleted,
		})
	}
	if value, ok := suo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shed.FieldDeleted,
		})
	}
	_node = &Shed{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/shedcategory"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShedCategoryQuery is the builder for querying ShedCategory entities.
type ShedCategoryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ShedCategory
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShedCategoryQuery builder.
func (scq *ShedCategoryQuery) Where(ps ...predicate.ShedCategory) *ShedCategoryQuery {
	scq.predicates = append(scq.predicates, ps...)
	return scq
}

// Limit adds a limit step to the query.
func (scq *ShedCategoryQuery) Limit(limit int) *ShedCategoryQuery {
	scq.limit = &limit
	return scq
}

// Offset adds an offset step to the query.
func (scq *ShedCategoryQuery) Offset(offset int) *ShedCategoryQuery {
	scq.offset = &offset
	return scq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (scq *ShedCategoryQuery) Unique(unique bool) *ShedCategoryQuery {
	scq.unique = &unique
	return scq
}

// Order adds an order step to the query.
func (scq *ShedCategoryQuery) Order(o ...OrderFunc) *ShedCategoryQuery {
	scq.order = append(scq.order, o...)
	return scq
}

// First returns the first ShedCategory entity from the query.
// Returns a *NotFoundError when no ShedCategory was found.
func (scq *ShedCategoryQuery) First(ctx context.Context) (*ShedCategory, error) {
	nodes, err := scq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shedcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (scq *ShedCategoryQuery) FirstX(ctx context.Context) *ShedCategory {
	node, err := scq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ShedCategory ID from the query.
// Returns a *NotFoundError when no ShedCategory ID was found.
func (scq *ShedCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = scq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shedcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (scq *ShedCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := scq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ShedCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ShedCategory entity is found.
// Returns a *NotFoundError when no ShedCategory entities are found.
func (scq *ShedCategoryQuery) Only(ctx context.Context) (*ShedCategory, error) {
	nodes, err := scq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shedcategory.Label}
	default:
		return nil, &NotSingularError{shedcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (scq *ShedCategoryQuery) OnlyX(ctx context.Context) *ShedCategory {
	node, err := scq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ShedCategory ID in the query.
// Returns a *NotSingularError when more than one ShedCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (scq *ShedCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = scq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shedcategory.Label}
	default:
		err = &NotSingularError{shedcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (scq *ShedCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := scq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ShedCategories.
func (scq *ShedCategoryQuery) All(ctx context.Context) ([]*ShedCategory, error) {
	if err := scq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return scq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (scq *ShedCategoryQuery) AllX(ctx context.Context) []*ShedCategory {
	nodes, err := scq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ShedCategory IDs.
func (scq *ShedCategoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := scq.Select(shedcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (scq *ShedCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := scq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (scq *ShedCategoryQuery) Count(ctx context.Context) (int, error) {
	if err := scq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return scq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (scq *ShedCategoryQuery) CountX(ctx context.Context) int {
	count, err := scq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (scq *ShedCategoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := scq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return scq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (scq *ShedCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := scq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShedCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (scq *ShedCategoryQuery) Clone() *ShedCategoryQuery {
	if scq == nil {
		return nil
	}
	return &ShedCategoryQuery{
		config:     scq.config,
		limit:      scq.limit,
		offset:     scq.offset,
		order:      append([]OrderFunc{}, scq.order...),
		predicates: append([]predicate.ShedCategory{}, scq.predicates...),
		// clone intermediate query.
		sql:    scq.sql.Clone(),
		path:   scq.path,
		unique: scq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ShedCategory.Query().
//		GroupBy(shedcategory.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (scq *ShedCategoryQuery) GroupBy(field string, fields ...string) *ShedCategoryGroupBy {
	grbuild := &ShedCategoryGroupBy{config: scq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return scq.sqlQuery(ctx), nil
	}
	grbuild.label = shedcategory.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ShedCategory.Query().
//		Select(shedcategory.FieldName).
//		Scan(ctx, &v)
func (scq *ShedCategoryQuery) Select(fields ...string) *ShedCategorySelect {
	scq.fields = append(scq.fields, fields...)
	selbuild := &ShedCategorySelect{ShedCategoryQuery: scq}
	selbuild.label = shedcategory.Label
	selbuild.flds, selbuild.scan = &scq.fields, selbuild.Scan
	return selbuild
}

func (scq *ShedCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range scq.fields {
		if !shedcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if scq.path != nil {
		prev, err := scq.path(ctx)
		if err != nil {
			return err
		}
		scq.sql = prev
	}
	return nil
}

func (scq *ShedCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ShedCategory, error) {
	var (
		nodes = []*ShedCategory{}
		_spec = scq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ShedCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ShedCategory{config: scq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, scq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (scq *ShedCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := scq.querySpec()
	_spec.Node.Columns = scq.fields
	if len(scq.fields) > 0 {
		_spec.Unique = scq.unique != nil && *scq.unique
	}
	return sqlgraph.CountNodes(ctx, scq.driver, _spec)
}

func (scq *ShedCategoryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := scq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (scq *ShedCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shedcategory.Table,
			Columns: shedcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shedcategory.FieldID,
			},
		},
		From:   scq.sql,
		Unique: true,
	}
	if unique := scq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := scq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shedcategory.FieldID)
		for i := range fields {
			if fields[i] != shedcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := scq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := scq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := scq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := scq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (scq *ShedCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(scq.driver.Dialect())
	t1 := builder.Table(shedcategory.Table)
	columns := scq.fields
	if len(columns) == 0 {
		columns = shedcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if scq.sql != nil {
		selector = scq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if scq.unique != nil && *scq.unique {
		selector.Distinct()
	}
	for _, p := range scq.predicates {
		p(selector)
	}
	for _, p := range scq.order {
		p(selector)
	}
	if offset := scq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := scq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ShedCategoryGroupBy is the group-by builder for ShedCategory entities.
type ShedCategoryGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (scgb *ShedCategoryGroupBy) Aggregate(fns ...AggregateFunc) *ShedCategoryGroupBy {
	scgb.fns = append(scgb.fns, fns...)
	return scgb
}

// Scan applies the group-by query and scans the result into the given value.
func (scgb *ShedCategoryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := scgb.path(ctx)
	if err != nil {
		return err
	}
	scgb.sql = query
	return scgb.sqlScan(ctx, v)
}

func (scgb *ShedCategoryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range scgb.fields {
		if !shedcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := scgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (scgb *ShedCategoryGroupBy) sqlQuery() *sql.Selector {
	selector := scgb.sql.Select()
	aggregation := make([]string, 0, len(scgb.fns))
	for _, fn := range scgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(scgb.fields)+len(scgb.fns))
		for _, f := range scgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(scgb.fields...)...)
}

// ShedCategorySelect is the builder for selecting fields of ShedCategory entities.
type ShedCategorySelect struct {
	*ShedCategoryQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (scs *ShedCategorySelect) Scan(ctx context.Context, v interface{}) error {
	if err := scs.prepareQuery(ctx); err != nil {
		return err
	}
	scs.sql = scs.ShedCategoryQuery.sqlQuery(ctx)
	return scs.sqlScan(ctx, v)
}

func (scs *ShedCategorySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := scs.sql.Query()
	if err := scs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/shedsetting"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ShedSetting is the model entity for the ShedSetting schema.
type ShedSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 类型
	Type string `json:"type,omitempty"`
	// 床位数
	Seats int64 `json:"seats,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShedSetting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shedsetting.FieldID, shedsetting.FieldSeats, shedsetting.FieldTenantId, shedsetting.FieldCreatedAt, shedsetting.FieldUpdatedAt, shedsetting.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case shedsetting.FieldName, shedsetting.FieldType, shedsetting.FieldTenantName, shedsetting.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShedSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShedSetting fields.
func (ss *ShedSetting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shedsetting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ss.ID = int(value.Int64)
		case shedsetting.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ss.Name = value.String
			}
		case shedsetting.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ss.Type = value.String
			}
		case shedsetting.FieldSeats:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seats", values[i])
			} else if value.Valid {
				ss.Seats = value.Int64
			}
		case shedsetting.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				ss.TenantId = value.Int64
			}
		case shedsetting.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				ss.TenantName = value.String
			}
		case shedsetting.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				ss.Remarks = value.String
			}
		case shedsetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ss.CreatedAt = value.Int64
			}
		case shedsetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ss.UpdatedAt = value.Int64
			}
		case shedsetting.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				ss.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ShedSetting.
// Note that you need to call ShedSetting.Unwrap() before calling this method if this ShedSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *ShedSetting) Update() *ShedSettingUpdateOne {
	return (&ShedSettingClient{config: ss.config}).UpdateOne(ss)
}

// Unwrap unwraps the ShedSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *ShedSetting) Unwrap() *ShedSetting {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShedSetting is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *ShedSetting) String() string {
	var builder strings.Builder
	builder.WriteString("ShedSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("name=")
	builder.WriteString(ss.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ss.Type)
	builder.WriteString(", ")
	builder.WriteString("seats=")
	builder.WriteString(fmt.Sprintf("%v", ss.Seats))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", ss.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(ss.TenantName)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(ss.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", ss.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", ss.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", ss.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// ShedSettings is a parsable slice of ShedSetting.
type ShedSettings []*ShedSetting

func (ss ShedSettings) config(cfg config) {
	for _i := range ss {
		ss[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/shedsetting"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShedSettingCreate is the builder for creating a ShedSetting entity.
type ShedSettingCreate struct {
	config
	mutation *ShedSettingMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ssc *ShedSettingCreate) SetName(s string) *ShedSettingCreate {
	ssc.mutation.SetName(s)
	return ssc
}

// SetType sets the "type" field.
func (ssc *ShedSettingCreate) SetType(s string) *ShedSettingCreate {
	ssc.mutation.SetType(s)
	return ssc
}

// SetSeats sets the "seats" field.
func (ssc *ShedSettingCreate) SetSeats(i int64) *ShedSettingCreate {
	ssc.mutation.SetSeats(i)
	return ssc
}

// SetTenantId sets the "tenantId" field.
func (ssc *ShedSettingCreate) SetTenantId(i int64) *ShedSettingCreate {
	ssc.mutation.SetTenantId(i)
	return ssc
}

// SetTenantName sets the "tenantName" field.
func (ssc *ShedSettingCreate) SetTenantName(s string) *ShedSettingCreate {
	ssc.mutation.SetTenantName(s)
	return ssc
}

// SetRemarks sets the "remarks" field.
func (ssc *ShedSettingCreate) SetRemarks(s string) *ShedSettingCreate {
	ssc.mutation.SetRemarks(s)
	return ssc
}

// SetCreatedAt sets the "createdAt" field.
func (ssc *ShedSettingCreate) SetCreatedAt(i int64) *ShedSettingCreate {
	ssc.mutation.SetCreatedAt(i)
	return ssc
}

// SetUpdatedAt sets the "updatedAt" field.
func (ssc *ShedSettingCreate) SetUpdatedAt(i int64) *ShedSettingCreate {
	ssc.mutation.SetUpdatedAt(i)
	return ssc
}

// SetDeleted sets the "deleted" field.
func (ssc *ShedSettingCreate) SetDeleted(i int) *ShedSettingCreate {
	ssc.mutation.SetDeleted(i)
	return ssc
}

// Mutation returns the ShedSettingMutation object of the builder.
func (ssc *ShedSettingCreate) Mutation() *ShedSettingMutation {
	return ssc.mutation
}

// Save creates the ShedSetting in the database.
func (ssc *ShedSettingCreate) Save(ctx context.Context) (*ShedSetting, error) {
	var (
		err  error
		node *ShedSetting
	)
	if len(ssc.hooks) == 0 {
		if err = ssc.check(); err != nil {
			return nil, err
		}
		node, err = ssc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShedSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssc.check(); err != nil {
				return nil, err
			}
			ssc.mutation = mutation
			if node, err = ssc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ssc.hooks) - 1; i >= 0; i-- {
			if ssc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ssc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ShedSetting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ShedSettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *ShedSettingCreate) SaveX(ctx context.Context) *ShedSetting {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *ShedSettingCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *ShedSettingCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *ShedSettingCreate) check() error {
	if _, ok := ssc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ShedSetting.name"`)}
	}
	if _, ok := ssc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ShedSetting.type"`)}
	}
	if _, ok := ssc.mutation.Seats(); !ok {
		return &ValidationError{Name: "seats", err: errors.New(`ent: missing required field "ShedSetting.seats"`)}
	}
	if _, ok := ssc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "ShedSetting.tenantId"`)}
	}
	if _, ok := ssc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "ShedSetting.tenantName"`)}
	}
	if _, ok := ssc.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "ShedSetting.remarks"`)}
	}
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "ShedSetting.createdAt"`)}
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "ShedSetting.updatedAt"`)}
	}
	if _, ok := ssc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "ShedSetting.deleted"`)}
	}
	return nil
}

func (ssc *ShedSettingCreate) sqlSave(ctx context.Context) (*ShedSetting, error) {
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ssc *ShedSettingCreate) createSpec() (*ShedSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &ShedSetting{config: ssc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shedsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shedsetting.FieldID,
			},
		}
	)
	if value, ok := ssc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ssc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ssc.mutation.Seats(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldSeats,
		})
		_node.Seats = value
	}
	if value, ok := ssc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := ssc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := ssc.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ssc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shedsetting.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// ShedSettingCreateBulk is the builder for creating many ShedSetting entities in bulk.
type ShedSettingCreateBulk struct {
	config
	builders []*ShedSettingCreate
}

// Save creates the ShedSetting entities in the database.
func (sscb *ShedSettingCreateBulk) Save(ctx context.Context) ([]*ShedSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*ShedSetting, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShedSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *ShedSettingCreateBulk) SaveX(ctx context.Context) []*ShedSetting {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *ShedSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *ShedSettingCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

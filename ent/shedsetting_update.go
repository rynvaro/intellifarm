// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/shedsetting"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ShedSettingUpdate is the builder for updating ShedSetting entities.
type ShedSettingUpdate struct {
	config
	hooks      []Hook
	mutation   *ShedSettingMutation
	predicates []predicate.ShedSetting
}

// Where adds a new predicate for the builder.
func (ssu *ShedSettingUpdate) Where(ps ...predicate.ShedSetting) *ShedSettingUpdate {
	ssu.predicates = append(ssu.predicates, ps...)
	return ssu
}

// SetName sets the name field.
func (ssu *ShedSettingUpdate) SetName(s string) *ShedSettingUpdate {
	ssu.mutation.SetName(s)
	return ssu
}

// SetType sets the type field.
func (ssu *ShedSettingUpdate) SetType(s string) *ShedSettingUpdate {
	ssu.mutation.SetType(s)
	return ssu
}

// SetSeats sets the seats field.
func (ssu *ShedSettingUpdate) SetSeats(i int64) *ShedSettingUpdate {
	ssu.mutation.ResetSeats()
	ssu.mutation.SetSeats(i)
	return ssu
}

// AddSeats adds i to seats.
func (ssu *ShedSettingUpdate) AddSeats(i int64) *ShedSettingUpdate {
	ssu.mutation.AddSeats(i)
	return ssu
}

// SetTenantId sets the tenantId field.
func (ssu *ShedSettingUpdate) SetTenantId(i int64) *ShedSettingUpdate {
	ssu.mutation.ResetTenantId()
	ssu.mutation.SetTenantId(i)
	return ssu
}

// AddTenantId adds i to tenantId.
func (ssu *ShedSettingUpdate) AddTenantId(i int64) *ShedSettingUpdate {
	ssu.mutation.AddTenantId(i)
	return ssu
}

// SetTenantName sets the tenantName field.
func (ssu *ShedSettingUpdate) SetTenantName(s string) *ShedSettingUpdate {
	ssu.mutation.SetTenantName(s)
	return ssu
}

// SetRemarks sets the remarks field.
func (ssu *ShedSettingUpdate) SetRemarks(s string) *ShedSettingUpdate {
	ssu.mutation.SetRemarks(s)
	return ssu
}

// SetCreatedAt sets the createdAt field.
func (ssu *ShedSettingUpdate) SetCreatedAt(i int64) *ShedSettingUpdate {
	ssu.mutation.ResetCreatedAt()
	ssu.mutation.SetCreatedAt(i)
	return ssu
}

// AddCreatedAt adds i to createdAt.
func (ssu *ShedSettingUpdate) AddCreatedAt(i int64) *ShedSettingUpdate {
	ssu.mutation.AddCreatedAt(i)
	return ssu
}

// SetUpdatedAt sets the updatedAt field.
func (ssu *ShedSettingUpdate) SetUpdatedAt(i int64) *ShedSettingUpdate {
	ssu.mutation.ResetUpdatedAt()
	ssu.mutation.SetUpdatedAt(i)
	return ssu
}

// AddUpdatedAt adds i to updatedAt.
func (ssu *ShedSettingUpdate) AddUpdatedAt(i int64) *ShedSettingUpdate {
	ssu.mutation.AddUpdatedAt(i)
	return ssu
}

// SetDeleted sets the deleted field.
func (ssu *ShedSettingUpdate) SetDeleted(i int) *ShedSettingUpdate {
	ssu.mutation.ResetDeleted()
	ssu.mutation.SetDeleted(i)
	return ssu
}

// AddDeleted adds i to deleted.
func (ssu *ShedSettingUpdate) AddDeleted(i int) *ShedSettingUpdate {
	ssu.mutation.AddDeleted(i)
	return ssu
}

// Mutation returns the ShedSettingMutation object of the builder.
func (ssu *ShedSettingUpdate) Mutation() *ShedSettingMutation {
	return ssu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ssu *ShedSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ssu.hooks) == 0 {
		affected, err = ssu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShedSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ssu.mutation = mutation
			affected, err = ssu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ssu.hooks) - 1; i >= 0; i-- {
			mut = ssu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *ShedSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *ShedSettingUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *ShedSettingUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssu *ShedSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shedsetting.Table,
			Columns: shedsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: shedsetting.FieldID,
			},
		},
	}
	if ps := ssu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldName,
		})
	}
	if value, ok := ssu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldType,
		})
	}
	if value, ok := ssu.mutation.Seats(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldSeats,
		})
	}
	if value, ok := ssu.mutation.AddedSeats(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldSeats,
		})
	}
	if value, ok := ssu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldTenantId,
		})
	}
	if value, ok := ssu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldTenantId,
		})
	}
	if value, ok := ssu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldTenantName,
		})
	}
	if value, ok := ssu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldRemarks,
		})
	}
	if value, ok := ssu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldCreatedAt,
		})
	}
	if value, ok := ssu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldCreatedAt,
		})
	}
	if value, ok := ssu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldUpdatedAt,
		})
	}
	if value, ok := ssu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldUpdatedAt,
		})
	}
	if value, ok := ssu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shedsetting.FieldDeleted,
		})
	}
	if value, ok := ssu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shedsetting.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shedsetting.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShedSettingUpdateOne is the builder for updating a single ShedSetting entity.
type ShedSettingUpdateOne struct {
	config
	hooks    []Hook
	mutation *ShedSettingMutation
}

// SetName sets the name field.
func (ssuo *ShedSettingUpdateOne) SetName(s string) *ShedSettingUpdateOne {
	ssuo.mutation.SetName(s)
	return ssuo
}

// SetType sets the type field.
func (ssuo *ShedSettingUpdateOne) SetType(s string) *ShedSettingUpdateOne {
	ssuo.mutation.SetType(s)
	return ssuo
}

// SetSeats sets the seats field.
func (ssuo *ShedSettingUpdateOne) SetSeats(i int64) *ShedSettingUpdateOne {
	ssuo.mutation.ResetSeats()
	ssuo.mutation.SetSeats(i)
	return ssuo
}

// AddSeats adds i to seats.
func (ssuo *ShedSettingUpdateOne) AddSeats(i int64) *ShedSettingUpdateOne {
	ssuo.mutation.AddSeats(i)
	return ssuo
}

// SetTenantId sets the tenantId field.
func (ssuo *ShedSettingUpdateOne) SetTenantId(i int64) *ShedSettingUpdateOne {
	ssuo.mutation.ResetTenantId()
	ssuo.mutation.SetTenantId(i)
	return ssuo
}

// AddTenantId adds i to tenantId.
func (ssuo *ShedSettingUpdateOne) AddTenantId(i int64) *ShedSettingUpdateOne {
	ssuo.mutation.AddTenantId(i)
	return ssuo
}

// SetTenantName sets the tenantName field.
func (ssuo *ShedSettingUpdateOne) SetTenantName(s string) *ShedSettingUpdateOne {
	ssuo.mutation.SetTenantName(s)
	return ssuo
}

// SetRemarks sets the remarks field.
func (ssuo *ShedSettingUpdateOne) SetRemarks(s string) *ShedSettingUpdateOne {
	ssuo.mutation.SetRemarks(s)
	return ssuo
}

// SetCreatedAt sets the createdAt field.
func (ssuo *ShedSettingUpdateOne) SetCreatedAt(i int64) *ShedSettingUpdateOne {
	ssuo.mutation.ResetCreatedAt()
	ssuo.mutation.SetCreatedAt(i)
	return ssuo
}

// AddCreatedAt adds i to createdAt.
func (ssuo *ShedSettingUpdateOne) AddCreatedAt(i int64) *ShedSettingUpdateOne {
	ssuo.mutation.AddCreatedAt(i)
	return ssuo
}

// SetUpdatedAt sets the updatedAt field.
func (ssuo *ShedSettingUpdateOne) SetUpdatedAt(i int64) *ShedSettingUpdateOne {
	ssuo.mutation.ResetUpdatedAt()
	ssuo.mutation.SetUpdatedAt(i)
	return ssuo
}

// AddUpdatedAt adds i to updatedAt.
func (ssuo *ShedSettingUpdateOne) AddUpdatedAt(i int64) *ShedSettingUpdateOne {
	ssuo.mutation.AddUpdatedAt(i)
	return ssuo
}

// SetDeleted sets the deleted field.
func (ssuo *ShedSettingUpdateOne) SetDeleted(i int) *ShedSettingUpdateOne {
	ssuo.mutation.ResetDeleted()
	ssuo.mutation.SetDeleted(i)
	return ssuo
}

// AddDeleted adds i to deleted.
func (ssuo *ShedSettingUpdateOne) AddDeleted(i int) *ShedSettingUpdateOne {
	ssuo.mutation.AddDeleted(i)
	return ssuo
}

// Mutation returns the ShedSettingMutation object of the builder.
func (ssuo *ShedSettingUpdateOne) Mutation() *ShedSettingMutation {
	return ssuo.mutation
}

// Save executes the query and returns the updated entity.
func (ssuo *ShedSettingUpdateOne) Save(ctx context.Context) (*ShedSetting, error) {
	var (
		err  error
		node *ShedSetting
	)
	if len(ssuo.hooks) == 0 {
		node, err = ssuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShedSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ssuo.mutation = mutation
			node, err = ssuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ssuo.hooks) - 1; i >= 0; i-- {
			mut = ssuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *ShedSettingUpdateOne) SaveX(ctx context.Context) *ShedSetting {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *ShedSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *ShedSettingUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssuo *ShedSettingUpdateOne) sqlSave(ctx context.Context) (_node *ShedSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shedsetting.Table,
			Columns: shedsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: shedsetting.FieldID,
			},
		},
	}
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShedSetting.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ssuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldName,
		})
	}
	if value, ok := ssuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldType,
		})
	}
	if value, ok := ssuo.mutation.Seats(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldSeats,
		})
	}
	if value, ok := ssuo.mutation.AddedSeats(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldSeats,
		})
	}
	if value, ok := ssuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldTenantId,
		})
	}
	if value, ok := ssuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldTenantId,
		})
	}
	if value, ok := ssuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldTenantName,
		})
	}
	if value, ok := ssuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shedsetting.FieldRemarks,
		})
	}
	if value, ok := ssuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldCreatedAt,
		})
	}
	if value, ok := ssuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldCreatedAt,
		})
	}
	if value, ok := ssuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldUpdatedAt,
		})
	}
	if value, ok := ssuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: shedsetting.FieldUpdatedAt,
		})
	}
	if value, ok := ssuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shedsetting.FieldDeleted,
		})
	}
	if value, ok := ssuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shedsetting.FieldDeleted,
		})
	}
	_node = &ShedSetting{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shedsetting.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/shedtrans"
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ShedTransQuery is the builder for querying ShedTrans entities.
type ShedTransQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ShedTrans
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (stq *ShedTransQuery) Where(ps ...predicate.ShedTrans) *ShedTransQuery {
	stq.predicates = append(stq.predicates, ps...)
	return stq
}

// Limit adds a limit step to the query.
func (stq *ShedTransQuery) Limit(limit int) *ShedTransQuery {
	stq.limit = &limit
	return stq
}

// Offset adds an offset step to the query.
func (stq *ShedTransQuery) Offset(offset int) *ShedTransQuery {
	stq.offset = &offset
	return stq
}

// Order adds an order step to the query.
func (stq *ShedTransQuery) Order(o ...OrderFunc) *ShedTransQuery {
	stq.order = append(stq.order, o...)
	return stq
}

// First returns the first ShedTrans entity in the query. Returns *NotFoundError when no shedtrans was found.
func (stq *ShedTransQuery) First(ctx context.Context) (*ShedTrans, error) {
	nodes, err := stq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shedtrans.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (stq *ShedTransQuery) FirstX(ctx context.Context) *ShedTrans {
	node, err := stq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ShedTrans id in the query. Returns *NotFoundError when no id was found.
func (stq *ShedTransQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = stq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shedtrans.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (stq *ShedTransQuery) FirstXID(ctx context.Context) int64 {
	id, err := stq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ShedTrans entity in the query, returns an error if not exactly one entity was returned.
func (stq *ShedTransQuery) Only(ctx context.Context) (*ShedTrans, error) {
	nodes, err := stq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shedtrans.Label}
	default:
		return nil, &NotSingularError{shedtrans.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (stq *ShedTransQuery) OnlyX(ctx context.Context) *ShedTrans {
	node, err := stq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ShedTrans id in the query, returns an error if not exactly one id was returned.
func (stq *ShedTransQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = stq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shedtrans.Label}
	default:
		err = &NotSingularError{shedtrans.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (stq *ShedTransQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := stq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ShedTransSlice.
func (stq *ShedTransQuery) All(ctx context.Context) ([]*ShedTrans, error) {
	if err := stq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return stq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (stq *ShedTransQuery) AllX(ctx context.Context) []*ShedTrans {
	nodes, err := stq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ShedTrans ids.
func (stq *ShedTransQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := stq.Select(shedtrans.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (stq *ShedTransQuery) IDsX(ctx context.Context) []int64 {
	ids, err := stq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (stq *ShedTransQuery) Count(ctx context.Context) (int, error) {
	if err := stq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return stq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (stq *ShedTransQuery) CountX(ctx context.Context) int {
	count, err := stq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (stq *ShedTransQuery) Exist(ctx context.Context) (bool, error) {
	if err := stq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return stq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (stq *ShedTransQuery) ExistX(ctx context.Context) bool {
	exist, err := stq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (stq *ShedTransQuery) Clone() *ShedTransQuery {
	return &ShedTransQuery{
		config:     stq.config,
		limit:      stq.limit,
		offset:     stq.offset,
		order:      append([]OrderFunc{}, stq.order...),
		unique:     append([]string{}, stq.unique...),
		predicates: append([]predicate.ShedTrans{}, stq.predicates...),
		// clone intermediate query.
		sql:  stq.sql.Clone(),
		path: stq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (stq *ShedTransQuery) GroupBy(field string, fields ...string) *ShedTransGroupBy {
	group := &ShedTransGroupBy{config: stq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return stq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
func (stq *ShedTransQuery) Select(field string, fields ...string) *ShedTransSelect {
	selector := &ShedTransSelect{config: stq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := stq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return stq.sqlQuery(), nil
	}
	return selector
}

func (stq *ShedTransQuery) prepareQuery(ctx context.Context) error {
	if stq.path != nil {
		prev, err := stq.path(ctx)
		if err != nil {
			return err
		}
		stq.sql = prev
	}
	return nil
}

func (stq *ShedTransQuery) sqlAll(ctx context.Context) ([]*ShedTrans, error) {
	var (
		nodes = []*ShedTrans{}
		_spec = stq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &ShedTrans{config: stq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, stq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (stq *ShedTransQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := stq.querySpec()
	return sqlgraph.CountNodes(ctx, stq.driver, _spec)
}

func (stq *ShedTransQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := stq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (stq *ShedTransQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shedtrans.Table,
			Columns: shedtrans.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: shedtrans.FieldID,
			},
		},
		From:   stq.sql,
		Unique: true,
	}
	if ps := stq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := stq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := stq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := stq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, shedtrans.ValidColumn)
			}
		}
	}
	return _spec
}

func (stq *ShedTransQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(stq.driver.Dialect())
	t1 := builder.Table(shedtrans.Table)
	selector := builder.Select(t1.Columns(shedtrans.Columns...)...).From(t1)
	if stq.sql != nil {
		selector = stq.sql
		selector.Select(selector.Columns(shedtrans.Columns...)...)
	}
	for _, p := range stq.predicates {
		p(selector)
	}
	for _, p := range stq.order {
		p(selector, shedtrans.ValidColumn)
	}
	if offset := stq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := stq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ShedTransGroupBy is the builder for group-by ShedTrans entities.
type ShedTransGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (stgb *ShedTransGroupBy) Aggregate(fns ...AggregateFunc) *ShedTransGroupBy {
	stgb.fns = append(stgb.fns, fns...)
	return stgb
}

// Scan applies the group-by query and scan the result into the given value.
func (stgb *ShedTransGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := stgb.path(ctx)
	if err != nil {
		return err
	}
	stgb.sql = query
	return stgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (stgb *ShedTransGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := stgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (stgb *ShedTransGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(stgb.fields) > 1 {
		return nil, errors.New("ent: ShedTransGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := stgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (stgb *ShedTransGroupBy) StringsX(ctx context.Context) []string {
	v, err := stgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (stgb *ShedTransGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = stgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shedtrans.Label}
	default:
		err = fmt.Errorf("ent: ShedTransGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (stgb *ShedTransGroupBy) StringX(ctx context.Context) string {
	v, err := stgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (stgb *ShedTransGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(stgb.fields) > 1 {
		return nil, errors.New("ent: ShedTransGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := stgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (stgb *ShedTransGroupBy) IntsX(ctx context.Context) []int {
	v, err := stgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (stgb *ShedTransGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = stgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shedtrans.Label}
	default:
		err = fmt.Errorf("ent: ShedTransGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (stgb *ShedTransGroupBy) IntX(ctx context.Context) int {
	v, err := stgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (stgb *ShedTransGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(stgb.fields) > 1 {
		return nil, errors.New("ent: ShedTransGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := stgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (stgb *ShedTransGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := stgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (stgb *ShedTransGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = stgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shedtrans.Label}
	default:
		err = fmt.Errorf("ent: ShedTransGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (stgb *ShedTransGroupBy) Float64X(ctx context.Context) float64 {
	v, err := stgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (stgb *ShedTransGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(stgb.fields) > 1 {
		return nil, errors.New("ent: ShedTransGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := stgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (stgb *ShedTransGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := stgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (stgb *ShedTransGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = stgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shedtrans.Label}
	default:
		err = fmt.Errorf("ent: ShedTransGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (stgb *ShedTransGroupBy) BoolX(ctx context.Context) bool {
	v, err := stgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (stgb *ShedTransGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range stgb.fields {
		if !shedtrans.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := stgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := stgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (stgb *ShedTransGroupBy) sqlQuery() *sql.Selector {
	selector := stgb.sql
	columns := make([]string, 0, len(stgb.fields)+len(stgb.fns))
	columns = append(columns, stgb.fields...)
	for _, fn := range stgb.fns {
		columns = append(columns, fn(selector, shedtrans.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(stgb.fields...)
}

// ShedTransSelect is the builder for select fields of ShedTrans entities.
type ShedTransSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (sts *ShedTransSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := sts.path(ctx)
	if err != nil {
		return err
	}
	sts.sql = query
	return sts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sts *ShedTransSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (sts *ShedTransSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sts.fields) > 1 {
		return nil, errors.New("ent: ShedTransSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sts *ShedTransSelect) StringsX(ctx context.Context) []string {
	v, err := sts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (sts *ShedTransSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shedtrans.Label}
	default:
		err = fmt.Errorf("ent: ShedTransSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sts *ShedTransSelect) StringX(ctx context.Context) string {
	v, err := sts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (sts *ShedTransSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sts.fields) > 1 {
		return nil, errors.New("ent: ShedTransSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sts *ShedTransSelect) IntsX(ctx context.Context) []int {
	v, err := sts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (sts *ShedTransSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shedtrans.Label}
	default:
		err = fmt.Errorf("ent: ShedTransSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sts *ShedTransSelect) IntX(ctx context.Context) int {
	v, err := sts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (sts *ShedTransSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sts.fields) > 1 {
		return nil, errors.New("ent: ShedTransSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sts *ShedTransSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (sts *ShedTransSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shedtrans.Label}
	default:
		err = fmt.Errorf("ent: ShedTransSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sts *ShedTransSelect) Float64X(ctx context.Context) float64 {
	v, err := sts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (sts *ShedTransSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sts.fields) > 1 {
		return nil, errors.New("ent: ShedTransSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sts *ShedTransSelect) BoolsX(ctx context.Context) []bool {
	v, err := sts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (sts *ShedTransSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shedtrans.Label}
	default:
		err = fmt.Errorf("ent: ShedTransSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sts *ShedTransSelect) BoolX(ctx context.Context) bool {
	v, err := sts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sts *ShedTransSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sts.fields {
		if !shedtrans.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := sts.sqlQuery().Query()
	if err := sts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sts *ShedTransSelect) sqlQuery() sql.Querier {
	selector := sts.sql
	selector.Select(selector.Columns(sts.fields...)...)
	return selector
}

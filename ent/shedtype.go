// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/shedtype"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ShedType is the model entity for the ShedType schema.
type ShedType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 类型名称
	Name string `json:"name,omitempty"`
	// 代码
	Code string `json:"code,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 排序数字
	Order int `json:"order,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShedType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shedtype.FieldID, shedtype.FieldTenantId, shedtype.FieldOrder, shedtype.FieldCreatedAt, shedtype.FieldUpdatedAt, shedtype.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case shedtype.FieldName, shedtype.FieldCode, shedtype.FieldTenantName, shedtype.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShedType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShedType fields.
func (st *ShedType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shedtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case shedtype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case shedtype.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				st.Code = value.String
			}
		case shedtype.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				st.TenantId = value.Int64
			}
		case shedtype.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				st.TenantName = value.String
			}
		case shedtype.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				st.Order = int(value.Int64)
			}
		case shedtype.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				st.Remarks = value.String
			}
		case shedtype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Int64
			}
		case shedtype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Int64
			}
		case shedtype.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				st.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ShedType.
// Note that you need to call ShedType.Unwrap() before calling this method if this ShedType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ShedType) Update() *ShedTypeUpdateOne {
	return (&ShedTypeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the ShedType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ShedType) Unwrap() *ShedType {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShedType is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ShedType) String() string {
	var builder strings.Builder
	builder.WriteString("ShedType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("name=")
	builder.WriteString(st.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(st.Code)
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", st.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(st.TenantName)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", st.Order))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(st.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", st.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", st.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", st.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// ShedTypes is a parsable slice of ShedType.
type ShedTypes []*ShedType

func (st ShedTypes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}

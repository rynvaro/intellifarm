// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/shedtype"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// ShedType is the model entity for the ShedType schema.
type ShedType struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShedType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShedType fields.
func (st *ShedType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(shedtype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	st.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		st.Name = value.String
	}
	return nil
}

// Update returns a builder for updating this ShedType.
// Note that, you need to call ShedType.Unwrap() before calling this method, if this ShedType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ShedType) Update() *ShedTypeUpdateOne {
	return (&ShedTypeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (st *ShedType) Unwrap() *ShedType {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShedType is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ShedType) String() string {
	var builder strings.Builder
	builder.WriteString("ShedType(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", name=")
	builder.WriteString(st.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ShedTypes is a parsable slice of ShedType.
type ShedTypes []*ShedType

func (st ShedTypes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}

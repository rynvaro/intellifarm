// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/tenant"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetCompany sets the "company" field.
func (tu *TenantUpdate) SetCompany(s string) *TenantUpdate {
	tu.mutation.SetCompany(s)
	return tu
}

// SetName sets the "name" field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetCode sets the "code" field.
func (tu *TenantUpdate) SetCode(s string) *TenantUpdate {
	tu.mutation.SetCode(s)
	return tu
}

// SetEnabled sets the "enabled" field.
func (tu *TenantUpdate) SetEnabled(i int) *TenantUpdate {
	tu.mutation.ResetEnabled()
	tu.mutation.SetEnabled(i)
	return tu
}

// AddEnabled adds i to the "enabled" field.
func (tu *TenantUpdate) AddEnabled(i int) *TenantUpdate {
	tu.mutation.AddEnabled(i)
	return tu
}

// SetRegion sets the "region" field.
func (tu *TenantUpdate) SetRegion(s string) *TenantUpdate {
	tu.mutation.SetRegion(s)
	return tu
}

// SetAddress sets the "address" field.
func (tu *TenantUpdate) SetAddress(s string) *TenantUpdate {
	tu.mutation.SetAddress(s)
	return tu
}

// SetUserName sets the "userName" field.
func (tu *TenantUpdate) SetUserName(s string) *TenantUpdate {
	tu.mutation.SetUserName(s)
	return tu
}

// SetPhone sets the "phone" field.
func (tu *TenantUpdate) SetPhone(s string) *TenantUpdate {
	tu.mutation.SetPhone(s)
	return tu
}

// SetRemarks sets the "remarks" field.
func (tu *TenantUpdate) SetRemarks(s string) *TenantUpdate {
	tu.mutation.SetRemarks(s)
	return tu
}

// SetDeleted sets the "deleted" field.
func (tu *TenantUpdate) SetDeleted(i int) *TenantUpdate {
	tu.mutation.ResetDeleted()
	tu.mutation.SetDeleted(i)
	return tu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableDeleted(i *int) *TenantUpdate {
	if i != nil {
		tu.SetDeleted(*i)
	}
	return tu
}

// AddDeleted adds i to the "deleted" field.
func (tu *TenantUpdate) AddDeleted(i int) *TenantUpdate {
	tu.mutation.AddDeleted(i)
	return tu
}

// SetCreatedAt sets the "createdAt" field.
func (tu *TenantUpdate) SetCreatedAt(i int64) *TenantUpdate {
	tu.mutation.ResetCreatedAt()
	tu.mutation.SetCreatedAt(i)
	return tu
}

// AddCreatedAt adds i to the "createdAt" field.
func (tu *TenantUpdate) AddCreatedAt(i int64) *TenantUpdate {
	tu.mutation.AddCreatedAt(i)
	return tu
}

// SetUpdatedAt sets the "updatedAt" field.
func (tu *TenantUpdate) SetUpdatedAt(i int64) *TenantUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(i)
	return tu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (tu *TenantUpdate) AddUpdatedAt(i int64) *TenantUpdate {
	tu.mutation.AddUpdatedAt(i)
	return tu
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenant.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Company(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldCompany,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldName,
		})
	}
	if value, ok := tu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldCode,
		})
	}
	if value, ok := tu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldEnabled,
		})
	}
	if value, ok := tu.mutation.AddedEnabled(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldEnabled,
		})
	}
	if value, ok := tu.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldRegion,
		})
	}
	if value, ok := tu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldAddress,
		})
	}
	if value, ok := tu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldUserName,
		})
	}
	if value, ok := tu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldPhone,
		})
	}
	if value, ok := tu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldRemarks,
		})
	}
	if value, ok := tu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldDeleted,
		})
	}
	if value, ok := tu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldDeleted,
		})
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tenant.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tenant.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tenant.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tenant.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMutation
}

// SetCompany sets the "company" field.
func (tuo *TenantUpdateOne) SetCompany(s string) *TenantUpdateOne {
	tuo.mutation.SetCompany(s)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetCode sets the "code" field.
func (tuo *TenantUpdateOne) SetCode(s string) *TenantUpdateOne {
	tuo.mutation.SetCode(s)
	return tuo
}

// SetEnabled sets the "enabled" field.
func (tuo *TenantUpdateOne) SetEnabled(i int) *TenantUpdateOne {
	tuo.mutation.ResetEnabled()
	tuo.mutation.SetEnabled(i)
	return tuo
}

// AddEnabled adds i to the "enabled" field.
func (tuo *TenantUpdateOne) AddEnabled(i int) *TenantUpdateOne {
	tuo.mutation.AddEnabled(i)
	return tuo
}

// SetRegion sets the "region" field.
func (tuo *TenantUpdateOne) SetRegion(s string) *TenantUpdateOne {
	tuo.mutation.SetRegion(s)
	return tuo
}

// SetAddress sets the "address" field.
func (tuo *TenantUpdateOne) SetAddress(s string) *TenantUpdateOne {
	tuo.mutation.SetAddress(s)
	return tuo
}

// SetUserName sets the "userName" field.
func (tuo *TenantUpdateOne) SetUserName(s string) *TenantUpdateOne {
	tuo.mutation.SetUserName(s)
	return tuo
}

// SetPhone sets the "phone" field.
func (tuo *TenantUpdateOne) SetPhone(s string) *TenantUpdateOne {
	tuo.mutation.SetPhone(s)
	return tuo
}

// SetRemarks sets the "remarks" field.
func (tuo *TenantUpdateOne) SetRemarks(s string) *TenantUpdateOne {
	tuo.mutation.SetRemarks(s)
	return tuo
}

// SetDeleted sets the "deleted" field.
func (tuo *TenantUpdateOne) SetDeleted(i int) *TenantUpdateOne {
	tuo.mutation.ResetDeleted()
	tuo.mutation.SetDeleted(i)
	return tuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableDeleted(i *int) *TenantUpdateOne {
	if i != nil {
		tuo.SetDeleted(*i)
	}
	return tuo
}

// AddDeleted adds i to the "deleted" field.
func (tuo *TenantUpdateOne) AddDeleted(i int) *TenantUpdateOne {
	tuo.mutation.AddDeleted(i)
	return tuo
}

// SetCreatedAt sets the "createdAt" field.
func (tuo *TenantUpdateOne) SetCreatedAt(i int64) *TenantUpdateOne {
	tuo.mutation.ResetCreatedAt()
	tuo.mutation.SetCreatedAt(i)
	return tuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (tuo *TenantUpdateOne) AddCreatedAt(i int64) *TenantUpdateOne {
	tuo.mutation.AddCreatedAt(i)
	return tuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (tuo *TenantUpdateOne) SetUpdatedAt(i int64) *TenantUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(i)
	return tuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (tuo *TenantUpdateOne) AddUpdatedAt(i int64) *TenantUpdateOne {
	tuo.mutation.AddUpdatedAt(i)
	return tuo
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	var (
		err  error
		node *Tenant
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tenant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TenantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenant.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Company(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldCompany,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldName,
		})
	}
	if value, ok := tuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldCode,
		})
	}
	if value, ok := tuo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldEnabled,
		})
	}
	if value, ok := tuo.mutation.AddedEnabled(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldEnabled,
		})
	}
	if value, ok := tuo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldRegion,
		})
	}
	if value, ok := tuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldAddress,
		})
	}
	if value, ok := tuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldUserName,
		})
	}
	if value, ok := tuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldPhone,
		})
	}
	if value, ok := tuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldRemarks,
		})
	}
	if value, ok := tuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldDeleted,
		})
	}
	if value, ok := tuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldDeleted,
		})
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tenant.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tenant.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tenant.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tenant.FieldUpdatedAt,
		})
	}
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

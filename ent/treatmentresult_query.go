// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/treatmentresult"
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// TreatmentResultQuery is the builder for querying TreatmentResult entities.
type TreatmentResultQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.TreatmentResult
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (trq *TreatmentResultQuery) Where(ps ...predicate.TreatmentResult) *TreatmentResultQuery {
	trq.predicates = append(trq.predicates, ps...)
	return trq
}

// Limit adds a limit step to the query.
func (trq *TreatmentResultQuery) Limit(limit int) *TreatmentResultQuery {
	trq.limit = &limit
	return trq
}

// Offset adds an offset step to the query.
func (trq *TreatmentResultQuery) Offset(offset int) *TreatmentResultQuery {
	trq.offset = &offset
	return trq
}

// Order adds an order step to the query.
func (trq *TreatmentResultQuery) Order(o ...OrderFunc) *TreatmentResultQuery {
	trq.order = append(trq.order, o...)
	return trq
}

// First returns the first TreatmentResult entity in the query. Returns *NotFoundError when no treatmentresult was found.
func (trq *TreatmentResultQuery) First(ctx context.Context) (*TreatmentResult, error) {
	nodes, err := trq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{treatmentresult.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (trq *TreatmentResultQuery) FirstX(ctx context.Context) *TreatmentResult {
	node, err := trq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TreatmentResult id in the query. Returns *NotFoundError when no id was found.
func (trq *TreatmentResultQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = trq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{treatmentresult.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (trq *TreatmentResultQuery) FirstXID(ctx context.Context) int64 {
	id, err := trq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only TreatmentResult entity in the query, returns an error if not exactly one entity was returned.
func (trq *TreatmentResultQuery) Only(ctx context.Context) (*TreatmentResult, error) {
	nodes, err := trq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{treatmentresult.Label}
	default:
		return nil, &NotSingularError{treatmentresult.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (trq *TreatmentResultQuery) OnlyX(ctx context.Context) *TreatmentResult {
	node, err := trq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only TreatmentResult id in the query, returns an error if not exactly one id was returned.
func (trq *TreatmentResultQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = trq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{treatmentresult.Label}
	default:
		err = &NotSingularError{treatmentresult.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (trq *TreatmentResultQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := trq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TreatmentResults.
func (trq *TreatmentResultQuery) All(ctx context.Context) ([]*TreatmentResult, error) {
	if err := trq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return trq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (trq *TreatmentResultQuery) AllX(ctx context.Context) []*TreatmentResult {
	nodes, err := trq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TreatmentResult ids.
func (trq *TreatmentResultQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := trq.Select(treatmentresult.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (trq *TreatmentResultQuery) IDsX(ctx context.Context) []int64 {
	ids, err := trq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (trq *TreatmentResultQuery) Count(ctx context.Context) (int, error) {
	if err := trq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return trq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (trq *TreatmentResultQuery) CountX(ctx context.Context) int {
	count, err := trq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (trq *TreatmentResultQuery) Exist(ctx context.Context) (bool, error) {
	if err := trq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return trq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (trq *TreatmentResultQuery) ExistX(ctx context.Context) bool {
	exist, err := trq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (trq *TreatmentResultQuery) Clone() *TreatmentResultQuery {
	return &TreatmentResultQuery{
		config:     trq.config,
		limit:      trq.limit,
		offset:     trq.offset,
		order:      append([]OrderFunc{}, trq.order...),
		unique:     append([]string{}, trq.unique...),
		predicates: append([]predicate.TreatmentResult{}, trq.predicates...),
		// clone intermediate query.
		sql:  trq.sql.Clone(),
		path: trq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TreatmentResult.Query().
//		GroupBy(treatmentresult.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (trq *TreatmentResultQuery) GroupBy(field string, fields ...string) *TreatmentResultGroupBy {
	group := &TreatmentResultGroupBy{config: trq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return trq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.TreatmentResult.Query().
//		Select(treatmentresult.FieldName).
//		Scan(ctx, &v)
//
func (trq *TreatmentResultQuery) Select(field string, fields ...string) *TreatmentResultSelect {
	selector := &TreatmentResultSelect{config: trq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return trq.sqlQuery(), nil
	}
	return selector
}

func (trq *TreatmentResultQuery) prepareQuery(ctx context.Context) error {
	if trq.path != nil {
		prev, err := trq.path(ctx)
		if err != nil {
			return err
		}
		trq.sql = prev
	}
	return nil
}

func (trq *TreatmentResultQuery) sqlAll(ctx context.Context) ([]*TreatmentResult, error) {
	var (
		nodes = []*TreatmentResult{}
		_spec = trq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &TreatmentResult{config: trq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, trq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (trq *TreatmentResultQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := trq.querySpec()
	return sqlgraph.CountNodes(ctx, trq.driver, _spec)
}

func (trq *TreatmentResultQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := trq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (trq *TreatmentResultQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treatmentresult.Table,
			Columns: treatmentresult.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: treatmentresult.FieldID,
			},
		},
		From:   trq.sql,
		Unique: true,
	}
	if ps := trq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := trq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := trq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := trq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, treatmentresult.ValidColumn)
			}
		}
	}
	return _spec
}

func (trq *TreatmentResultQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(trq.driver.Dialect())
	t1 := builder.Table(treatmentresult.Table)
	selector := builder.Select(t1.Columns(treatmentresult.Columns...)...).From(t1)
	if trq.sql != nil {
		selector = trq.sql
		selector.Select(selector.Columns(treatmentresult.Columns...)...)
	}
	for _, p := range trq.predicates {
		p(selector)
	}
	for _, p := range trq.order {
		p(selector, treatmentresult.ValidColumn)
	}
	if offset := trq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := trq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TreatmentResultGroupBy is the builder for group-by TreatmentResult entities.
type TreatmentResultGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (trgb *TreatmentResultGroupBy) Aggregate(fns ...AggregateFunc) *TreatmentResultGroupBy {
	trgb.fns = append(trgb.fns, fns...)
	return trgb
}

// Scan applies the group-by query and scan the result into the given value.
func (trgb *TreatmentResultGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := trgb.path(ctx)
	if err != nil {
		return err
	}
	trgb.sql = query
	return trgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (trgb *TreatmentResultGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := trgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (trgb *TreatmentResultGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TreatmentResultGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (trgb *TreatmentResultGroupBy) StringsX(ctx context.Context) []string {
	v, err := trgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (trgb *TreatmentResultGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = trgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{treatmentresult.Label}
	default:
		err = fmt.Errorf("ent: TreatmentResultGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (trgb *TreatmentResultGroupBy) StringX(ctx context.Context) string {
	v, err := trgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (trgb *TreatmentResultGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TreatmentResultGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (trgb *TreatmentResultGroupBy) IntsX(ctx context.Context) []int {
	v, err := trgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (trgb *TreatmentResultGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = trgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{treatmentresult.Label}
	default:
		err = fmt.Errorf("ent: TreatmentResultGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (trgb *TreatmentResultGroupBy) IntX(ctx context.Context) int {
	v, err := trgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (trgb *TreatmentResultGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TreatmentResultGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (trgb *TreatmentResultGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := trgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (trgb *TreatmentResultGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = trgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{treatmentresult.Label}
	default:
		err = fmt.Errorf("ent: TreatmentResultGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (trgb *TreatmentResultGroupBy) Float64X(ctx context.Context) float64 {
	v, err := trgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (trgb *TreatmentResultGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TreatmentResultGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (trgb *TreatmentResultGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := trgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (trgb *TreatmentResultGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = trgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{treatmentresult.Label}
	default:
		err = fmt.Errorf("ent: TreatmentResultGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (trgb *TreatmentResultGroupBy) BoolX(ctx context.Context) bool {
	v, err := trgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trgb *TreatmentResultGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range trgb.fields {
		if !treatmentresult.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := trgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (trgb *TreatmentResultGroupBy) sqlQuery() *sql.Selector {
	selector := trgb.sql
	columns := make([]string, 0, len(trgb.fields)+len(trgb.fns))
	columns = append(columns, trgb.fields...)
	for _, fn := range trgb.fns {
		columns = append(columns, fn(selector, treatmentresult.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(trgb.fields...)
}

// TreatmentResultSelect is the builder for select fields of TreatmentResult entities.
type TreatmentResultSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (trs *TreatmentResultSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := trs.path(ctx)
	if err != nil {
		return err
	}
	trs.sql = query
	return trs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (trs *TreatmentResultSelect) ScanX(ctx context.Context, v interface{}) {
	if err := trs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (trs *TreatmentResultSelect) Strings(ctx context.Context) ([]string, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TreatmentResultSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (trs *TreatmentResultSelect) StringsX(ctx context.Context) []string {
	v, err := trs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (trs *TreatmentResultSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = trs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{treatmentresult.Label}
	default:
		err = fmt.Errorf("ent: TreatmentResultSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (trs *TreatmentResultSelect) StringX(ctx context.Context) string {
	v, err := trs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (trs *TreatmentResultSelect) Ints(ctx context.Context) ([]int, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TreatmentResultSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (trs *TreatmentResultSelect) IntsX(ctx context.Context) []int {
	v, err := trs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (trs *TreatmentResultSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = trs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{treatmentresult.Label}
	default:
		err = fmt.Errorf("ent: TreatmentResultSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (trs *TreatmentResultSelect) IntX(ctx context.Context) int {
	v, err := trs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (trs *TreatmentResultSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TreatmentResultSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (trs *TreatmentResultSelect) Float64sX(ctx context.Context) []float64 {
	v, err := trs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (trs *TreatmentResultSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = trs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{treatmentresult.Label}
	default:
		err = fmt.Errorf("ent: TreatmentResultSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (trs *TreatmentResultSelect) Float64X(ctx context.Context) float64 {
	v, err := trs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (trs *TreatmentResultSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TreatmentResultSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (trs *TreatmentResultSelect) BoolsX(ctx context.Context) []bool {
	v, err := trs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (trs *TreatmentResultSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = trs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{treatmentresult.Label}
	default:
		err = fmt.Errorf("ent: TreatmentResultSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (trs *TreatmentResultSelect) BoolX(ctx context.Context) bool {
	v, err := trs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trs *TreatmentResultSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range trs.fields {
		if !treatmentresult.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := trs.sqlQuery().Query()
	if err := trs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (trs *TreatmentResultSelect) sqlQuery() sql.Querier {
	selector := trs.sql
	selector.Select(selector.Columns(trs.fields...)...)
	return selector
}

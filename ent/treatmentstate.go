// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/treatmentstate"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// TreatmentState is the model entity for the TreatmentState schema.
type TreatmentState struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TreatmentState) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TreatmentState fields.
func (ts *TreatmentState) assignValues(values ...interface{}) error {
	if m, n := len(values), len(treatmentstate.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ts.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		ts.Name = value.String
	}
	return nil
}

// Update returns a builder for updating this TreatmentState.
// Note that, you need to call TreatmentState.Unwrap() before calling this method, if this TreatmentState
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TreatmentState) Update() *TreatmentStateUpdateOne {
	return (&TreatmentStateClient{config: ts.config}).UpdateOne(ts)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ts *TreatmentState) Unwrap() *TreatmentState {
	tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TreatmentState is not a transactional entity")
	}
	ts.config.driver = tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TreatmentState) String() string {
	var builder strings.Builder
	builder.WriteString("TreatmentState(")
	builder.WriteString(fmt.Sprintf("id=%v", ts.ID))
	builder.WriteString(", name=")
	builder.WriteString(ts.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TreatmentStates is a parsable slice of TreatmentState.
type TreatmentStates []*TreatmentState

func (ts TreatmentStates) config(cfg config) {
	for _i := range ts {
		ts[_i].config = cfg
	}
}

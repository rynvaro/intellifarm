// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/treatmentstate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// TreatmentStateUpdate is the builder for updating TreatmentState entities.
type TreatmentStateUpdate struct {
	config
	hooks      []Hook
	mutation   *TreatmentStateMutation
	predicates []predicate.TreatmentState
}

// Where adds a new predicate for the builder.
func (tsu *TreatmentStateUpdate) Where(ps ...predicate.TreatmentState) *TreatmentStateUpdate {
	tsu.predicates = append(tsu.predicates, ps...)
	return tsu
}

// SetName sets the name field.
func (tsu *TreatmentStateUpdate) SetName(s string) *TreatmentStateUpdate {
	tsu.mutation.SetName(s)
	return tsu
}

// Mutation returns the TreatmentStateMutation object of the builder.
func (tsu *TreatmentStateUpdate) Mutation() *TreatmentStateMutation {
	return tsu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tsu *TreatmentStateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tsu.hooks) == 0 {
		if err = tsu.check(); err != nil {
			return 0, err
		}
		affected, err = tsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreatmentStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsu.check(); err != nil {
				return 0, err
			}
			tsu.mutation = mutation
			affected, err = tsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tsu.hooks) - 1; i >= 0; i-- {
			mut = tsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TreatmentStateUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TreatmentStateUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TreatmentStateUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsu *TreatmentStateUpdate) check() error {
	if v, ok := tsu.mutation.Name(); ok {
		if err := treatmentstate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tsu *TreatmentStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treatmentstate.Table,
			Columns: treatmentstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: treatmentstate.FieldID,
			},
		},
	}
	if ps := tsu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treatmentstate.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatmentstate.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TreatmentStateUpdateOne is the builder for updating a single TreatmentState entity.
type TreatmentStateUpdateOne struct {
	config
	hooks    []Hook
	mutation *TreatmentStateMutation
}

// SetName sets the name field.
func (tsuo *TreatmentStateUpdateOne) SetName(s string) *TreatmentStateUpdateOne {
	tsuo.mutation.SetName(s)
	return tsuo
}

// Mutation returns the TreatmentStateMutation object of the builder.
func (tsuo *TreatmentStateUpdateOne) Mutation() *TreatmentStateMutation {
	return tsuo.mutation
}

// Save executes the query and returns the updated entity.
func (tsuo *TreatmentStateUpdateOne) Save(ctx context.Context) (*TreatmentState, error) {
	var (
		err  error
		node *TreatmentState
	)
	if len(tsuo.hooks) == 0 {
		if err = tsuo.check(); err != nil {
			return nil, err
		}
		node, err = tsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreatmentStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsuo.check(); err != nil {
				return nil, err
			}
			tsuo.mutation = mutation
			node, err = tsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tsuo.hooks) - 1; i >= 0; i-- {
			mut = tsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TreatmentStateUpdateOne) SaveX(ctx context.Context) *TreatmentState {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TreatmentStateUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TreatmentStateUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsuo *TreatmentStateUpdateOne) check() error {
	if v, ok := tsuo.mutation.Name(); ok {
		if err := treatmentstate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tsuo *TreatmentStateUpdateOne) sqlSave(ctx context.Context) (_node *TreatmentState, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treatmentstate.Table,
			Columns: treatmentstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: treatmentstate.FieldID,
			},
		},
	}
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TreatmentState.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treatmentstate.FieldName,
		})
	}
	_node = &TreatmentState{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatmentstate.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"github.com/facebook/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// API is the client for interacting with the API builders.
	API *APIClient
	// Abortion is the client for interacting with the Abortion builders.
	Abortion *AbortionClient
	// AbortionReason is the client for interacting with the AbortionReason builders.
	AbortionReason *AbortionReasonClient
	// AbortionType is the client for interacting with the AbortionType builders.
	AbortionType *AbortionTypeClient
	// BirthSurrounding is the client for interacting with the BirthSurrounding builders.
	BirthSurrounding *BirthSurroundingClient
	// BreathRate is the client for interacting with the BreathRate builders.
	BreathRate *BreathRateClient
	// Breeding is the client for interacting with the Breeding builders.
	Breeding *BreedingClient
	// BreedingType is the client for interacting with the BreedingType builders.
	BreedingType *BreedingTypeClient
	// Calve is the client for interacting with the Calve builders.
	Calve *CalveClient
	// CalveCount is the client for interacting with the CalveCount builders.
	CalveCount *CalveCountClient
	// CalveType is the client for interacting with the CalveType builders.
	CalveType *CalveTypeClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Cattle is the client for interacting with the Cattle builders.
	Cattle *CattleClient
	// CattleBreed is the client for interacting with the CattleBreed builders.
	CattleBreed *CattleBreedClient
	// CattleCate is the client for interacting with the CattleCate builders.
	CattleCate *CattleCateClient
	// CattleDie is the client for interacting with the CattleDie builders.
	CattleDie *CattleDieClient
	// CattleGender is the client for interacting with the CattleGender builders.
	CattleGender *CattleGenderClient
	// CattleGroup is the client for interacting with the CattleGroup builders.
	CattleGroup *CattleGroupClient
	// CattleGrow is the client for interacting with the CattleGrow builders.
	CattleGrow *CattleGrowClient
	// CattleGrowsData is the client for interacting with the CattleGrowsData builders.
	CattleGrowsData *CattleGrowsDataClient
	// CattleGrowsRate is the client for interacting with the CattleGrowsRate builders.
	CattleGrowsRate *CattleGrowsRateClient
	// CattleHairColor is the client for interacting with the CattleHairColor builders.
	CattleHairColor *CattleHairColorClient
	// CattleIn is the client for interacting with the CattleIn builders.
	CattleIn *CattleInClient
	// CattleJoinedType is the client for interacting with the CattleJoinedType builders.
	CattleJoinedType *CattleJoinedTypeClient
	// CattleMove is the client for interacting with the CattleMove builders.
	CattleMove *CattleMoveClient
	// CattleMoveReason is the client for interacting with the CattleMoveReason builders.
	CattleMoveReason *CattleMoveReasonClient
	// CattleOut is the client for interacting with the CattleOut builders.
	CattleOut *CattleOutClient
	// CattleOwner is the client for interacting with the CattleOwner builders.
	CattleOwner *CattleOwnerClient
	// CattleType is the client for interacting with the CattleType builders.
	CattleType *CattleTypeClient
	// Change is the client for interacting with the Change builders.
	Change *ChangeClient
	// Concentrate is the client for interacting with the Concentrate builders.
	Concentrate *ConcentrateClient
	// ConcentrateFormula is the client for interacting with the ConcentrateFormula builders.
	ConcentrateFormula *ConcentrateFormulaClient
	// ConcentrateProcess is the client for interacting with the ConcentrateProcess builders.
	ConcentrateProcess *ConcentrateProcessClient
	// Conf is the client for interacting with the Conf builders.
	Conf *ConfClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// DiseaseInfo is the client for interacting with the DiseaseInfo builders.
	DiseaseInfo *DiseaseInfoClient
	// Disinfect is the client for interacting with the Disinfect builders.
	Disinfect *DisinfectClient
	// Dispence is the client for interacting with the Dispence builders.
	Dispence *DispenceClient
	// Duty is the client for interacting with the Duty builders.
	Duty *DutyClient
	// Epidemic is the client for interacting with the Epidemic builders.
	Epidemic *EpidemicClient
	// EpidemicType is the client for interacting with the EpidemicType builders.
	EpidemicType *EpidemicTypeClient
	// Estrus is the client for interacting with the Estrus builders.
	Estrus *EstrusClient
	// EstrusType is the client for interacting with the EstrusType builders.
	EstrusType *EstrusTypeClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// Farm is the client for interacting with the Farm builders.
	Farm *FarmClient
	// FeedGroup is the client for interacting with the FeedGroup builders.
	FeedGroup *FeedGroupClient
	// FeedInfo is the client for interacting with the FeedInfo builders.
	FeedInfo *FeedInfoClient
	// FeedRecord is the client for interacting with the FeedRecord builders.
	FeedRecord *FeedRecordClient
	// FrozenSemenInfo is the client for interacting with the FrozenSemenInfo builders.
	FrozenSemenInfo *FrozenSemenInfoClient
	// HairState is the client for interacting with the HairState builders.
	HairState *HairStateClient
	// HealthCare is the client for interacting with the HealthCare builders.
	HealthCare *HealthCareClient
	// Immunity is the client for interacting with the Immunity builders.
	Immunity *ImmunityClient
	// Inspection is the client for interacting with the Inspection builders.
	Inspection *InspectionClient
	// InventoryFlow is the client for interacting with the InventoryFlow builders.
	InventoryFlow *InventoryFlowClient
	// Material is the client for interacting with the Material builders.
	Material *MaterialClient
	// MaterialTest is the client for interacting with the MaterialTest builders.
	MaterialTest *MaterialTestClient
	// Medicine is the client for interacting with the Medicine builders.
	Medicine *MedicineClient
	// Operation is the client for interacting with the Operation builders.
	Operation *OperationClient
	// Position is the client for interacting with the Position builders.
	Position *PositionClient
	// PositionApi is the client for interacting with the PositionApi builders.
	PositionApi *PositionApiClient
	// PregnancyTest is the client for interacting with the PregnancyTest builders.
	PregnancyTest *PregnancyTestClient
	// PregnancyTestMethod is the client for interacting with the PregnancyTestMethod builders.
	PregnancyTestMethod *PregnancyTestMethodClient
	// PregnancyTestResult is the client for interacting with the PregnancyTestResult builders.
	PregnancyTestResult *PregnancyTestResultClient
	// PregnancyTestType is the client for interacting with the PregnancyTestType builders.
	PregnancyTestType *PregnancyTestTypeClient
	// Ration is the client for interacting with the Ration builders.
	Ration *RationClient
	// RationFormula is the client for interacting with the RationFormula builders.
	RationFormula *RationFormulaClient
	// RationProcess is the client for interacting with the RationProcess builders.
	RationProcess *RationProcessClient
	// ReproductionParameters is the client for interacting with the ReproductionParameters builders.
	ReproductionParameters *ReproductionParametersClient
	// ReproductiveState is the client for interacting with the ReproductiveState builders.
	ReproductiveState *ReproductiveStateClient
	// SemenFrozenType is the client for interacting with the SemenFrozenType builders.
	SemenFrozenType *SemenFrozenTypeClient
	// Shed is the client for interacting with the Shed builders.
	Shed *ShedClient
	// ShedCategory is the client for interacting with the ShedCategory builders.
	ShedCategory *ShedCategoryClient
	// ShedSetting is the client for interacting with the ShedSetting builders.
	ShedSetting *ShedSettingClient
	// ShedTrans is the client for interacting with the ShedTrans builders.
	ShedTrans *ShedTransClient
	// ShedType is the client for interacting with the ShedType builders.
	ShedType *ShedTypeClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// TreatmentResult is the client for interacting with the TreatmentResult builders.
	TreatmentResult *TreatmentResultClient
	// TreatmentState is the client for interacting with the TreatmentState builders.
	TreatmentState *TreatmentStateClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// VeterinaryDrugsInfo is the client for interacting with the VeterinaryDrugsInfo builders.
	VeterinaryDrugsInfo *VeterinaryDrugsInfoClient
	// WarehouseSetting is the client for interacting with the WarehouseSetting builders.
	WarehouseSetting *WarehouseSettingClient
	// Whereabouts is the client for interacting with the Whereabouts builders.
	Whereabouts *WhereaboutsClient
	// WindDirection is the client for interacting with the WindDirection builders.
	WindDirection *WindDirectionClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once

	// completion callbacks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook

	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Committer method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	tx.mu.Lock()
	hooks := append([]CommitHook(nil), tx.onCommit...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onCommit = append(tx.onCommit, f)
}

type (
	// Rollbacker is the interface that wraps the Rollbacker method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	tx.mu.Lock()
	hooks := append([]RollbackHook(nil), tx.onRollback...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onRollback = append(tx.onRollback, f)
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.API = NewAPIClient(tx.config)
	tx.Abortion = NewAbortionClient(tx.config)
	tx.AbortionReason = NewAbortionReasonClient(tx.config)
	tx.AbortionType = NewAbortionTypeClient(tx.config)
	tx.BirthSurrounding = NewBirthSurroundingClient(tx.config)
	tx.BreathRate = NewBreathRateClient(tx.config)
	tx.Breeding = NewBreedingClient(tx.config)
	tx.BreedingType = NewBreedingTypeClient(tx.config)
	tx.Calve = NewCalveClient(tx.config)
	tx.CalveCount = NewCalveCountClient(tx.config)
	tx.CalveType = NewCalveTypeClient(tx.config)
	tx.Category = NewCategoryClient(tx.config)
	tx.Cattle = NewCattleClient(tx.config)
	tx.CattleBreed = NewCattleBreedClient(tx.config)
	tx.CattleCate = NewCattleCateClient(tx.config)
	tx.CattleDie = NewCattleDieClient(tx.config)
	tx.CattleGender = NewCattleGenderClient(tx.config)
	tx.CattleGroup = NewCattleGroupClient(tx.config)
	tx.CattleGrow = NewCattleGrowClient(tx.config)
	tx.CattleGrowsData = NewCattleGrowsDataClient(tx.config)
	tx.CattleGrowsRate = NewCattleGrowsRateClient(tx.config)
	tx.CattleHairColor = NewCattleHairColorClient(tx.config)
	tx.CattleIn = NewCattleInClient(tx.config)
	tx.CattleJoinedType = NewCattleJoinedTypeClient(tx.config)
	tx.CattleMove = NewCattleMoveClient(tx.config)
	tx.CattleMoveReason = NewCattleMoveReasonClient(tx.config)
	tx.CattleOut = NewCattleOutClient(tx.config)
	tx.CattleOwner = NewCattleOwnerClient(tx.config)
	tx.CattleType = NewCattleTypeClient(tx.config)
	tx.Change = NewChangeClient(tx.config)
	tx.Concentrate = NewConcentrateClient(tx.config)
	tx.ConcentrateFormula = NewConcentrateFormulaClient(tx.config)
	tx.ConcentrateProcess = NewConcentrateProcessClient(tx.config)
	tx.Conf = NewConfClient(tx.config)
	tx.Customer = NewCustomerClient(tx.config)
	tx.DiseaseInfo = NewDiseaseInfoClient(tx.config)
	tx.Disinfect = NewDisinfectClient(tx.config)
	tx.Dispence = NewDispenceClient(tx.config)
	tx.Duty = NewDutyClient(tx.config)
	tx.Epidemic = NewEpidemicClient(tx.config)
	tx.EpidemicType = NewEpidemicTypeClient(tx.config)
	tx.Estrus = NewEstrusClient(tx.config)
	tx.EstrusType = NewEstrusTypeClient(tx.config)
	tx.Event = NewEventClient(tx.config)
	tx.Farm = NewFarmClient(tx.config)
	tx.FeedGroup = NewFeedGroupClient(tx.config)
	tx.FeedInfo = NewFeedInfoClient(tx.config)
	tx.FeedRecord = NewFeedRecordClient(tx.config)
	tx.FrozenSemenInfo = NewFrozenSemenInfoClient(tx.config)
	tx.HairState = NewHairStateClient(tx.config)
	tx.HealthCare = NewHealthCareClient(tx.config)
	tx.Immunity = NewImmunityClient(tx.config)
	tx.Inspection = NewInspectionClient(tx.config)
	tx.InventoryFlow = NewInventoryFlowClient(tx.config)
	tx.Material = NewMaterialClient(tx.config)
	tx.MaterialTest = NewMaterialTestClient(tx.config)
	tx.Medicine = NewMedicineClient(tx.config)
	tx.Operation = NewOperationClient(tx.config)
	tx.Position = NewPositionClient(tx.config)
	tx.PositionApi = NewPositionApiClient(tx.config)
	tx.PregnancyTest = NewPregnancyTestClient(tx.config)
	tx.PregnancyTestMethod = NewPregnancyTestMethodClient(tx.config)
	tx.PregnancyTestResult = NewPregnancyTestResultClient(tx.config)
	tx.PregnancyTestType = NewPregnancyTestTypeClient(tx.config)
	tx.Ration = NewRationClient(tx.config)
	tx.RationFormula = NewRationFormulaClient(tx.config)
	tx.RationProcess = NewRationProcessClient(tx.config)
	tx.ReproductionParameters = NewReproductionParametersClient(tx.config)
	tx.ReproductiveState = NewReproductiveStateClient(tx.config)
	tx.SemenFrozenType = NewSemenFrozenTypeClient(tx.config)
	tx.Shed = NewShedClient(tx.config)
	tx.ShedCategory = NewShedCategoryClient(tx.config)
	tx.ShedSetting = NewShedSettingClient(tx.config)
	tx.ShedTrans = NewShedTransClient(tx.config)
	tx.ShedType = NewShedTypeClient(tx.config)
	tx.Tenant = NewTenantClient(tx.config)
	tx.TreatmentResult = NewTreatmentResultClient(tx.config)
	tx.TreatmentState = NewTreatmentStateClient(tx.config)
	tx.User = NewUserClient(tx.config)
	tx.VeterinaryDrugsInfo = NewVeterinaryDrugsInfoClient(tx.config)
	tx.WarehouseSetting = NewWarehouseSettingClient(tx.config)
	tx.Whereabouts = NewWhereaboutsClient(tx.config)
	tx.WindDirection = NewWindDirectionClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: API.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)

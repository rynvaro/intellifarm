// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 1 系统用户 2 集团用户 3 集团下属用户
	Level int `json:"level,omitempty"`
	// 牛场ID
	FarmId int64 `json:"farmId,omitempty"`
	// 牛场名称
	FarmName string `json:"farmName,omitempty"`
	// 职务ID
	PositionId int64 `json:"positionId,omitempty"`
	// 职务
	PositionName string `json:"positionName,omitempty"`
	// 职责，斜线分割
	DutyName string `json:"dutyName,omitempty"`
	// 员工姓名
	Name string `json:"name,omitempty"`
	// 员工性别： 1：男，2: 女
	Gender int `json:"gender,omitempty"`
	// 员工年龄
	Age int `json:"age,omitempty"`
	// 学历
	Education string `json:"education,omitempty"`
	// 专业
	Major string `json:"major,omitempty"`
	// 职称
	JobTitle string `json:"jobTitle,omitempty"`
	// 联系电话
	Phone string `json:"phone,omitempty"`
	// 身份证号
	IdCard string `json:"idCard,omitempty"`
	// 联系地址
	Address string `json:"address,omitempty"`
	// 在职状态： 1： 在职， 0: 已离职
	OnJobState int `json:"onJobState,omitempty"`
	// 入职时间
	JoinedAt int64 `json:"joinedAt,omitempty"`
	// 租户ID
	TenantId int64 `json:"tenantId,omitempty"`
	// 租户组织名称
	TenantName string `json:"tenantName,omitempty"`
	// 用户密码
	Password string `json:"password,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// 是否已删除
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldLevel, user.FieldFarmId, user.FieldPositionId, user.FieldGender, user.FieldAge, user.FieldOnJobState, user.FieldJoinedAt, user.FieldTenantId, user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case user.FieldFarmName, user.FieldPositionName, user.FieldDutyName, user.FieldName, user.FieldEducation, user.FieldMajor, user.FieldJobTitle, user.FieldPhone, user.FieldIdCard, user.FieldAddress, user.FieldTenantName, user.FieldPassword, user.FieldRemarks:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				u.Level = int(value.Int64)
			}
		case user.FieldFarmId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field farmId", values[i])
			} else if value.Valid {
				u.FarmId = value.Int64
			}
		case user.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farmName", values[i])
			} else if value.Valid {
				u.FarmName = value.String
			}
		case user.FieldPositionId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field positionId", values[i])
			} else if value.Valid {
				u.PositionId = value.Int64
			}
		case user.FieldPositionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field positionName", values[i])
			} else if value.Valid {
				u.PositionName = value.String
			}
		case user.FieldDutyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dutyName", values[i])
			} else if value.Valid {
				u.DutyName = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				u.Gender = int(value.Int64)
			}
		case user.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				u.Age = int(value.Int64)
			}
		case user.FieldEducation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field education", values[i])
			} else if value.Valid {
				u.Education = value.String
			}
		case user.FieldMajor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field major", values[i])
			} else if value.Valid {
				u.Major = value.String
			}
		case user.FieldJobTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jobTitle", values[i])
			} else if value.Valid {
				u.JobTitle = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldIdCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idCard", values[i])
			} else if value.Valid {
				u.IdCard = value.String
			}
		case user.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				u.Address = value.String
			}
		case user.FieldOnJobState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field onJobState", values[i])
			} else if value.Valid {
				u.OnJobState = int(value.Int64)
			}
		case user.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field joinedAt", values[i])
			} else if value.Valid {
				u.JoinedAt = value.Int64
			}
		case user.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				u.TenantId = value.Int64
			}
		case user.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenantName", values[i])
			} else if value.Valid {
				u.TenantName = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				u.Remarks = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Int64
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Int64
			}
		case user.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				u.Deleted = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", u.Level))
	builder.WriteString(", ")
	builder.WriteString("farmId=")
	builder.WriteString(fmt.Sprintf("%v", u.FarmId))
	builder.WriteString(", ")
	builder.WriteString("farmName=")
	builder.WriteString(u.FarmName)
	builder.WriteString(", ")
	builder.WriteString("positionId=")
	builder.WriteString(fmt.Sprintf("%v", u.PositionId))
	builder.WriteString(", ")
	builder.WriteString("positionName=")
	builder.WriteString(u.PositionName)
	builder.WriteString(", ")
	builder.WriteString("dutyName=")
	builder.WriteString(u.DutyName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", u.Gender))
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", u.Age))
	builder.WriteString(", ")
	builder.WriteString("education=")
	builder.WriteString(u.Education)
	builder.WriteString(", ")
	builder.WriteString("major=")
	builder.WriteString(u.Major)
	builder.WriteString(", ")
	builder.WriteString("jobTitle=")
	builder.WriteString(u.JobTitle)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", ")
	builder.WriteString("idCard=")
	builder.WriteString(u.IdCard)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(u.Address)
	builder.WriteString(", ")
	builder.WriteString("onJobState=")
	builder.WriteString(fmt.Sprintf("%v", u.OnJobState))
	builder.WriteString(", ")
	builder.WriteString("joinedAt=")
	builder.WriteString(fmt.Sprintf("%v", u.JoinedAt))
	builder.WriteString(", ")
	builder.WriteString("tenantId=")
	builder.WriteString(fmt.Sprintf("%v", u.TenantId))
	builder.WriteString(", ")
	builder.WriteString("tenantName=")
	builder.WriteString(u.TenantName)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(u.Remarks)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", u.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", u.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", u.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/user"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// FarmId holds the value of the "farmId" field.
	FarmId int64 `json:"farmId,omitempty"`
	// FarmName holds the value of the "farmName" field.
	FarmName string `json:"farmName,omitempty"`
	// PositionId holds the value of the "positionId" field.
	PositionId int64 `json:"positionId,omitempty"`
	// PositionName holds the value of the "positionName" field.
	PositionName string `json:"positionName,omitempty"`
	// DutyName holds the value of the "dutyName" field.
	DutyName string `json:"dutyName,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender int `json:"gender,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Education holds the value of the "education" field.
	Education string `json:"education,omitempty"`
	// Major holds the value of the "major" field.
	Major string `json:"major,omitempty"`
	// JobTitle holds the value of the "jobTitle" field.
	JobTitle string `json:"jobTitle,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// IdCard holds the value of the "idCard" field.
	IdCard string `json:"idCard,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// OnJobState holds the value of the "onJobState" field.
	OnJobState int `json:"onJobState,omitempty"`
	// JoinedAt holds the value of the "joinedAt" field.
	JoinedAt int64 `json:"joinedAt,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int64 `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt int64 `json:"updatedAt,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int `json:"deleted,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // farmId
		&sql.NullString{}, // farmName
		&sql.NullInt64{},  // positionId
		&sql.NullString{}, // positionName
		&sql.NullString{}, // dutyName
		&sql.NullString{}, // name
		&sql.NullInt64{},  // gender
		&sql.NullInt64{},  // age
		&sql.NullString{}, // education
		&sql.NullString{}, // major
		&sql.NullString{}, // jobTitle
		&sql.NullString{}, // phone
		&sql.NullString{}, // idCard
		&sql.NullString{}, // address
		&sql.NullInt64{},  // onJobState
		&sql.NullInt64{},  // joinedAt
		&sql.NullString{}, // remarks
		&sql.NullInt64{},  // createdAt
		&sql.NullInt64{},  // updatedAt
		&sql.NullInt64{},  // deleted
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field farmId", values[0])
	} else if value.Valid {
		u.FarmId = value.Int64
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field farmName", values[1])
	} else if value.Valid {
		u.FarmName = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field positionId", values[2])
	} else if value.Valid {
		u.PositionId = value.Int64
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field positionName", values[3])
	} else if value.Valid {
		u.PositionName = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field dutyName", values[4])
	} else if value.Valid {
		u.DutyName = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[5])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field gender", values[6])
	} else if value.Valid {
		u.Gender = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field age", values[7])
	} else if value.Valid {
		u.Age = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field education", values[8])
	} else if value.Valid {
		u.Education = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field major", values[9])
	} else if value.Valid {
		u.Major = value.String
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field jobTitle", values[10])
	} else if value.Valid {
		u.JobTitle = value.String
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[11])
	} else if value.Valid {
		u.Phone = value.String
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field idCard", values[12])
	} else if value.Valid {
		u.IdCard = value.String
	}
	if value, ok := values[13].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field address", values[13])
	} else if value.Valid {
		u.Address = value.String
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field onJobState", values[14])
	} else if value.Valid {
		u.OnJobState = int(value.Int64)
	}
	if value, ok := values[15].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field joinedAt", values[15])
	} else if value.Valid {
		u.JoinedAt = value.Int64
	}
	if value, ok := values[16].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remarks", values[16])
	} else if value.Valid {
		u.Remarks = value.String
	}
	if value, ok := values[17].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[17])
	} else if value.Valid {
		u.CreatedAt = value.Int64
	}
	if value, ok := values[18].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[18])
	} else if value.Valid {
		u.UpdatedAt = value.Int64
	}
	if value, ok := values[19].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deleted", values[19])
	} else if value.Valid {
		u.Deleted = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", farmId=")
	builder.WriteString(fmt.Sprintf("%v", u.FarmId))
	builder.WriteString(", farmName=")
	builder.WriteString(u.FarmName)
	builder.WriteString(", positionId=")
	builder.WriteString(fmt.Sprintf("%v", u.PositionId))
	builder.WriteString(", positionName=")
	builder.WriteString(u.PositionName)
	builder.WriteString(", dutyName=")
	builder.WriteString(u.DutyName)
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", u.Gender))
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", u.Age))
	builder.WriteString(", education=")
	builder.WriteString(u.Education)
	builder.WriteString(", major=")
	builder.WriteString(u.Major)
	builder.WriteString(", jobTitle=")
	builder.WriteString(u.JobTitle)
	builder.WriteString(", phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", idCard=")
	builder.WriteString(u.IdCard)
	builder.WriteString(", address=")
	builder.WriteString(u.Address)
	builder.WriteString(", onJobState=")
	builder.WriteString(fmt.Sprintf("%v", u.OnJobState))
	builder.WriteString(", joinedAt=")
	builder.WriteString(fmt.Sprintf("%v", u.JoinedAt))
	builder.WriteString(", remarks=")
	builder.WriteString(u.Remarks)
	builder.WriteString(", createdAt=")
	builder.WriteString(fmt.Sprintf("%v", u.CreatedAt))
	builder.WriteString(", updatedAt=")
	builder.WriteString(fmt.Sprintf("%v", u.UpdatedAt))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", u.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}

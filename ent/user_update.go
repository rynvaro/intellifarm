// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/user"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks      []Hook
	mutation   *UserMutation
	predicates []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetFarmId sets the farmId field.
func (uu *UserUpdate) SetFarmId(i int64) *UserUpdate {
	uu.mutation.ResetFarmId()
	uu.mutation.SetFarmId(i)
	return uu
}

// AddFarmId adds i to farmId.
func (uu *UserUpdate) AddFarmId(i int64) *UserUpdate {
	uu.mutation.AddFarmId(i)
	return uu
}

// SetFarmName sets the farmName field.
func (uu *UserUpdate) SetFarmName(s string) *UserUpdate {
	uu.mutation.SetFarmName(s)
	return uu
}

// SetPositionId sets the positionId field.
func (uu *UserUpdate) SetPositionId(i int64) *UserUpdate {
	uu.mutation.ResetPositionId()
	uu.mutation.SetPositionId(i)
	return uu
}

// AddPositionId adds i to positionId.
func (uu *UserUpdate) AddPositionId(i int64) *UserUpdate {
	uu.mutation.AddPositionId(i)
	return uu
}

// SetPositionName sets the positionName field.
func (uu *UserUpdate) SetPositionName(s string) *UserUpdate {
	uu.mutation.SetPositionName(s)
	return uu
}

// SetDutyName sets the dutyName field.
func (uu *UserUpdate) SetDutyName(s string) *UserUpdate {
	uu.mutation.SetDutyName(s)
	return uu
}

// SetName sets the name field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetGender sets the gender field.
func (uu *UserUpdate) SetGender(i int) *UserUpdate {
	uu.mutation.ResetGender()
	uu.mutation.SetGender(i)
	return uu
}

// AddGender adds i to gender.
func (uu *UserUpdate) AddGender(i int) *UserUpdate {
	uu.mutation.AddGender(i)
	return uu
}

// SetAge sets the age field.
func (uu *UserUpdate) SetAge(i int) *UserUpdate {
	uu.mutation.ResetAge()
	uu.mutation.SetAge(i)
	return uu
}

// AddAge adds i to age.
func (uu *UserUpdate) AddAge(i int) *UserUpdate {
	uu.mutation.AddAge(i)
	return uu
}

// SetEducation sets the education field.
func (uu *UserUpdate) SetEducation(s string) *UserUpdate {
	uu.mutation.SetEducation(s)
	return uu
}

// SetMajor sets the major field.
func (uu *UserUpdate) SetMajor(s string) *UserUpdate {
	uu.mutation.SetMajor(s)
	return uu
}

// SetJobTitle sets the jobTitle field.
func (uu *UserUpdate) SetJobTitle(s string) *UserUpdate {
	uu.mutation.SetJobTitle(s)
	return uu
}

// SetPhone sets the phone field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetIdCard sets the idCard field.
func (uu *UserUpdate) SetIdCard(s string) *UserUpdate {
	uu.mutation.SetIdCard(s)
	return uu
}

// SetAddress sets the address field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetOnJobState sets the onJobState field.
func (uu *UserUpdate) SetOnJobState(i int) *UserUpdate {
	uu.mutation.ResetOnJobState()
	uu.mutation.SetOnJobState(i)
	return uu
}

// SetNillableOnJobState sets the onJobState field if the given value is not nil.
func (uu *UserUpdate) SetNillableOnJobState(i *int) *UserUpdate {
	if i != nil {
		uu.SetOnJobState(*i)
	}
	return uu
}

// AddOnJobState adds i to onJobState.
func (uu *UserUpdate) AddOnJobState(i int) *UserUpdate {
	uu.mutation.AddOnJobState(i)
	return uu
}

// SetJoinedAt sets the joinedAt field.
func (uu *UserUpdate) SetJoinedAt(i int64) *UserUpdate {
	uu.mutation.ResetJoinedAt()
	uu.mutation.SetJoinedAt(i)
	return uu
}

// AddJoinedAt adds i to joinedAt.
func (uu *UserUpdate) AddJoinedAt(i int64) *UserUpdate {
	uu.mutation.AddJoinedAt(i)
	return uu
}

// SetTenantId sets the tenantId field.
func (uu *UserUpdate) SetTenantId(i int64) *UserUpdate {
	uu.mutation.ResetTenantId()
	uu.mutation.SetTenantId(i)
	return uu
}

// AddTenantId adds i to tenantId.
func (uu *UserUpdate) AddTenantId(i int64) *UserUpdate {
	uu.mutation.AddTenantId(i)
	return uu
}

// SetTenantName sets the tenantName field.
func (uu *UserUpdate) SetTenantName(s string) *UserUpdate {
	uu.mutation.SetTenantName(s)
	return uu
}

// SetPassword sets the password field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetRemarks sets the remarks field.
func (uu *UserUpdate) SetRemarks(s string) *UserUpdate {
	uu.mutation.SetRemarks(s)
	return uu
}

// SetCreatedAt sets the createdAt field.
func (uu *UserUpdate) SetCreatedAt(i int64) *UserUpdate {
	uu.mutation.ResetCreatedAt()
	uu.mutation.SetCreatedAt(i)
	return uu
}

// AddCreatedAt adds i to createdAt.
func (uu *UserUpdate) AddCreatedAt(i int64) *UserUpdate {
	uu.mutation.AddCreatedAt(i)
	return uu
}

// SetUpdatedAt sets the updatedAt field.
func (uu *UserUpdate) SetUpdatedAt(i int64) *UserUpdate {
	uu.mutation.ResetUpdatedAt()
	uu.mutation.SetUpdatedAt(i)
	return uu
}

// AddUpdatedAt adds i to updatedAt.
func (uu *UserUpdate) AddUpdatedAt(i int64) *UserUpdate {
	uu.mutation.AddUpdatedAt(i)
	return uu
}

// SetDeleted sets the deleted field.
func (uu *UserUpdate) SetDeleted(i int) *UserUpdate {
	uu.mutation.ResetDeleted()
	uu.mutation.SetDeleted(i)
	return uu
}

// AddDeleted adds i to deleted.
func (uu *UserUpdate) AddDeleted(i int) *UserUpdate {
	uu.mutation.AddDeleted(i)
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.FarmName(); ok {
		if err := user.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf("ent: validator failed for field \"farmName\": %w", err)}
		}
	}
	if v, ok := uu.mutation.PositionName(); ok {
		if err := user.PositionNameValidator(v); err != nil {
			return &ValidationError{Name: "positionName", err: fmt.Errorf("ent: validator failed for field \"positionName\": %w", err)}
		}
	}
	if v, ok := uu.mutation.DutyName(); ok {
		if err := user.DutyNameValidator(v); err != nil {
			return &ValidationError{Name: "dutyName", err: fmt.Errorf("ent: validator failed for field \"dutyName\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldFarmId,
		})
	}
	if value, ok := uu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldFarmId,
		})
	}
	if value, ok := uu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFarmName,
		})
	}
	if value, ok := uu.mutation.PositionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldPositionId,
		})
	}
	if value, ok := uu.mutation.AddedPositionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldPositionId,
		})
	}
	if value, ok := uu.mutation.PositionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPositionName,
		})
	}
	if value, ok := uu.mutation.DutyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDutyName,
		})
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uu.mutation.Education(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEducation,
		})
	}
	if value, ok := uu.mutation.Major(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldMajor,
		})
	}
	if value, ok := uu.mutation.JobTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldJobTitle,
		})
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uu.mutation.IdCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIdCard,
		})
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAddress,
		})
	}
	if value, ok := uu.mutation.OnJobState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldOnJobState,
		})
	}
	if value, ok := uu.mutation.AddedOnJobState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldOnJobState,
		})
	}
	if value, ok := uu.mutation.JoinedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldJoinedAt,
		})
	}
	if value, ok := uu.mutation.AddedJoinedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldJoinedAt,
		})
	}
	if value, ok := uu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldTenantId,
		})
	}
	if value, ok := uu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldTenantId,
		})
	}
	if value, ok := uu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldTenantName,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRemarks,
		})
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if value, ok := uu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// SetFarmId sets the farmId field.
func (uuo *UserUpdateOne) SetFarmId(i int64) *UserUpdateOne {
	uuo.mutation.ResetFarmId()
	uuo.mutation.SetFarmId(i)
	return uuo
}

// AddFarmId adds i to farmId.
func (uuo *UserUpdateOne) AddFarmId(i int64) *UserUpdateOne {
	uuo.mutation.AddFarmId(i)
	return uuo
}

// SetFarmName sets the farmName field.
func (uuo *UserUpdateOne) SetFarmName(s string) *UserUpdateOne {
	uuo.mutation.SetFarmName(s)
	return uuo
}

// SetPositionId sets the positionId field.
func (uuo *UserUpdateOne) SetPositionId(i int64) *UserUpdateOne {
	uuo.mutation.ResetPositionId()
	uuo.mutation.SetPositionId(i)
	return uuo
}

// AddPositionId adds i to positionId.
func (uuo *UserUpdateOne) AddPositionId(i int64) *UserUpdateOne {
	uuo.mutation.AddPositionId(i)
	return uuo
}

// SetPositionName sets the positionName field.
func (uuo *UserUpdateOne) SetPositionName(s string) *UserUpdateOne {
	uuo.mutation.SetPositionName(s)
	return uuo
}

// SetDutyName sets the dutyName field.
func (uuo *UserUpdateOne) SetDutyName(s string) *UserUpdateOne {
	uuo.mutation.SetDutyName(s)
	return uuo
}

// SetName sets the name field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetGender sets the gender field.
func (uuo *UserUpdateOne) SetGender(i int) *UserUpdateOne {
	uuo.mutation.ResetGender()
	uuo.mutation.SetGender(i)
	return uuo
}

// AddGender adds i to gender.
func (uuo *UserUpdateOne) AddGender(i int) *UserUpdateOne {
	uuo.mutation.AddGender(i)
	return uuo
}

// SetAge sets the age field.
func (uuo *UserUpdateOne) SetAge(i int) *UserUpdateOne {
	uuo.mutation.ResetAge()
	uuo.mutation.SetAge(i)
	return uuo
}

// AddAge adds i to age.
func (uuo *UserUpdateOne) AddAge(i int) *UserUpdateOne {
	uuo.mutation.AddAge(i)
	return uuo
}

// SetEducation sets the education field.
func (uuo *UserUpdateOne) SetEducation(s string) *UserUpdateOne {
	uuo.mutation.SetEducation(s)
	return uuo
}

// SetMajor sets the major field.
func (uuo *UserUpdateOne) SetMajor(s string) *UserUpdateOne {
	uuo.mutation.SetMajor(s)
	return uuo
}

// SetJobTitle sets the jobTitle field.
func (uuo *UserUpdateOne) SetJobTitle(s string) *UserUpdateOne {
	uuo.mutation.SetJobTitle(s)
	return uuo
}

// SetPhone sets the phone field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetIdCard sets the idCard field.
func (uuo *UserUpdateOne) SetIdCard(s string) *UserUpdateOne {
	uuo.mutation.SetIdCard(s)
	return uuo
}

// SetAddress sets the address field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetOnJobState sets the onJobState field.
func (uuo *UserUpdateOne) SetOnJobState(i int) *UserUpdateOne {
	uuo.mutation.ResetOnJobState()
	uuo.mutation.SetOnJobState(i)
	return uuo
}

// SetNillableOnJobState sets the onJobState field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOnJobState(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetOnJobState(*i)
	}
	return uuo
}

// AddOnJobState adds i to onJobState.
func (uuo *UserUpdateOne) AddOnJobState(i int) *UserUpdateOne {
	uuo.mutation.AddOnJobState(i)
	return uuo
}

// SetJoinedAt sets the joinedAt field.
func (uuo *UserUpdateOne) SetJoinedAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetJoinedAt()
	uuo.mutation.SetJoinedAt(i)
	return uuo
}

// AddJoinedAt adds i to joinedAt.
func (uuo *UserUpdateOne) AddJoinedAt(i int64) *UserUpdateOne {
	uuo.mutation.AddJoinedAt(i)
	return uuo
}

// SetTenantId sets the tenantId field.
func (uuo *UserUpdateOne) SetTenantId(i int64) *UserUpdateOne {
	uuo.mutation.ResetTenantId()
	uuo.mutation.SetTenantId(i)
	return uuo
}

// AddTenantId adds i to tenantId.
func (uuo *UserUpdateOne) AddTenantId(i int64) *UserUpdateOne {
	uuo.mutation.AddTenantId(i)
	return uuo
}

// SetTenantName sets the tenantName field.
func (uuo *UserUpdateOne) SetTenantName(s string) *UserUpdateOne {
	uuo.mutation.SetTenantName(s)
	return uuo
}

// SetPassword sets the password field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetRemarks sets the remarks field.
func (uuo *UserUpdateOne) SetRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetRemarks(s)
	return uuo
}

// SetCreatedAt sets the createdAt field.
func (uuo *UserUpdateOne) SetCreatedAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetCreatedAt()
	uuo.mutation.SetCreatedAt(i)
	return uuo
}

// AddCreatedAt adds i to createdAt.
func (uuo *UserUpdateOne) AddCreatedAt(i int64) *UserUpdateOne {
	uuo.mutation.AddCreatedAt(i)
	return uuo
}

// SetUpdatedAt sets the updatedAt field.
func (uuo *UserUpdateOne) SetUpdatedAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetUpdatedAt()
	uuo.mutation.SetUpdatedAt(i)
	return uuo
}

// AddUpdatedAt adds i to updatedAt.
func (uuo *UserUpdateOne) AddUpdatedAt(i int64) *UserUpdateOne {
	uuo.mutation.AddUpdatedAt(i)
	return uuo
}

// SetDeleted sets the deleted field.
func (uuo *UserUpdateOne) SetDeleted(i int) *UserUpdateOne {
	uuo.mutation.ResetDeleted()
	uuo.mutation.SetDeleted(i)
	return uuo
}

// AddDeleted adds i to deleted.
func (uuo *UserUpdateOne) AddDeleted(i int) *UserUpdateOne {
	uuo.mutation.AddDeleted(i)
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.FarmName(); ok {
		if err := user.FarmNameValidator(v); err != nil {
			return &ValidationError{Name: "farmName", err: fmt.Errorf("ent: validator failed for field \"farmName\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.PositionName(); ok {
		if err := user.PositionNameValidator(v); err != nil {
			return &ValidationError{Name: "positionName", err: fmt.Errorf("ent: validator failed for field \"positionName\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.DutyName(); ok {
		if err := user.DutyNameValidator(v); err != nil {
			return &ValidationError{Name: "dutyName", err: fmt.Errorf("ent: validator failed for field \"dutyName\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldFarmId,
		})
	}
	if value, ok := uuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldFarmId,
		})
	}
	if value, ok := uuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFarmName,
		})
	}
	if value, ok := uuo.mutation.PositionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldPositionId,
		})
	}
	if value, ok := uuo.mutation.AddedPositionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldPositionId,
		})
	}
	if value, ok := uuo.mutation.PositionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPositionName,
		})
	}
	if value, ok := uuo.mutation.DutyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDutyName,
		})
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uuo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uuo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uuo.mutation.Education(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEducation,
		})
	}
	if value, ok := uuo.mutation.Major(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldMajor,
		})
	}
	if value, ok := uuo.mutation.JobTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldJobTitle,
		})
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uuo.mutation.IdCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIdCard,
		})
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAddress,
		})
	}
	if value, ok := uuo.mutation.OnJobState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldOnJobState,
		})
	}
	if value, ok := uuo.mutation.AddedOnJobState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldOnJobState,
		})
	}
	if value, ok := uuo.mutation.JoinedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldJoinedAt,
		})
	}
	if value, ok := uuo.mutation.AddedJoinedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldJoinedAt,
		})
	}
	if value, ok := uuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldTenantId,
		})
	}
	if value, ok := uuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldTenantId,
		})
	}
	if value, ok := uuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldTenantName,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRemarks,
		})
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if value, ok := uuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

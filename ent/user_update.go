// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetLevel sets the "level" field.
func (uu *UserUpdate) SetLevel(i int) *UserUpdate {
	uu.mutation.ResetLevel()
	uu.mutation.SetLevel(i)
	return uu
}

// AddLevel adds i to the "level" field.
func (uu *UserUpdate) AddLevel(i int) *UserUpdate {
	uu.mutation.AddLevel(i)
	return uu
}

// SetFarmId sets the "farmId" field.
func (uu *UserUpdate) SetFarmId(i int64) *UserUpdate {
	uu.mutation.ResetFarmId()
	uu.mutation.SetFarmId(i)
	return uu
}

// SetNillableFarmId sets the "farmId" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFarmId(i *int64) *UserUpdate {
	if i != nil {
		uu.SetFarmId(*i)
	}
	return uu
}

// AddFarmId adds i to the "farmId" field.
func (uu *UserUpdate) AddFarmId(i int64) *UserUpdate {
	uu.mutation.AddFarmId(i)
	return uu
}

// ClearFarmId clears the value of the "farmId" field.
func (uu *UserUpdate) ClearFarmId() *UserUpdate {
	uu.mutation.ClearFarmId()
	return uu
}

// SetFarmName sets the "farmName" field.
func (uu *UserUpdate) SetFarmName(s string) *UserUpdate {
	uu.mutation.SetFarmName(s)
	return uu
}

// SetNillableFarmName sets the "farmName" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFarmName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFarmName(*s)
	}
	return uu
}

// ClearFarmName clears the value of the "farmName" field.
func (uu *UserUpdate) ClearFarmName() *UserUpdate {
	uu.mutation.ClearFarmName()
	return uu
}

// SetPositionId sets the "positionId" field.
func (uu *UserUpdate) SetPositionId(i int64) *UserUpdate {
	uu.mutation.ResetPositionId()
	uu.mutation.SetPositionId(i)
	return uu
}

// SetNillablePositionId sets the "positionId" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePositionId(i *int64) *UserUpdate {
	if i != nil {
		uu.SetPositionId(*i)
	}
	return uu
}

// AddPositionId adds i to the "positionId" field.
func (uu *UserUpdate) AddPositionId(i int64) *UserUpdate {
	uu.mutation.AddPositionId(i)
	return uu
}

// ClearPositionId clears the value of the "positionId" field.
func (uu *UserUpdate) ClearPositionId() *UserUpdate {
	uu.mutation.ClearPositionId()
	return uu
}

// SetPositionName sets the "positionName" field.
func (uu *UserUpdate) SetPositionName(s string) *UserUpdate {
	uu.mutation.SetPositionName(s)
	return uu
}

// SetNillablePositionName sets the "positionName" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePositionName(s *string) *UserUpdate {
	if s != nil {
		uu.SetPositionName(*s)
	}
	return uu
}

// ClearPositionName clears the value of the "positionName" field.
func (uu *UserUpdate) ClearPositionName() *UserUpdate {
	uu.mutation.ClearPositionName()
	return uu
}

// SetDutyName sets the "dutyName" field.
func (uu *UserUpdate) SetDutyName(s string) *UserUpdate {
	uu.mutation.SetDutyName(s)
	return uu
}

// SetNillableDutyName sets the "dutyName" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDutyName(s *string) *UserUpdate {
	if s != nil {
		uu.SetDutyName(*s)
	}
	return uu
}

// ClearDutyName clears the value of the "dutyName" field.
func (uu *UserUpdate) ClearDutyName() *UserUpdate {
	uu.mutation.ClearDutyName()
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(i int) *UserUpdate {
	uu.mutation.ResetGender()
	uu.mutation.SetGender(i)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(i *int) *UserUpdate {
	if i != nil {
		uu.SetGender(*i)
	}
	return uu
}

// AddGender adds i to the "gender" field.
func (uu *UserUpdate) AddGender(i int) *UserUpdate {
	uu.mutation.AddGender(i)
	return uu
}

// ClearGender clears the value of the "gender" field.
func (uu *UserUpdate) ClearGender() *UserUpdate {
	uu.mutation.ClearGender()
	return uu
}

// SetAge sets the "age" field.
func (uu *UserUpdate) SetAge(i int) *UserUpdate {
	uu.mutation.ResetAge()
	uu.mutation.SetAge(i)
	return uu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAge(i *int) *UserUpdate {
	if i != nil {
		uu.SetAge(*i)
	}
	return uu
}

// AddAge adds i to the "age" field.
func (uu *UserUpdate) AddAge(i int) *UserUpdate {
	uu.mutation.AddAge(i)
	return uu
}

// ClearAge clears the value of the "age" field.
func (uu *UserUpdate) ClearAge() *UserUpdate {
	uu.mutation.ClearAge()
	return uu
}

// SetEducation sets the "education" field.
func (uu *UserUpdate) SetEducation(s string) *UserUpdate {
	uu.mutation.SetEducation(s)
	return uu
}

// SetNillableEducation sets the "education" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEducation(s *string) *UserUpdate {
	if s != nil {
		uu.SetEducation(*s)
	}
	return uu
}

// ClearEducation clears the value of the "education" field.
func (uu *UserUpdate) ClearEducation() *UserUpdate {
	uu.mutation.ClearEducation()
	return uu
}

// SetMajor sets the "major" field.
func (uu *UserUpdate) SetMajor(s string) *UserUpdate {
	uu.mutation.SetMajor(s)
	return uu
}

// SetNillableMajor sets the "major" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMajor(s *string) *UserUpdate {
	if s != nil {
		uu.SetMajor(*s)
	}
	return uu
}

// ClearMajor clears the value of the "major" field.
func (uu *UserUpdate) ClearMajor() *UserUpdate {
	uu.mutation.ClearMajor()
	return uu
}

// SetJobTitle sets the "jobTitle" field.
func (uu *UserUpdate) SetJobTitle(s string) *UserUpdate {
	uu.mutation.SetJobTitle(s)
	return uu
}

// SetNillableJobTitle sets the "jobTitle" field if the given value is not nil.
func (uu *UserUpdate) SetNillableJobTitle(s *string) *UserUpdate {
	if s != nil {
		uu.SetJobTitle(*s)
	}
	return uu
}

// ClearJobTitle clears the value of the "jobTitle" field.
func (uu *UserUpdate) ClearJobTitle() *UserUpdate {
	uu.mutation.ClearJobTitle()
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetIdCard sets the "idCard" field.
func (uu *UserUpdate) SetIdCard(s string) *UserUpdate {
	uu.mutation.SetIdCard(s)
	return uu
}

// SetNillableIdCard sets the "idCard" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIdCard(s *string) *UserUpdate {
	if s != nil {
		uu.SetIdCard(*s)
	}
	return uu
}

// ClearIdCard clears the value of the "idCard" field.
func (uu *UserUpdate) ClearIdCard() *UserUpdate {
	uu.mutation.ClearIdCard()
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddress(*s)
	}
	return uu
}

// ClearAddress clears the value of the "address" field.
func (uu *UserUpdate) ClearAddress() *UserUpdate {
	uu.mutation.ClearAddress()
	return uu
}

// SetOnJobState sets the "onJobState" field.
func (uu *UserUpdate) SetOnJobState(i int) *UserUpdate {
	uu.mutation.ResetOnJobState()
	uu.mutation.SetOnJobState(i)
	return uu
}

// SetNillableOnJobState sets the "onJobState" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOnJobState(i *int) *UserUpdate {
	if i != nil {
		uu.SetOnJobState(*i)
	}
	return uu
}

// AddOnJobState adds i to the "onJobState" field.
func (uu *UserUpdate) AddOnJobState(i int) *UserUpdate {
	uu.mutation.AddOnJobState(i)
	return uu
}

// SetJoinedAt sets the "joinedAt" field.
func (uu *UserUpdate) SetJoinedAt(i int64) *UserUpdate {
	uu.mutation.ResetJoinedAt()
	uu.mutation.SetJoinedAt(i)
	return uu
}

// SetNillableJoinedAt sets the "joinedAt" field if the given value is not nil.
func (uu *UserUpdate) SetNillableJoinedAt(i *int64) *UserUpdate {
	if i != nil {
		uu.SetJoinedAt(*i)
	}
	return uu
}

// AddJoinedAt adds i to the "joinedAt" field.
func (uu *UserUpdate) AddJoinedAt(i int64) *UserUpdate {
	uu.mutation.AddJoinedAt(i)
	return uu
}

// ClearJoinedAt clears the value of the "joinedAt" field.
func (uu *UserUpdate) ClearJoinedAt() *UserUpdate {
	uu.mutation.ClearJoinedAt()
	return uu
}

// SetTenantId sets the "tenantId" field.
func (uu *UserUpdate) SetTenantId(i int64) *UserUpdate {
	uu.mutation.ResetTenantId()
	uu.mutation.SetTenantId(i)
	return uu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenantId(i *int64) *UserUpdate {
	if i != nil {
		uu.SetTenantId(*i)
	}
	return uu
}

// AddTenantId adds i to the "tenantId" field.
func (uu *UserUpdate) AddTenantId(i int64) *UserUpdate {
	uu.mutation.AddTenantId(i)
	return uu
}

// ClearTenantId clears the value of the "tenantId" field.
func (uu *UserUpdate) ClearTenantId() *UserUpdate {
	uu.mutation.ClearTenantId()
	return uu
}

// SetTenantName sets the "tenantName" field.
func (uu *UserUpdate) SetTenantName(s string) *UserUpdate {
	uu.mutation.SetTenantName(s)
	return uu
}

// SetNillableTenantName sets the "tenantName" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenantName(s *string) *UserUpdate {
	if s != nil {
		uu.SetTenantName(*s)
	}
	return uu
}

// ClearTenantName clears the value of the "tenantName" field.
func (uu *UserUpdate) ClearTenantName() *UserUpdate {
	uu.mutation.ClearTenantName()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetRemarks sets the "remarks" field.
func (uu *UserUpdate) SetRemarks(s string) *UserUpdate {
	uu.mutation.SetRemarks(s)
	return uu
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRemarks(s *string) *UserUpdate {
	if s != nil {
		uu.SetRemarks(*s)
	}
	return uu
}

// ClearRemarks clears the value of the "remarks" field.
func (uu *UserUpdate) ClearRemarks() *UserUpdate {
	uu.mutation.ClearRemarks()
	return uu
}

// SetCreatedAt sets the "createdAt" field.
func (uu *UserUpdate) SetCreatedAt(i int64) *UserUpdate {
	uu.mutation.ResetCreatedAt()
	uu.mutation.SetCreatedAt(i)
	return uu
}

// AddCreatedAt adds i to the "createdAt" field.
func (uu *UserUpdate) AddCreatedAt(i int64) *UserUpdate {
	uu.mutation.AddCreatedAt(i)
	return uu
}

// SetUpdatedAt sets the "updatedAt" field.
func (uu *UserUpdate) SetUpdatedAt(i int64) *UserUpdate {
	uu.mutation.ResetUpdatedAt()
	uu.mutation.SetUpdatedAt(i)
	return uu
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (uu *UserUpdate) AddUpdatedAt(i int64) *UserUpdate {
	uu.mutation.AddUpdatedAt(i)
	return uu
}

// SetDeleted sets the "deleted" field.
func (uu *UserUpdate) SetDeleted(i int) *UserUpdate {
	uu.mutation.ResetDeleted()
	uu.mutation.SetDeleted(i)
	return uu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeleted(i *int) *UserUpdate {
	if i != nil {
		uu.SetDeleted(*i)
	}
	return uu
}

// AddDeleted adds i to the "deleted" field.
func (uu *UserUpdate) AddDeleted(i int) *UserUpdate {
	uu.mutation.AddDeleted(i)
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldLevel,
		})
	}
	if value, ok := uu.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldLevel,
		})
	}
	if value, ok := uu.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldFarmId,
		})
	}
	if value, ok := uu.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldFarmId,
		})
	}
	if uu.mutation.FarmIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldFarmId,
		})
	}
	if value, ok := uu.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFarmName,
		})
	}
	if uu.mutation.FarmNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldFarmName,
		})
	}
	if value, ok := uu.mutation.PositionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldPositionId,
		})
	}
	if value, ok := uu.mutation.AddedPositionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldPositionId,
		})
	}
	if uu.mutation.PositionIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldPositionId,
		})
	}
	if value, ok := uu.mutation.PositionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPositionName,
		})
	}
	if uu.mutation.PositionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPositionName,
		})
	}
	if value, ok := uu.mutation.DutyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDutyName,
		})
	}
	if uu.mutation.DutyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldDutyName,
		})
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if uu.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldGender,
		})
	}
	if value, ok := uu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if uu.mutation.AgeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldAge,
		})
	}
	if value, ok := uu.mutation.Education(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEducation,
		})
	}
	if uu.mutation.EducationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldEducation,
		})
	}
	if value, ok := uu.mutation.Major(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldMajor,
		})
	}
	if uu.mutation.MajorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldMajor,
		})
	}
	if value, ok := uu.mutation.JobTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldJobTitle,
		})
	}
	if uu.mutation.JobTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldJobTitle,
		})
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if uu.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uu.mutation.IdCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIdCard,
		})
	}
	if uu.mutation.IdCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldIdCard,
		})
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAddress,
		})
	}
	if uu.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldAddress,
		})
	}
	if value, ok := uu.mutation.OnJobState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldOnJobState,
		})
	}
	if value, ok := uu.mutation.AddedOnJobState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldOnJobState,
		})
	}
	if value, ok := uu.mutation.JoinedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldJoinedAt,
		})
	}
	if value, ok := uu.mutation.AddedJoinedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldJoinedAt,
		})
	}
	if uu.mutation.JoinedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldJoinedAt,
		})
	}
	if value, ok := uu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldTenantId,
		})
	}
	if value, ok := uu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldTenantId,
		})
	}
	if uu.mutation.TenantIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldTenantId,
		})
	}
	if value, ok := uu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldTenantName,
		})
	}
	if uu.mutation.TenantNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldTenantName,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRemarks,
		})
	}
	if uu.mutation.RemarksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldRemarks,
		})
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if value, ok := uu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetLevel sets the "level" field.
func (uuo *UserUpdateOne) SetLevel(i int) *UserUpdateOne {
	uuo.mutation.ResetLevel()
	uuo.mutation.SetLevel(i)
	return uuo
}

// AddLevel adds i to the "level" field.
func (uuo *UserUpdateOne) AddLevel(i int) *UserUpdateOne {
	uuo.mutation.AddLevel(i)
	return uuo
}

// SetFarmId sets the "farmId" field.
func (uuo *UserUpdateOne) SetFarmId(i int64) *UserUpdateOne {
	uuo.mutation.ResetFarmId()
	uuo.mutation.SetFarmId(i)
	return uuo
}

// SetNillableFarmId sets the "farmId" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFarmId(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetFarmId(*i)
	}
	return uuo
}

// AddFarmId adds i to the "farmId" field.
func (uuo *UserUpdateOne) AddFarmId(i int64) *UserUpdateOne {
	uuo.mutation.AddFarmId(i)
	return uuo
}

// ClearFarmId clears the value of the "farmId" field.
func (uuo *UserUpdateOne) ClearFarmId() *UserUpdateOne {
	uuo.mutation.ClearFarmId()
	return uuo
}

// SetFarmName sets the "farmName" field.
func (uuo *UserUpdateOne) SetFarmName(s string) *UserUpdateOne {
	uuo.mutation.SetFarmName(s)
	return uuo
}

// SetNillableFarmName sets the "farmName" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFarmName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFarmName(*s)
	}
	return uuo
}

// ClearFarmName clears the value of the "farmName" field.
func (uuo *UserUpdateOne) ClearFarmName() *UserUpdateOne {
	uuo.mutation.ClearFarmName()
	return uuo
}

// SetPositionId sets the "positionId" field.
func (uuo *UserUpdateOne) SetPositionId(i int64) *UserUpdateOne {
	uuo.mutation.ResetPositionId()
	uuo.mutation.SetPositionId(i)
	return uuo
}

// SetNillablePositionId sets the "positionId" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePositionId(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetPositionId(*i)
	}
	return uuo
}

// AddPositionId adds i to the "positionId" field.
func (uuo *UserUpdateOne) AddPositionId(i int64) *UserUpdateOne {
	uuo.mutation.AddPositionId(i)
	return uuo
}

// ClearPositionId clears the value of the "positionId" field.
func (uuo *UserUpdateOne) ClearPositionId() *UserUpdateOne {
	uuo.mutation.ClearPositionId()
	return uuo
}

// SetPositionName sets the "positionName" field.
func (uuo *UserUpdateOne) SetPositionName(s string) *UserUpdateOne {
	uuo.mutation.SetPositionName(s)
	return uuo
}

// SetNillablePositionName sets the "positionName" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePositionName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPositionName(*s)
	}
	return uuo
}

// ClearPositionName clears the value of the "positionName" field.
func (uuo *UserUpdateOne) ClearPositionName() *UserUpdateOne {
	uuo.mutation.ClearPositionName()
	return uuo
}

// SetDutyName sets the "dutyName" field.
func (uuo *UserUpdateOne) SetDutyName(s string) *UserUpdateOne {
	uuo.mutation.SetDutyName(s)
	return uuo
}

// SetNillableDutyName sets the "dutyName" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDutyName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDutyName(*s)
	}
	return uuo
}

// ClearDutyName clears the value of the "dutyName" field.
func (uuo *UserUpdateOne) ClearDutyName() *UserUpdateOne {
	uuo.mutation.ClearDutyName()
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(i int) *UserUpdateOne {
	uuo.mutation.ResetGender()
	uuo.mutation.SetGender(i)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetGender(*i)
	}
	return uuo
}

// AddGender adds i to the "gender" field.
func (uuo *UserUpdateOne) AddGender(i int) *UserUpdateOne {
	uuo.mutation.AddGender(i)
	return uuo
}

// ClearGender clears the value of the "gender" field.
func (uuo *UserUpdateOne) ClearGender() *UserUpdateOne {
	uuo.mutation.ClearGender()
	return uuo
}

// SetAge sets the "age" field.
func (uuo *UserUpdateOne) SetAge(i int) *UserUpdateOne {
	uuo.mutation.ResetAge()
	uuo.mutation.SetAge(i)
	return uuo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAge(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetAge(*i)
	}
	return uuo
}

// AddAge adds i to the "age" field.
func (uuo *UserUpdateOne) AddAge(i int) *UserUpdateOne {
	uuo.mutation.AddAge(i)
	return uuo
}

// ClearAge clears the value of the "age" field.
func (uuo *UserUpdateOne) ClearAge() *UserUpdateOne {
	uuo.mutation.ClearAge()
	return uuo
}

// SetEducation sets the "education" field.
func (uuo *UserUpdateOne) SetEducation(s string) *UserUpdateOne {
	uuo.mutation.SetEducation(s)
	return uuo
}

// SetNillableEducation sets the "education" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEducation(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEducation(*s)
	}
	return uuo
}

// ClearEducation clears the value of the "education" field.
func (uuo *UserUpdateOne) ClearEducation() *UserUpdateOne {
	uuo.mutation.ClearEducation()
	return uuo
}

// SetMajor sets the "major" field.
func (uuo *UserUpdateOne) SetMajor(s string) *UserUpdateOne {
	uuo.mutation.SetMajor(s)
	return uuo
}

// SetNillableMajor sets the "major" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMajor(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMajor(*s)
	}
	return uuo
}

// ClearMajor clears the value of the "major" field.
func (uuo *UserUpdateOne) ClearMajor() *UserUpdateOne {
	uuo.mutation.ClearMajor()
	return uuo
}

// SetJobTitle sets the "jobTitle" field.
func (uuo *UserUpdateOne) SetJobTitle(s string) *UserUpdateOne {
	uuo.mutation.SetJobTitle(s)
	return uuo
}

// SetNillableJobTitle sets the "jobTitle" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableJobTitle(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetJobTitle(*s)
	}
	return uuo
}

// ClearJobTitle clears the value of the "jobTitle" field.
func (uuo *UserUpdateOne) ClearJobTitle() *UserUpdateOne {
	uuo.mutation.ClearJobTitle()
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetIdCard sets the "idCard" field.
func (uuo *UserUpdateOne) SetIdCard(s string) *UserUpdateOne {
	uuo.mutation.SetIdCard(s)
	return uuo
}

// SetNillableIdCard sets the "idCard" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIdCard(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetIdCard(*s)
	}
	return uuo
}

// ClearIdCard clears the value of the "idCard" field.
func (uuo *UserUpdateOne) ClearIdCard() *UserUpdateOne {
	uuo.mutation.ClearIdCard()
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddress(*s)
	}
	return uuo
}

// ClearAddress clears the value of the "address" field.
func (uuo *UserUpdateOne) ClearAddress() *UserUpdateOne {
	uuo.mutation.ClearAddress()
	return uuo
}

// SetOnJobState sets the "onJobState" field.
func (uuo *UserUpdateOne) SetOnJobState(i int) *UserUpdateOne {
	uuo.mutation.ResetOnJobState()
	uuo.mutation.SetOnJobState(i)
	return uuo
}

// SetNillableOnJobState sets the "onJobState" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOnJobState(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetOnJobState(*i)
	}
	return uuo
}

// AddOnJobState adds i to the "onJobState" field.
func (uuo *UserUpdateOne) AddOnJobState(i int) *UserUpdateOne {
	uuo.mutation.AddOnJobState(i)
	return uuo
}

// SetJoinedAt sets the "joinedAt" field.
func (uuo *UserUpdateOne) SetJoinedAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetJoinedAt()
	uuo.mutation.SetJoinedAt(i)
	return uuo
}

// SetNillableJoinedAt sets the "joinedAt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableJoinedAt(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetJoinedAt(*i)
	}
	return uuo
}

// AddJoinedAt adds i to the "joinedAt" field.
func (uuo *UserUpdateOne) AddJoinedAt(i int64) *UserUpdateOne {
	uuo.mutation.AddJoinedAt(i)
	return uuo
}

// ClearJoinedAt clears the value of the "joinedAt" field.
func (uuo *UserUpdateOne) ClearJoinedAt() *UserUpdateOne {
	uuo.mutation.ClearJoinedAt()
	return uuo
}

// SetTenantId sets the "tenantId" field.
func (uuo *UserUpdateOne) SetTenantId(i int64) *UserUpdateOne {
	uuo.mutation.ResetTenantId()
	uuo.mutation.SetTenantId(i)
	return uuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenantId(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetTenantId(*i)
	}
	return uuo
}

// AddTenantId adds i to the "tenantId" field.
func (uuo *UserUpdateOne) AddTenantId(i int64) *UserUpdateOne {
	uuo.mutation.AddTenantId(i)
	return uuo
}

// ClearTenantId clears the value of the "tenantId" field.
func (uuo *UserUpdateOne) ClearTenantId() *UserUpdateOne {
	uuo.mutation.ClearTenantId()
	return uuo
}

// SetTenantName sets the "tenantName" field.
func (uuo *UserUpdateOne) SetTenantName(s string) *UserUpdateOne {
	uuo.mutation.SetTenantName(s)
	return uuo
}

// SetNillableTenantName sets the "tenantName" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenantName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTenantName(*s)
	}
	return uuo
}

// ClearTenantName clears the value of the "tenantName" field.
func (uuo *UserUpdateOne) ClearTenantName() *UserUpdateOne {
	uuo.mutation.ClearTenantName()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetRemarks sets the "remarks" field.
func (uuo *UserUpdateOne) SetRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetRemarks(s)
	return uuo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRemarks(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRemarks(*s)
	}
	return uuo
}

// ClearRemarks clears the value of the "remarks" field.
func (uuo *UserUpdateOne) ClearRemarks() *UserUpdateOne {
	uuo.mutation.ClearRemarks()
	return uuo
}

// SetCreatedAt sets the "createdAt" field.
func (uuo *UserUpdateOne) SetCreatedAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetCreatedAt()
	uuo.mutation.SetCreatedAt(i)
	return uuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (uuo *UserUpdateOne) AddCreatedAt(i int64) *UserUpdateOne {
	uuo.mutation.AddCreatedAt(i)
	return uuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (uuo *UserUpdateOne) SetUpdatedAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetUpdatedAt()
	uuo.mutation.SetUpdatedAt(i)
	return uuo
}

// AddUpdatedAt adds i to the "updatedAt" field.
func (uuo *UserUpdateOne) AddUpdatedAt(i int64) *UserUpdateOne {
	uuo.mutation.AddUpdatedAt(i)
	return uuo
}

// SetDeleted sets the "deleted" field.
func (uuo *UserUpdateOne) SetDeleted(i int) *UserUpdateOne {
	uuo.mutation.ResetDeleted()
	uuo.mutation.SetDeleted(i)
	return uuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeleted(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetDeleted(*i)
	}
	return uuo
}

// AddDeleted adds i to the "deleted" field.
func (uuo *UserUpdateOne) AddDeleted(i int) *UserUpdateOne {
	uuo.mutation.AddDeleted(i)
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldLevel,
		})
	}
	if value, ok := uuo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldLevel,
		})
	}
	if value, ok := uuo.mutation.FarmId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldFarmId,
		})
	}
	if value, ok := uuo.mutation.AddedFarmId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldFarmId,
		})
	}
	if uuo.mutation.FarmIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldFarmId,
		})
	}
	if value, ok := uuo.mutation.FarmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFarmName,
		})
	}
	if uuo.mutation.FarmNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldFarmName,
		})
	}
	if value, ok := uuo.mutation.PositionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldPositionId,
		})
	}
	if value, ok := uuo.mutation.AddedPositionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldPositionId,
		})
	}
	if uuo.mutation.PositionIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldPositionId,
		})
	}
	if value, ok := uuo.mutation.PositionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPositionName,
		})
	}
	if uuo.mutation.PositionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPositionName,
		})
	}
	if value, ok := uuo.mutation.DutyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDutyName,
		})
	}
	if uuo.mutation.DutyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldDutyName,
		})
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if uuo.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldGender,
		})
	}
	if value, ok := uuo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uuo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if uuo.mutation.AgeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldAge,
		})
	}
	if value, ok := uuo.mutation.Education(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEducation,
		})
	}
	if uuo.mutation.EducationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldEducation,
		})
	}
	if value, ok := uuo.mutation.Major(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldMajor,
		})
	}
	if uuo.mutation.MajorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldMajor,
		})
	}
	if value, ok := uuo.mutation.JobTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldJobTitle,
		})
	}
	if uuo.mutation.JobTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldJobTitle,
		})
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if uuo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uuo.mutation.IdCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIdCard,
		})
	}
	if uuo.mutation.IdCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldIdCard,
		})
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAddress,
		})
	}
	if uuo.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldAddress,
		})
	}
	if value, ok := uuo.mutation.OnJobState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldOnJobState,
		})
	}
	if value, ok := uuo.mutation.AddedOnJobState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldOnJobState,
		})
	}
	if value, ok := uuo.mutation.JoinedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldJoinedAt,
		})
	}
	if value, ok := uuo.mutation.AddedJoinedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldJoinedAt,
		})
	}
	if uuo.mutation.JoinedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldJoinedAt,
		})
	}
	if value, ok := uuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldTenantId,
		})
	}
	if value, ok := uuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldTenantId,
		})
	}
	if uuo.mutation.TenantIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldTenantId,
		})
	}
	if value, ok := uuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldTenantName,
		})
	}
	if uuo.mutation.TenantNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldTenantName,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRemarks,
		})
	}
	if uuo.mutation.RemarksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldRemarks,
		})
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if value, ok := uuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

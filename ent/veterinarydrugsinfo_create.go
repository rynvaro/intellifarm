// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cattleai/ent/veterinarydrugsinfo"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VeterinaryDrugsInfoCreate is the builder for creating a VeterinaryDrugsInfo entity.
type VeterinaryDrugsInfoCreate struct {
	config
	mutation *VeterinaryDrugsInfoMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (vdic *VeterinaryDrugsInfoCreate) SetName(s string) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetName(s)
	return vdic
}

// SetCode sets the "code" field.
func (vdic *VeterinaryDrugsInfoCreate) SetCode(s string) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetCode(s)
	return vdic
}

// SetType sets the "type" field.
func (vdic *VeterinaryDrugsInfoCreate) SetType(s string) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetType(s)
	return vdic
}

// SetStopAt sets the "stopAt" field.
func (vdic *VeterinaryDrugsInfoCreate) SetStopAt(i int64) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetStopAt(i)
	return vdic
}

// SetTenantId sets the "tenantId" field.
func (vdic *VeterinaryDrugsInfoCreate) SetTenantId(i int64) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetTenantId(i)
	return vdic
}

// SetTenantName sets the "tenantName" field.
func (vdic *VeterinaryDrugsInfoCreate) SetTenantName(s string) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetTenantName(s)
	return vdic
}

// SetRemarks sets the "remarks" field.
func (vdic *VeterinaryDrugsInfoCreate) SetRemarks(s string) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetRemarks(s)
	return vdic
}

// SetCreatedAt sets the "createdAt" field.
func (vdic *VeterinaryDrugsInfoCreate) SetCreatedAt(i int64) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetCreatedAt(i)
	return vdic
}

// SetUpdatedAt sets the "updatedAt" field.
func (vdic *VeterinaryDrugsInfoCreate) SetUpdatedAt(i int64) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetUpdatedAt(i)
	return vdic
}

// SetDeleted sets the "deleted" field.
func (vdic *VeterinaryDrugsInfoCreate) SetDeleted(i int) *VeterinaryDrugsInfoCreate {
	vdic.mutation.SetDeleted(i)
	return vdic
}

// Mutation returns the VeterinaryDrugsInfoMutation object of the builder.
func (vdic *VeterinaryDrugsInfoCreate) Mutation() *VeterinaryDrugsInfoMutation {
	return vdic.mutation
}

// Save creates the VeterinaryDrugsInfo in the database.
func (vdic *VeterinaryDrugsInfoCreate) Save(ctx context.Context) (*VeterinaryDrugsInfo, error) {
	var (
		err  error
		node *VeterinaryDrugsInfo
	)
	if len(vdic.hooks) == 0 {
		if err = vdic.check(); err != nil {
			return nil, err
		}
		node, err = vdic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VeterinaryDrugsInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vdic.check(); err != nil {
				return nil, err
			}
			vdic.mutation = mutation
			if node, err = vdic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vdic.hooks) - 1; i >= 0; i-- {
			if vdic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vdic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vdic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*VeterinaryDrugsInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VeterinaryDrugsInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vdic *VeterinaryDrugsInfoCreate) SaveX(ctx context.Context) *VeterinaryDrugsInfo {
	v, err := vdic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdic *VeterinaryDrugsInfoCreate) Exec(ctx context.Context) error {
	_, err := vdic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdic *VeterinaryDrugsInfoCreate) ExecX(ctx context.Context) {
	if err := vdic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdic *VeterinaryDrugsInfoCreate) check() error {
	if _, ok := vdic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.name"`)}
	}
	if _, ok := vdic.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.code"`)}
	}
	if _, ok := vdic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.type"`)}
	}
	if _, ok := vdic.mutation.StopAt(); !ok {
		return &ValidationError{Name: "stopAt", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.stopAt"`)}
	}
	if _, ok := vdic.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.tenantId"`)}
	}
	if _, ok := vdic.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenantName", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.tenantName"`)}
	}
	if _, ok := vdic.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.remarks"`)}
	}
	if _, ok := vdic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.createdAt"`)}
	}
	if _, ok := vdic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.updatedAt"`)}
	}
	if _, ok := vdic.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "VeterinaryDrugsInfo.deleted"`)}
	}
	return nil
}

func (vdic *VeterinaryDrugsInfoCreate) sqlSave(ctx context.Context) (*VeterinaryDrugsInfo, error) {
	_node, _spec := vdic.createSpec()
	if err := sqlgraph.CreateNode(ctx, vdic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vdic *VeterinaryDrugsInfoCreate) createSpec() (*VeterinaryDrugsInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &VeterinaryDrugsInfo{config: vdic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: veterinarydrugsinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: veterinarydrugsinfo.FieldID,
			},
		}
	)
	if value, ok := vdic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := vdic.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := vdic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldType,
		})
		_node.Type = value
	}
	if value, ok := vdic.mutation.StopAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldStopAt,
		})
		_node.StopAt = value
	}
	if value, ok := vdic.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldTenantId,
		})
		_node.TenantId = value
	}
	if value, ok := vdic.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := vdic.mutation.Remarks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldRemarks,
		})
		_node.Remarks = value
	}
	if value, ok := vdic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := vdic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := vdic.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: veterinarydrugsinfo.FieldDeleted,
		})
		_node.Deleted = value
	}
	return _node, _spec
}

// VeterinaryDrugsInfoCreateBulk is the builder for creating many VeterinaryDrugsInfo entities in bulk.
type VeterinaryDrugsInfoCreateBulk struct {
	config
	builders []*VeterinaryDrugsInfoCreate
}

// Save creates the VeterinaryDrugsInfo entities in the database.
func (vdicb *VeterinaryDrugsInfoCreateBulk) Save(ctx context.Context) ([]*VeterinaryDrugsInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vdicb.builders))
	nodes := make([]*VeterinaryDrugsInfo, len(vdicb.builders))
	mutators := make([]Mutator, len(vdicb.builders))
	for i := range vdicb.builders {
		func(i int, root context.Context) {
			builder := vdicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VeterinaryDrugsInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vdicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vdicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vdicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vdicb *VeterinaryDrugsInfoCreateBulk) SaveX(ctx context.Context) []*VeterinaryDrugsInfo {
	v, err := vdicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdicb *VeterinaryDrugsInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := vdicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdicb *VeterinaryDrugsInfoCreateBulk) ExecX(ctx context.Context) {
	if err := vdicb.Exec(ctx); err != nil {
		panic(err)
	}
}

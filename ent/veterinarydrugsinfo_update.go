// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/veterinarydrugsinfo"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// VeterinaryDrugsInfoUpdate is the builder for updating VeterinaryDrugsInfo entities.
type VeterinaryDrugsInfoUpdate struct {
	config
	hooks      []Hook
	mutation   *VeterinaryDrugsInfoMutation
	predicates []predicate.VeterinaryDrugsInfo
}

// Where adds a new predicate for the builder.
func (vdiu *VeterinaryDrugsInfoUpdate) Where(ps ...predicate.VeterinaryDrugsInfo) *VeterinaryDrugsInfoUpdate {
	vdiu.predicates = append(vdiu.predicates, ps...)
	return vdiu
}

// SetName sets the name field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetName(s string) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.SetName(s)
	return vdiu
}

// SetCode sets the code field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetCode(s string) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.SetCode(s)
	return vdiu
}

// SetType sets the type field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetType(s string) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.SetType(s)
	return vdiu
}

// SetStopAt sets the stopAt field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetStopAt(i int64) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.ResetStopAt()
	vdiu.mutation.SetStopAt(i)
	return vdiu
}

// AddStopAt adds i to stopAt.
func (vdiu *VeterinaryDrugsInfoUpdate) AddStopAt(i int64) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.AddStopAt(i)
	return vdiu
}

// SetTenantId sets the tenantId field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetTenantId(i int64) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.ResetTenantId()
	vdiu.mutation.SetTenantId(i)
	return vdiu
}

// AddTenantId adds i to tenantId.
func (vdiu *VeterinaryDrugsInfoUpdate) AddTenantId(i int64) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.AddTenantId(i)
	return vdiu
}

// SetTenantName sets the tenantName field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetTenantName(s string) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.SetTenantName(s)
	return vdiu
}

// SetRemarks sets the remarks field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetRemarks(s string) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.SetRemarks(s)
	return vdiu
}

// SetCreatedAt sets the createdAt field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetCreatedAt(i int64) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.ResetCreatedAt()
	vdiu.mutation.SetCreatedAt(i)
	return vdiu
}

// AddCreatedAt adds i to createdAt.
func (vdiu *VeterinaryDrugsInfoUpdate) AddCreatedAt(i int64) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.AddCreatedAt(i)
	return vdiu
}

// SetUpdatedAt sets the updatedAt field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetUpdatedAt(i int64) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.ResetUpdatedAt()
	vdiu.mutation.SetUpdatedAt(i)
	return vdiu
}

// AddUpdatedAt adds i to updatedAt.
func (vdiu *VeterinaryDrugsInfoUpdate) AddUpdatedAt(i int64) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.AddUpdatedAt(i)
	return vdiu
}

// SetDeleted sets the deleted field.
func (vdiu *VeterinaryDrugsInfoUpdate) SetDeleted(i int) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.ResetDeleted()
	vdiu.mutation.SetDeleted(i)
	return vdiu
}

// AddDeleted adds i to deleted.
func (vdiu *VeterinaryDrugsInfoUpdate) AddDeleted(i int) *VeterinaryDrugsInfoUpdate {
	vdiu.mutation.AddDeleted(i)
	return vdiu
}

// Mutation returns the VeterinaryDrugsInfoMutation object of the builder.
func (vdiu *VeterinaryDrugsInfoUpdate) Mutation() *VeterinaryDrugsInfoMutation {
	return vdiu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (vdiu *VeterinaryDrugsInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vdiu.hooks) == 0 {
		affected, err = vdiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VeterinaryDrugsInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vdiu.mutation = mutation
			affected, err = vdiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vdiu.hooks) - 1; i >= 0; i-- {
			mut = vdiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vdiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vdiu *VeterinaryDrugsInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := vdiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vdiu *VeterinaryDrugsInfoUpdate) Exec(ctx context.Context) error {
	_, err := vdiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdiu *VeterinaryDrugsInfoUpdate) ExecX(ctx context.Context) {
	if err := vdiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vdiu *VeterinaryDrugsInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   veterinarydrugsinfo.Table,
			Columns: veterinarydrugsinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: veterinarydrugsinfo.FieldID,
			},
		},
	}
	if ps := vdiu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdiu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldName,
		})
	}
	if value, ok := vdiu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldCode,
		})
	}
	if value, ok := vdiu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldType,
		})
	}
	if value, ok := vdiu.mutation.StopAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldStopAt,
		})
	}
	if value, ok := vdiu.mutation.AddedStopAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldStopAt,
		})
	}
	if value, ok := vdiu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldTenantId,
		})
	}
	if value, ok := vdiu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldTenantId,
		})
	}
	if value, ok := vdiu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldTenantName,
		})
	}
	if value, ok := vdiu.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldRemarks,
		})
	}
	if value, ok := vdiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldCreatedAt,
		})
	}
	if value, ok := vdiu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldCreatedAt,
		})
	}
	if value, ok := vdiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldUpdatedAt,
		})
	}
	if value, ok := vdiu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldUpdatedAt,
		})
	}
	if value, ok := vdiu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: veterinarydrugsinfo.FieldDeleted,
		})
	}
	if value, ok := vdiu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: veterinarydrugsinfo.FieldDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vdiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{veterinarydrugsinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VeterinaryDrugsInfoUpdateOne is the builder for updating a single VeterinaryDrugsInfo entity.
type VeterinaryDrugsInfoUpdateOne struct {
	config
	hooks    []Hook
	mutation *VeterinaryDrugsInfoMutation
}

// SetName sets the name field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetName(s string) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.SetName(s)
	return vdiuo
}

// SetCode sets the code field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetCode(s string) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.SetCode(s)
	return vdiuo
}

// SetType sets the type field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetType(s string) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.SetType(s)
	return vdiuo
}

// SetStopAt sets the stopAt field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetStopAt(i int64) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.ResetStopAt()
	vdiuo.mutation.SetStopAt(i)
	return vdiuo
}

// AddStopAt adds i to stopAt.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) AddStopAt(i int64) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.AddStopAt(i)
	return vdiuo
}

// SetTenantId sets the tenantId field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetTenantId(i int64) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.ResetTenantId()
	vdiuo.mutation.SetTenantId(i)
	return vdiuo
}

// AddTenantId adds i to tenantId.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) AddTenantId(i int64) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.AddTenantId(i)
	return vdiuo
}

// SetTenantName sets the tenantName field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetTenantName(s string) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.SetTenantName(s)
	return vdiuo
}

// SetRemarks sets the remarks field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetRemarks(s string) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.SetRemarks(s)
	return vdiuo
}

// SetCreatedAt sets the createdAt field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetCreatedAt(i int64) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.ResetCreatedAt()
	vdiuo.mutation.SetCreatedAt(i)
	return vdiuo
}

// AddCreatedAt adds i to createdAt.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) AddCreatedAt(i int64) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.AddCreatedAt(i)
	return vdiuo
}

// SetUpdatedAt sets the updatedAt field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetUpdatedAt(i int64) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.ResetUpdatedAt()
	vdiuo.mutation.SetUpdatedAt(i)
	return vdiuo
}

// AddUpdatedAt adds i to updatedAt.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) AddUpdatedAt(i int64) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.AddUpdatedAt(i)
	return vdiuo
}

// SetDeleted sets the deleted field.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SetDeleted(i int) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.ResetDeleted()
	vdiuo.mutation.SetDeleted(i)
	return vdiuo
}

// AddDeleted adds i to deleted.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) AddDeleted(i int) *VeterinaryDrugsInfoUpdateOne {
	vdiuo.mutation.AddDeleted(i)
	return vdiuo
}

// Mutation returns the VeterinaryDrugsInfoMutation object of the builder.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) Mutation() *VeterinaryDrugsInfoMutation {
	return vdiuo.mutation
}

// Save executes the query and returns the updated entity.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) Save(ctx context.Context) (*VeterinaryDrugsInfo, error) {
	var (
		err  error
		node *VeterinaryDrugsInfo
	)
	if len(vdiuo.hooks) == 0 {
		node, err = vdiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VeterinaryDrugsInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vdiuo.mutation = mutation
			node, err = vdiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vdiuo.hooks) - 1; i >= 0; i-- {
			mut = vdiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vdiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) SaveX(ctx context.Context) *VeterinaryDrugsInfo {
	node, err := vdiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := vdiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdiuo *VeterinaryDrugsInfoUpdateOne) ExecX(ctx context.Context) {
	if err := vdiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vdiuo *VeterinaryDrugsInfoUpdateOne) sqlSave(ctx context.Context) (_node *VeterinaryDrugsInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   veterinarydrugsinfo.Table,
			Columns: veterinarydrugsinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: veterinarydrugsinfo.FieldID,
			},
		},
	}
	id, ok := vdiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VeterinaryDrugsInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := vdiuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldName,
		})
	}
	if value, ok := vdiuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldCode,
		})
	}
	if value, ok := vdiuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldType,
		})
	}
	if value, ok := vdiuo.mutation.StopAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldStopAt,
		})
	}
	if value, ok := vdiuo.mutation.AddedStopAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldStopAt,
		})
	}
	if value, ok := vdiuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldTenantId,
		})
	}
	if value, ok := vdiuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldTenantId,
		})
	}
	if value, ok := vdiuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldTenantName,
		})
	}
	if value, ok := vdiuo.mutation.Remarks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarydrugsinfo.FieldRemarks,
		})
	}
	if value, ok := vdiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldCreatedAt,
		})
	}
	if value, ok := vdiuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldCreatedAt,
		})
	}
	if value, ok := vdiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldUpdatedAt,
		})
	}
	if value, ok := vdiuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: veterinarydrugsinfo.FieldUpdatedAt,
		})
	}
	if value, ok := vdiuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: veterinarydrugsinfo.FieldDeleted,
		})
	}
	if value, ok := vdiuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: veterinarydrugsinfo.FieldDeleted,
		})
	}
	_node = &VeterinaryDrugsInfo{config: vdiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, vdiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{veterinarydrugsinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

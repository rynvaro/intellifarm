// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cattleai/ent/predicate"
	"cattleai/ent/winddirection"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// WindDirectionUpdate is the builder for updating WindDirection entities.
type WindDirectionUpdate struct {
	config
	hooks      []Hook
	mutation   *WindDirectionMutation
	predicates []predicate.WindDirection
}

// Where adds a new predicate for the builder.
func (wdu *WindDirectionUpdate) Where(ps ...predicate.WindDirection) *WindDirectionUpdate {
	wdu.predicates = append(wdu.predicates, ps...)
	return wdu
}

// SetName sets the name field.
func (wdu *WindDirectionUpdate) SetName(s string) *WindDirectionUpdate {
	wdu.mutation.SetName(s)
	return wdu
}

// Mutation returns the WindDirectionMutation object of the builder.
func (wdu *WindDirectionUpdate) Mutation() *WindDirectionMutation {
	return wdu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (wdu *WindDirectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wdu.hooks) == 0 {
		if err = wdu.check(); err != nil {
			return 0, err
		}
		affected, err = wdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WindDirectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wdu.check(); err != nil {
				return 0, err
			}
			wdu.mutation = mutation
			affected, err = wdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wdu.hooks) - 1; i >= 0; i-- {
			mut = wdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wdu *WindDirectionUpdate) SaveX(ctx context.Context) int {
	affected, err := wdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wdu *WindDirectionUpdate) Exec(ctx context.Context) error {
	_, err := wdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdu *WindDirectionUpdate) ExecX(ctx context.Context) {
	if err := wdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wdu *WindDirectionUpdate) check() error {
	if v, ok := wdu.mutation.Name(); ok {
		if err := winddirection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (wdu *WindDirectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   winddirection.Table,
			Columns: winddirection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: winddirection.FieldID,
			},
		},
	}
	if ps := wdu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wdu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: winddirection.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winddirection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WindDirectionUpdateOne is the builder for updating a single WindDirection entity.
type WindDirectionUpdateOne struct {
	config
	hooks    []Hook
	mutation *WindDirectionMutation
}

// SetName sets the name field.
func (wduo *WindDirectionUpdateOne) SetName(s string) *WindDirectionUpdateOne {
	wduo.mutation.SetName(s)
	return wduo
}

// Mutation returns the WindDirectionMutation object of the builder.
func (wduo *WindDirectionUpdateOne) Mutation() *WindDirectionMutation {
	return wduo.mutation
}

// Save executes the query and returns the updated entity.
func (wduo *WindDirectionUpdateOne) Save(ctx context.Context) (*WindDirection, error) {
	var (
		err  error
		node *WindDirection
	)
	if len(wduo.hooks) == 0 {
		if err = wduo.check(); err != nil {
			return nil, err
		}
		node, err = wduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WindDirectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wduo.check(); err != nil {
				return nil, err
			}
			wduo.mutation = mutation
			node, err = wduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wduo.hooks) - 1; i >= 0; i-- {
			mut = wduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wduo *WindDirectionUpdateOne) SaveX(ctx context.Context) *WindDirection {
	node, err := wduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wduo *WindDirectionUpdateOne) Exec(ctx context.Context) error {
	_, err := wduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wduo *WindDirectionUpdateOne) ExecX(ctx context.Context) {
	if err := wduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wduo *WindDirectionUpdateOne) check() error {
	if v, ok := wduo.mutation.Name(); ok {
		if err := winddirection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (wduo *WindDirectionUpdateOne) sqlSave(ctx context.Context) (_node *WindDirection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   winddirection.Table,
			Columns: winddirection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: winddirection.FieldID,
			},
		},
	}
	id, ok := wduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WindDirection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := wduo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: winddirection.FieldName,
		})
	}
	_node = &WindDirection{config: wduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, wduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winddirection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
